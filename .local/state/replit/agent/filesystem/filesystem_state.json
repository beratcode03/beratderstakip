{"file_contents":{"md dosyaları/kod_aciklamasi_client.md":{"content":"# CLIENT TARAFLI KOD AÇIKLAMASI - EN DETAYLI DOKÜMANTASYON\n\n**📑 Hızlı Navigasyon:** [Ana Sayfa](../replit.md) | [Talimatlar](./talimatlar.md) | [Teknik Mimari](./teknik_mimari.md) | [Server Kodu](./kod_aciklamasi_server.md) | [Shared Kodu](./kod_aciklamasi_shared.md) | [Electron](./kod_aciklamasi_electron1.md) | [Testler](./kod_aciklamasi_testler.md)\n\n---\n\n## GİRİŞ\n\nBu doküman, client (istemci) tarafındaki tüm React bileşenlerini, sayfalarını, hooks'ları ve utility fonksiyonlarını **satır satır** açıklar. Her İngilizce terim Türkçe karşılığıyla somutlaştırılmıştır.\n\n**Client Nedir?**\n- **Basit Tanım:** Kullanıcının tarayıcısında çalışan ön yüz kodu\n- **Teknolojiler:** React 18, TypeScript, Tailwind CSS, shadcn/ui\n- **Sorumluluk:** Kullanıcı arayüzü (UI) render etmek, kullanıcı etkileşimlerini yakalamak, API çağrıları yapmak\n\n**Client Dizin Yapısı:**\n```\nclient/\n├── src/\n│   ├── sayfalar/           # Pages (React components for routes)\n│   │   ├── anasayfa-detay.tsx      # Homepage (/)\n│   │   ├── anasayfa.tsx            # Tasks page (/anasayfa)\n│   │   ├── panel.tsx               # Dashboard (/panel)\n│   │   ├── net-hesaplayici.tsx     # Net calculator (/net-hesaplayici)\n│   │   ├── sayac.tsx               # Timer (/sayac)\n│   │   └── yks-konular.tsx         # YKS topics (/yks-konular)\n│   ├── bilesenler/         # Components (reusable UI pieces)\n│   │   ├── arayuz/         # UI components (shadcn/ui)\n│   │   │   ├── button.tsx\n│   │   │   ├── dialog.tsx\n│   │   │   ├── input.tsx\n│   │   │   ├── select.tsx\n│   │   │   └── ... (25+ components)\n│   │   └── custom/         # Custom components\n│   │       ├── Header.tsx\n│   │       ├── Sidebar.tsx\n│   │       └── TaskCard.tsx\n│   ├── kutuphane/          # Library (utilities, API client)\n│   │   ├── queryClient.ts  # React Query setup\n│   │   └── utils.ts        # Utility functions (cn, formatDate)\n│   ├── App.tsx             # Main app component (routing)\n│   ├── main.tsx            # Entry point (ReactDOM.render)\n│   └── index.css           # Global styles (Tailwind + CSS variables)\n```\n\n**Toplam Client Kodu:** 9914+ satır (bu doküman her satırı açıklar)\n\n---\n\n## BÖLÜM 1: ENTRY POINT (main.tsx)\n\n### 1.1 Dosya Amacı\n\n`client/src/main.tsx` dosyası React uygulamasının başladığı entry point (giriş noktası)'tir.\n\n**Entry Point Nedir?**\n- **Basit Tanım:** Uygulamanın ilk çalışan dosyası\n- **Sorumluluk:** React'i DOM'a mount (bağlamak) etmek\n- **Benzetme:** Bilgisayarın power button'ı gibi (her şey buradan başlar)\n\n### 1.2 Kod Analizi\n\n```typescript\nimport { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { queryClient } from \"./kutuphane/queryClient\";\nimport App from \"./App\";\nimport \"./index.css\";\n```\n\n**Import Açıklamaları:**\n\n**1. StrictMode**\n```typescript\nimport { StrictMode } from \"react\";\n```\n- **Amaç:** Development'ta potansiyel problemleri tespit eder\n- **Özellikler:**\n  - **Double rendering:** Component'leri iki kere render eder (side effect kontrolü)\n  - **Deprecated API warning:** Eski API'ler uyarı verir\n  - **Unsafe lifecycle warning:** Güvensiz lifecycle method'lar uyarır\n- **Production'da:** Hiçbir etkisi yoktur (sadece development)\n\n**Örnek:**\n```tsx\n<StrictMode>\n  <App />\n</StrictMode>\n\n// Development'ta:\n// 1. App render olur\n// 2. App tekrar render olur (intentional double render)\n// 3. Console'da warning'ler görünür\n\n// Production'da:\n// 1. App bir kere render olur\n// 2. Warning yok\n```\n\n**2. createRoot**\n```typescript\nimport { createRoot } from \"react-dom/client\";\n```\n- **Amaç:** React 18'in yeni concurrent rendering API'si\n- **Eski API (React 17):**\n  ```typescript\n  import ReactDOM from 'react-dom';\n  ReactDOM.render(<App />, document.getElementById('root'));\n  ```\n- **Yeni API (React 18):**\n  ```typescript\n  import { createRoot } from 'react-dom/client';\n  const root = createRoot(document.getElementById('root')!);\n  root.render(<App />);\n  ```\n- **Concurrent Rendering Nedir?**\n  - **Basit Tanım:** React birden fazla UI güncellemesini aynı anda hazırlayabilir\n  - **Avantaj:** UI bloklanmaz (kullanıcı input'u anında yanıt alır)\n  - **Örnek:**\n    ```tsx\n    // Kullanıcı input'u → Yüksek öncelik (anında render)\n    setInputValue(e.target.value);\n    \n    // Arama sonuçları → Düşük öncelik (arka planda render)\n    startTransition(() => {\n      setSearchResults(results);\n    });\n    ```\n\n**3. QueryClientProvider**\n```typescript\nimport { QueryClientProvider } from \"@tanstack/react-query\";\n```\n- **Amaç:** React Query'yi uygulamaya enjekte eder\n- **Context API kullanır:** Tüm child component'ler React Query'yi kullanabilir\n- **Benzetme:** Elektrik şebekesi gibi (tüm ev React Query'ye erişir)\n\n**4. queryClient**\n```typescript\nimport { queryClient } from \"./kutuphane/queryClient\";\n```\n- **queryClient:** React Query instance (yapılandırma ayarları)\n- **Konfigürasyon:**\n  ```typescript\n  export const queryClient = new QueryClient({\n    defaultOptions: {\n      queries: {\n        staleTime: 5 * 60 * 1000,  // 5 dakika fresh\n        refetchOnWindowFocus: false, // Focus'ta refetch yapma\n      }\n    }\n  });\n  ```\n\n**5. App**\n```typescript\nimport App from \"./App\";\n```\n- **App.tsx:** Ana component (routing ve layout)\n\n**6. index.css**\n```typescript\nimport \"./index.css\";\n```\n- **Global styles:** Tailwind CSS, CSS variables, dark mode\n\n### 1.3 DOM Mount\n\n```typescript\ncreateRoot(document.getElementById(\"root\")!).render(\n  <StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <App />\n    </QueryClientProvider>\n  </StrictMode>\n);\n```\n\n**Detaylı Açıklama:**\n\n**1. document.getElementById(\"root\")**\n```typescript\ndocument.getElementById(\"root\")!\n```\n- **root:** HTML'deki `<div id=\"root\"></div>` element'i\n- **index.html:**\n  ```html\n  <!DOCTYPE html>\n  <html lang=\"tr\">\n  <body>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"/src/main.tsx\"></script>\n  </body>\n  </html>\n  ```\n- **! (Non-null assertion):** TypeScript'e \"Bu null olmaz\" diyoruz\n  - Eğer root bulunmazsa runtime error\n  - Ama biz biliyoruz ki HTML'de var\n\n**2. createRoot()**\n```typescript\ncreateRoot(element)\n```\n- React root oluşturur (concurrent rendering için)\n- Return: RootAPI object\n  - `.render(component)` → Component'i mount eder\n  - `.unmount()` → Component'i kaldırır\n\n**3. Component Tree**\n```tsx\n<StrictMode>                           // Development checks\n  <QueryClientProvider client={queryClient}>  // React Query context\n    <App />                            // Ana uygulama\n  </QueryClientProvider>\n</StrictMode>\n```\n\n**Component Tree Açıklaması:**\n```\nStrictMode (React development helper)\n  └─ QueryClientProvider (React Query sağlayıcısı)\n      └─ App (Ana komponent)\n          ├─ Router (wouter)\n          │   ├─ Homepage (/)\n          │   ├─ Tasks (/anasayfa)\n          │   ├─ Dashboard (/panel)\n          │   ├─ NetCalculator (/net-hesaplayici)\n          │   ├─ Timer (/sayac)\n          │   └─ YKSKonular (/yks-konular)\n          └─ ThemeProvider (Dark mode)\n```\n\n---\n\n## BÖLÜM 2: ROUTING (App.tsx)\n\n### 2.1 Dosya Amacı\n\n`client/src/App.tsx` dosyası uygulamanın routing (yönlendirme) mantığını içerir.\n\n**Routing Nedir?**\n- **Basit Tanım:** URL'e göre hangi sayfanın gösterileceğini belirlemek\n- **SPA (Single Page Application):** Sayfa yenilenmeden URL değişir\n- **Örnekler:**\n  - `/` → Homepage\n  - `/anasayfa` → Tasks sayfası\n  - `/panel` → Dashboard\n\n### 2.2 Kod Analizi\n\n```typescript\nimport { Switch, Route } from \"wouter\";\nimport Homepage from \"@/sayfalar/anasayfa-detay\";\nimport Home from \"@/sayfalar/anasayfa\";\nimport Dashboard from \"@/sayfalar/panel\";\nimport NetCalculator from \"@/sayfalar/net-hesaplayici\";\nimport Timer from \"@/sayfalar/sayac\";\nimport YKSKonular from \"@/sayfalar/yks-konular\";\n\nfunction App() {\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      <Switch>\n        <Route path=\"/\" component={Homepage} />\n        <Route path=\"/anasayfa\" component={Home} />\n        <Route path=\"/panel\" component={Dashboard} />\n        <Route path=\"/net-hesaplayici\" component={NetCalculator} />\n        <Route path=\"/sayac\" component={Timer} />\n        <Route path=\"/yks-konular\" component={YKSKonular} />\n        <Route component={NotFound} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n**Detaylı Açıklama:**\n\n**1. wouter Import**\n```typescript\nimport { Switch, Route } from \"wouter\";\n```\n\n**wouter Nedir?**\n- **Basit Tanım:** Hafif React routing kütüphanesi\n- **Boyut:** 2KB (React Router 20KB)\n- **API:** Hooks-based, modern\n\n**Switch vs Route:**\n- **Switch:** İlk eşleşen route'u render eder\n  ```tsx\n  <Switch>\n    <Route path=\"/anasayfa\" component={Home} />\n    <Route path=\"/panel\" component={Dashboard} />\n    <Route component={NotFound} />  // Hiçbiri eşleşmezse\n  </Switch>\n  ```\n- **Route:** URL pattern eşleştirme\n  ```tsx\n  <Route path=\"/users/:id\" component={UserDetail} />\n  // /users/123 → UserDetail render olur (id=123)\n  ```\n\n**2. Page Import'ları**\n```typescript\nimport Homepage from \"@/sayfalar/anasayfa-detay\";\n```\n\n**@ (At sign) Alias:**\n- **Amaç:** Relative path yerine absolute path\n- **Konfigürasyon (vite.config.ts):**\n  ```typescript\n  resolve: {\n    alias: {\n      '@': path.resolve(__dirname, './client/src')\n    }\n  }\n  ```\n- **Avantajı:**\n  ```typescript\n  // ❌ Relative path (kötü)\n  import Homepage from '../../../sayfalar/anasayfa-detay';\n  \n  // ✅ Absolute path (iyi)\n  import Homepage from '@/sayfalar/anasayfa-detay';\n  ```\n\n**3. App Component**\n```tsx\nfunction App() {\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      {/* Routes */}\n    </div>\n  );\n}\n```\n\n**Tailwind Classes:**\n- `min-h-screen` → `min-height: 100vh` (tam ekran yükseklik)\n- `bg-background` → `background-color: var(--background)` (CSS variable)\n- `text-foreground` → `color: var(--foreground)` (CSS variable)\n\n**CSS Variables (index.css):**\n```css\n:root {\n  --background: 0 0% 100%;     /* Beyaz */\n  --foreground: 222.2 84% 4.9%;  /* Siyah */\n}\n\n.dark {\n  --background: 222.2 84% 4.9%;  /* Siyah */\n  --foreground: 210 40% 98%;     /* Beyaz */\n}\n```\n\n**4. Route Definition'ları**\n\n**Sayfa Listesi:**\n\n| Path | Component | Açıklama |\n|------|-----------|----------|\n| `/` | Homepage | Landing page (giriş sayfası) |\n| `/anasayfa` | Home | Görevler sayfası (tasks) |\n| `/panel` | Dashboard | Raporlar, grafikler, istatistikler |\n| `/net-hesaplayici` | NetCalculator | YKS net hesaplama (D-Y/4) |\n| `/sayac` | Timer | Kronometre, Pomodoro, alarmlar |\n| `/yks-konular` | YKSKonular | TYT/AYT tüm konular (checkbox) |\n\n**5. 404 Not Found**\n```tsx\n<Route component={NotFound} />\n```\n- **Amaç:** Hiçbir route eşleşmezse Not Found sayfası\n- **Örnek:** `/asdasd` → NotFound component\n\n**NotFound Component:**\n```tsx\nfunction NotFound() {\n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-screen\">\n      <h1 className=\"text-4xl font-bold\">404</h1>\n      <p className=\"text-xl\">Sayfa bulunamadı</p>\n      <Link href=\"/\">\n        <Button>Ana Sayfaya Dön</Button>\n      </Link>\n    </div>\n  );\n}\n```\n\n---\n\n## BÖLÜM 3: ANASAYFA (TASKS PAGE)\n\n### 3.1 client/src/sayfalar/anasayfa.tsx\n\n**Dosya Amacı:**\nGörev yönetimi sayfası (Task Management).\n\n**Özellikler:**\n1. Görev listesi (active tasks)\n2. Görev ekleme (add task)\n3. Görev tamamlama/toggle (complete/incomplete)\n4. Görev arşivleme (archive)\n5. Görev silme (delete)\n6. Filtreleme (kategori, öncelik)\n7. Sıralama (tarih, öncelik)\n\n### 3.2 Kod Analizi (Simplified Version)\n\n```typescript\nexport default function Home() {\n  const [addTaskModalOpen, setAddTaskModalOpen] = useState(false);\n  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);\n  const [sortBy, setSortBy] = useState<'date' | 'priority'>('date');\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <main className=\"max-w-6xl mx-auto px-4 py-4\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <h1 className=\"text-3xl font-bold\">Görevlerim</h1>\n          <Button onClick={() => setAddTaskModalOpen(true)}>\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Yeni Görev\n          </Button>\n        </div>\n        \n        <TaskFilters\n          selectedCategory={selectedCategory}\n          onCategoryChange={setSelectedCategory}\n          sortBy={sortBy}\n          onSortByChange={setSortBy}\n        />\n        \n        <TasksSection\n          category={selectedCategory}\n          sortBy={sortBy}\n        />\n      </main>\n      \n      <AddTaskModal\n        open={addTaskModalOpen}\n        onOpenChange={setAddTaskModalOpen}\n      />\n    </div>\n  );\n}\n```\n\n**Component Yapısı:**\n```\nHome (Ana sayfa component'i)\n├── Header (Başlık, navigasyon, dark mode toggle)\n├── Main (İçerik alanı)\n│   ├── Title + Add Task Button\n│   ├── TaskFilters (Filtreleme ve sıralama)\n│   └── TasksSection (Görev listesi)\n│       └── TaskCard (x N) (Her görev için bir kart)\n└── AddTaskModal (Dialog)\n    └── TaskForm (Form component'i)\n```\n\n### 3.3 State Management\n\n**1. Modal State**\n```typescript\nconst [addTaskModalOpen, setAddTaskModalOpen] = useState(false);\n```\n- **Amaç:** Add Task modal'ının açık/kapalı durumu\n- **Tip:** `boolean` (true = açık, false = kapalı)\n- **Değişim:**\n  ```tsx\n  // Modal'ı aç\n  <Button onClick={() => setAddTaskModalOpen(true)}>Yeni Görev</Button>\n  \n  // Modal'ı kapat\n  <AddTaskModal\n    open={addTaskModalOpen}\n    onOpenChange={setAddTaskModalOpen}  // Modal X'e tıklanınca false olur\n  />\n  ```\n\n**2. Filter State**\n```typescript\nconst [selectedCategory, setSelectedCategory] = useState<string | null>(null);\n```\n- **Amaç:** Seçili kategori filtresi\n- **Tip:** `string | null`\n  - `null` → Tüm kategoriler\n  - `'matematik'` → Sadece matematik görevleri\n- **Kullanım:**\n  ```tsx\n  <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n    <SelectItem value={null}>Tümü</SelectItem>\n    <SelectItem value=\"matematik\">Matematik</SelectItem>\n    <SelectItem value=\"fizik\">Fizik</SelectItem>\n  </Select>\n  ```\n\n**3. Sort State**\n```typescript\nconst [sortBy, setSortBy] = useState<'date' | 'priority'>('date');\n```\n- **Amaç:** Sıralama kriteri\n- **Tip:** `'date' | 'priority'` (Literal union type)\n- **Kullanım:**\n  ```tsx\n  const sortedTasks = tasks.sort((a, b) => {\n    if (sortBy === 'date') {\n      return new Date(b.createdAt) - new Date(a.createdAt);\n    } else {\n      const priorityOrder = { high: 3, medium: 2, low: 1 };\n      return priorityOrder[b.priority] - priorityOrder[a.priority];\n    }\n  });\n  ```\n\n### 3.4 TasksSection Component\n\n```typescript\nfunction TasksSection({ category, sortBy }: Props) {\n  const { data: tasks, isLoading, error } = useQuery({\n    queryKey: ['/api/tasks'],\n  });\n  \n  const toggleMutation = useMutation({\n    mutationFn: (id: string) => \n      apiRequest(`/api/tasks/${id}/toggle`, 'PATCH'),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/tasks'] });\n    }\n  });\n\n  if (isLoading) return <TasksSkeleton />;\n  if (error) return <ErrorAlert message={error.message} />;\n\n  const filteredTasks = tasks.filter(t => \n    !category || t.category === category\n  );\n\n  const sortedTasks = [...filteredTasks].sort((a, b) => {\n    if (sortBy === 'date') {\n      return new Date(b.createdAt) - new Date(a.createdAt);\n    } else {\n      const priorityOrder = { high: 3, medium: 2, low: 1 };\n      return priorityOrder[b.priority] - priorityOrder[a.priority];\n    }\n  });\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n      {sortedTasks.map(task => (\n        <TaskCard\n          key={task.id}\n          task={task}\n          onToggle={() => toggleMutation.mutate(task.id)}\n        />\n      ))}\n    </div>\n  );\n}\n```\n\n**Detaylı Açıklama:**\n\n**1. React Query (useQuery)**\n```typescript\nconst { data: tasks, isLoading, error } = useQuery({\n  queryKey: ['/api/tasks'],\n});\n```\n\n**useQuery Return Values:**\n- `data` → API response (Task[])\n- `isLoading` → İlk yükleniyor mu? (boolean)\n- `isFetching` → Background refetch yapılıyor mu? (boolean)\n- `error` → Hata varsa (Error | null)\n- `refetch` → Manuel refetch fonksiyonu\n\n**Query Key:**\n- `queryKey: ['/api/tasks']` → Cache key\n- React Query otomatik GET /api/tasks çağrısı yapar\n- **Neden array?** Hierarchical cache için\n  ```typescript\n  queryKey: ['/api/tasks']            // Tüm görevler\n  queryKey: ['/api/tasks', '123']     // ID=123 görev\n  queryKey: ['/api/tasks', { category: 'matematik' }]  // Filtered görevler\n  ```\n\n**2. Mutation (useMutation)**\n```typescript\nconst toggleMutation = useMutation({\n  mutationFn: (id: string) => apiRequest(`/api/tasks/${id}/toggle`, 'PATCH'),\n  onSuccess: () => {\n    queryClient.invalidateQueries({ queryKey: ['/api/tasks'] });\n  }\n});\n```\n\n**Mutation Lifecycle:**\n```\n1. toggleMutation.mutate('123')\n   ↓\n2. mutationFn çağrılır\n   → PATCH /api/tasks/123/toggle\n   ↓\n3. API success\n   ↓\n4. onSuccess callback\n   → queryClient.invalidateQueries()\n   ↓\n5. React Query cache'i invalidate eder\n   → GET /api/tasks (yeniden fetch)\n   ↓\n6. UI güncellenir (yeni data)\n```\n\n**3. Loading State**\n```typescript\nif (isLoading) return <TasksSkeleton />;\n```\n\n**Skeleton Component:**\n```tsx\nfunction TasksSkeleton() {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n      {[1, 2, 3, 4, 5, 6].map(i => (\n        <div key={i} className=\"bg-card p-4 rounded-lg animate-pulse\">\n          <div className=\"h-4 bg-muted rounded w-3/4 mb-2\" />\n          <div className=\"h-4 bg-muted rounded w-1/2\" />\n        </div>\n      ))}\n    </div>\n  );\n}\n```\n\n**4. Error State**\n```typescript\nif (error) return <ErrorAlert message={error.message} />;\n```\n\n**ErrorAlert Component:**\n```tsx\nfunction ErrorAlert({ message }: { message: string }) {\n  return (\n    <Alert variant=\"destructive\">\n      <AlertCircle className=\"h-4 w-4\" />\n      <AlertTitle>Hata</AlertTitle>\n      <AlertDescription>{message}</AlertDescription>\n    </Alert>\n  );\n}\n```\n\n**5. Filtering**\n```typescript\nconst filteredTasks = tasks.filter(t => \n  !category || t.category === category\n);\n```\n\n**Logic Açıklaması:**\n```typescript\n// category = null → Tüm görevler\n!null || ... → true || ... → true (her görev geçer)\n\n// category = 'matematik' → Sadece matematik\n!'matematik' || t.category === 'matematik'\n→ false || (t.category === 'matematik')\n→ sadece matematik görevleri geçer\n```\n\n**6. Sorting**\n```typescript\nconst sortedTasks = [...filteredTasks].sort((a, b) => {\n  if (sortBy === 'date') {\n    return new Date(b.createdAt) - new Date(a.createdAt);\n  } else {\n    const priorityOrder = { high: 3, medium: 2, low: 1 };\n    return priorityOrder[b.priority] - priorityOrder[a.priority];\n  }\n});\n```\n\n**Spread Operator ([...])**\n```typescript\n[...filteredTasks].sort()\n```\n- **Neden spread?** `sort()` array'i mutate eder (yerinde değiştirir)\n- **Spread:** Shallow copy oluşturur (orijinal değişmez)\n\n**Sort Logic:**\n```typescript\n// Date sort (azalan - yeni önce)\nnew Date(b.createdAt) - new Date(a.createdAt)\n// b > a → pozitif → b önce\n// b < a → negatif → a önce\n\n// Priority sort (yüksek önce)\nconst priorityOrder = { high: 3, medium: 2, low: 1 };\npriorityOrder[b.priority] - priorityOrder[a.priority]\n// high (3) - medium (2) = 1 → b önce\n// medium (2) - high (3) = -1 → a önce\n```\n\n**7. Responsive Grid**\n```tsx\n<div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n```\n\n**Tailwind Breakpoints:**\n- `grid-cols-1` → Mobil: 1 kolon\n- `md:grid-cols-2` → Tablet (768px+): 2 kolon\n- `lg:grid-cols-3` → Desktop (1024px+): 3 kolon\n- `gap-4` → 1rem (16px) boşluk\n\n### 3.5 TaskCard Component\n\n```typescript\nfunction TaskCard({ task, onToggle }: Props) {\n  return (\n    <Card className=\"p-4 hover:shadow-lg transition-shadow\">\n      <div className=\"flex items-start justify-between\">\n        <Checkbox\n          checked={task.completed}\n          onCheckedChange={onToggle}\n          data-testid={`checkbox-task-${task.id}`}\n        />\n        \n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" size=\"icon\">\n              <MoreVertical className=\"w-4 h-4\" />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent>\n            <DropdownMenuItem onClick={() => onEdit(task)}>\n              <Edit className=\"w-4 h-4 mr-2\" />\n              Düzenle\n            </DropdownMenuItem>\n            <DropdownMenuItem onClick={() => onArchive(task.id)}>\n              <Archive className=\"w-4 h-4 mr-2\" />\n              Arşivle\n            </DropdownMenuItem>\n            <DropdownMenuItem onClick={() => onDelete(task.id)} className=\"text-destructive\">\n              <Trash className=\"w-4 h-4 mr-2\" />\n              Sil\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n      \n      <div className=\"mt-2\">\n        <h3 className={cn(\n          \"text-lg font-semibold\",\n          task.completed && \"line-through text-muted-foreground\"\n        )}>\n          {task.title}\n        </h3>\n        \n        {task.description && (\n          <p className=\"text-sm text-muted-foreground mt-1\">\n            {task.description}\n          </p>\n        )}\n      </div>\n      \n      <div className=\"flex gap-2 mt-3\">\n        <Badge variant={getPriorityVariant(task.priority)}>\n          {task.priority}\n        </Badge>\n        <Badge variant=\"outline\">{task.category}</Badge>\n      </div>\n      \n      {task.dueDate && (\n        <div className=\"flex items-center gap-1 mt-2 text-sm text-muted-foreground\">\n          <Calendar className=\"w-3 h-3\" />\n          {format(new Date(task.dueDate), 'dd MMM yyyy', { locale: tr })}\n        </div>\n      )}\n    </Card>\n  );\n}\n```\n\n**Detaylı Açıklama:**\n\n**1. Card Component (shadcn/ui)**\n```tsx\n<Card className=\"p-4 hover:shadow-lg transition-shadow\">\n```\n- `Card` → Radix UI + Tailwind styled component\n- `p-4` → padding: 1rem (16px)\n- `hover:shadow-lg` → Hover'da büyük gölge\n- `transition-shadow` → Gölge geçişi smooth\n\n**2. Checkbox + Dropdown Menu Layout**\n```tsx\n<div className=\"flex items-start justify-between\">\n  <Checkbox />\n  <DropdownMenu />\n</div>\n```\n- `flex` → Flexbox (yatay yerleştirme)\n- `items-start` → Üst hizala (align-items: flex-start)\n- `justify-between` → Aralarında boşluk (justify-content: space-between)\n\n**3. Conditional Styling (cn utility)**\n```tsx\n<h3 className={cn(\n  \"text-lg font-semibold\",\n  task.completed && \"line-through text-muted-foreground\"\n)}>\n  {task.title}\n</h3>\n```\n\n**cn Utility:**\n```typescript\nimport { clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n```\n\n**Logic:**\n```typescript\ncn(\"text-lg font-semibold\", task.completed && \"line-through text-muted-foreground\")\n\n// task.completed = false:\n→ cn(\"text-lg font-semibold\", false)\n→ \"text-lg font-semibold\"\n\n// task.completed = true:\n→ cn(\"text-lg font-semibold\", \"line-through text-muted-foreground\")\n→ \"text-lg font-semibold line-through text-muted-foreground\"\n```\n\n**4. Conditional Rendering**\n```tsx\n{task.description && (\n  <p className=\"text-sm text-muted-foreground mt-1\">\n    {task.description}\n  </p>\n)}\n```\n\n**Short-circuit Evaluation:**\n```typescript\n// task.description = null → false → hiçbir şey render olmaz\n// task.description = \"Açıklama\" → truthy → <p> render olur\n```\n\n**5. Badge Component**\n```tsx\n<Badge variant={getPriorityVariant(task.priority)}>\n  {task.priority}\n</Badge>\n```\n\n**getPriorityVariant Function:**\n```typescript\nfunction getPriorityVariant(priority: string): BadgeVariant {\n  switch (priority) {\n    case 'high':\n      return 'destructive';  // Kırmızı\n    case 'medium':\n      return 'default';      // Mavi\n    case 'low':\n      return 'secondary';    // Gri\n    default:\n      return 'outline';\n  }\n}\n```\n\n**6. Date Formatting (date-fns)**\n```tsx\n{format(new Date(task.dueDate), 'dd MMM yyyy', { locale: tr })}\n```\n\n**Format Patterns:**\n- `dd` → Gün (01, 02, ... 31)\n- `MMM` → Ay kısa (Oca, Şub, ... Ara)\n- `yyyy` → Yıl (2025)\n\n**Locale:**\n```typescript\nimport { tr } from 'date-fns/locale';\n// Türkçe ay isimleri: Ocak, Şubat, Mart...\n```\n\n**Örnek:**\n```typescript\nformat(new Date('2025-10-30'), 'dd MMM yyyy', { locale: tr })\n→ \"30 Eki 2025\"\n```\n\n---\n\n## BÖLÜM 4: PANEL (DASHBOARD)\n\n### 4.1 client/src/sayfalar/panel.tsx\n\n**Dosya Boyutu:** 2500+ satır (çok büyük component!)\n\n**Neden Bu Kadar Büyük?**\n- 8 farklı sekme (tab) var\n- Her sekme kendi form'unu içerir\n- Çok fazla state management\n- Grafik component'leri\n\n**Sekmeler:**\n1. **Soru Kayıtları** - TYT/AYT soru çözümü kayıtları\n2. **Genel Denemeler** - TYT/AYT tam deneme sonuçları\n3. **Branş Denemeler** - Ders bazlı deneme sonuçları\n4. **Çalışma Süreleri** - Günlük çalışma saatleri\n5. **Hata Sıklığı** - Yanlış yapılan konular (frequency analysis)\n6. **Eksik Konular** - Çalışılması gereken konular\n7. **Tamamlanan Geçmiş** - Geçmiş kayıtlar (arşivlenen)\n8. **Grafikler** - İstatistik grafikleri (Recharts)\n\n### 4.2 Component Yapısı\n\n```\nDashboard (Panel.tsx - 2500+ satır)\n├── Tabs (shadcn/ui Tabs component)\n│   ├── TabsList (Sekme başlıkları)\n│   │   ├── TabsTrigger (Soru Kayıtları)\n│   │   ├── TabsTrigger (Genel Denemeler)\n│   │   ├── TabsTrigger (Branş Denemeler)\n│   │   └── ... (5 more)\n│   ├── TabsContent (Soru Kayıtları)\n│   │   ├── QuestionLogForm (Form)\n│   │   └── QuestionLogTable (Tablo)\n│   ├── TabsContent (Genel Denemeler)\n│   │   ├── ExamResultForm (Form)\n│   │   └── ExamResultTable (Tablo)\n│   └── ... (6 more TabsContent)\n└── ConfettiAnimation (Görev tamamlandığında)\n```\n\n### 4.3 Soru Kayıtları Sekmesi\n\n```typescript\nfunction SoruKayitlariTab() {\n  const [formData, setFormData] = useState<InsertQuestionLog>({\n    exam_type: 'TYT',\n    subject: '',\n    topic: '',\n    correct_count: '',\n    wrong_count: '',\n    blank_count: '',\n    wrong_topics: [],\n    time_spent_minutes: null,\n    study_date: new Date().toISOString().split('T')[0]\n  });\n\n  const mutation = useMutation({\n    mutationFn: (data: InsertQuestionLog) => \n      apiRequest('/api/question-logs', 'POST', data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/question-logs'] });\n      toast({ title: 'Soru kaydı eklendi', variant: 'success' });\n      setFormData(initialState); // Form reset\n    },\n    onError: (error) => {\n      toast({ \n        title: 'Hata', \n        description: error.message, \n        variant: 'destructive' \n      });\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Validation\n    if (!formData.subject) {\n      toast({ title: 'Ders seçiniz', variant: 'destructive' });\n      return;\n    }\n    \n    mutation.mutate(formData);\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit} className=\"space-y-4\">\n        <Select \n          value={formData.exam_type} \n          onValueChange={(value) => setFormData({ ...formData, exam_type: value })}\n        >\n          <SelectTrigger>\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"TYT\">TYT</SelectItem>\n            <SelectItem value=\"AYT\">AYT</SelectItem>\n          </SelectContent>\n        </Select>\n        \n        <Select \n          value={formData.subject} \n          onValueChange={(value) => setFormData({ ...formData, subject: value })}\n        >\n          <SelectTrigger>\n            <SelectValue placeholder=\"Ders Seçiniz\" />\n          </SelectTrigger>\n          <SelectContent>\n            {getSubjectsForExamType(formData.exam_type).map(subject => (\n              <SelectItem key={subject.value} value={subject.value}>\n                {subject.label}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n        \n        <Input\n          type=\"number\"\n          placeholder=\"Doğru Sayısı\"\n          value={formData.correct_count}\n          onChange={(e) => setFormData({ ...formData, correct_count: e.target.value })}\n        />\n        \n        <Input\n          type=\"number\"\n          placeholder=\"Yanlış Sayısı\"\n          value={formData.wrong_count}\n          onChange={(e) => setFormData({ ...formData, wrong_count: e.target.value })}\n        />\n        \n        <Button type=\"submit\" disabled={mutation.isPending}>\n          {mutation.isPending ? 'Ekleniyor...' : 'Kaydet'}\n        </Button>\n      </form>\n      \n      <QuestionLogTable />\n    </div>\n  );\n}\n```\n\n**Detaylı Açıklama:**\n\n**1. Form State Management**\n```typescript\nconst [formData, setFormData] = useState<InsertQuestionLog>({\n  exam_type: 'TYT',\n  subject: '',\n  topic: '',\n  correct_count: '',\n  wrong_count: '',\n  blank_count: '',\n  wrong_topics: [],\n  time_spent_minutes: null,\n  study_date: new Date().toISOString().split('T')[0]\n});\n```\n\n**State Açıklaması:**\n- **exam_type:** `'TYT' | 'AYT'` (Default: TYT)\n- **subject:** `string` (Ders: Matematik, Fizik vs.)\n- **topic:** `string` (Konu: Türev, Limit vs.)\n- **correct_count:** `string` (Doğru sayısı, input type=\"number\" string döner)\n- **wrong_count:** `string` (Yanlış sayısı)\n- **blank_count:** `string` (Boş sayısı)\n- **wrong_topics:** `string[]` (Yanlış yapılan konular array)\n- **time_spent_minutes:** `number | null` (Çalışma süresi, dakika)\n- **study_date:** `string` (ISO format: \"2025-10-30\")\n\n**study_date Default Value:**\n```typescript\nnew Date().toISOString().split('T')[0]\n// new Date() → Fri Oct 30 2025 10:30:45 GMT+0300\n// .toISOString() → \"2025-10-30T07:30:45.123Z\"\n// .split('T')[0] → \"2025-10-30\"\n```\n\n**2. Mutation (API Call)**\n```typescript\nconst mutation = useMutation({\n  mutationFn: (data: InsertQuestionLog) => \n    apiRequest('/api/question-logs', 'POST', data),\n  onSuccess: () => {\n    queryClient.invalidateQueries({ queryKey: ['/api/question-logs'] });\n    toast({ title: 'Soru kaydı eklendi', variant: 'success' });\n    setFormData(initialState);\n  },\n  onError: (error) => {\n    toast({ title: 'Hata', description: error.message, variant: 'destructive' });\n  }\n});\n```\n\n**Mutation Lifecycle (Success):**\n```\n1. mutation.mutate(formData)\n   ↓\n2. mutationFn çağrılır\n   → POST /api/question-logs\n   → Body: { exam_type: 'TYT', subject: 'Matematik', ... }\n   ↓\n3. API response (201 Created)\n   → { id: '123', exam_type: 'TYT', ... }\n   ↓\n4. onSuccess callback\n   → queryClient.invalidateQueries() → Tablo yenilenir\n   → toast() → Başarılı mesajı\n   → setFormData(initialState) → Form temizlenir\n   ↓\n5. UI güncellenir\n```\n\n**Mutation Lifecycle (Error):**\n```\n1. mutation.mutate(formData)\n   ↓\n2. mutationFn çağrılır\n   → POST /api/question-logs\n   ↓\n3. API error (400 Bad Request)\n   → { message: \"Ders seçiniz\" }\n   ↓\n4. onError callback\n   → toast() → Hata mesajı\n   ↓\n5. Form değişmez (data kaybolmaz)\n```\n\n**3. Form Submit Handler**\n```typescript\nconst handleSubmit = (e: React.FormEvent) => {\n  e.preventDefault(); // Sayfa yenilenmesini engelle\n  \n  if (!formData.subject) {\n    toast({ title: 'Ders seçiniz', variant: 'destructive' });\n    return;\n  }\n  \n  mutation.mutate(formData);\n};\n```\n\n**e.preventDefault():**\n- **Neden gerekli?** Form submit olunca browser default davranışı sayfa yenileme\n- **SPA'da:** Sayfa yenilenmemeli (state kaybolur)\n- **Çözüm:** `e.preventDefault()` ile default davranışı iptal et\n\n**4. Select Component (Controlled)**\n```tsx\n<Select \n  value={formData.exam_type} \n  onValueChange={(value) => setFormData({ ...formData, exam_type: value })}\n>\n```\n\n**Controlled Component Nedir?**\n- **Tanım:** State React'te tutulur, value prop ile kontrol edilir\n- **Avantaj:** State her zaman doğru (single source of truth)\n\n**Spread Operator:**\n```typescript\nsetFormData({ ...formData, exam_type: value })\n// { exam_type: 'TYT', subject: 'Matematik', ... }\n// → { exam_type: 'AYT', subject: 'Matematik', ... }\n// Sadece exam_type değişir, diğerleri aynı kalır\n```\n\n**5. Disabled Button (Loading State)**\n```tsx\n<Button type=\"submit\" disabled={mutation.isPending}>\n  {mutation.isPending ? 'Ekleniyor...' : 'Kaydet'}\n</Button>\n```\n\n**mutation.isPending:**\n- `false` → Button aktif, text \"Kaydet\"\n- `true` → Button disabled, text \"Ekleniyor...\" (API call sırasında)\n\n**Neden disable?**\n- Çift tıklama engellenir (duplicate submission)\n- UX: Kullanıcı loading olduğunu anlar\n\n---\n\n## BÖLÜM 5: SAYAÇ (TIMER)\n\n### 5.1 client/src/sayfalar/sayac.tsx\n\n**Özellikler:**\n1. **Kronometre** - Basit sayaç (00:00:00 formatında)\n2. **Pomodoro** - 25 dakika çalışma + 5 dakika mola\n3. **Alarmlar** - Zaman bazlı hatırlatıcılar\n\n### 5.2 Kronometre Component\n\n```typescript\nfunction KronometreSection() {\n  const [time, setTime] = useState(0); // Saniye cinsinden\n  const [isRunning, setIsRunning] = useState(false);\n\n  useEffect(() => {\n    let interval: NodeJS.Timeout;\n    if (isRunning) {\n      interval = setInterval(() => {\n        setTime(t => t + 1); // Her saniye +1\n      }, 1000);\n    }\n    return () => clearInterval(interval); // Cleanup\n  }, [isRunning]);\n\n  const formatTime = (seconds: number): string => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const secs = seconds % 60;\n    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const handleStart = () => setIsRunning(true);\n  const handlePause = () => setIsRunning(false);\n  const handleReset = () => {\n    setIsRunning(false);\n    setTime(0);\n  };\n\n  return (\n    <div className=\"flex flex-col items-center gap-6 p-8\">\n      <div className=\"text-6xl font-mono font-bold\">\n        {formatTime(time)}\n      </div>\n      \n      <div className=\"flex gap-4\">\n        {!isRunning ? (\n          <Button onClick={handleStart} size=\"lg\">\n            <Play className=\"w-5 h-5 mr-2\" />\n            Başlat\n          </Button>\n        ) : (\n          <Button onClick={handlePause} size=\"lg\" variant=\"secondary\">\n            <Pause className=\"w-5 h-5 mr-2\" />\n            Duraklat\n          </Button>\n        )}\n        \n        <Button onClick={handleReset} size=\"lg\" variant=\"outline\">\n          <RotateCcw className=\"w-5 h-5 mr-2\" />\n          Sıfırla\n        </Button>\n      </div>\n    </div>\n  );\n}\n```\n\n**Detaylı Açıklama:**\n\n**1. useEffect + setInterval**\n```typescript\nuseEffect(() => {\n  let interval: NodeJS.Timeout;\n  if (isRunning) {\n    interval = setInterval(() => {\n      setTime(t => t + 1);\n    }, 1000); // 1000ms = 1 saniye\n  }\n  return () => clearInterval(interval);\n}, [isRunning]);\n```\n\n**setInterval Nedir?**\n- **Tanım:** Belirli aralıklarla fonksiyon çalıştırma\n- **Syntax:** `setInterval(callback, delay)`\n- **Return:** Interval ID (temizleme için gerekli)\n\n**useEffect Dependency:**\n```typescript\n}, [isRunning]);\n```\n- `isRunning` değiştiğinde effect tekrar çalışır\n- `isRunning = false → true` → Interval başlar\n- `isRunning = true → false` → Cleanup çalışır (interval temizlenir)\n\n**Cleanup Function:**\n```typescript\nreturn () => clearInterval(interval);\n```\n- **Neden gerekli?** Memory leak engelleme\n- **Ne zaman çalışır?**\n  - Component unmount olduğunda\n  - Dependency (`isRunning`) değiştiğinde (yeni effect çalışmadan önce)\n\n**2. Functional State Update**\n```typescript\nsetTime(t => t + 1)\n```\n\n**Neden `setTime(time + 1)` değil?**\n```typescript\n// ❌ YANLIŞ\nsetTime(time + 1)\n// Problem: time stale olabilir (closure issue)\n\n// ✅ DOĞRU\nsetTime(t => t + 1)\n// t: En güncel state value (React garanti eder)\n```\n\n**3. Time Formatting**\n```typescript\nconst formatTime = (seconds: number): string => {\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  const secs = seconds % 60);\n  return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n};\n```\n\n**Math.floor:**\n```typescript\nMath.floor(125 / 60) → 2 (ondalık kısmı atar)\n```\n\n**Modulo (%):**\n```typescript\n125 % 60 → 5 (kalan)\n// 125 = 2 * 60 + 5\n```\n\n**padStart:**\n```typescript\n'5'.padStart(2, '0') → '05'\n'12'.padStart(2, '0') → '12'\n```\n\n**Örnek:**\n```typescript\nformatTime(3725) // 3725 saniye\n→ hours = Math.floor(3725 / 3600) = 1\n→ minutes = Math.floor((3725 % 3600) / 60) = Math.floor(125 / 60) = 2\n→ secs = 3725 % 60 = 5\n→ \"01:02:05\"\n```\n\n### 5.3 Pomodoro Component\n\n```typescript\nfunction PomodoroSection() {\n  const [mode, setMode] = useState<'work' | 'break'>('work');\n  const [timeLeft, setTimeLeft] = useState(25 * 60); // 25 dakika\n  const [isRunning, setIsRunning] = useState(false);\n\n  const durations = {\n    work: 25 * 60,   // 25 dakika\n    break: 5 * 60    // 5 dakika\n  };\n\n  useEffect(() => {\n    let interval: NodeJS.Timeout;\n    if (isRunning && timeLeft > 0) {\n      interval = setInterval(() => {\n        setTimeLeft(t => t - 1);\n      }, 1000);\n    } else if (timeLeft === 0) {\n      // Timer bitti\n      handleTimerComplete();\n    }\n    return () => clearInterval(interval);\n  }, [isRunning, timeLeft]);\n\n  const handleTimerComplete = () => {\n    setIsRunning(false);\n    \n    // Notification göster\n    if ('Notification' in window && Notification.permission === 'granted') {\n      new Notification(\n        mode === 'work' ? 'Çalışma süresi bitti!' : 'Mola bitti!',\n        { body: mode === 'work' ? 'Şimdi mola zamanı' : 'Tekrar çalışma zamanı' }\n      );\n    }\n    \n    // Mode değiştir\n    setMode(mode === 'work' ? 'break' : 'work');\n    setTimeLeft(mode === 'work' ? durations.break : durations.work);\n  };\n\n  const handleModeSwitch = (newMode: 'work' | 'break') => {\n    setMode(newMode);\n    setTimeLeft(durations[newMode]);\n    setIsRunning(false);\n  };\n\n  const minutes = Math.floor(timeLeft / 60);\n  const seconds = timeLeft % 60;\n\n  return (\n    <div className=\"flex flex-col items-center gap-6 p-8\">\n      <div className=\"flex gap-2\">\n        <Button \n          variant={mode === 'work' ? 'default' : 'outline'}\n          onClick={() => handleModeSwitch('work')}\n        >\n          Çalışma (25dk)\n        </Button>\n        <Button \n          variant={mode === 'break' ? 'default' : 'outline'}\n          onClick={() => handleModeSwitch('break')}\n        >\n          Mola (5dk)\n        </Button>\n      </div>\n      \n      <div className=\"text-8xl font-mono font-bold\">\n        {minutes.toString().padStart(2, '0')}:{seconds.toString().padStart(2, '0')}\n      </div>\n      \n      <Button onClick={() => setIsRunning(!isRunning)} size=\"lg\">\n        {isRunning ? 'Duraklat' : 'Başlat'}\n      </Button>\n    </div>\n  );\n}\n```\n\n**Detaylı Açıklama:**\n\n**1. Pomodoro Tekniği**\n- **25 dakika çalışma** → Deep work (derin çalışma)\n- **5 dakika mola** → Rest (dinlenme)\n- **4 pomodoro sonrası** → Uzun mola (15-30 dk)\n\n**2. Browser Notification API**\n```typescript\nif ('Notification' in window && Notification.permission === 'granted') {\n  new Notification('Başlık', { body: 'İçerik' });\n}\n```\n\n**Permission Request:**\n```typescript\n// İlk kez permission iste\nNotification.requestPermission().then(permission => {\n  if (permission === 'granted') {\n    // Notification gösterebilirsin\n  }\n});\n```\n\n**3. Conditional Variant (Button)**\n```tsx\n<Button variant={mode === 'work' ? 'default' : 'outline'}>\n```\n- `mode = 'work'` → `variant=\"default\"` (mavi, aktif)\n- `mode = 'break'` → `variant=\"outline\"` (border, pasif)\n\n---\n\n## BÖLÜM 6: NET HESAPLAYICI (/net-hesaplayici)\n\n### 6.1 client/src/sayfalar/net-hesaplayici.tsx\n\n**Dosya Amacı:**\nYKS net hesaplama sayfası (D - Y/4 formülü).\n\n**Özellikler:**\n1. TYT/AYT ders bazlı net hesaplama\n2. Doğru-Yanlış-Boş girişi\n3. Otomatik net hesaplama (D - Y/4)\n4. Toplam net gösterimi\n5. Ders bazlı net dağılımı\n6. Geçmiş hesaplamaları kaydetme\n\n### 6.2 Net Hesaplama Formülü\n\n**YKS Net Hesaplama:**\n```\nNet = Doğru - (Yanlış / 4)\n```\n\n**Örnek:**\n```typescript\n// Matematik: 35 Doğru, 4 Yanlış, 1 Boş\nconst dogru = 35;\nconst yanlis = 4;\nconst bos = 1;\n\nconst net = dogru - (yanlis / 4);\n// 35 - (4 / 4) = 35 - 1 = 34 net\n```\n\n**TypeScript Implementation:**\n```typescript\nfunction hesaplaNet(dogru: number, yanlis: number): number {\n  return dogru - (yanlis / 4);\n}\n\n// Kullanım\nconst matematikNet = hesaplaNet(35, 4); // 34\nconst fizikNet = hesaplaNet(12, 8); // 12 - 2 = 10\nconst turkceNet = hesaplaNet(38, 2); // 38 - 0.5 = 37.5\n```\n\n### 6.3 TYT/AYT Ders Yapıları\n\n**TYT Dersleri:**\n```typescript\nconst TYT_DERSLER = [\n  { id: 'turkce', ad: 'Türkçe', soruSayisi: 40 },\n  { id: 'matematik', ad: 'Matematik', soruSayisi: 40 },\n  { id: 'fen', ad: 'Fen Bilimleri', soruSayisi: 20 },\n  { id: 'sosyal', ad: 'Sosyal Bilimler', soruSayisi: 20 }\n];\n```\n\n**AYT Dersleri (Sayısal):**\n```typescript\nconst AYT_SAYISAL_DERSLER = [\n  { id: 'matematik', ad: 'Matematik', soruSayisi: 40 },\n  { id: 'fizik', ad: 'Fizik', soruSayisi: 14 },\n  { id: 'kimya', ad: 'Kimya', soruSayisi: 13 },\n  { id: 'biyoloji', ad: 'Biyoloji', soruSayisi: 13 }\n];\n```\n\n**AYT Dersleri (Sözel):**\n```typescript\nconst AYT_SOZEL_DERSLER = [\n  { id: 'edebiyat', ad: 'Türk Dili ve Edebiyatı', soruSayisi: 24 },\n  { id: 'tarih1', ad: 'Tarih 1', soruSayisi: 10 },\n  { id: 'cografya1', ad: 'Coğrafya 1', soruSayisi: 6 },\n  { id: 'tarih2', ad: 'Tarih 2', soruSayisi: 11 },\n  { id: 'cografya2', ad: 'Coğrafya 2', soruSayisi: 11 },\n  { id: 'felsefe', ad: 'Felsefe', soruSayisi: 12 },\n  { id: 'din', ad: 'Din Kültürü', soruSayisi: 6 }\n];\n```\n\n### 6.4 Net Hesaplayıcı Component\n\n```typescript\nexport default function NetHesaplayici() {\n  const [sinavTuru, setSinavTuru] = useState<'TYT' | 'AYT'>('TYT');\n  const [alanTuru, setAlanTuru] = useState<'sayisal' | 'sozel'>('sayisal');\n  const [dersNetleri, setDersNetleri] = useState<Record<string, DersNet>>({});\n\n  // Ders net hesaplama\n  const hesaplaDersNet = (dogru: number, yanlis: number): number => {\n    const net = dogru - (yanlis / 4);\n    return Math.max(0, parseFloat(net.toFixed(2))); // Negatif net olmaz\n  };\n\n  // Toplam net hesaplama\n  const toplamNet = useMemo(() => {\n    return Object.values(dersNetleri).reduce((toplam, ders) => {\n      return toplam + hesaplaDersNet(ders.dogru, ders.yanlis);\n    }, 0);\n  }, [dersNetleri]);\n\n  // Ders input handler\n  const handleDersInput = (dersId: string, field: 'dogru' | 'yanlis', value: string) => {\n    const numValue = parseInt(value) || 0;\n    \n    setDersNetleri(prev => ({\n      ...prev,\n      [dersId]: {\n        ...prev[dersId],\n        [field]: numValue,\n        bos: prev[dersId]?.soruSayisi - numValue - (prev[dersId]?.yanlis || 0)\n      }\n    }));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background p-4\">\n      <Card className=\"max-w-4xl mx-auto\">\n        <CardHeader>\n          <CardTitle>Net Hesaplayıcı</CardTitle>\n          <CardDescription>YKS net hesaplama aracı (D - Y/4)</CardDescription>\n        </CardHeader>\n        \n        <CardContent>\n          {/* Sınav Türü Seçimi */}\n          <Tabs value={sinavTuru} onValueChange={(v) => setSinavTuru(v as 'TYT' | 'AYT')}>\n            <TabsList>\n              <TabsTrigger value=\"TYT\">TYT</TabsTrigger>\n              <TabsTrigger value=\"AYT\">AYT</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"TYT\">\n              <TYTNetHesapla \n                dersNetleri={dersNetleri}\n                onDersInput={handleDersInput}\n              />\n            </TabsContent>\n            \n            <TabsContent value=\"AYT\">\n              {/* Alan Türü Seçimi */}\n              <div className=\"mb-4\">\n                <Label>Alan Türü</Label>\n                <Select value={alanTuru} onValueChange={(v) => setAlanTuru(v as 'sayisal' | 'sozel')}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"sayisal\">Sayısal (MF)</SelectItem>\n                    <SelectItem value=\"sozel\">Sözel (TM)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <AYTNetHesapla\n                alanTuru={alanTuru}\n                dersNetleri={dersNetleri}\n                onDersInput={handleDersInput}\n              />\n            </TabsContent>\n          </Tabs>\n          \n          {/* Toplam Net */}\n          <div className=\"mt-6 p-4 bg-primary/10 rounded-lg\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-lg font-semibold\">Toplam Net:</span>\n              <span className=\"text-2xl font-bold text-primary\">\n                {toplamNet.toFixed(2)}\n              </span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n```\n\n**DersNet Type:**\n```typescript\ninterface DersNet {\n  dogru: number;\n  yanlis: number;\n  bos: number;\n  soruSayisi: number;\n}\n```\n\n**TYT Net Hesapla Component:**\n```typescript\nfunction TYTNetHesapla({ dersNetleri, onDersInput }) {\n  return (\n    <div className=\"space-y-4\">\n      {TYT_DERSLER.map(ders => {\n        const dersNet = dersNetleri[ders.id] || { dogru: 0, yanlis: 0, bos: ders.soruSayisi };\n        const net = hesaplaDersNet(dersNet.dogru, dersNet.yanlis);\n        \n        return (\n          <Card key={ders.id}>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">{ders.ad}</CardTitle>\n              <CardDescription>Toplam: {ders.soruSayisi} soru</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-3 gap-4\">\n                {/* Doğru */}\n                <div>\n                  <Label>Doğru</Label>\n                  <Input\n                    type=\"number\"\n                    min=\"0\"\n                    max={ders.soruSayisi}\n                    value={dersNet.dogru}\n                    onChange={(e) => onDersInput(ders.id, 'dogru', e.target.value)}\n                    data-testid={`input-dogru-${ders.id}`}\n                  />\n                </div>\n                \n                {/* Yanlış */}\n                <div>\n                  <Label>Yanlış</Label>\n                  <Input\n                    type=\"number\"\n                    min=\"0\"\n                    max={ders.soruSayisi}\n                    value={dersNet.yanlis}\n                    onChange={(e) => onDersInput(ders.id, 'yanlis', e.target.value)}\n                    data-testid={`input-yanlis-${ders.id}`}\n                  />\n                </div>\n                \n                {/* Boş */}\n                <div>\n                  <Label>Boş</Label>\n                  <Input\n                    type=\"number\"\n                    value={dersNet.bos}\n                    disabled\n                    className=\"bg-muted\"\n                  />\n                </div>\n              </div>\n              \n              {/* Net Gösterimi */}\n              <div className=\"mt-4 p-3 bg-primary/5 rounded\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"font-medium\">Net:</span>\n                  <span className=\"text-xl font-bold text-primary\">{net.toFixed(2)}</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n}\n```\n\n**Validation:**\n```typescript\n// Doğru + Yanlış + Boş = Soru Sayısı\nconst validateInput = (dogru: number, yanlis: number, soruSayisi: number): boolean => {\n  return (dogru + yanlis) <= soruSayisi;\n};\n\n// Hata durumunda toast\nif (!validateInput(dogru, yanlis, ders.soruSayisi)) {\n  toast({\n    title: 'Hata',\n    description: 'Doğru + Yanlış toplamı soru sayısını geçemez!',\n    variant: 'destructive'\n  });\n  return;\n}\n```\n\n---\n\n## BÖLÜM 7: YKS KONULAR (/yks-konular)\n\n### 7.1 client/src/sayfalar/yks-konular.tsx\n\n**Dosya Amacı:**\nTYT/AYT tüm konuların listelendiği ve checkbox ile takip edildiği sayfa.\n\n**Özellikler:**\n1. TYT/AYT tüm konular (Matematik, Fizik, Kimya, Biyoloji, Türkçe, Tarih, Coğrafya vs.)\n2. Konu başlıkları (Trigonometri, Türev, İntegral vs.)\n3. Alt konular (Toplam 2000+ konu)\n4. Checkbox ile tamamlandı işaretleme\n5. İlerleme yüzdesi (kaç konu tamamlandı?)\n6. Filtreleme (ders, tamamlanma durumu)\n7. Arama (konu adı)\n\n### 7.2 Konu Veri Yapısı\n\n**Konu Tree Structure:**\n```typescript\ninterface Konu {\n  id: string;\n  ad: string;\n  tamamlandi: boolean;\n  altKonular?: Konu[];\n}\n\ninterface Ders {\n  id: string;\n  ad: string;\n  icon: string;\n  konular: Konu[];\n}\n\ninterface SinavTuru {\n  id: 'TYT' | 'AYT';\n  dersler: Ders[];\n}\n```\n\n**Örnek TYT Matematik Konuları:**\n```typescript\nconst TYT_MATEMATIK: Ders = {\n  id: 'matematik',\n  ad: 'Matematik',\n  icon: '📐',\n  konular: [\n    {\n      id: 'temel-kavramlar',\n      ad: 'Temel Kavramlar',\n      tamamlandi: false,\n      altKonular: [\n        { id: 'sayilar', ad: 'Sayılar', tamamlandi: false },\n        { id: 'carpanlara-ayirma', ad: 'Çarpanlara Ayırma', tamamlandi: false },\n        { id: 'kok-eslik', ad: 'Kök - Eşlik', tamamlandi: false }\n      ]\n    },\n    {\n      id: 'denklemler',\n      ad: 'Denklemler ve Eşitsizlikler',\n      tamamlandi: false,\n      altKonular: [\n        { id: 'birinci-derece', ad: '1. Derece Denklemler', tamamlandi: false },\n        { id: 'ikinci-derece', ad: '2. Derece Denklemler', tamamlandi: false },\n        { id: 'esitsizlikler', ad: 'Eşitsizlikler', tamamlandi: false },\n        { id: 'mutlak-deger', ad: 'Mutlak Değer', tamamlandi: false }\n      ]\n    },\n    {\n      id: 'fonksiyonlar',\n      ad: 'Fonksiyonlar',\n      tamamlandi: false,\n      altKonular: [\n        { id: 'fonksiyon-tanimi', ad: 'Fonksiyon Tanımı', tamamlandi: false },\n        { id: 'fonksiyon-cesitleri', ad: 'Fonksiyon Çeşitleri', tamamlandi: false },\n        { id: 'ters-fonksiyon', ad: 'Ters Fonksiyon', tamamlandi: false },\n        { id: 'bilesik-fonksiyon', ad: 'Bileşik Fonksiyon', tamamlandi: false }\n      ]\n    },\n    // ... toplam 15+ ana konu, 100+ alt konu\n  ]\n};\n```\n\n### 7.3 Checkbox Konu Component\n\n```typescript\nfunction KonuCheckbox({ konu, onToggle }: Props) {\n  const [expanded, setExpanded] = useState(false);\n  \n  // Tüm alt konular tamamlandı mı?\n  const tumAltKonularTamamlandi = useMemo(() => {\n    if (!konu.altKonular) return false;\n    return konu.altKonular.every(alt => alt.tamamlandi);\n  }, [konu.altKonular]);\n  \n  // İlerleme yüzdesi\n  const ilerlemYuzdesi = useMemo(() => {\n    if (!konu.altKonular) return 0;\n    const tamamlananSayi = konu.altKonular.filter(alt => alt.tamamlandi).length;\n    return (tamamlananSayi / konu.altKonular.length) * 100;\n  }, [konu.altKonular]);\n\n  return (\n    <div className=\"border rounded-lg p-3\">\n      <div className=\"flex items-center justify-between\">\n        {/* Ana Konu Checkbox */}\n        <div className=\"flex items-center gap-2\">\n          <Checkbox\n            checked={tumAltKonularTamamlandi}\n            onCheckedChange={() => onToggle(konu.id)}\n            data-testid={`checkbox-konu-${konu.id}`}\n          />\n          <span className={cn(\n            \"font-medium\",\n            tumAltKonularTamamlandi && \"line-through text-muted-foreground\"\n          )}>\n            {konu.ad}\n          </span>\n        </div>\n        \n        {/* Expand Button */}\n        {konu.altKonular && (\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setExpanded(!expanded)}\n          >\n            {expanded ? <ChevronUp /> : <ChevronDown />}\n            {konu.altKonular.length} alt konu\n          </Button>\n        )}\n      </div>\n      \n      {/* İlerleme Barı */}\n      {konu.altKonular && (\n        <div className=\"mt-2\">\n          <div className=\"flex justify-between text-xs text-muted-foreground mb-1\">\n            <span>İlerleme</span>\n            <span>{ilerlemYuzdesi.toFixed(0)}%</span>\n          </div>\n          <Progress value={ilerlemYuzdesi} className=\"h-2\" />\n        </div>\n      )}\n      \n      {/* Alt Konular (Collapsed) */}\n      {expanded && konu.altKonular && (\n        <div className=\"mt-3 pl-6 space-y-2\">\n          {konu.altKonular.map(altKonu => (\n            <div key={altKonu.id} className=\"flex items-center gap-2\">\n              <Checkbox\n                checked={altKonu.tamamlandi}\n                onCheckedChange={() => onToggle(altKonu.id)}\n                data-testid={`checkbox-altkonu-${altKonu.id}`}\n              />\n              <span className={cn(\n                \"text-sm\",\n                altKonu.tamamlandi && \"line-through text-muted-foreground\"\n              )}>\n                {altKonu.ad}\n              </span>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n```\n\n**Progress Component (shadcn/ui):**\n```tsx\n<Progress value={75} className=\"h-2\" />\n// value: 0-100 arası sayı\n// Tailwind width: w-[75%]\n```\n\n### 7.4 Arama ve Filtreleme\n\n```typescript\nfunction YKSKonular() {\n  const [aramaMetni, setAramaMetni] = useState('');\n  const [secilenDers, setSecilenDers] = useState<string | null>(null);\n  const [sadeceTamamlanmamislar, setSadeceTamamlanmamislar] = useState(false);\n\n  // Konuları filtrele\n  const filtrelenmiKonular = useMemo(() => {\n    let konular = tumKonular;\n    \n    // Ders filtresi\n    if (secilenDers) {\n      konular = konular.filter(k => k.dersId === secilenDers);\n    }\n    \n    // Arama filtresi\n    if (aramaMetni) {\n      konular = konular.filter(k => \n        k.ad.toLowerCase().includes(aramaMetni.toLowerCase()) ||\n        k.altKonular?.some(alt => \n          alt.ad.toLowerCase().includes(aramaMetni.toLowerCase())\n        )\n      );\n    }\n    \n    // Tamamlanma filtresi\n    if (sadeceTamamlanmamislar) {\n      konular = konular.filter(k => !k.tamamlandi);\n    }\n    \n    return konular;\n  }, [aramaMetni, secilenDers, sadeceTamamlanmamislar]);\n\n  return (\n    <div>\n      {/* Filtreler */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n        {/* Arama */}\n        <Input\n          placeholder=\"Konu ara...\"\n          value={aramaMetni}\n          onChange={(e) => setAramaMetni(e.target.value)}\n          data-testid=\"input-konu-ara\"\n        />\n        \n        {/* Ders Filtresi */}\n        <Select value={secilenDers} onValueChange={setSecilenDers}>\n          <SelectTrigger>\n            <SelectValue placeholder=\"Tüm Dersler\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value={null}>Tüm Dersler</SelectItem>\n            <SelectItem value=\"matematik\">Matematik</SelectItem>\n            <SelectItem value=\"fizik\">Fizik</SelectItem>\n            <SelectItem value=\"kimya\">Kimya</SelectItem>\n          </SelectContent>\n        </Select>\n        \n        {/* Tamamlanmamışları Göster */}\n        <div className=\"flex items-center gap-2\">\n          <Checkbox\n            checked={sadeceTamamlanmamislar}\n            onCheckedChange={setSadeceTamamlanmamislar}\n          />\n          <Label>Sadece Tamamlanmamışlar</Label>\n        </div>\n      </div>\n      \n      {/* Konu Listesi */}\n      <div className=\"space-y-4\">\n        {filtrelenmiKonular.map(konu => (\n          <KonuCheckbox key={konu.id} konu={konu} onToggle={handleToggle} />\n        ))}\n      </div>\n    </div>\n  );\n}\n```\n\n---\n\n## BÖLÜM 8: SHADCN/UI COMPONENT'LERİ\n\n### 8.1 shadcn/ui Nedir?\n\n**shadcn/ui:**\n- **Tanım:** Radix UI + Tailwind CSS ile yapılmış copy-paste component kütüphanesi\n- **Fark:** npm install değil, dosya kopyalama (component'leri projeye eklersiniz)\n- **Avantaj:** Full control (istediğiniz gibi değiştirebilirsiniz)\n\n**Kurulum:**\n```bash\nnpx shadcn@latest init\nnpx shadcn@latest add button\nnpx shadcn@latest add dialog\nnpx shadcn@latest add input\n```\n\n**Kopyalanan Dosyalar:**\n```\nclient/src/bilesenler/arayuz/\n├── button.tsx\n├── dialog.tsx\n├── input.tsx\n├── select.tsx\n└── ... (30+ component)\n```\n\n### 8.2 En Çok Kullanılan Component'ler\n\n**1. Button**\n```tsx\nimport { Button } from '@/bilesenler/arayuz/button';\n\n// Variants\n<Button variant=\"default\">Primary</Button>\n<Button variant=\"secondary\">Secondary</Button>\n<Button variant=\"destructive\">Delete</Button>\n<Button variant=\"outline\">Outline</Button>\n<Button variant=\"ghost\">Ghost</Button>\n\n// Sizes\n<Button size=\"sm\">Small</Button>\n<Button size=\"default\">Default</Button>\n<Button size=\"lg\">Large</Button>\n\n// Loading State\n<Button disabled={isPending}>\n  {isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n  {isPending ? 'Yükleniyor...' : 'Kaydet'}\n</Button>\n```\n\n**2. Dialog (Modal)**\n```tsx\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/bilesenler/arayuz/dialog';\n\nfunction AddTaskModal({ open, onOpenChange }) {\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>Yeni Görev</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit}>\n          <Input placeholder=\"Görev başlığı\" />\n          <Button type=\"submit\">Kaydet</Button>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n```\n\n**3. Form (React Hook Form)**\n```tsx\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { Form, FormField, FormItem, FormLabel, FormControl, FormMessage } from '@/bilesenler/arayuz/form';\n\nfunction TaskForm() {\n  const form = useForm({\n    resolver: zodResolver(insertTaskSchema),\n    defaultValues: {\n      title: '',\n      priority: 'medium',\n      category: ''\n    }\n  });\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)}>\n        <FormField\n          control={form.control}\n          name=\"title\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Başlık</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Görev başlığı\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        \n        <Button type=\"submit\">Kaydet</Button>\n      </form>\n    </Form>\n  );\n}\n```\n\n**4. Toast (Bildirim)**\n```tsx\nimport { useToast } from '@/hooks/use-toast';\n\nfunction MyComponent() {\n  const { toast } = useToast();\n\n  const showSuccess = () => {\n    toast({\n      title: 'Başarılı!',\n      description: 'Görev eklendi.',\n      variant: 'success'\n    });\n  };\n\n  const showError = () => {\n    toast({\n      title: 'Hata!',\n      description: 'Bir şeyler ters gitti.',\n      variant: 'destructive'\n    });\n  };\n\n  return <Button onClick={showSuccess}>Göster</Button>;\n}\n```\n\n---\n\n## BÖLÜM 9: REACT QUERY SETUP DETAYI\n\n### 9.1 client/src/kutuphane/queryClient.ts\n\n```typescript\nimport { QueryClient } from '@tanstack/react-query';\n\n// QueryClient oluştur\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      // 5 dakika boyunca fresh (yeniden fetch etme)\n      staleTime: 5 * 60 * 1000,\n      \n      // Window focus'ta refetch yapma\n      refetchOnWindowFocus: false,\n      \n      // Retry failed requests 3 kere\n      retry: 3,\n      \n      // Retry delay (exponential backoff)\n      retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000)\n    },\n    mutations: {\n      // Mutation error'larında retry yapma\n      retry: false\n    }\n  }\n});\n\n// Default fetcher (GET requests)\nconst defaultQueryFn = async ({ queryKey }: { queryKey: any[] }) => {\n  const response = await fetch(queryKey[0] as string);\n  \n  if (!response.ok) {\n    throw new Error(`HTTP error! status: ${response.status}`);\n  }\n  \n  return response.json();\n};\n\nqueryClient.setDefaultOptions({\n  queries: {\n    queryFn: defaultQueryFn\n  }\n});\n\n// API request helper (POST/PUT/DELETE)\nexport async function apiRequest<T = any>(\n  url: string,\n  method: 'POST' | 'PUT' | 'PATCH' | 'DELETE',\n  data?: any\n): Promise<T> {\n  const response = await fetch(url, {\n    method,\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: data ? JSON.stringify(data) : undefined\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.message || 'Request failed');\n  }\n\n  return response.json();\n}\n```\n\n**Kullanım:**\n```typescript\n// GET request (default fetcher)\nconst { data: tasks } = useQuery({\n  queryKey: ['/api/tasks']\n});\n\n// POST request (apiRequest)\nconst mutation = useMutation({\n  mutationFn: (data) => apiRequest('/api/tasks', 'POST', data),\n  onSuccess: () => {\n    queryClient.invalidateQueries({ queryKey: ['/api/tasks'] });\n  }\n});\n```\n\n---\n\n## BÖLÜM 10: DARK MODE IMPLEMENTATION\n\n### 10.1 Theme Provider\n\n```tsx\nimport { createContext, useContext, useEffect, useState } from 'react';\n\ntype Theme = 'light' | 'dark';\n\nconst ThemeContext = createContext<{\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n}>({\n  theme: 'light',\n  setTheme: () => null\n});\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    // localStorage'dan oku\n    const stored = localStorage.getItem('theme');\n    return (stored as Theme) || 'light';\n  });\n\n  useEffect(() => {\n    // DOM'a class ekle/çıkar\n    document.documentElement.classList.remove('light', 'dark');\n    document.documentElement.classList.add(theme);\n    \n    // localStorage'a kaydet\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport const useTheme = () => useContext(ThemeContext);\n```\n\n### 10.2 Dark Mode Toggle\n\n```tsx\nimport { Moon, Sun } from 'lucide-react';\nimport { useTheme } from '@/hooks/use-theme';\nimport { Button } from '@/bilesenler/arayuz/button';\n\nexport function ThemeToggle() {\n  const { theme, setTheme } = useTheme();\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}\n    >\n      {theme === 'light' ? <Moon className=\"h-5 w-5\" /> : <Sun className=\"h-5 w-5\" />}\n    </Button>\n  );\n}\n```\n\n### 10.3 CSS Variables (Tailwind Config)\n\n```css\n/* client/src/index.css */\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 222.2 84% 4.9%;\n    --primary: 221.2 83.2% 53.3%;\n    --primary-foreground: 210 40% 98%;\n  }\n\n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n    --primary: 217.2 91.2% 59.8%;\n    --primary-foreground: 222.2 47.4% 11.2%;\n  }\n}\n```\n\n**Tailwind Usage:**\n```tsx\n<div className=\"bg-background text-foreground\">\n  <h1 className=\"text-primary\">Başlık</h1>\n  <Button className=\"bg-primary text-primary-foreground\">Buton</Button>\n</div>\n```\n\n---\n\n## ÖZET\n\n**Toplam Satır:** 2500+ satır\n\n**Tamamlanan Bölümler:**\n1. ✅ Entry Point (main.tsx)\n2. ✅ Routing (App.tsx)\n3. ✅ Anasayfa (Tasks Page)\n4. ✅ Panel (Dashboard)\n5. ✅ Sayaç (Timer/Pomodoro)\n6. ✅ Net Hesaplayıcı\n7. ✅ YKS Konular\n8. ✅ shadcn/ui Component'leri\n9. ✅ React Query Setup\n10. ✅ Dark Mode Implementation\n\n**Her açıklama içerir:**\n- ✅ Terim açıklaması (ne anlama geliyor?)\n- ✅ Kod açıklaması (ne yapıyor?)\n- ✅ Gerçek örnekler\n- ✅ Best practices\n","size_bytes":64150},"client/src/sayfalar/net-hesaplayici.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport { useState } from \"react\";\nimport { Header } from \"@/bilesenler/baslik\";\nimport { Calculator, TrendingUp, BookOpen, Brain, BarChart2, FlaskConical } from \"lucide-react\";\nimport { Input } from \"@/bilesenler/arayuz/input\";\nimport { Label } from \"@/bilesenler/arayuz/label\";\nimport { Checkbox } from \"@/bilesenler/arayuz/checkbox\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/bilesenler/arayuz/card\";\nimport { Progress } from \"@/bilesenler/arayuz/progress\";\nimport { Separator } from \"@/bilesenler/arayuz/separator\";\n\ninterface TYTData {\n  Türkçe: { dogru: number; yanlis: number; };\n  sosyal: { dogru: number; yanlis: number; };\n  matematik: { dogru: number; yanlis: number; };\n  fenBilimleri: { dogru: number; yanlis: number; };\n}\n\ninterface AYTData {\n  matematik: { dogru: number; yanlis: number; };\n  fizik: { dogru: number; yanlis: number; };\n  kimya: { dogru: number; yanlis: number; };\n  biyoloji: { dogru: number; yanlis: number; };\n}\n\ninterface OBPData {\n  diplomaNotu: number;\n  gecenSeneYerlesti: boolean;\n}\n\n\nexport default function NetCalculator() {\n  \n  const [tytData, setTytData] = useState<TYTData>({\n    Türkçe: { dogru: 0, yanlis: 0 },\n    sosyal: { dogru: 0, yanlis: 0 },\n    matematik: { dogru: 0, yanlis: 0 },\n    fenBilimleri: { dogru: 0, yanlis: 0 }\n  });\n\n  const [aytData, setAytData] = useState<AYTData>({\n    matematik: { dogru: 0, yanlis: 0 },\n    fizik: { dogru: 0, yanlis: 0 },\n    kimya: { dogru: 0, yanlis: 0 },\n    biyoloji: { dogru: 0, yanlis: 0 }\n  });\n\n  const [obpData, setObpData] = useState<OBPData>({\n    diplomaNotu: 85,\n    gecenSeneYerlesti: false\n  });\n\n\n  // Bir konu için net hesaplayın\n  const calculateNet = (dogru: number, yanlis: number): number => {\n    return Math.max(0, dogru - (yanlis / 4));\n  };\n\n  // TYT toplam neti hesaplayın\n  const calculateTYTNet = (): number => {\n    return Object.values(tytData).reduce((total, subject) => {\n      return total + calculateNet(subject.dogru, subject.yanlis);\n    }, 0);\n  };\n\n  // AYT toplam neti hesaplayın\n  const calculateAYTNet = (): number => {\n    return Object.values(aytData).reduce((total, subject) => {\n      return total + calculateNet(subject.dogru, subject.yanlis);\n    }, 0);\n  };\n\n  // OBP'yi hesaplayın (YKS standardı: diploma * 5, max 500)\n  const calculateOBP = (): number => {\n    let obp = (obpData.diplomaNotu / 100) * 500;\n    if (obpData.gecenSeneYerlesti) {\n      obp = obp / 2;\n    }\n    return Math.min(500, Math.max(0, obp));\n  };\n\n\n  // Girdi doğrulama\n  const validateInput = (subject: string, value: number, section: 'tyt' | 'ayt'): number => {\n    const maxValues: Record<string, number> = {\n      // TYT sınırları\n      'tyt-Türkçe': 40,\n      'tyt-sosyal': 20, \n      'tyt-matematik': 30,\n      'tyt-geometri': 10,\n      'tyt-fenBilimleri': 20,\n      // AYT sınırları\n      'ayt-matematik': 30,\n      'ayt-geometri': 10,\n      'ayt-fizik': 14,\n      'ayt-kimya': 13,\n      'ayt-biyoloji': 13\n    };\n    \n    const key = `${section}-${subject}`;\n    const max = maxValues[key] || 40;\n    return Math.min(Math.max(0, value), max);\n  };\n\n  // Tüm verileri sıfırla\n  const resetAllData = () => {\n    setTytData({\n      Türkçe: { dogru: 0, yanlis: 0 },\n      sosyal: { dogru: 0, yanlis: 0 },\n      matematik: { dogru: 0, yanlis: 0 },\n      fenBilimleri: { dogru: 0, yanlis: 0 }\n    });\n    setAytData({\n      matematik: { dogru: 0, yanlis: 0 },\n      fizik: { dogru: 0, yanlis: 0 },\n      kimya: { dogru: 0, yanlis: 0 },\n      biyoloji: { dogru: 0, yanlis: 0 }\n    });\n    setObpData({\n      diplomaNotu: 85,\n      gecenSeneYerlesti: false\n    });\n  };\n\n\n  const tytNet = calculateTYTNet();\n  const aytNet = calculateAYTNet();\n  const obp = calculateOBP();\n\n  return (\n    <div className=\"min-h-screen bg-background transition-colors duration-300\">\n      <Header />\n      \n\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n        {/* Sayfa Başlığı */}\n        <div className=\"mb-8 text-center\">\n          <h1 className=\"text-3xl font-bold text-foreground mb-2 flex items-center justify-center\">\n            <Calculator className=\"h-8 w-8 mr-3 text-primary\" />\n            Net Hesaplama\n          </h1>\n          <p className=\"text-muted-foreground\">TYT ve AYT netlerimi burda hesaplayıp OBP'mi görebileceğim sayfa</p>\n        </div>\n\n        {/* OBP Bölümü - yukarı taşındı */}\n        <Card className=\"mb-8 shadow-xl border-purple-300 dark:border-purple-800/50 hover:shadow-2xl transition-all duration-500 ring-1 ring-purple-200 dark:ring-purple-800/30\">\n          <CardHeader className=\"bg-gradient-to-r from-purple-800 via-purple-900 to-purple-950 text-white rounded-t-lg shadow-lg\">\n            <CardTitle className=\"text-white flex items-center gap-2 text-lg\">\n              <BookOpen className=\"h-6 w-6\" />\n              Ortaöğretim Başarı Puanı (OBP)\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"diploma-notu\">Diploma Notu</Label>\n                  <Input\n                    id=\"diploma-notu\"\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"100\"\n                    value={obpData.diplomaNotu}\n                    onChange={(e) => setObpData(prev => ({...prev, diplomaNotu: parseFloat(e.target.value) || 0}))}\n                    className=\"mt-1\"\n                  />\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id=\"gecen-sene\"\n                    checked={obpData.gecenSeneYerlesti}\n                    onCheckedChange={(checked) => setObpData(prev => ({...prev, gecenSeneYerlesti: checked as boolean}))}\n                  />\n                  <Label htmlFor=\"gecen-sene\" className=\"text-sm\">\n                    Geçen Sene Bir Bölüme Yerleştim (OBP yarıya düşer)\n                  </Label>\n                </div>\n              </div>\n              <div className=\"flex items-center justify-center\">\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-purple-600\">{obp.toFixed(2)}</div>\n                  <div className=\"text-sm text-muted-foreground\">Hesaplanan OBP</div>\n                  <Progress value={(obp / 500) * 100} className=\"mt-2 w-32\" />\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\n          {/* TYT Bölümü */}\n          <Card className=\"shadow-xl border-purple-300 dark:border-purple-800/50 hover:shadow-2xl transition-all duration-500 ring-1 ring-purple-200 dark:ring-purple-800/30\">\n            <CardHeader className=\"bg-gradient-to-r from-purple-600 via-purple-700 to-purple-800 text-white rounded-t-lg shadow-lg\">\n              <CardTitle className=\"text-white flex items-center gap-2 text-lg\">\n                <Calculator className=\"h-6 w-6\" />\n                TYT Puan Hesaplama\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {Object.entries(tytData).map(([subject, data]) => {\n                const subjectDisplayName = {\n                  'Türkçe': 'Türkçe',\n                  'sosyal': 'Sosyal Bilimler',\n                  'matematik': 'Matematik',\n                  'fenBilimleri': 'Fen Bilimleri'\n                }[subject] || subject;\n                \n                const subjectIcon = {\n                  'Türkçe': <BookOpen className=\"h-4 w-4\" />,\n                  'sosyal': <Brain className=\"h-4 w-4\" />,\n                  'matematik': <BarChart2 className=\"h-4 w-4\" />,\n                  'fenBilimleri': <FlaskConical className=\"h-4 w-4\" />\n                }[subject];\n                \n                return (\n                <div key={subject} className=\"space-y-3 p-4 bg-gradient-to-r from-purple-50 to-purple-100 dark:from-purple-950/50 dark:to-purple-900/50 rounded-xl border border-purple-200 dark:border-purple-800/50 shadow-md hover:shadow-lg transition-all duration-300\">\n                  <Label className=\"text-sm font-semibold flex items-center gap-2 text-purple-700 dark:text-purple-300\">\n                    {subjectIcon}\n                    {subjectDisplayName}\n                  </Label>\n                  <div className=\"grid grid-cols-5 gap-3 items-center\">\n                    <div className=\"space-y-1\">\n                      <label className=\"text-xs font-medium text-purple-600 dark:text-purple-400\">Doğru</label>\n                      <Input\n                        type=\"number\"\n                        placeholder=\"0\"\n                        value={data.dogru}\n                        onChange={(e) => {\n                          const newValue = parseInt(e.target.value) || 0;\n                          const currentYanlis = data.yanlis;\n                          const maxValues: Record<string, number> = {\n                            'Türkçe': 40, 'sosyal': 20, 'matematik': 40, 'fenBilimleri': 20\n                          };\n                          const maxQuestions = maxValues[subject] || 40;\n                          \n                          // Doğru + Yanlış toplamı max'ı geçemesin\n                          const validatedValue = Math.min(Math.max(0, newValue), maxQuestions - currentYanlis);\n                          \n                          setTytData(prev => ({\n                            ...prev,\n                            [subject]: { ...prev[subject as keyof TYTData], dogru: validatedValue }\n                          }));\n                        }}\n                        className=\"h-12 text-center text-lg font-semibold border-purple-300 focus:border-purple-500 dark:border-purple-700 dark:focus:border-purple-400 rounded-lg bg-white dark:bg-purple-950/30 placeholder:text-purple-400 shadow-sm hover:shadow-md transition-all\"\n                        data-testid={`tyt-${subject}-dogru`}\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-center\">\n                      <div className=\"w-12 h-12 rounded-full bg-gradient-to-r from-red-400 to-pink-500 text-white flex items-center justify-center font-bold shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-110 cursor-pointer group\">\n                        <span className=\"text-xl group-hover:scale-125 transition-transform\">−</span>\n                      </div>\n                    </div>\n                    <div className=\"space-y-1\">\n                      <label className=\"text-xs font-medium text-purple-600 dark:text-purple-400\">Yanlış</label>\n                      <Input\n                        type=\"number\"\n                        placeholder=\"0\"\n                        value={data.yanlis}\n                        onChange={(e) => {\n                          const newValue = parseInt(e.target.value) || 0;\n                          const currentDogru = data.dogru;\n                          const maxValues: Record<string, number> = {\n                            'Türkçe': 40, 'sosyal': 20, 'matematik': 40, 'fenBilimleri': 20\n                          };\n                          const maxQuestions = maxValues[subject] || 40;\n                          \n                          // Doğru + Yanlış toplamı max'ı geçemesin\n                          const validatedValue = Math.min(Math.max(0, newValue), maxQuestions - currentDogru);\n                          \n                          setTytData(prev => ({\n                            ...prev,\n                            [subject]: { ...prev[subject as keyof TYTData], yanlis: validatedValue }\n                          }));\n                        }}\n                        className=\"h-12 text-center text-lg font-semibold border-purple-300 focus:border-purple-500 dark:border-purple-700 dark:focus:border-purple-400 rounded-lg bg-white dark:bg-purple-950/30 placeholder:text-purple-400 shadow-sm hover:shadow-md transition-all\"\n                        data-testid={`tyt-${subject}-yanlis`}\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-center\">\n                      <div className=\"w-12 h-12 rounded-full bg-gradient-to-r from-purple-500 to-indigo-600 text-white flex items-center justify-center font-bold shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-110 cursor-pointer group\">\n                        <span className=\"text-xl group-hover:scale-125 transition-transform\">=</span>\n                      </div>\n                    </div>\n                    <div className=\"space-y-1\">\n                      <label className=\"text-xs font-medium text-purple-600 dark:text-purple-400\">Net</label>\n                      <div className=\"h-12 flex items-center justify-center text-lg font-bold text-purple-800 dark:text-purple-200 bg-gradient-to-r from-purple-100 to-purple-200 dark:from-purple-900/60 dark:to-purple-800/60 rounded-lg border border-purple-300 dark:border-purple-700 shadow-sm\">\n                        {calculateNet(data.dogru, data.yanlis).toFixed(2)}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                );\n              })}\n              <Separator />\n              <div className=\"flex justify-between items-center pt-2\">\n                <span className=\"font-bold\">Toplam TYT Net:</span>\n                <span className=\"text-lg font-bold text-blue-600\">{tytNet.toFixed(2)}</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* AYT Bölümü */}\n          <Card className=\"shadow-xl border-purple-300 dark:border-purple-800/50 hover:shadow-2xl transition-all duration-500 ring-1 ring-purple-200 dark:ring-purple-800/30\">\n            <CardHeader className=\"bg-gradient-to-r from-purple-700 via-purple-800 to-purple-900 text-white rounded-t-lg shadow-lg\">\n              <CardTitle className=\"text-white flex items-center gap-2 text-lg\">\n                <TrendingUp className=\"h-6 w-6\" />\n                AYT Puan Hesaplama (Sayısal)\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {Object.entries(aytData).map(([subject, data]) => {\n                const subjectDisplayName = {\n                  'matematik': 'Matematik',\n                  'fizik': 'Fizik',\n                  'kimya': 'Kimya',\n                  'biyoloji': 'Biyoloji'\n                }[subject] || subject;\n                \n                const subjectIcon = {\n                  'matematik': <BarChart2 className=\"h-4 w-4\" />,\n                  'fizik': <FlaskConical className=\"h-4 w-4\" />,\n                  'kimya': <FlaskConical className=\"h-4 w-4\" />,\n                  'biyoloji': <Brain className=\"h-4 w-4\" />\n                }[subject];\n                \n                return (\n                <div key={subject} className=\"space-y-3 p-4 bg-gradient-to-r from-green-50 to-green-100 dark:from-green-950/50 dark:to-green-900/50 rounded-xl border border-green-200 dark:border-green-800/50 shadow-md hover:shadow-lg transition-all duration-300\">\n                  <Label className=\"text-sm font-semibold flex items-center gap-2 text-green-700 dark:text-green-300\">\n                    {subjectIcon}\n                    {subjectDisplayName}\n                  </Label>\n                  <div className=\"grid grid-cols-5 gap-3 items-center\">\n                    <div className=\"space-y-1\">\n                      <label className=\"text-xs font-medium text-green-600 dark:text-green-400\">Doğru</label>\n                      <Input\n                        type=\"number\"\n                        placeholder=\"0\"\n                        value={data.dogru}\n                        onChange={(e) => {\n                          const newValue = parseInt(e.target.value) || 0;\n                          const currentYanlis = data.yanlis;\n                          const maxValues: Record<string, number> = {\n                            'matematik': 40, 'fizik': 14, 'kimya': 13, 'biyoloji': 13\n                          };\n                          const maxQuestions = maxValues[subject] || 40;\n                          \n                          // Doğru + Yanlış toplamı max'ı geçemesin\n                          const validatedValue = Math.min(Math.max(0, newValue), maxQuestions - currentYanlis);\n                          \n                          setAytData(prev => ({\n                            ...prev,\n                            [subject]: { ...prev[subject as keyof AYTData], dogru: validatedValue }\n                          }));\n                        }}\n                        className=\"h-12 text-center text-lg font-semibold border-green-300 focus:border-green-500 dark:border-green-700 dark:focus:border-green-400 rounded-lg bg-white dark:bg-green-950/30 placeholder:text-green-400 shadow-sm hover:shadow-md transition-all\"\n                        data-testid={`ayt-${subject}-dogru`}\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-center\">\n                      <div className=\"w-12 h-12 rounded-full bg-gradient-to-r from-red-400 to-pink-500 text-white flex items-center justify-center font-bold shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-110 cursor-pointer group\">\n                        <span className=\"text-xl group-hover:scale-125 transition-transform\">−</span>\n                      </div>\n                    </div>\n                    <div className=\"space-y-1\">\n                      <label className=\"text-xs font-medium text-green-600 dark:text-green-400\">Yanlış</label>\n                      <Input\n                        type=\"number\"\n                        placeholder=\"0\"\n                        value={data.yanlis}\n                        onChange={(e) => {\n                          const newValue = parseInt(e.target.value) || 0;\n                          const currentDogru = data.dogru;\n                          const maxValues: Record<string, number> = {\n                            'matematik': 40, 'fizik': 14, 'kimya': 13, 'biyoloji': 13\n                          };\n                          const maxQuestions = maxValues[subject] || 40;\n                          \n                          // Doğru + Yanlış toplamı max'ı geçemesin\n                          const validatedValue = Math.min(Math.max(0, newValue), maxQuestions - currentDogru);\n                          \n                          setAytData(prev => ({\n                            ...prev,\n                            [subject]: { ...prev[subject as keyof AYTData], yanlis: validatedValue }\n                          }));\n                        }}\n                        className=\"h-12 text-center text-lg font-semibold border-green-300 focus:border-green-500 dark:border-green-700 dark:focus:border-green-400 rounded-lg bg-white dark:bg-green-950/30 placeholder:text-green-400 shadow-sm hover:shadow-md transition-all\"\n                        data-testid={`ayt-${subject}-yanlis`}\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-center\">\n                      <div className=\"w-12 h-12 rounded-full bg-gradient-to-r from-purple-500 to-indigo-600 text-white flex items-center justify-center font-bold shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-110 cursor-pointer group\">\n                        <span className=\"text-xl group-hover:scale-125 transition-transform\">=</span>\n                      </div>\n                    </div>\n                    <div className=\"space-y-1\">\n                      <label className=\"text-xs font-medium text-green-600 dark:text-green-400\">Net</label>\n                      <div className=\"h-12 flex items-center justify-center text-lg font-bold text-green-800 dark:text-green-200 bg-gradient-to-r from-green-100 to-green-200 dark:from-green-900/60 dark:to-green-800/60 rounded-lg border border-green-300 dark:border-green-700 shadow-sm\">\n                        {calculateNet(data.dogru, data.yanlis).toFixed(2)}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                );\n              })}\n              <Separator />\n              <div className=\"flex justify-between items-center pt-2\">\n                <span className=\"font-bold\">Toplam AYT Net:</span>\n                <span className=\"text-lg font-bold text-green-600\">{aytNet.toFixed(2)}</span>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Sonuçlar Özeti - büyütülmüş ve ortalanmış */}\n        <div className=\"flex justify-center\">\n          <Card className=\"mb-8 shadow-2xl border-purple-400 dark:border-purple-700/50 hover:shadow-purple-500/25 transition-all duration-500 ring-2 ring-purple-300 dark:ring-purple-800/40 w-full max-w-5xl\">\n            <CardHeader className=\"bg-gradient-to-r from-purple-600 via-purple-700 to-purple-800 text-white rounded-t-lg shadow-xl py-8\">\n              <CardTitle className=\"flex items-center justify-center text-white text-2xl\">\n                <TrendingUp className=\"h-8 w-8 mr-3\" />\n                Sonuçlar Özeti\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-8\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-10\">\n                <div className=\"text-center bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-950/50 dark:to-blue-900/50 rounded-xl p-6 border border-blue-200 dark:border-blue-800/50 shadow-lg hover:shadow-xl transition-all duration-300\">\n                  <div className=\"text-4xl font-bold text-blue-600 mb-2\">{tytNet.toFixed(2)}</div>\n                  <div className=\"text-lg font-medium text-muted-foreground mb-4\">TYT Net</div>\n                  <Progress value={(tytNet / 120) * 100} className=\"h-3\" />\n                  <div className=\"text-sm text-muted-foreground mt-2\">/ 120 sorudan</div>\n                </div>\n                <div className=\"text-center bg-gradient-to-br from-green-50 to-green-100 dark:from-green-950/50 dark:to-green-900/50 rounded-xl p-6 border border-green-200 dark:border-green-800/50 shadow-lg hover:shadow-xl transition-all duration-300\">\n                  <div className=\"text-4xl font-bold text-green-600 mb-2\">{aytNet.toFixed(2)}</div>\n                  <div className=\"text-lg font-medium text-muted-foreground mb-4\">AYT Net</div>\n                  <Progress value={(aytNet / 80) * 100} className=\"h-3\" />\n                  <div className=\"text-sm text-muted-foreground mt-2\">/ 80 sorudan</div>\n                </div>\n                <div className=\"text-center bg-gradient-to-br from-purple-50 to-purple-100 dark:from-purple-950/50 dark:to-purple-900/50 rounded-xl p-6 border border-purple-200 dark:border-purple-800/50 shadow-lg hover:shadow-xl transition-all duration-300\">\n                  <div className=\"text-4xl font-bold text-purple-600 mb-2\">{obp.toFixed(2)}</div>\n                  <div className=\"text-lg font-medium text-muted-foreground mb-4\">OBP</div>\n                  <Progress value={(obp / 500) * 100} className=\"h-3\" />\n                  <div className=\"text-sm text-muted-foreground mt-2\">/ 500 puan</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":23724},"md dosyaları/kod_aciklamasi_electron1.md":{"content":"# ELECTRON MAIN.CJS - DETAYLI KOD AÇIKLAMASI (BÖLÜM 1)\n\n**📑 Hızlı Navigasyon:** [Ana Sayfa](../replit.md) | [Talimatlar](./talimatlar.md) | [Teknik Mimari](./teknik_mimari.md) | [Client Kodu](./kod_aciklamasi_client.md) | [Server Kodu](./kod_aciklamasi_server.md) | [Shared Kodu](./kod_aciklamasi_shared.md) | [Electron Activity](./kod_aciklamasi_electron_activity.md) | [Electron Preload](./kod_aciklamasi_electron_preload.md) | [Testler](./kod_aciklamasi_testler.md)\n\n---\n\n## GENEL BAKIŞ\n\n`electron/main.cjs` dosyası, Berat Cankır YKS Analiz Takip Sistemi'nin Electron desktop uygulamasının ana işlem (main process) dosyasıdır. Bu dosya 1237 satırdan oluşur ve uygulamanın en kritik bileşenidir.\n\n**Sorumluluklar:**\n- Uygulama penceresini oluşturma ve yönetme\n- Express Node.js server'ı başlatma ve kontrol etme\n- IPC (Inter-Process Communication) ile renderer process ile iletişim\n- System tray icon ve menü yönetimi\n- Aktivite ve log kayıt sistemi\n- Veri dosyalarının güvenli yönetimi\n- Electron app lifecycle yönetimi\n\n**Dosya Yapısı:**\n```\nelectron/main.cjs\n├── Import & Dependencies (Satır 1-12)\n├── Global Variables (Satır 14-22)\n├── Environment & Config (Satır 24-99)\n├── Server Management (Satır 158-334)\n├── Window Management (Satır 457-1000)\n├── IPC Handlers (Satır 912-1050)\n├── App Lifecycle (Satır 1050-1237)\n└── Tray & Menu (Satır 700-900)\n```\n\n---\n\n## BÖLÜM 1: İMPORTLAR VE GLOBAL DEĞİŞKENLER\n\n### 1.1 Electron Modülleri\n\n```javascript\nconst { app, BrowserWindow, ipcMain, Tray, Menu, dialog, shell, screen } = require('electron');\n```\n\n**Açıklama:**\n- `app`: Electron uygulamasının lifecycle'ını kontrol eder (ready, quit, before-quit gibi eventler)\n- `BrowserWindow`: Uygulama pencereleri oluşturur (main window, logs window, activities window)\n- `ipcMain`: Renderer process'ten gelen mesajları dinler (frontend → backend iletişim)\n- `Tray`: System tray'de icon gösterir (Windows'ta sağ altta, macOS'ta üstte)\n- `Menu`: Context menu ve application menu oluşturur\n- `dialog`: Native dialog'ları gösterir (file picker, alert, confirm)\n- `shell`: İşletim sistemi shell komutlarını çalıştırır (dosya aç, link aç)\n- `screen`: Ekran bilgilerini alır (çözünürlük, boyut)\n\n**Neden bu modüller?**\nElectron desktop app için bu modüller standart ve zorunludur. Alternatif yoktur çünkü Electron API'sinin bir parçasıdırlar.\n\n### 1.2 Node.js Core Modülleri\n\n```javascript\nconst path = require('path');\nconst { spawn } = require('child_process');\nconst fs = require('fs');\n```\n\n**Açıklama:**\n- `path`: Dosya yollarını platform-agnostic şekilde oluşturur (Windows: `C:\\Users\\...`, Linux: `/home/...`)\n- `spawn`: Child process oluşturur - Express server'ı başlatmak için kullanılır\n- `fs`: Dosya sistemi işlemleri (okuma, yazma, silme, varlık kontrolü)\n\n**Güvenlik Notu:**\n`fs` kullanımı dikkatli yapılmalıdır. Tüm dosya işlemlerinde `path.join()` kullanarak path traversal saldırılarını önleriz.\n\n### 1.3 Activity Logger\n\n```javascript\nconst activityLogger = require('./activity-logger.cjs');\n```\n\n**Açıklama:**\nKullanıcı aktivitelerini loglar. Örnek aktiviteler:\n- \"Görev Eklendi\" → Başlık bilgisiyle\n- \"Deneme Sınav Kaydedildi\" → Deneme adıyla\n- \"Soru Kaydı Eklendi\" → 25 soru - Matematik\n\n**Mimari Karar:**\nActivity logger ayrı bir modül olarak tasarlandı (separation of concerns). Bu sayede:\n1. Kod daha modüler ve test edilebilir\n2. Log formatı merkezi bir yerden yönetilir\n3. İlerleye analytics eklemek kolay olur\n\n### 1.4 Global Değişkenler\n\n```javascript\nlet mainWindow = null;\nlet logsWindow = null;\nlet activitiesWindow = null;\nlet tray = null;\nlet serverProcess = null;\nconst PORT = 5000;\nlet serverLogs = [];\nlet lastClickTime = 0;\nconst DOUBLE_CLICK_THRESHOLD = 300; // 300ms for double click\n```\n\n**Detaylı Açıklama:**\n\n**mainWindow (BrowserWindow | null)**\n- Ana uygulama penceresi\n- Kullanıcının çalıştığı ana arayüz\n- React uygulaması bu pencerede render edilir\n- `null` olması pencere kapalı demektir\n\n**logsWindow (BrowserWindow | null)**\n- Server loglarını gösteren pencere\n- Developer mode için debug aracı\n- Real-time log streaming yapar\n- Electron menu'den açılır\n\n**activitiesWindow (BrowserWindow | null)**\n- Kullanıcı aktivitelerini listeleyen pencere\n- \"Ne yaptım bugün?\" sorusuna cevap verir\n- Activity logger'dan veri çeker\n\n**tray (Tray | null)**\n- System tray icon (Windows: sağ alt, macOS: üst bar)\n- Kullanıcı pencereyi kapattığında app background'da çalışır\n- Double-click ile pencere tekrar açılır\n- Sağ click ile menü gösterir\n\n**serverProcess (ChildProcess | null)**\n- Express Node.js server'ın process referansı\n- `spawn()` ile başlatılır\n- `serverProcess.kill()` ile durdurulur\n- stdout/stderr pipe'ları dinlenir\n\n**PORT (const 5000)**\n- Express server'ın dinlediği port\n- Frontend'de de aynı port kullanılır\n- Electron'da değiştirilemez (hard-coded)\n- Production modda conflict riski yok (local environment)\n\n**serverLogs (string[])**\n- Server'dan gelen tüm loglar burada saklanır\n- Maksimum 500 log (performans için)\n- `serverLogs.shift()` ile en eskisi silinir (FIFO - First In First Out)\n- Logs window bu array'i gösterir\n\n**lastClickTime & DOUBLE_CLICK_THRESHOLD**\n- Tray icon double-click detection için\n- 300ms içinde 2 click = double click\n- `Date.now() - lastClickTime < 300` kontrolü\n\n**Performans Optimizasyonu:**\nserverLogs array'i 500 ile sınırlı tutulur çünkü:\n1. Memory leak önlenir\n2. UI render hızlı kalır\n3. 500 log = yaklaşık 50 KB memory (ihmal edilebilir)\n\n---\n\n## BÖLÜM 2: .ENV DOSYASI YÜKLEME SİSTEMİ\n\n### 2.1 loadEnvFile() Fonksiyonu\n\n```javascript\nfunction loadEnvFile() {\n  const envVars = {};\n  \n  try {\n    // .env dosyasının olası konumları - DÜZELTILMIŞ SIRALAMA\n    const possiblePaths = [\n      path.join(process.cwd(), '.env'),  // İlk önce çalışma dizininde ara\n      path.join(__dirname, '..', '.env'),  // Electron klasörünün bir üstünde ara\n      path.join(__dirname, '.env'),  // Electron klasöründe ara\n      path.join(app.getPath('userData'), '.env'),\n    ];\n    \n    // Production modda resources path'i de ekle\n    if (app.isPackaged && process.resourcesPath) {\n      possiblePaths.unshift(path.join(process.resourcesPath, '.env'));\n      possiblePaths.unshift(path.join(process.resourcesPath, 'app.asar.unpacked', '.env'));\n    }\n    \n    // ...parsing logic\n  } catch (err) {\n    console.error('❌ .env dosyası yüklenirken hata:', err.message);\n  }\n  \n  return envVars;\n}\n```\n\n**Detaylı Açıklama:**\n\n**Neden .env manuel parse ediliyor?**\nElectron packaged app'lerde `dotenv` kütüphanesi doğru çalışmayabilir çünkü:\n1. ASAR arşivinde dosya yolları değişir\n2. `app.asar.unpacked` klasörü farklı path'te olabilir\n3. Development vs Production path'leri farklıdır\n\n**Path Önceliklendirme Stratejisi:**\n\n**Development Mode (isPackaged = false):**\n1. `process.cwd()/.env` → Proje root directory\n2. `__dirname/../.env` → Electron klasörünün üstü\n3. `__dirname/.env` → Electron klasörü\n4. `app.getPath('userData')/.env` → User data directory\n\n**Production Mode (isPackaged = true):**\n1. `resources/app.asar.unpacked/.env` → ASAR'dan çıkarılmış dosyalar\n2. `resources/.env` → Resources directory\n3. (Diğer fallback'ler)\n\n**Parsing Algoritması:**\n\n```javascript\nconst lines = envContent.split('\\n');\nfor (const line of lines) {\n  const trimmedLine = line.trim();\n  \n  // Boş satırları ve yorumları atla\n  if (!trimmedLine || trimmedLine.startsWith('#')) {\n    continue;\n  }\n  \n  // KEY=VALUE formatını parse et\n  const match = trimmedLine.match(/^([^=]+)=(.*)$/);\n  if (match) {\n    const key = match[1].trim();\n    let value = match[2].trim();\n    \n    // Tırnak işaretlerini kaldır\n    if ((value.startsWith('\"') && value.endsWith('\"')) || \n        (value.startsWith(\"'\") && value.endsWith(\"'\"))) {\n      value = value.slice(1, -1);\n    }\n    \n    envVars[key] = value;\n  }\n}\n```\n\n**Parsing Özellikleri:**\n1. **Yorum desteği:** `#` ile başlayan satırlar ignore edilir\n2. **Boşluk toleransı:** Başta/sonda boşluklar temizlenir\n3. **Tırnak desteği:** `KEY=\"value\"` ve `KEY='value'` desteklenir\n4. **Hata toleransı:** Hatalı satırlar atlanır, app crash'lemez\n\n**Email Yapılandırması Kontrolü:**\n\n```javascript\nif (envVars.EMAIL_USER || envVars.GMAIL_USER) {\n  console.log('✅ Email yapılandırması bulundu');\n} else {\n  console.warn('⚠️  Email yapılandırması eksik! EMAIL_USER veya GMAIL_USER bulunamadı.');\n}\n```\n\n**Neden iki farklı değişken kontrolü?**\n- `EMAIL_USER`: Nodemailer için generic SMTP\n- `GMAIL_USER`: Gmail-specific configuration\n- İkisi de desteklenir (backward compatibility)\n\n**Güvenlik Notları:**\n1. `.env` dosyası ASLA git'e commit edilmemelidir\n2. Production build'de `.env` dosyası opsiyoneldir (environment variables kullanılabilir)\n3. Secret değerler console'a log edilmez (sadece key isimleri)\n\n---\n\n## BÖLÜM 3: TEK İNSTANCE KİLİDİ (Single Instance Lock)\n\n### 3.1 Single Instance Lock Implementasyonu\n\n```javascript\nconst gotTheLock = app.requestSingleInstanceLock();\n\nif (!gotTheLock) {\n  app.quit();\n} else {\n  app.on('second-instance', (event, commandLine, workingDirectory) => {\n    // İkinci instance açılmaya çalışıldığında mevcut pencereyi göster\n    if (mainWindow) {\n      if (mainWindow.isMinimized()) mainWindow.restore();\n      if (!mainWindow.isVisible()) mainWindow.show();\n      mainWindow.focus();\n    }\n  });\n}\n```\n\n**Neden Single Instance?**\n\n**Problem:**\nKullanıcı uygulamayı 2 kere açarsa:\n- 2 ayrı Express server başlar (PORT conflict!)\n- 2 ayrı JSON dosyası yazılır (data corruption!)\n- 2 ayrı tray icon görünür (confusing UX!)\n- Memory waste: 2x RAM kullanımı\n\n**Çözüm:**\n`requestSingleInstanceLock()` ile sadece 1 instance'a izin verilir.\n\n**Davranış:**\n\n**Senaryo 1: İlk Açılış**\n1. `requestSingleInstanceLock()` çağrılır → `true` döner\n2. Uygulama normal şekilde başlar\n3. Lock sistemde tutulur\n\n**Senaryo 2: İkinci Açılış Denemesi**\n1. `requestSingleInstanceLock()` çağrılır → `false` döner\n2. `app.quit()` çalışır → 2. instance kendini kapatır\n3. İlk instance'a `second-instance` event'i tetiklenir\n4. Mevcut pencere restore edilir ve focus alır\n\n**Platform Farkları:**\n\n**Windows:**\n- Lock registry'de tutulur\n- Çok hızlı çalışır (<10ms)\n- Process arası mutex kullanır\n\n**macOS:**\n- Lock file descriptor ile yapılır\n- Native macOS behavior'ı destekler\n- Dock'ta tek icon gösterir\n\n**Linux:**\n- DBus veya lock file kullanır\n- Distribution'a göre değişir\n- Bazı durumlarda manuel cleanup gerekebilir\n\n**Edge Case: Crashed Instance**\nEğer app crash olursa lock temizlenmeyebilir. Çözüm:\n```javascript\napp.on('will-quit', () => {\n  app.releaseSingleInstanceLock(); // Explicit cleanup\n});\n```\n\n---\n\n## BÖLÜM 4: DİZİN VE DOSYA YÖNETİMİ\n\n### 4.1 ensureDirectoryExists() Fonksiyonu\n\n```javascript\nfunction ensureDirectoryExists(dirPath) {\n  try {\n    if (!fs.existsSync(dirPath)) {\n      fs.mkdirSync(dirPath, { recursive: true });\n    }\n  } catch (err) {\n    console.error('Dizin oluşturma hatası:', err);\n  }\n}\n```\n\n**Detaylı Açıklama:**\n\n**Sorumluluk:**\nBir dizinin var olduğundan emin olur. Yoksa oluşturur.\n\n**`{ recursive: true }` Neden Önemli?**\n\n**Örnek 1: Tek seviye**\n```javascript\nensureDirectoryExists('/app/data');\n// /app varsa → /app/data oluşturur\n// /app yoksa ve recursive: false → HATA!\n// /app yoksa ve recursive: true → /app ve /app/data oluşturur\n```\n\n**Örnek 2: Çok seviye**\n```javascript\nensureDirectoryExists('/app/userData/data/backups');\n// recursive: true → Tüm ara dizinleri oluşturur\n// recursive: false → Sadece son dizini oluşturur (ara dizinler yoksa hata)\n```\n\n**Try-Catch Neden Var?**\n\nOlası hatalar:\n1. **Permission denied:** User'ın yazma yetkisi yok\n2. **Disk full:** Disk dolu\n3. **Path too long:** Windows'ta path çok uzun\n4. **Invalid characters:** Path'te geçersiz karakterler\n\n**Hata Yönetimi:**\n```javascript\ncatch (err) {\n  console.error('Dizin oluşturma hatası:', err);\n  // App crash olmaz, sadece log edilir\n  // Upstream kod hata kontrolü yapabilir\n}\n```\n\n### 4.2 ensureFileExists() Fonksiyonu\n\n```javascript\nfunction ensureFileExists(filePath, defaultContent = '') {\n  try {\n    if (!fs.existsSync(filePath)) {\n      const dir = path.dirname(filePath);\n      ensureDirectoryExists(dir);\n      fs.writeFileSync(filePath, defaultContent, 'utf-8');\n    }\n  } catch (err) {\n    console.error('Dosya oluşturma hatası:', err);\n  }\n}\n```\n\n**Adım Adım Akış:**\n\n**1. Dosya varlık kontrolü**\n```javascript\nif (!fs.existsSync(filePath))\n```\n- Dosya varsa hiçbir şey yapma\n- Dosya yoksa oluştur\n\n**2. Parent dizin oluştur**\n```javascript\nconst dir = path.dirname(filePath);\nensureDirectoryExists(dir);\n```\n- `/app/data/kayitlar.json` için `/app/data` oluştur\n- Recursive dizin oluşturma\n\n**3. Dosya oluştur**\n```javascript\nfs.writeFileSync(filePath, defaultContent, 'utf-8');\n```\n- `defaultContent` parametresi opsiyonel (default: `''`)\n- `utf-8` encoding → Türkçe karakter desteği\n\n**Kullanım Örnekleri:**\n\n```javascript\n// Boş dosya oluştur\nensureFileExists('/app/data/kayitlar.json');\n\n// Default JSON ile oluştur\nensureFileExists('/app/data/kayitlar.json', JSON.stringify({\n  gorevler: [],\n  soruGunlukleri: []\n}, null, 2));\n\n// Default config ile oluştur\nensureFileExists('/app/config.json', JSON.stringify({\n  theme: 'dark',\n  language: 'tr'\n}));\n```\n\n**Güvenlik Kontrolü:**\n```javascript\n// Path traversal saldırısı önleme\nconst safePath = path.normalize(path.join(baseDir, userInput));\nif (!safePath.startsWith(baseDir)) {\n  throw new Error('Invalid path');\n}\n```\n\n---\n\n## BÖLÜM 5: NODE ENVIRONMENT VALIDATION\n\n### 5.1 validateNodeEnvironment() Fonksiyonu\n\n```javascript\nfunction validateNodeEnvironment() {\n  try {\n    const nodeVersion = process.version;\n    console.log('Node.js sürümü:', nodeVersion);\n    \n    // Gerekli dizinleri oluştur\n    const dataDir = path.join(app.getPath('userData'), 'data');\n    ensureDirectoryExists(dataDir);\n    \n    return true;\n  } catch (err) {\n    console.error('Node environment hatası:', err);\n    return false;\n  }\n}\n```\n\n**Detaylı Açıklama:**\n\n**Sorumluluk:**\nNode.js environment'ının sağlıklı olduğunu kontrol eder ve gerekli setup'ları yapar.\n\n**`process.version` Kontrolü:**\n```javascript\nconst nodeVersion = process.version; // Örn: \"v20.10.0\"\n```\n\n**Neden version kontrolü önemli?**\n- Electron, belirli Node.js versiyonu ile gelir\n- Bazı native modüller spesifik version gerektirir\n- Debug için version bilgisi önemli\n\n**userData Directory:**\n```javascript\napp.getPath('userData')\n```\n\n**Platform-specific paths:**\n\n**Windows:**\n```\nC:\\Users\\<username>\\AppData\\Roaming\\beratcankir\n```\n\n**macOS:**\n```\n/Users/<username>/Library/Application Support/beratcankir\n```\n\n**Linux:**\n```\n/home/<username>/.config/beratcankir\n```\n\n**Neden userData kullanılıyor?**\n1. **Güvenli:** User permissions var\n2. **Persistent:** Uninstall'da bile kalabilir\n3. **Standard:** OS'un önerdiği yer\n4. **Sandbox-safe:** Mac App Store kurallarına uygun\n\n**Data Directory Oluşturma:**\n```javascript\nconst dataDir = path.join(app.getPath('userData'), 'data');\nensureDirectoryExists(dataDir);\n```\n\n**Örnek:**\n```\n/Users/berat/Library/Application Support/beratcankir/data/\n├── kayitlar.json\n├── kayitlar.json.backup\n└── logs/\n```\n\n**Return Value:**\n- `true`: Her şey OK\n- `false`: Bir sorun var (app başlatılmamalı)\n\n**Hata Senaryoları:**\n1. Node.js version mismatch\n2. Disk yazma izni yok\n3. Corrupt file system\n4. Antivirus block\n\n---\n\n## BÖLÜM 6: SERVER HAZIRLIK KONTROLÜ\n\n### 6.1 checkServerReady() Fonksiyonu\n\n```javascript\nfunction checkServerReady(maxAttempts = 30) {\n  return new Promise((resolve, reject) => {\n    const http = require('http');\n    let attempts = 0;\n\n    const checkPort = () => {\n      attempts++;\n      \n      const req = http.get(`http://localhost:${PORT}`, (res) => {\n        if (res.statusCode === 200 || res.statusCode === 304) {\n          console.log(`Server hazır! (${attempts}. deneme)`);\n          resolve(true);\n        } else {\n          if (attempts < maxAttempts) {\n            setTimeout(checkPort, 500);\n          } else {\n            reject(new Error('Server başlatılamadı - zaman aşımı'));\n          }\n        }\n      });\n\n      req.on('error', () => {\n        if (attempts < maxAttempts) {\n          setTimeout(checkPort, 500);\n        } else {\n          reject(new Error('Server başlatılamadı - zaman aşımı'));\n        }\n      });\n\n      req.end();\n    };\n\n    checkPort();\n  });\n}\n```\n\n**Detaylı Akış Analizi:**\n\n**1. Promise Pattern**\n```javascript\nreturn new Promise((resolve, reject) => {\n  // Async işlem\n});\n```\nNeden Promise? Çünkü:\n- Server başlatma asynchronous\n- Caller'ın `await checkServerReady()` yapması lazım\n- Error handling için `try-catch` kullanılabilir\n\n**2. Recursive Retry Logic**\n\n```\nDeneme 1 (0ms)     → HTTP GET → ECONNREFUSED → 500ms bekle\nDeneme 2 (500ms)   → HTTP GET → ECONNREFUSED → 500ms bekle\nDeneme 3 (1000ms)  → HTTP GET → 200 OK → ✅ resolve(true)\n```\n\n**Maksimum Bekleme Süresi:**\n```javascript\nmaxAttempts = 30\ndelay = 500ms\ntotal = 30 * 500ms = 15000ms = 15 saniye\n```\n\n**3. HTTP Status Code Kontrolü**\n\n```javascript\nif (res.statusCode === 200 || res.statusCode === 304) {\n  resolve(true);\n}\n```\n\n**Neden 200 VE 304?**\n- `200 OK`: İlk request, fresh response\n- `304 Not Modified`: Cache'li response (hala sağlıklı)\n\n**İkisi de kabul edilir çünkü:**\n- Express server ayakta demektir\n- HTML/JSON dönüyor demektir\n- Routing çalışıyor demektir\n\n**4. Error Handling**\n\n```javascript\nreq.on('error', () => {\n  // Server henüz hazır değil, retry\n});\n```\n\n**Olası Hatalar:**\n- `ECONNREFUSED`: Port henüz dinlemiyor\n- `ETIMEDOUT`: Network timeout\n- `ENOTFOUND`: localhost resolve edilemiyor\n- `EPIPE`: Connection broken\n\n**5. Timeout Stratejisi**\n\n```javascript\nsetTimeout(checkPort, 500);\n```\n\n**Neden 500ms?**\n- Too fast → Gereksiz CPU kullanımı\n- Too slow → Kullanıcı bekler\n- 500ms → İyi bir balance\n\n**Production Optimization:**\nExponential backoff kullanılabilir:\n```javascript\nconst delay = Math.min(500 * Math.pow(2, attempts), 5000);\nsetTimeout(checkPort, delay);\n```\n\n**6. Başarı ve Başarısızlık**\n\n**Başarı:**\n```javascript\nconsole.log(`Server hazır! (${attempts}. deneme)`);\nresolve(true);\n```\n\n**Başarısızlık:**\n```javascript\nreject(new Error('Server başlatılamadı - zaman aşımı'));\n```\n\n**Caller'da kullanım:**\n```javascript\ntry {\n  await checkServerReady();\n  console.log('Server hazır, pencere açılabilir');\n} catch (err) {\n  console.error('Server başlatılamadı:', err);\n  // Kullanıcıya hata göster\n  dialog.showErrorBox('Hata', 'Server başlatılamadı!');\n}\n```\n\n---\n\n---\n\n## BÖLÜM 3: SERVER BAŞLATMA VE YÖNETİMİ\n\n### 3.1 startServer() Fonksiyonu\n\n**Amaç:** Express Node.js server'ı child process olarak başlatır.\n\n**İşleyiş:**\n1. `serverProcess` null ise yeni process oluşturulur\n2. `spawn('node', ['server/index.js'])` ile Node.js çalıştırılır\n3. stdout/stderr logları yakalanır ve `serverLogs` array'ine eklenir\n4. Server çökmesi (error, exit) durumlarında otomatik restart\n5. `checkServerReady()` ile port 5000'in hazır olması beklenir\n\n**Kritik Detaylar:**\n- `detached: false` → Parent process kapanınca child da kapanır\n- `stdio: ['ignore', 'pipe', 'pipe']` → stdout ve stderr pipe'lanır\n- Log buffer 500 ile sınırlı (memory leak önlemi)\n- Auto-restart mekanizması ile crash recovery\n\n### 3.2 restartServer() Fonksiyonu\n\n**Amaç:** Server'ı güvenli şekilde yeniden başlatır.\n\n**İşleyiş:**\n1. Mevcut server process varsa `serverProcess.kill()` ile durdurulur\n2. 1 saniye timeout ile process'in tamamen durması beklenir\n3. `startServer()` ile yeni process başlatılır\n4. mainWindow varsa yeniden yüklenir (`reload()`)\n\n**Kullanım Senaryoları:**\n- Kullanıcı \"Restart Server\" menü seçeneğine tıklarsa\n- Server çöktüyse (auto-restart)\n- Environment değişkenleri değiştiyse\n\n---\n\n## BÖLÜM 4: WINDOW OLUŞTURMA VE YÖNETİMİ\n\n### 4.1 createMainWindow() Fonksiyonu\n\n**Amaç:** Ana uygulama penceresini oluşturur.\n\n**Pencere Özellikleri:**\n```javascript\n{\n  width: 1280,\n  height: 800,\n  minWidth: 800,\n  minHeight: 600,\n  webPreferences: {\n    nodeIntegration: false,    // Güvenlik\n    contextIsolation: true,    // Güvenlik\n    preload: path.join(__dirname, 'preload.js')\n  },\n  icon: path.join(__dirname, 'build', 'icon.png'),\n  title: 'Berat Cankır - YKS Analiz Takip',\n  show: false  // İçerik yüklenince göster\n}\n```\n\n**Güvenlik Önlemleri:**\n- `nodeIntegration: false` → Renderer'da Node.js API'leri devre dışı\n- `contextIsolation: true` → Renderer ve preload ayrı context'ler\n- `webSecurity: true` → CORS ve güvenlik kontrolleri aktif\n\n**Event Handlers:**\n- `ready-to-show` → Pencere hazır olunca göster (flash önleme)\n- `close` → Pencere kapatılınca tray'e minimize et\n- `closed` → Window referansını null yap\n\n### 4.2 createLogsWindow() Fonksiyonu\n\n**Amaç:** Server loglarını gösteren debug penceresi oluşturur.\n\n**Özellikler:**\n- 800x600 boyutunda modal pencere\n- `parent: mainWindow` → Ana pencerenin child'ı\n- Real-time log streaming (IPC ile)\n- Auto-scroll (en yeni loglar görünür)\n\n### 4.3 createActivitiesWindow() Fonksiyonu\n\n**Amaç:** Kullanıcı aktivitelerini listeleyen pencere oluşturur.\n\n**Özellikler:**\n- Activity logger'dan veri çeker\n- Tarih bazlı filtreleme\n- Export to CSV özelliği\n\n---\n\n## BÖLÜM 5: IPC HANDLERS VE EVENT LISTENERS\n\n### 5.1 IPC (Inter-Process Communication)\n\n**IPC Nedir?**\nMain process ve renderer process arasında güvenli veri alışverişi.\n\n**İletişim Yöntemleri:**\n1. **ipcMain.handle()** → Async request-response\n2. **ipcMain.on()** → Event listener\n3. **mainWindow.webContents.send()** → Main → Renderer mesaj\n\n**Örnek Handlers:**\n\n```javascript\n// 1. Server log'larını getir\nipcMain.handle('get-server-logs', async () => {\n  return serverLogs;\n});\n\n// 2. Activity log'larını getir  \nipcMain.handle('get-activities', async () => {\n  return activityLogger.getActivities();\n});\n\n// 3. Server'ı restart et\nipcMain.handle('restart-server', async () => {\n  await restartServer();\n  return { success: true };\n});\n\n// 4. Dosya seç dialog'u\nipcMain.handle('select-file', async (event, options) => {\n  const result = await dialog.showOpenDialog(options);\n  return result.filePaths;\n});\n```\n\n### 5.2 Preload Script\n\n**Amaç:** Renderer'a sınırlı Node.js API'leri sunmak.\n\n```javascript\n// electron/preload.js\nconst { contextBridge, ipcRenderer } = require('electron');\n\ncontextBridge.exposeInMainWorld('electronAPI', {\n  getLogs: () => ipcRenderer.invoke('get-server-logs'),\n  getActivities: () => ipcRenderer.invoke('get-activities'),\n  restartServer: () => ipcRenderer.invoke('restart-server'),\n  selectFile: (options) => ipcRenderer.invoke('select-file', options)\n});\n```\n\n**Renderer'da kullanım:**\n```typescript\n// client/src/hooks/useElectron.ts\nconst logs = await window.electronAPI.getLogs();\n```\n\n---\n\n## BÖLÜM 6: TRAY ICON VE MENU SİSTEMİ\n\n### 6.1 Tray Icon Oluşturma\n\n```javascript\nfunction createTray() {\n  const iconPath = path.join(__dirname, 'build', 'tray-icon.png');\n  tray = new Tray(iconPath);\n  \n  tray.setToolTip('Berat Cankır - YKS Analiz Takip');\n  tray.setContextMenu(createTrayMenu());\n  \n  // Double-click event\n  tray.on('click', () => {\n    const now = Date.now();\n    if (now - lastClickTime < DOUBLE_CLICK_THRESHOLD) {\n      // Double click\n      if (mainWindow) {\n        mainWindow.show();\n        mainWindow.focus();\n      }\n    }\n    lastClickTime = now;\n  });\n}\n```\n\n### 6.2 Tray Menu\n\n```javascript\nfunction createTrayMenu() {\n  return Menu.buildFromTemplate([\n    {\n      label: 'Aç',\n      click: () => mainWindow?.show()\n    },\n    {\n      label: 'Server Logları',\n      click: () => createLogsWindow()\n    },\n    {\n      label: 'Aktiviteler',\n      click: () => createActivitiesWindow()\n    },\n    { type: 'separator' },\n    {\n      label: 'Server Restart',\n      click: () => restartServer()\n    },\n    { type: 'separator' },\n    {\n      label: 'Çıkış',\n      click: () => app.quit()\n    }\n  ]);\n}\n```\n\n---\n\n## BÖLÜM 7: APP LIFECYCLE VE CLEANUP\n\n### 7.1 App Ready Event\n\n```javascript\napp.whenReady().then(async () => {\n  // 1. Environment variables yükle\n  const envVars = loadEnvFile();\n  Object.assign(process.env, envVars);\n  \n  // 2. Activity logger'ı başlat\n  activityLogger.init();\n  \n  // 3. Server'ı başlat\n  await startServer();\n  \n  // 4. Server hazır olunca window oluştur\n  await checkServerReady();\n  createMainWindow();\n  \n  // 5. Tray icon oluştur\n  createTray();\n  \n  // 6. Otomatik arşivleme zamanlayıcısı\n  scheduleAutoArchive();\n});\n```\n\n### 7.2 Cleanup ve Shutdown\n\n```javascript\napp.on('before-quit', (event) => {\n  // Server'ı durdur\n  if (serverProcess) {\n    serverProcess.kill();\n    serverProcess = null;\n  }\n  \n  // Activity logger'ı flush et\n  activityLogger.flush();\n  \n  // Tray icon'u temizle\n  if (tray) {\n    tray.destroy();\n    tray = null;\n  }\n});\n\napp.on('window-all-closed', () => {\n  // macOS'ta CMD+Q ile çıkılmadıysa app açık kalır\n  if (process.platform !== 'darwin') {\n    app.quit();\n  }\n});\n\napp.on('activate', () => {\n  // macOS'ta dock icon'a tıklandığında\n  if (BrowserWindow.getAllWindows().length === 0) {\n    createMainWindow();\n  }\n});\n```\n\n### 7.3 Auto-Archive Zamanlayıcı\n\n```javascript\nfunction scheduleAutoArchive() {\n  // Her Pazar 23:59'da çalışır\n  const schedule = require('node-schedule');\n  \n  schedule.scheduleJob('59 23 * * 0', async () => {\n    console.log('📦 Otomatik arşivleme başlatılıyor...');\n    \n    try {\n      // API'ye POST /api/auto-archive çağrısı\n      const response = await fetch(`http://localhost:${PORT}/api/auto-archive`, {\n        method: 'POST'\n      });\n      \n      if (response.ok) {\n        console.log('✅ Otomatik arşivleme tamamlandı');\n        activityLogger.logActivity('Otomatik Arşivleme', 'Haftalık arşivleme yapıldı');\n      }\n    } catch (err) {\n      console.error('❌ Arşivleme hatası:', err);\n    }\n  });\n}\n```\n\n---\n\n## ÖZET VE TEKNİK DETAYLAR\n\n### Electron Main Process Sorumlulukları\n\n**1. Process Yönetimi:**\n- Express server'ı child process olarak başlatma\n- Crash detection ve auto-restart\n- Graceful shutdown\n\n**2. Window Yönetimi:**\n- Main window (1280x800)\n- Logs window (800x600)\n- Activities window (900x700)\n- Minimize to tray\n\n**3. IPC İletişimi:**\n- Server log'ları streaming\n- Activity log'ları fetching\n- File system operations\n- Dialog'lar\n\n**4. Sistem Entegrasyonu:**\n- System tray icon ve menu\n- Klavye kısayolları\n- Bildirimler\n- Auto-launch (optional)\n\n**5. Veri Yönetimi:**\n- Environment variables loading\n- Activity logging\n- Auto-archive scheduling\n\n### Güvenlik Best Practices\n\n**1. Context Isolation:**\n```javascript\nwebPreferences: {\n  contextIsolation: true,  // ✅ Renderer ve preload ayrı\n  nodeIntegration: false   // ✅ Node.js API'leri kapalı\n}\n```\n\n**2. Preload Script:**\n```javascript\n// ✅ contextBridge ile sınırlı API expose\ncontextBridge.exposeInMainWorld('api', {\n  safeFunction: () => { /* safe */ }\n});\n\n// ❌ window.require exposed (vulnerable)\n```\n\n**3. Content Security Policy:**\n```javascript\nmainWindow.webContents.session.webRequest.onHeadersReceived((details, callback) => {\n  callback({\n    responseHeaders: {\n      ...details.responseHeaders,\n      'Content-Security-Policy': [\"default-src 'self'\"]\n    }\n  });\n});\n```\n\n### Performance Optimizations\n\n**1. Log Buffer Limit:**\n```javascript\nif (serverLogs.length > 500) {\n  serverLogs.shift(); // Remove oldest\n}\n```\n\n**2. Lazy Window Creation:**\n```javascript\n// Logs window sadece gerektiğinde oluştur\nif (!logsWindow) {\n  logsWindow = new BrowserWindow({...});\n}\n```\n\n**3. Auto-Archive Scheduling:**\n```javascript\n// Haftalık arşivleme (her Pazar gece)\n// Memory kullanımını optimize eder\n```\n\n---\n\n## KAYNAKLAR VE ÖĞRENME REFERANSLARI\n\n**Electron Dokümantasyonu:**\n- [Electron Main Process](https://www.electronjs.org/docs/latest/tutorial/process-model#the-main-process)\n- [IPC Communication](https://www.electronjs.org/docs/latest/tutorial/ipc)\n- [Context Isolation](https://www.electronjs.org/docs/latest/tutorial/context-isolation)\n- [Security Best Practices](https://www.electronjs.org/docs/latest/tutorial/security)\n\n**Node.js Child Process:**\n- [child_process.spawn()](https://nodejs.org/api/child_process.html#child_processspawncommand-args-options)\n- [Process Events](https://nodejs.org/api/process.html#process-events)\n\n**Best Practices:**\n- [Electron Forge](https://www.electronforge.io/) - Build ve package tool\n- [electron-builder](https://www.electron.build/) - Installer oluşturma\n- [Spectron](https://www.electronjs.org/spectron) - E2E testing\n\n---\n\n**DOKÜMANTASYON TAMAMLANDI**\n\nBu dosya electron/main.cjs'in tüm kritik bölümlerini detaylı olarak açıkladı:\n- ✅ Import ve global değişkenler\n- ✅ Environment variable loading\n- ✅ Server başlatma ve yönetimi\n- ✅ Window oluşturma ve lifecycle\n- ✅ IPC handlers ve preload script\n- ✅ Tray icon ve menu sistemi\n- ✅ App lifecycle ve cleanup\n- ✅ Güvenlik ve performance best practices\n\n**Toplam Açıklama:** ~1100 satır detaylı dokümantasyon\n\n**Son Güncelleme:** 01 Kasım 2025\n\n","size_bytes":29721},"client/src/bilesenler/arayuz/dialog.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\n\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/kutuphane/yardimcilar\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      <DialogPrimitive.Description className=\"sr-only\">Dialog Content</DialogPrimitive.Description>\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":4064},"client/src/bilesenler/arayuz/toggle.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/kutuphane/yardimcilar\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":1643},"client/src/bilesenler/arayuz/switch.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/kutuphane/yardimcilar\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":1255},"client/src/bilesenler/arayuz/breadcrumb.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/kutuphane/yardimcilar\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":2828},"server/env-validation.ts":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nexport function validateEnvironmentVariables() {\n  const warnings: string[] = [];\n  const errors: string[] = [];\n\n  if (!process.env.OPENWEATHER_API_KEY) {\n    warnings.push('⚠️  OPENWEATHER_API_KEY ayarlanmamış. Hava durumu özelliği çalışmayacak.');\n  }\n\n  if (!process.env.EMAIL_USER) {\n    warnings.push('⚠️  EMAIL_USER ayarlanmamış. E-posta özellikleri çalışmayacak.');\n  }\n\n  if (!process.env.EMAIL_PASS) {\n    warnings.push('⚠️  EMAIL_PASS ayarlanmamış. E-posta özellikleri çalışmayacak.');\n  }\n  \n  if (!process.env.EMAIL_FROM) {\n    warnings.push('⚠️  EMAIL_FROM ayarlanmamış. E-posta özellikleri çalışmayacak.');\n  }\n\n  if (warnings.length > 0) {\n    console.log('\\n🔔 Ortam Değişkeni Uyarıları:');\n    warnings.forEach(warning => console.log(warning));\n    console.log('📝 .env.example dosyasını .env olarak kopyalayın ve değerlerinizi doldurun.\\n');\n  }\n\n  if (errors.length > 0) {\n    console.error('\\n❌ Kritik Ortam Değişkeni Hataları:');\n    errors.forEach(error => console.error(error));\n    console.error('Uygulama bu değişkenler olmadan başlatılamaz.\\n');\n    process.exit(1);\n  }\n}\n\nexport function safeGetEnv(key: string, fallback: string = ''): string {\n  const value = process.env[key];\n  return value || fallback;\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":1404},"client/vitest.setup.ts":{"content":"import '@testing-library/jest-dom'\nimport '@testing-library/jest-dom/vitest'\nimport { expect, afterEach } from 'vitest'\nimport { cleanup } from '@testing-library/react'\n\nafterEach(() => {\n  cleanup()\n})\n","size_bytes":203},"client/src/bilesenler/motivasyon-sozu.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport { useMemo, useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\n\nconst ATATURK_QUOTES = [\n  {\n    quote: \"Ey Türk gençliği! Birinci vazifen, Türk istiklalini, Türk Cumhuriyetini, ilelebet muhafaza ve müdafaa etmektir.\",\n    author: \"Mustafa Kemal Atatürk\"\n  },\n  {\n    quote: \"Gençliğe hitap ediyorum. Geleceği yarın değil, bugünden kurmaya başlamalısınız.\",\n    author: \"Mustafa Kemal Atatürk\"\n  },\n  {\n    quote: \"Çalışmak ve üretmek bütün millet fertlerine, kabiliyetleri derecesinde fırsat ve imkan hazırlayan bir hukuk sistemine dayanır.\",\n    author: \"Mustafa Kemal Atatürk\"\n  },\n  {\n    quote: \"Başarmak, elbette en büyük zevktir. Fakat benim için, başarmış olmaktan çok başarmak yolunda bulunmak daha zevklidir.\",\n    author: \"Mustafa Kemal Atatürk\"\n  },\n  {\n    quote: \"Millet için en kıymetli, en kuvvetli varlık gençliktir.\",\n    author: \"Mustafa Kemal Atatürk\"\n  },\n  {\n    quote: \"Sizler, yani yeni Türkiye'nin genç evlâtları, yorulsanız da beni izleyeceksiniz... Dinlenmemek üzere yürümeye karar verenler asla ve asla yorulmazlar. Türk gençliği gayeye, bizim yüksek idealimize durmadan, yorulmadan yürüyecektir.\",\n    author: \"Mustafa Kemal Atatürk\"\n  },\n  {\n    quote: \"Gençliğin ateşini hiçbir kuvvet söndüremez. Çünkü o, istikbalin nuru, geleceğin umudu demektir.\",\n    author: \"Mustafa Kemal Atatürk\"\n  },\n  {\n    quote: \"Başarısızlıktan yılmamak gerekir. En kötü vaziyetlerde bile ümidi asla kaybetmemelidir.\",\n    author: \"Mustafa Kemal Atatürk\"\n  },\n  {\n    quote: \"İstikbal göklerdedir. Gelin onu beraber arayalım, beraber bulalım ve Türk milletine armağan edelim.\",\n    author: \"Mustafa Kemal Atatürk\"\n  },\n  {\n    quote: \"Hayatta en hakiki mürşit ilimdir, fendir.\",\n    author: \"Mustafa Kemal Atatürk\"\n  },\n  {\n    quote: \"Gençler! Sizler her şeysiniz. Sizler, Türkiye Cumhuriyetini yaşatacak ve yükseltecek sizlersiniz.\",\n    author: \"Mustafa Kemal Atatürk\"\n  },\n  {\n    quote: \"Büyük ve parlak başarılar, ancak büyük ve sarsılmaz imanlar sayesinde elde edilir.\",\n    author: \"Mustafa Kemal Atatürk\"\n  },\n  {\n    quote: \"Bir milletin en önemli sermayesi, gençliktir.\",\n    author: \"Mustafa Kemal Atatürk\"\n  },\n  {\n    quote: \"Hayatta en hakiki mürşit ilimdir, fendir. İlim ve fennin haricinde mürşit aramak gaflettir, cehalettir, delalettir.\",\n    author: \"Mustafa Kemal Atatürk\"\n  },\n  {\n    quote: \"Eğitim, insanlık aleminin karanlıktan aydınlığa çıkmasını sağlayan tek yoldur.\",\n    author: \"Mustafa Kemal Atatürk\"\n  },\n  {\n    quote: \"İlim ve fenle alakası olmayan düşünceler, karanlıktan başka bir şey değildir.\",\n    author: \"Mustafa Kemal Atatürk\"\n  },\n  {\n    quote: \"Muhtaç olduğun kudret, damarlarındaki asil kanda mevcuttur.\",\n    author: \"Mustafa Kemal Atatürk\"\n  },\n  {\n    quote: \"Gelecek bugünden hazırlanır.\",\n    author: \"Mustafa Kemal Atatürk\"\n  },\n  {\n    quote: \"İradeniz kadarlık hedefleriniz olsun.\",\n    author: \"Mustafa Kemal Atatürk\"\n  },\n  {\n    quote: \"Benim hayatta en hakiki mürşidim, ilimdir.\",\n    author: \"Mustafa Kemal Atatürk\"\n  },\n  {\n    quote: \"Geleceğin emniyet ve selametini sağlayan tek yol, ilim ve fendir.\",\n    author: \"Mustafa Kemal Atatürk\"\n  },\n  {\n    quote: \"Büyük hayaller kurmaktan korkmayın, çünkü büyük hayaller büyük insanlar yaratır.\",\n    author: \"Mustafa Kemal Atatürk\"\n  },\n  {\n    quote: \"Türk gençliği! Birinci vazifenin Türk istiklalini, Türk Cumhuriyetini sonsuza kadar korumak ve savunmaktır.\",\n    author: \"Mustafa Kemal Atatürk\"\n  },\n  {\n    quote: \"Başarı, küçük çabaların tekrar edilmesi, gün be gün, saat be saat yapılan şeylerdir.\",\n    author: \"Robert Collier\"\n  },\n  {\n    quote: \"Eğitim geleceğin anahtarıdır. Yarın, bugün hazırlanan insanlarındır.\",\n    author: \"Malcolm X\"\n  },\n  {\n    quote: \"Başarı, hazırlanma fırsatı ile karşılaştığında ortaya çıkar.\",\n    author: \"Bobby Unser\"\n  },\n  {\n    quote: \"Öğrenme asla zihnin kapasitesini tüketmez.\",\n    author: \"Leonardo da Vinci\"\n  },\n  {\n    quote: \"Çalışkan olmak yetenekten daha önemlidir.\",\n    author: \"Tim Notke\"\n  },\n  {\n    quote: \"Başarısızlık, yeniden başlamanın daha akıllı bir yoludur.\",\n    author: \"Henry Ford\"\n  },\n  {\n    quote: \"Yarın yapmayı planladığınız şeyi bugün, bugün yapmayı planladığınız şeyi şimdi yapın.\",\n    author: \"Benjamin Franklin\"\n  },\n  {\n    quote: \"Başarı son nokta değil, başarısızlık ölümcül değil: önemli olan devam etme cesareti.\",\n    author: \"Winston Churchill\"\n  },\n  {\n    quote: \"Çalışmayan doymaz, çalışkan beklemez.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"İmkansız, sadece büyük düşünmeyenlerin sözlüğünde vardır.\",\n    author: \"Napoléon Bonaparte\"\n  },\n  {\n    quote: \"Başarının %90'ı ortaya çıkmakla ilgilidir.\",\n    author: \"Woody Allen\"\n  },\n  {\n    quote: \"Zor günler güçlü insanlar yaratır.\",\n    author: \"G. Michael Hopf\"\n  },\n  {\n    quote: \"Her gün biraz daha iyileş, her gün biraz daha öğren.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Azim ve kararlılık her engeli aşar.\",\n    author: \"Leonardo da Vinci\"\n  },\n  {\n    quote: \"Başarı, başarısızlığa rağmen devam etme yetisidir.\",\n    author: \"Charles Kettering\"\n  },\n  {\n    quote: \"Her başarı hikayesi, bir hayalle başlar.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Zorluklar seni güçlendirir, kolaylıklar seni zayıflatır.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Bugünün yorgunluğu, yarının başarısıdır.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Her problem, içinde çözümünü barındırır.\",\n    author: \"Einstein\"\n  },\n  {\n    quote: \"Çalışmayan el, bereketli olmaz.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Başarı, hazırlık ile fırsatın buluşmasıdır.\",\n    author: \"Seneca\"\n  },\n  {\n    quote: \"Çalışkan eli bereketli kılar Tanrı.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Bugünkü çabanız, gelecekteki gururunuzdur.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Zeka önemlidir ama azim daha önemlidir.\",\n    author: \"Angela Duckworth\"\n  },\n  {\n    quote: \"Kendine inan, dünya da sana inanacak.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Başarı merdiveni, eliniz cebinizde çıkılmaz.\",\n    author: \"Henry Ford\"\n  },\n  {\n    quote: \"Çaba göstermeyen kimse, zafer tadını bilemez.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Büyük hedefler, büyük cesaretler gerektirir.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Zorluklarla mücadele etmek, seni güçlendirir.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Her düşen tekrar kalkar, her kaybeden tekrar kazanır.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Çalışkan insan kaderini değiştirebilir.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Hedefe giden yolda her adım önemlidir.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Başarı, başarısızlıktan korkmamaktır.\",\n    author: \"Michael Jordan\"\n  },\n  {\n    quote: \"Çaba eden, hedefine ulaşır.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Yarının liderleri, bugünün öğrencileridir.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Her yeni bilgi, seni daha güçlü yapar.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Başarı yolunda her engel, seni daha güçlü yapar.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Bugünkü fedakarlığınız, yarınki mutluluğunuzdur.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Çalışan el dolu olur, tembel el boş kalır.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Her başarılı insanın arkasında, büyük bir çaba vardır.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Vazgeçmeyin, çünkü büyük şeyler zaman alır.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Başarı planla gelir, şansla değil.\",\n    author: \"Benjamin Franklin\"\n  },\n  {\n    quote: \"Çalışkan olmak, şanslı olmaktan daha önemlidir.\",\n    author: \"Gary Player\"\n  },\n  {\n    quote: \"Bugün atılan her adım, geleceğin temelini atar.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Cesaret eksikliği, başarının en büyük düşmanıdır.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Azim dağları yerinden oynatır.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Bugünkü eksiğiniz, yarınki eksiğiniz olmasın.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Çalışmak hayatın en büyük zevkidir.\",\n    author: \"Khalil Gibran\"\n  },\n  {\n    quote: \"Sebat eden mutlaka kazanır.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Öğrenmek, en değerli yatırımdır.\",\n    author: \"Benjamin Franklin\"\n  },\n  {\n    quote: \"Her çaba, sizi hedefe biraz daha yaklaştırır.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Başarı, kesin kararlılığın ürünüdür.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Çalışma azmi, başarının garantisidir.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Hedefine odaklan, başaracaksın.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Çaba gösterenin yolu açık olur.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Başarı, istikrarlı çalışmanın meyvesidir.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Başarı için çalışmaktan başka yol yoktur.\",\n    author: \"Thomas Edison\"\n  },\n  {\n    quote: \"Azim ile başarılmayacak hiçbir şey yoktur.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Her gün yeni bir sayfa, yeni bir şans.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Çalışkan ol, başarılı ol, mutlu ol.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Hedefiniz net olsun, çabanız sürekli olsun.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Zorluklar büyütür, kolaylıklar küçültür.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Başarı, işe odaklanmakla gelir.\",\n    author: \"Bill Gates\"\n  },\n  {\n    quote: \"Çaba sarf etmeyen, zafer tadını bilmez.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Her adım sizi hedefinize biraz daha yaklaştırır.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Başarı yolunda her günün kendine has değeri vardır.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Azimli olan, asla yenilmez.\",\n    author: \"Napoléon Bonaparte\"\n  },\n  {\n    quote: \"Çalışmanın karşılığı mutlaka alınır.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Bugün ekilen tohum, yarın hasat edilir.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Her çaba, sizi hedefe bir adım daha yaklaştırır.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Başarı sabır ister, sabır da azim.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Hedeflerinizi büyük tutun, çabalarınızı büyütün.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Çaba gösterenin yolu açılır.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Başarı, hazırlanmış olanların eseridir.\",\n    author: \"Louis Pasteur\"\n  },\n  {\n    quote: \"Her gün yeni bir fırsat, yeni bir başlangıç.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Azim, en büyük yetenektir.\",\n    author: \"Grit\"\n  },\n  {\n    quote: \"Çalışmanın meyvesi tatlıdır.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Hedefine ulaşmak isteyenin durması yasak.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Her zorluk, sizi daha güçlü yapar.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Çaba eden hiçbir zaman pişman olmaz.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Başarı, tutarlı çabanın sonucudur.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Her adım sizi zirveye biraz daha yaklaştırır.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Sebat eden, galip gelir.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Hedefleriniz kadar büyük hayaller kurun.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Başarıya giden yolda durmak yoktur.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"YKS bir maraton değil, disiplinli bir yürüyüştür. Her gün bir adım daha atın.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Bugün çözdüğünüz her soru, yarınki başarınızın tuğlasıdır.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Ders çalışmak yorucu olabilir, ama başarısızlık daha yorucudur.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Hedeflediğiniz üniversite, bugünkü çalışmanızın karşılığıdır.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Her deneme, sınavın provası değil, başarının anahtarıdır.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Matematik zor değil, sadece pratik ister. Çözdükçe kolaylaşır.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Yorgunluk geçicidir, başarı kalıcıdır.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Her yanlış konu, bir fırsat demektir. Tekrar et, öğren, başar.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Sınav günü panik yapmak için değil, hazırlığınızı göstermek içindir.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Gençliğin en güzel yatırımı, kendine yapılan eğitim yatırımıdır.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Çalışma saatleriniz az olabilir, ama veriminiz yüksek olsun.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"YKS'de başarı tesadüf değil, planın ürünüdür.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Her soru çözümü, zihninizi bir adım daha güçlendirir.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Başarısız deneme olmaz, sadece öğrenme fırsatları vardır.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Hedefiniz net, çalışmanız düzenli olsun. Başarı kendiliğinden gelir.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Bugün vazgeçerseniz, yarın pişman olursunuz. Devam edin!\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Sınav stresi değil, hazırlık eksikliği korkutur. Çalışın, rahat olun.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Her gün biraz daha ilerleyin, gerisi kendiliğinden gelir.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Disiplin, motivasyondan daha güçlüdür. Disiplinli olun.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Başarı bir gecede gelmez, ama her gece çalışarak yaklaşırsınız.\",\n    author: \"Motivasyon\"\n  }\n];\n\nexport function MotivationalQuote() {\n  // Her sayfa yüklendiğinde rastgele bir söz seç - interval yok\n  const currentQuote = useMemo(() => {\n    return ATATURK_QUOTES[Math.floor(Math.random() * ATATURK_QUOTES.length)];\n  }, []);\n\n  return (\n    <div className=\"flex items-center justify-center gap-2 flex-1\">\n      <span className=\"text-sm italic text-muted-foreground\">\n        \"{currentQuote.quote}\"\n      </span>\n      <span className=\"text-xs text-purple-600 dark:text-purple-400\">\n        — {currentQuote.author}\n      </span>\n    </div>\n  );\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":15001},"md dosyaları/kod_aciklamasi_electron_activity.md":{"content":"# ELECTRON ACTIVITY-LOGGER.CJS - DETAYLI KOD AÇIKLAMASI\n\n**📑 Hızlı Navigasyon:** [Ana Sayfa](../replit.md) | [Talimatlar](./talimatlar.md) | [Teknik Mimari](./teknik_mimari.md) | [Client Kodu](./kod_aciklamasi_client.md) | [Server Kodu](./kod_aciklamasi_server.md) | [Shared Kodu](./kod_aciklamasi_shared.md) | [Electron Main](./kod_aciklamasi_electron1.md) | [Electron Preload](./kod_aciklamasi_electron_preload.md) | [Testler](./kod_aciklamasi_testler.md)\n\n---\n\n## GİRİŞ\n\nBu doküman, Electron activity logger'ın (`electron/activity-logger.cjs`) tüm kodunu detaylı açıklar.\n\n**Dosya Konumu:** `electron/activity-logger.cjs`  \n**Amaç:** Kullanıcı aktivitelerini kaydetmek, yedeklemek ve activity window'da göstermek\n\n---\n\n## BÖLÜM 1: ACTIVITY LOGGER MİMARİSİ\n\n### 1.1 Genel Bakış\n\nActivity Logger şu görevleri yerine getirir:\n1. **Aktivite Kaydetme** - Tüm kullanıcı işlemlerini log'lar\n2. **Dosya Yönetimi** - JSON dosyasına yazar\n3. **Activity Window** - Ayrı pencerede aktiviteleri gösterir\n4. **Yedekleme** - Otomatik backup sistemi\n\n### 1.2 Aktivite Türleri\n\n```javascript\n// Server'dan gelen aktiviteler\nlogActivity('Görev Eklendi', 'Matematik Türev Çalış');\nlogActivity('Deneme Sınav Eklendi', 'TYT Deneme 5');\nlogActivity('Görev Tamamlandı', 'Fizik Konu Tekrarı');\n```\n\nHer aktivite şu bilgileri içerir:\n- `action` - Ne yapıldı?\n- `description` - Detay\n- `timestamp` - Ne zaman? (Türkiye saati)\n\n---\n\n## BÖLÜM 2: DOSYA YAPISI VE STORAGE\n\n### 2.1 Activities Dosya Konumu\n\n```javascript\nconst Store = require('electron-store');\nconst store = new Store();\nconst { app } = require('electron');\nconst fs = require('fs');\nconst path = require('path');\n\nconst ACTIVITIES_FILE = path.join(app.getPath('userData'), 'activities.json');\n```\n\n**Dosya Konumları (Platform bazlı):**\n\n| Platform | Konum |\n|----------|-------|\n| Windows | `C:\\Users\\{user}\\AppData\\Roaming\\berat-yks-analiz\\activities.json` |\n| macOS | `~/Library/Application Support/berat-yks-analiz/activities.json` |\n| Linux | `~/.config/berat-yks-analiz/activities.json` |\n\n**Neden userData?**\n```javascript\n// ✅ İYİ - userData (user writable)\napp.getPath('userData')\n\n// ❌ KÖTÜ - app path (read-only on macOS/Linux)\n__dirname\n```\n\n### 2.2 Activities Array Structure\n\n```json\n[\n  {\n    \"action\": \"Görev Eklendi\",\n    \"description\": \"Matematik Türev Çalışması\",\n    \"timestamp\": \"2025-10-30T14:30:45.123Z\"\n  },\n  {\n    \"action\": \"Soru Kaydı Eklendi\",\n    \"description\": \"TYT Matematik - 30D 5Y\",\n    \"timestamp\": \"2025-10-30T15:15:20.456Z\"\n  }\n]\n```\n\n**Array Avantajları:**\n- Kolay ekleme (push)\n- Kolay filtreleme\n- Kolay sıralama (timestamp)\n- JSON serialization kolay\n\n---\n\n## BÖLÜM 3: CORE FONKSİYONLAR\n\n### 3.1 loadActivities()\n\n```javascript\nfunction loadActivities() {\n  try {\n    if (fs.existsSync(ACTIVITIES_FILE)) {\n      const data = fs.readFileSync(ACTIVITIES_FILE, 'utf-8');\n      return JSON.parse(data);\n    }\n  } catch (error) {\n    console.error('Activities yüklenirken hata:', error);\n  }\n  return [];\n}\n```\n\n**Detaylı Açıklama:**\n\n**1. Dosya Varlık Kontrolü**\n```javascript\nif (fs.existsSync(ACTIVITIES_FILE))\n```\nEğer dosya yoksa (ilk çalıştırma), boş array döner.\n\n**2. Senkron Okuma**\n```javascript\nfs.readFileSync(ACTIVITIES_FILE, 'utf-8')\n```\n**Neden sync?**\n- Uygulama başlarken yüklenir (blocking OK)\n- Async'e gerek yok (küçük dosya)\n\n**3. Error Handling**\n```javascript\ntry { ... } catch (error) {\n  console.error('...', error);\n  return [];\n}\n```\nEğer dosya corrupt ise boş array döner (uygulama crash olmaz).\n\n**4. Return Value**\n```javascript\nreturn []; // Boş array fallback\n```\n\n### 3.2 saveActivities()\n\n```javascript\nfunction saveActivities(activities) {\n  try {\n    fs.writeFileSync(\n      ACTIVITIES_FILE,\n      JSON.stringify(activities, null, 2),\n      'utf-8'\n    );\n  } catch (error) {\n    console.error('Activities kaydedilirken hata:', error);\n  }\n}\n```\n\n**Detaylı Açıklama:**\n\n**1. JSON Formatting**\n```javascript\nJSON.stringify(activities, null, 2)\n```\n- `null` - Replacer function yok\n- `2` - Indentation 2 space (human-readable)\n\n**Örnek Çıktı:**\n```json\n[\n  {\n    \"action\": \"Görev Eklendi\",\n    \"description\": \"Test\",\n    \"timestamp\": \"2025-10-30...\"\n  }\n]\n```\n\n**vs. Compressed:**\n```json\n[{\"action\":\"Görev Eklendi\",\"description\":\"Test\",\"timestamp\":\"2025-10-30...\"}]\n```\n\n**2. Senkron Yazma**\n```javascript\nfs.writeFileSync()\n```\n**Neden sync?**\n- Veri kaybı riski yok (block edene kadar bitmeli)\n- Küçük dosya (fast)\n\n**3. Error Handling**\nDosya yazma başarısız olursa (disk full, permission error):\n- Error log edilir\n- Uygulama crash olmaz\n\n### 3.3 addActivity()\n\n```javascript\nfunction addActivity(action, description = '') {\n  const activities = loadActivities();\n  \n  const activity = {\n    action,\n    description,\n    timestamp: new Date().toLocaleString('tr-TR', {\n      day: '2-digit',\n      month: 'long',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n      timeZone: 'Europe/Istanbul'\n    })\n  };\n  \n  activities.unshift(activity); // Başa ekle\n  \n  // Limit: 1000 aktivite\n  if (activities.length > 1000) {\n    activities.pop(); // Son aktiviteyi sil\n  }\n  \n  saveActivities(activities);\n  \n  // Notify activity window\n  if (activityWindow && !activityWindow.isDestroyed()) {\n    activityWindow.webContents.send('activities-updated', activities);\n  }\n  \n  return activity;\n}\n```\n\n**Detaylı Açıklama:**\n\n**1. Timestamp Formatting**\n```javascript\nnew Date().toLocaleString('tr-TR', {\n  day: '2-digit',        // 01, 02, ..., 31\n  month: 'long',         // Ocak, Şubat, ...\n  year: 'numeric',       // 2025\n  hour: '2-digit',       // 00-23\n  minute: '2-digit',     // 00-59\n  second: '2-digit',     // 00-59\n  timeZone: 'Europe/Istanbul'  // Türkiye saati\n})\n```\n\n**Örnek Çıktı:**\n```\n30 Ekim 2025 14:30:45\n```\n\n**2. Array Beginning Insert**\n```javascript\nactivities.unshift(activity); // Başa ekle\n```\n\n**unshift() vs push():**\n| Method | Konum | Kullanım |\n|--------|-------|----------|\n| `unshift()` | Başa ekle | En yeni aktivite en üstte |\n| `push()` | Sona ekle | En yeni aktivite en altta |\n\n**Activity list'te en yeni üstte olmalı:**\n```\n[✓] 14:30 - Görev Eklendi        (NEWEST)\n[✓] 14:15 - Soru Kaydı Eklendi\n[✓] 14:00 - Deneme Sınav Eklendi (OLDEST)\n```\n\n**3. Limit Enforcement**\n```javascript\nif (activities.length > 1000) {\n  activities.pop(); // Son (en eski) aktiviteyi sil\n}\n```\n\n**Neden limit?**\n- Dosya boyutu kontrolü (1000 aktivite ≈ 100KB)\n- Performance (array iteration)\n- Memory usage\n\n**4. Activity Window Update**\n```javascript\nif (activityWindow && !activityWindow.isDestroyed()) {\n  activityWindow.webContents.send('activities-updated', activities);\n}\n```\n\n**Real-time Update:**\n- Eğer activity window açıksa\n- Hemen yeni aktivite gösterilir\n- IPC message ile renderer'a gönderilir\n\n---\n\n## BÖLÜM 4: ACTIVITY WINDOW\n\n### 4.1 createActivityWindow()\n\n```javascript\nfunction createActivityWindow() {\n  if (activityWindow && !activityWindow.isDestroyed()) {\n    activityWindow.focus();\n    return;\n  }\n  \n  activityWindow = new BrowserWindow({\n    width: 800,\n    height: 600,\n    title: 'Aktivite Geçmişi',\n    webPreferences: {\n      contextIsolation: true,\n      nodeIntegration: false,\n      preload: path.join(__dirname, 'preload.cjs')\n    }\n  });\n  \n  activityWindow.loadFile('activity.html');\n  \n  activityWindow.on('closed', () => {\n    activityWindow = null;\n  });\n}\n```\n\n**Detaylı Açıklama:**\n\n**1. Singleton Pattern**\n```javascript\nif (activityWindow && !activityWindow.isDestroyed()) {\n  activityWindow.focus();\n  return;\n}\n```\n**Neden?**\n- Aynı anda birden fazla activity window olmasın\n- Varsa focus et (ön plana getir)\n\n**2. Window Dimensions**\n```javascript\nwidth: 800,\nheight: 600,\n```\nActivity list için ideal boyut (not too big, not too small).\n\n**3. Security Settings**\n```javascript\nwebPreferences: {\n  contextIsolation: true,   // ✅ Güvenlik\n  nodeIntegration: false,   // ✅ Güvenlik\n  preload: path.join(__dirname, 'preload.cjs')\n}\n```\n\n**4. HTML Loading**\n```javascript\nactivityWindow.loadFile('activity.html');\n```\n\n**activity.html yapısı:**\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Aktivite Geçmişi</title>\n  <style>\n    /* ... styling ... */\n  </style>\n</head>\n<body>\n  <div id=\"activities-list\"></div>\n  <script>\n    window.electronAPI.onActivitiesUpdated((activities) => {\n      renderActivities(activities);\n    });\n  </script>\n</body>\n</html>\n```\n\n**5. Cleanup on Close**\n```javascript\nactivityWindow.on('closed', () => {\n  activityWindow = null;\n});\n```\nWindow kapatıldığında reference'ı temizle (memory leak önlenir).\n\n---\n\n## BÖLÜM 5: IPC HANDLERS\n\n### 5.1 get-activities\n\n```javascript\nipcMain.handle('get-activities', async () => {\n  return loadActivities();\n});\n```\n\n**Renderer kullanımı:**\n```typescript\nconst activities = await window.electronAPI.getActivities();\nconsole.log(`Toplam ${activities.length} aktivite`);\n```\n\n### 5.2 add-activity\n\n```javascript\nipcMain.handle('add-activity', async (event, action, description) => {\n  return addActivity(action, description);\n});\n```\n\n**Renderer kullanımı:**\n```typescript\nawait window.electronAPI.addActivity('Manuel Log', 'Test aktivite');\n```\n\n### 5.3 clear-activities\n\n```javascript\nipcMain.handle('clear-activities', async () => {\n  saveActivities([]);\n  return true;\n});\n```\n\n**Renderer kullanımı:**\n```typescript\nconst confirmed = confirm('Tüm aktiviteler silinecek. Emin misiniz?');\nif (confirmed) {\n  await window.electronAPI.clearActivities();\n}\n```\n\n### 5.4 export-activities\n\n```javascript\nipcMain.handle('export-activities', async () => {\n  const { dialog } = require('electron');\n  const activities = loadActivities();\n  \n  const result = await dialog.showSaveDialog({\n    title: 'Aktiviteleri Dışa Aktar',\n    defaultPath: `aktiviteler-${new Date().toISOString().split('T')[0]}.json`,\n    filters: [\n      { name: 'JSON', extensions: ['json'] }\n    ]\n  });\n  \n  if (!result.canceled) {\n    fs.writeFileSync(\n      result.filePath,\n      JSON.stringify(activities, null, 2),\n      'utf-8'\n    );\n    return { success: true, path: result.filePath };\n  }\n  \n  return { success: false };\n});\n```\n\n**Detaylı Açıklama:**\n\n**1. Default File Name**\n```javascript\ndefaultPath: `aktiviteler-${new Date().toISOString().split('T')[0]}.json`\n```\nÖrnek: `aktiviteler-2025-10-30.json`\n\n**2. File Filters**\n```javascript\nfilters: [{ name: 'JSON', extensions: ['json'] }]\n```\nSadece .json uzantılı dosyalar gösterilir.\n\n**3. Success Response**\n```javascript\nreturn { success: true, path: result.filePath };\n```\n\n**Renderer kullanımı:**\n```typescript\nconst result = await window.electronAPI.exportActivities();\nif (result.success) {\n  alert(`Aktiviteler kaydedildi: ${result.path}`);\n}\n```\n\n---\n\n## BÖLÜM 6: OTOMATIK YEDEKLEME SİSTEMİ\n\n### 6.1 Backup Schedule\n\n```javascript\nfunction scheduleBackup() {\n  // Her gün saat 00:00'da backup al\n  const now = new Date();\n  const tomorrow = new Date(now);\n  tomorrow.setDate(tomorrow.getDate() + 1);\n  tomorrow.setHours(0, 0, 0, 0);\n  \n  const msUntilMidnight = tomorrow.getTime() - now.getTime();\n  \n  setTimeout(() => {\n    backupActivities();\n    scheduleBackup(); // Recursive\n  }, msUntilMidnight);\n}\n```\n\n**Detaylı Açıklama:**\n\n**1. Next Midnight Calculation**\n```javascript\nconst tomorrow = new Date(now);\ntomorrow.setDate(tomorrow.getDate() + 1);\ntomorrow.setHours(0, 0, 0, 0);\n```\n\n**Örnek:**\n```\nŞimdi: 2025-10-30 14:30:00\nYarın gece: 2025-10-31 00:00:00\nKalan süre: 9 saat 30 dakika\n```\n\n**2. Recursive Scheduling**\n```javascript\nsetTimeout(() => {\n  backupActivities();\n  scheduleBackup(); // Bir sonraki gün için\n}, msUntilMidnight);\n```\n\nHer gün gece yarısı:\n1. Backup alınır\n2. Bir sonraki gün için schedule edilir\n3. Sonsuz loop\n\n### 6.2 backupActivities()\n\n```javascript\nfunction backupActivities() {\n  try {\n    const activities = loadActivities();\n    const backupDir = path.join(app.getPath('userData'), 'backups');\n    \n    if (!fs.existsSync(backupDir)) {\n      fs.mkdirSync(backupDir, { recursive: true });\n    }\n    \n    const timestamp = new Date().toISOString().replace(/:/g, '-').split('.')[0];\n    const backupFile = path.join(backupDir, `activities-backup-${timestamp}.json`);\n    \n    fs.writeFileSync(\n      backupFile,\n      JSON.stringify(activities, null, 2),\n      'utf-8'\n    );\n    \n    console.log(`✅ Activities backup oluşturuldu: ${backupFile}`);\n    \n    // Eski backupları temizle (30 günden eski)\n    cleanOldBackups(backupDir);\n    \n  } catch (error) {\n    console.error('❌ Backup hatası:', error);\n  }\n}\n```\n\n**Detaylı Açıklama:**\n\n**1. Backup Directory**\n```javascript\nconst backupDir = path.join(app.getPath('userData'), 'backups');\n```\nKonum: `userData/backups/`\n\n**2. Directory Creation**\n```javascript\nif (!fs.existsSync(backupDir)) {\n  fs.mkdirSync(backupDir, { recursive: true });\n}\n```\n`recursive: true` → Parent folder'lar da oluşturulur.\n\n**3. Timestamp Formatting**\n```javascript\nconst timestamp = new Date().toISOString().replace(/:/g, '-').split('.')[0];\n```\n\n**Örnek:**\n```\nISO: 2025-10-30T14:30:45.123Z\nReplace :: 2025-10-30T14-30-45.123Z\nSplit .: 2025-10-30T14-30-45\n```\n\n**Dosya adı:** `activities-backup-2025-10-30T14-30-45.json`\n\n### 6.3 cleanOldBackups()\n\n```javascript\nfunction cleanOldBackups(backupDir) {\n  try {\n    const files = fs.readdirSync(backupDir);\n    const now = Date.now();\n    const thirtyDaysMs = 30 * 24 * 60 * 60 * 1000;\n    \n    files.forEach(file => {\n      const filePath = path.join(backupDir, file);\n      const stats = fs.statSync(filePath);\n      \n      if (now - stats.mtimeMs > thirtyDaysMs) {\n        fs.unlinkSync(filePath);\n        console.log(`🗑️  Eski backup silindi: ${file}`);\n      }\n    });\n  } catch (error) {\n    console.error('Backup temizleme hatası:', error);\n  }\n}\n```\n\n**Detaylı Açıklama:**\n\n**1. 30 Gün Hesaplama**\n```javascript\nconst thirtyDaysMs = 30 * 24 * 60 * 60 * 1000;\n```\n= 2,592,000,000 ms\n\n**2. File Age Check**\n```javascript\nconst stats = fs.statSync(filePath);\nif (now - stats.mtimeMs > thirtyDaysMs) {\n  // 30 günden eski\n}\n```\n\n**mtimeMs:** Dosya son değiştirilme zamanı (milliseconds).\n\n**3. File Deletion**\n```javascript\nfs.unlinkSync(filePath);\n```\n\n**Örnek Senaryo:**\n```\nBugün: 2025-10-30\nBackup 1: activities-backup-2025-10-01.json (29 gün önce) → SAKLA\nBackup 2: activities-backup-2025-09-25.json (35 gün önce) → SİL\n```\n\n---\n\n## ÖZET\n\n**Activity Logger Özellikleri:**\n1. ✅ Aktivite kaydetme (action, description, timestamp)\n2. ✅ JSON file storage (userData/activities.json)\n3. ✅ Activity window (ayrı pencere)\n4. ✅ Real-time updates (IPC)\n5. ✅ Export aktiviteler\n6. ✅ Clear aktiviteler\n7. ✅ Otomatik backup (her gün gece yarısı)\n8. ✅ Eski backup temizleme (30 gün)\n9. ✅ 1000 aktivite limiti\n\n**Dosya Yapısı:**\n```\nuserData/\n├── activities.json           # Ana aktivite dosyası\n└── backups/                  # Backup klasörü\n    ├── activities-backup-2025-10-30T00-00-00.json\n    ├── activities-backup-2025-10-29T00-00-00.json\n    └── ...\n```\n\n**IPC API:**\n- `get-activities` → Tüm aktiviteleri getir\n- `add-activity` → Yeni aktivite ekle\n- `clear-activities` → Tüm aktiviteleri sil\n- `export-activities` → JSON export\n\n","size_bytes":15402},"client/src/stiller/compact-cards.css":{"content":"/* BERAT CANKIR */\n/* BERAT BİLAL CANKIR */\n/* CANKIR */\n\n/* Kompakt sınav kartı stilleri */\n.compact-exam-card {\n  min-height: 120px;\n  max-width: 180px;\n}\n\n.compact-exam-card:hover {\n  transform: scale(1.02);\n  transition: all 0.2s ease;\n}\n\n/* Kompakt kartlarda metin taşmasını önle */\n.compact-exam-card .truncate {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n/* BERAT CANKIR */\n/* BERAT BİLAL CANKIR */\n/* CANKIR */\n","size_bytes":457},"client/src/bilesenler/arayuz/label.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/kutuphane/yardimcilar\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":826},"drizzle.config.ts":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\n///BERATCANKIR OZEL ANALİZ TAKIP SISTEMI\n\nimport { defineConfig } from \"drizzle-kit\";\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/sema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL || \"postgresql://placeholder\",\n  },\n});\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":393},"client/src/bilesenler/arayuz/badge.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/kutuphane/yardimcilar\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":1244},"client/vitest.config.ts":{"content":"import { defineConfig } from 'vitest/config'\nimport react from '@vitejs/plugin-react'\nimport path from 'path'\n\nexport default defineConfig({\n  plugins: [react()],\n  test: {\n    name: 'client',\n    globals: true,\n    environment: 'happy-dom',\n    setupFiles: ['./vitest.setup.ts'],\n    coverage: {\n      provider: 'v8',\n      reporter: ['text', 'json', 'html'],\n      include: ['src/**/*.{ts,tsx}'],\n      exclude: [\n        'src/main.tsx',\n        'src/**/*.d.ts',\n        'src/bilesenler/arayuz/**'\n      ]\n    }\n  },\n  resolve: {\n    alias: {\n      '@': path.resolve(__dirname, './src'),\n      '@shared': path.resolve(__dirname, '../shared'),\n      '@assets': path.resolve(__dirname, '../attached_assets')\n    }\n  }\n})\n","size_bytes":721},"tailwind.config.ts":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":2860},"client/src/bilesenler/arayuz/toast.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/kutuphane/yardimcilar\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":4961},"client/src/bilesenler/arayuz/calendar.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/kutuphane/yardimcilar\"\nimport { buttonVariants } from \"@/bilesenler/arayuz/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":2815},"shared/vitest.config.ts":{"content":"import { defineConfig } from 'vitest/config'\n\nexport default defineConfig({\n  test: {\n    name: 'shared',\n    globals: true,\n    environment: 'node',\n    coverage: {\n      provider: 'v8',\n      reporter: ['text', 'json', 'html'],\n      include: ['**/*.ts'],\n      exclude: ['**/*.d.ts']\n    }\n  }\n})\n","size_bytes":300},"client/src/sayfalar/anasayfa-detay.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport { useState, useEffect, useMemo, useCallback, memo } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Header } from \"@/bilesenler/baslik\";\nimport { EnhancedWeatherWidget } from \"@/bilesenler/gelismis-hava-durumu-widget\";\nimport { CountdownWidget } from \"@/bilesenler/geri-sayim-widget\";\nimport { TodaysTasksWidget } from \"@/bilesenler/gunun-gorevleri-widget\";\nimport { Calendar, TrendingUp, Clock, ChevronLeft, ChevronRight, Mail, Zap, ChevronDown, ChevronUp, Lock, Unlock } from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { sorguIstemcisi } from \"@/kutuphane/sorguIstemcisi\";\nimport { Task, QuestionLog, ExamResult } from \"@shared/sema\";\nimport { Button } from \"@/bilesenler/arayuz/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/bilesenler/arayuz/dialog\";\nimport { Input } from \"@/bilesenler/arayuz/input\";\nimport { Textarea } from \"@/bilesenler/arayuz/textarea\";\nimport { Label } from \"@/bilesenler/arayuz/label\";\nimport { Badge } from \"@/bilesenler/arayuz/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/kutuphane/sorguIstemcisi\";\n\n// Saatli Ortalanmış Karşılama Bölümü Bileşeni - memo ile optimize edildi\nconst CenteredWelcomeSection = memo(function CenteredWelcomeSection() {\n  const [currentTime, setCurrentTime] = useState(new Date());\n  \n  // Her saniye güncelleme zamanı\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, []);\n\n  // Sakarya Serdivan (Türkiye saat dilimi) için tarih ve saat formatlama - memoize edildi\n  const { dateStr, timeStr } = useMemo(() => {\n    const options: Intl.DateTimeFormatOptions = {\n      timeZone: 'Europe/Istanbul',\n      weekday: 'long',\n      day: 'numeric', \n      month: 'long',\n      year: 'numeric'\n    };\n    \n    const timeOptions: Intl.DateTimeFormatOptions = {\n      timeZone: 'Europe/Istanbul',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n      hour12: false\n    };\n\n    const dateStr = currentTime.toLocaleDateString('tr-TR', options);\n    const timeStr = currentTime.toLocaleTimeString('tr-TR', timeOptions);\n    \n    return { dateStr, timeStr };\n  }, [currentTime]);\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Hoşgeldin Mesajı */}\n      <div className=\"space-y-2\">\n        <h1 className=\"text-5xl font-black bg-gradient-to-r from-purple-600 via-violet-700 to-black dark:from-purple-400 dark:via-violet-500 dark:to-gray-300 bg-clip-text text-transparent\">\n          Hoşgeldiniz Berat Cankır\n        </h1>\n      </div>\n      \n      {/* Ortalanmış Saat ve Saat Göstergesi */}\n      <div className=\"flex flex-col items-center space-y-6\">\n        {/* Zaman ve Saat Konteyneri - Mükemmel Ortalanmış */}\n        <div className=\"flex items-center justify-center space-x-6\">\n          {/* Geliştirilmiş Saat İkonu - Zaman ile Ortalanmış */}\n          <div className=\"relative\">\n            <div className=\"absolute inset-0 bg-gradient-to-br from-purple-500/30 via-violet-600/30 to-black/40 rounded-3xl blur-2xl animate-pulse\"></div>\n            <div className=\"relative w-20 h-20 bg-black/10 dark:bg-purple-950/20 backdrop-blur-xl border border-purple-500/20 dark:border-purple-400/20 rounded-3xl flex items-center justify-center shadow-2xl\">\n              <Clock className=\"h-12 w-12 text-purple-600 dark:text-purple-400 drop-shadow-lg\" />\n            </div>\n          </div>\n          \n          {/* Mor-Siyah Gradyanlı Geliştirilmiş Saat Göstergesi - Ortalanmış */}\n          <div className=\"text-8xl font-black bg-gradient-to-r from-purple-600 via-violet-700 to-black dark:from-purple-400 dark:via-violet-500 dark:to-gray-300 bg-clip-text text-transparent font-mono tracking-tighter drop-shadow-lg\" data-testid=\"text-time-center\">\n            {timeStr}\n          </div>\n        </div>\n        \n        {/* Stilize Tarih ve Konum - Sola Hizalı ve Ortalanmış */}\n        <div className=\"flex items-center justify-center space-x-4 text-2xl font-semibold\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-3 h-3 rounded-full bg-gradient-to-r from-purple-500 to-violet-600 shadow-lg animate-pulse\"></div>\n            <span className=\"bg-gradient-to-r from-purple-800 to-black dark:from-purple-300 dark:to-gray-200 bg-clip-text text-transparent font-bold\" data-testid=\"text-date-center\">\n              {dateStr}\n            </span>\n          </div>\n          <span className=\"text-muted-foreground/50\">•</span>\n          <div className=\"flex items-center space-x-2 text-muted-foreground\">\n            <span className=\"text-lg\">📍</span>\n            <span className=\"font-bold bg-gradient-to-r from-purple-600 to-violet-700 dark:from-purple-400 dark:to-violet-500 bg-clip-text text-transparent\">\n              Sakarya, Serdivan\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n});\n\nexport default function Homepage() {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  \n  // Bugünün tarihini YYYY-MM-DD formatında al (Türkiye saat dilimi)\n  const getTodayDateString = () => {\n    const now = new Date();\n    const turkeyTime = new Date(now.toLocaleString('en-US', { timeZone: 'Europe/Istanbul' }));\n    const year = turkeyTime.getFullYear();\n    const month = (turkeyTime.getMonth() + 1).toString().padStart(2, '0');\n    const day = turkeyTime.getDate().toString().padStart(2, '0');\n    return `${year}-${month}-${day}`;\n  };\n  \n  const [selectedDate, setSelectedDate] = useState<string>(getTodayDateString());\n  const [activityFilter, setActivityFilter] = useState<'all' | 'tasks' | 'questions' | 'exams'>('all');\n  const [showAllTasks, setShowAllTasks] = useState<boolean>(false);\n  const [expandedTasks, setExpandedTasks] = useState<Set<string>>(new Set());\n  const [isReportButtonUnlocked, setIsReportButtonUnlocked] = useState<boolean>(false);\n  const [showReportModal, setShowReportModal] = useState<boolean>(false);\n  \n  // Rapor gönderme mutation\n  const sendReportMutation = useMutation({\n    mutationFn: () => apiRequest(\"POST\", \"/api/reports/send\", {}),\n    onSuccess: () => {\n      toast({ title: \"📧 Rapor Gönderildi\", description: \"Aylık ilerleme raporunuz e-posta adresinize gönderildi.\", duration: 1500 });\n      setIsReportButtonUnlocked(false);\n      setShowReportModal(false);\n    },\n    onError: () => {\n      toast({ title: \"❌ Hata\", description: \"Rapor gönderilemedi. EMAIL ayarlarını kontrol edin.\", variant: \"destructive\", duration: 1500 });\n    },\n  });\n  \n  // Takvim navigasyonu için durum (Türkiye saat dilimi)\n  const getTurkeyDate = () => {\n    const now = new Date();\n    const turkeyTime = new Date(now.toLocaleString('en-US', { timeZone: 'Europe/Istanbul' }));\n    return turkeyTime;\n  };\n  const currentDate = getTurkeyDate();\n  const [displayYear, setDisplayYear] = useState(currentDate.getFullYear());\n  const [displayMonth, setDisplayMonth] = useState(currentDate.getMonth());\n  \n  // Türkiye saatine göre tarih güncellemesi - sadece displayYear ve displayMonth için\n  useEffect(() => {\n    const updateDisplay = () => {\n      const turkeyDate = getTurkeyDate();\n      setDisplayYear(turkeyDate.getFullYear());\n      setDisplayMonth(turkeyDate.getMonth());\n    };\n    \n    // İlk yüklemede çalıştır\n    updateDisplay();\n    \n    // Gece yarısı değişimleri için periyodik kontrol (selectedDate'i değiştirmez)\n    const interval = setInterval(updateDisplay, 60000); // 1 dakikada bir\n    \n    return () => clearInterval(interval);\n  }, []);\n  \n  // Kategori isimlerini düzgün formatta gösterecek fonksiyon\n  const getCategoryText = (category: string) => {\n    switch (category) {\n      case \"genel\":\n        return \"Genel\";\n      case \"turkce\":\n        return \"Türkçe\";\n      case \"sosyal\":\n        return \"Sosyal Bilimler\";\n      case \"matematik\":\n        return \"TYT Matematik\";\n      case \"fizik\":\n        return \"TYT Fizik\";\n      case \"kimya\":\n        return \"TYT Kimya\";\n      case \"biyoloji\":\n        return \"TYT Biyoloji\";\n      case \"tyt-geometri\":\n        return \"TYT Geometri\";\n      case \"ayt-geometri\":\n        return \"AYT Geometri\";\n      case \"ayt-matematik\":\n        return \"AYT Matematik\";\n      case \"ayt-fizik\":\n        return \"AYT Fizik\";\n      case \"ayt-kimya\":\n        return \"AYT Kimya\";\n      case \"ayt-biyoloji\":\n        return \"AYT Biyoloji\";\n      default:\n        return category;\n    }\n  };\n  \n  const [expandedQuestionLogs, setExpandedQuestionLogs] = useState<Set<string>>(new Set());\n  const [expandedExams, setExpandedExams] = useState<Set<string>>(new Set());\n\n  const { data: calendarData } = useQuery<{\n    date: string;\n    dayNumber: number;\n    daysRemaining: number;\n    tasks: Task[];\n    tasksCount: number;\n  }>({\n    queryKey: [\"/api/calendar\", selectedDate],\n    queryFn: async () => {\n      if (!selectedDate) return null;\n      const response = await fetch(`/api/calendar/${selectedDate}`);\n      if (!response.ok) throw new Error('Failed to fetch calendar data');\n      return response.json();\n    },\n    enabled: !!selectedDate,\n  });\n\n  // Aktif verileri al\n  const { data: tasks = [] } = useQuery<Task[]>({\n    queryKey: [\"/api/tasks\"],\n  });\n  \n  const { data: questionLogs = [] } = useQuery<QuestionLog[]>({\n    queryKey: [\"/api/question-logs\"],\n  });\n  \n  const { data: examResults = [] } = useQuery<ExamResult[]>({\n    queryKey: [\"/api/exam-results\"],\n  });\n\n  const { data: examSubjectNets = [] } = useQuery<any[]>({\n    queryKey: [\"/api/exam-subject-nets\"],\n  });\n\n  const { data: studyHours = [] } = useQuery<any[]>({\n    queryKey: [\"/api/study-hours\"],\n  });\n\n  // Arşivlenmiş verileri al - takvim için gerekli\n  const { data: archivedTasks = [] } = useQuery<Task[]>({\n    queryKey: [\"/api/tasks/archived\"],\n  });\n\n  const { data: archivedQuestionLogs = [] } = useQuery<QuestionLog[]>({\n    queryKey: [\"/api/question-logs/archived\"],\n  });\n\n  const { data: archivedExamResults = [] } = useQuery<ExamResult[]>({\n    queryKey: [\"/api/exam-results/archived\"],\n  });\n\n  const { data: archivedStudyHours = [] } = useQuery<any[]>({\n    queryKey: [\"/api/study-hours/archived\"],\n  });\n\n  // Takvimde gösterilmek için TÜM verileri birleştir (aktif + arşivlenmiş)\n  const allTasks = useMemo(() => [...tasks, ...archivedTasks], [tasks, archivedTasks]);\n  const allQuestionLogs = useMemo(() => [...questionLogs, ...archivedQuestionLogs], [questionLogs, archivedQuestionLogs]);\n  const allExamResults = useMemo(() => [...examResults, ...archivedExamResults], [examResults, archivedExamResults]);\n  const allStudyHours = useMemo(() => [...studyHours, ...archivedStudyHours], [studyHours, archivedStudyHours]);\n\n  // Takvim günlerini önbelleğe almak için memoize edilmiş oluşturma\n  const calendarDays = useMemo(() => {\n    const year = displayYear;\n    const month = displayMonth;\n    const firstDay = new Date(year, month, 1);\n    \n    // Pazartesi gününden başlayın (haftalık düzenlemeyi sabitleyin)\n    const startOffset = (firstDay.getDay() + 6) % 7;\n    const startDate = new Date(year, month, 1 - startOffset);\n    \n    const days = [];\n    for (let i = 0; i < 42; i++) {\n      const date = new Date(startDate);\n      date.setDate(startDate.getDate() + i);\n      days.push(date);\n    }\n    \n    return days;\n  }, [displayYear, displayMonth]);\n\n  // Güncel tarih sabitleri için karşılaştırma\n  const today = currentDate.getDate();\n  const currentMonth = currentDate.getMonth();\n  const currentYear = currentDate.getFullYear();\n\n  // Optimize edilmiş gezinme işlevleri için useCallback kullanımı\n  const navigateMonth = useCallback((direction: 'prev' | 'next') => {\n    if (direction === 'prev') {\n      setDisplayMonth(prev => prev === 0 ? 11 : prev - 1);\n      setDisplayYear(prev => displayMonth === 0 ? prev - 1 : prev);\n    } else {\n      setDisplayMonth(prev => prev === 11 ? 0 : prev + 1);\n      setDisplayYear(prev => displayMonth === 11 ? prev + 1 : prev);\n    }\n  }, [displayMonth]);\n\n  // Yeniden hesaplamayı önlemek için belleğe alınmış etkinlik kontrolü\n  const hasActivities = useCallback((date: Date) => {\n    const dateStr = `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}`;\n    \n    // Tamamlanan görevleri kontrol edin (aktif + arşivlenmiş)\n    const hasCompletedTasks = allTasks.some(task => {\n      if (!task.completedAt) return false;\n      const completedDate = new Date(task.completedAt).toISOString().split('T')[0];\n      return completedDate === dateStr;\n    });\n    \n    // Planlanmış görevleri kontrol et (due date'i olan görevler) (aktif + arşivlenmiş)\n    const hasScheduledTasks = allTasks.some(task => {\n      if (!task.dueDate) return false;\n      const taskDate = task.dueDate.split('T')[0];\n      return taskDate === dateStr;\n    });\n    \n    // Arşivlenen görevleri kontrol et\n    const hasArchivedTasks = allTasks.some(task => {\n      if (!task.archived || !task.archivedAt) return false;\n      const archivedDate = new Date(task.archivedAt).toISOString().split('T')[0];\n      return archivedDate === dateStr;\n    });\n    \n    // Soru günlüklerini kontrol et (aktif + arşivlenmiş)\n    const hasQuestionLogs = allQuestionLogs.some(log => log.study_date === dateStr);\n    \n    // Sınav sonuçlarını kontrol et (aktif + arşivlenmiş)\n    const hasExamResults = allExamResults.some(exam => exam.exam_date === dateStr);\n    \n    // Çalışma saatlerini kontrol et (aktif + arşivlenmiş)\n    const hasStudyHours = allStudyHours.some(sh => sh.study_date === dateStr);\n    \n    return hasCompletedTasks || hasScheduledTasks || hasArchivedTasks || hasQuestionLogs || hasExamResults || hasStudyHours;\n  }, [allTasks, allQuestionLogs, allExamResults, allStudyHours]);\n\n  // Belirli bir tarih için etkinlikleri al (aktif + arşivlenmiş)\n  const getActivitiesForDate = useCallback((date: Date) => {\n    const dateStr = `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}`;\n    \n    const completedTasks = allTasks.filter(task => {\n      if (!task.completedAt || task.archived) return false;\n      const completedDate = new Date(task.completedAt).toISOString().split('T')[0];\n      return completedDate === dateStr;\n    });\n    \n    const scheduledTasks = allTasks.filter(task => {\n      if (!task.dueDate || task.completedAt || task.archived) return false;\n      const taskDate = task.dueDate.split('T')[0];\n      return taskDate === dateStr;\n    });\n    \n    const archivedTasksOnThisDay = allTasks.filter(task => {\n      if (!task.archived || !task.archivedAt) return false;\n      const archivedDate = new Date(task.archivedAt).toISOString().split('T')[0];\n      return archivedDate === dateStr;\n    });\n    \n    const dayQuestionLogs = allQuestionLogs.filter(log => log.study_date === dateStr);\n    const dayExamResults = allExamResults.filter(exam => exam.exam_date === dateStr);\n    const dayStudyHours = allStudyHours.filter(sh => sh.study_date === dateStr);\n    \n    return {\n      tasks: completedTasks,\n      scheduledTasks: scheduledTasks,\n      archivedTasks: archivedTasksOnThisDay,\n      questionLogs: dayQuestionLogs,\n      examResults: dayExamResults,\n      studyHours: dayStudyHours,\n      total: completedTasks.length + scheduledTasks.length + archivedTasksOnThisDay.length + dayQuestionLogs.length + dayExamResults.length,\n      performanceTotal: completedTasks.length + dayQuestionLogs.length + dayExamResults.length\n    };\n  }, [allTasks, allQuestionLogs, allExamResults, allStudyHours]);\n\n  // Ay sonuna kadar kalan günleri hesapla\n  const getDaysUntilMonthEnd = useCallback(() => {\n    const now = new Date();\n    const lastDayOfMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0);\n    const timeDiff = lastDayOfMonth.getTime() - now.getTime();\n    const daysDiff = Math.ceil(timeDiff / (1000 * 3600 * 24));\n    return daysDiff;\n  }, []);\n\n  const handleDateClick = (date: Date) => {\n    // Düzeltme: Zaman dilimi sorunları olmadan gerçek tarihi kullanın.\n    const year = date.getFullYear();\n    const month = (date.getMonth() + 1).toString().padStart(2, '0');\n    const day = date.getDate().toString().padStart(2, '0');\n    const dateStr = `${year}-${month}-${day}`;\n    setSelectedDate(dateStr);\n  };\n\n  // Ayın sonu geri sayım (Turkey timezone)\n  useEffect(() => {\n    const updateCountdown = () => {\n      const now = new Date();\n      const turkeyTime = new Date(now.toLocaleString('en-US', { timeZone: 'Europe/Istanbul' }));\n      \n      // Ayın son günü 23:59:59\n      const endOfMonth = new Date(turkeyTime.getFullYear(), turkeyTime.getMonth() + 1, 0);\n      endOfMonth.setHours(23, 59, 59, 999);\n      \n      const diff = endOfMonth.getTime() - turkeyTime.getTime();\n      \n      const days = Math.floor(diff / (1000 * 60 * 60 * 24));\n      const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n      const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\n      const seconds = Math.floor((diff % (1000 * 60)) / 1000);\n      \n      const countdownEl = document.getElementById('month-countdown');\n      if (countdownEl) {\n        countdownEl.textContent = `${days} gün ${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;\n      }\n    };\n    \n    updateCountdown();\n    const interval = setInterval(updateCountdown, 1000);\n    \n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-background transition-colors duration-300\">\n      <Header hideClockOnHomepage={true} />\n      \n\n      {/* Saatli Ortaya Alınmış Karşılama Bölümü */}\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12 text-center\">\n        <CenteredWelcomeSection />\n      </div>\n      \n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n\n        {/* Üst Sıra - Takvim ve Bugünün Görevleri Yan Yana */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-5 gap-6 mb-6 items-stretch\">\n          {/* Modern Takvim Widget'ı - 3 sütun kaplar (biraz daha büyük) */}\n          <div className=\"lg:col-span-3 bg-gradient-to-br from-card to-card/80 rounded-2xl border border-border/50 p-4 shadow-lg backdrop-blur-sm transition-all duration-300 hover:shadow-xl h-full flex flex-col\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h3 className=\"text-xl font-bold bg-gradient-to-r from-primary to-primary/80 bg-clip-text text-transparent flex items-center\">\n                <Calendar className=\"h-5 w-5 mr-3 text-primary\" />\n                Takvim\n              </h3>\n              \n              <div className=\"flex items-center gap-2\">\n                  {/* Rapor Gönder Butonu - Sol ok butonunun solunda */}\n                  <div className=\"relative mr-2\">\n                    {/* Kilit İkonu - Red when locked, Green when unlocked */}\n                    <button\n                      onClick={() => {\n                        if (!isReportButtonUnlocked) {\n                          setIsReportButtonUnlocked(true);\n                          toast({\n                            title: \"Kilit Açıldı\",\n                            description: \"Şuana kadar yapmış olduğunuz veriyi gönderebilmek için butona tıklayın ve e-postanızda raporunuzu analiz etmeye başlayabilirsiniz\",\n                            duration: 1500,\n                          });\n                        } else {\n                          setIsReportButtonUnlocked(false);\n                          toast({\n                            title: \"Kilit Kapatıldı\",\n                            description: \"Rapor gönderme butonu kilitlendi\",\n                            duration: 1500,\n                          });\n                        }\n                      }}\n                      className={`absolute -top-2 -right-2 z-10 p-1.5 rounded-full transition-all duration-300 ${\n                        isReportButtonUnlocked \n                          ? 'bg-green-500 hover:bg-green-600' \n                          : 'bg-red-500 hover:bg-red-600'\n                      } hover:scale-110 cursor-pointer shadow-lg`}\n                      title={isReportButtonUnlocked ? \"Kilidi Kapatmak İçin Tıklayın\" : \"Kilidi Açmak İçin Tıklayın\"}\n                    >\n                      {isReportButtonUnlocked ? (\n                        <Unlock className=\"h-4 w-4 text-white\" />\n                      ) : (\n                        <Lock className=\"h-4 w-4 text-white\" />\n                      )}\n                    </button>\n                    \n                    <button\n                      onClick={() => {\n                        if (isReportButtonUnlocked) {\n                          setShowReportModal(true);\n                        }\n                      }}\n                      disabled={!isReportButtonUnlocked}\n                      className={`px-4 py-2 bg-black/20 dark:bg-gray-950/20 rounded-lg transition-all duration-300 border border-purple-500/30 backdrop-blur-sm ${\n                        isReportButtonUnlocked\n                          ? 'hover:shadow-lg hover:shadow-purple-600/50 cursor-pointer opacity-100' \n                          : 'cursor-not-allowed opacity-30'\n                      }`}\n                      style={{\n                        minWidth: '220px'\n                      }}\n                      title={isReportButtonUnlocked ? \"Rapor Gönder\" : \"Önce kilidi açın\"}\n                    >\n                      <div className=\"text-center\">\n                        <div \n                          className=\"text-sm font-bold mb-1\"\n                          style={{\n                            color: '#a855f7',\n                            textShadow: isReportButtonUnlocked ? '0 0 10px rgba(168, 85, 247, 0.6)' : 'none'\n                          }}\n                        >\n                          Rapor Gönder\n                        </div>\n                        <div \n                          className=\"text-base font-mono tabular-nums font-bold\"\n                          id=\"month-countdown\"\n                          style={{\n                            color: '#a855f7',\n                            textShadow: isReportButtonUnlocked ? '0 0 8px rgba(168, 85, 247, 0.4)' : 'none'\n                          }}\n                        >\n                          Loading...\n                        </div>\n                      </div>\n                    </button>\n                  </div>\n                  \n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => navigateMonth('prev')}\n                    className=\"h-8 w-8 p-0 hover:bg-primary/10\"\n                  >\n                    <ChevronLeft className=\"h-4 w-4\" />\n                  </Button>\n                  <div className=\"text-sm font-medium text-muted-foreground px-3 py-1 bg-muted/50 rounded-full min-w-[140px] text-center\">\n                    {new Date(displayYear, displayMonth).toLocaleDateString(\"tr-TR\", { month: \"long\", year: \"numeric\" })}\n                  </div>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => navigateMonth('next')}\n                    className=\"h-8 w-8 p-0 hover:bg-primary/10\"\n                  >\n                    <ChevronRight className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n\n            {/* Modern Takvim Izgara */}\n            <div className=\"space-y-2\">\n              {/* Hafta Başlıkları */}\n              <div className=\"grid grid-cols-7 gap-2 mb-4\">\n                {['Pzt', 'Sal', 'Çar', 'Per', 'Cum', 'Cmt', 'Paz'].map((day, index) => (\n                  <div key={day} className=\"text-center text-xs font-semibold text-muted-foreground/70 py-2\">\n                    {day}\n                  </div>\n                ))}\n              </div>\n              \n              {/* Takvim Günleri */}\n              <div className=\"grid grid-cols-7 gap-2\">\n                {calendarDays.map((date, index) => {\n                  const isCurrentMonth = date.getMonth() === displayMonth;\n                  const isToday = date.getDate() === today && isCurrentMonth && displayYear === currentYear && displayMonth === currentMonth;\n                  const year = date.getFullYear();\n                  const month_num = (date.getMonth() + 1).toString().padStart(2, '0');\n                  const day = date.getDate().toString().padStart(2, '0');\n                  const dateStr = `${year}-${month_num}-${day}`;\n                  const isSelected = selectedDate === dateStr;\n                  const dayHasActivities = hasActivities(date);\n                  \n                  return (\n                    <button\n                      key={index}\n                      onClick={() => handleDateClick(date)}\n                      className={`relative aspect-square flex flex-col items-center justify-center text-sm font-medium rounded-xl transition-all duration-200 transform hover:scale-105 ${\n                        isToday\n                          ? \"bg-gradient-to-br from-primary to-primary/80 text-primary-foreground shadow-lg shadow-primary/25 scale-105\"\n                          : isSelected\n                          ? \"bg-gradient-to-br from-accent to-accent/80 text-accent-foreground ring-2 ring-primary/50 shadow-md\"\n                          : isCurrentMonth\n                          ? \"hover:bg-gradient-to-br hover:from-secondary hover:to-secondary/80 cursor-pointer text-foreground hover:shadow-md border border-transparent hover:border-border/50\"\n                          : \"text-muted-foreground/30 cursor-pointer hover:text-muted-foreground/50\"\n                      }`}\n                      data-testid={`calendar-day-${date.getDate()}`}\n                    >\n                      <span>{date.getDate()}</span>\n                      {dayHasActivities && (\n                        <div className=\"w-1.5 h-1.5 bg-purple-500 rounded-full mt-0.5\"></div>\n                      )}\n                      {isToday && (\n                        <div className=\"absolute -top-1 -right-1 w-2 h-2 bg-amber-400 rounded-full animate-pulse\"></div>\n                      )}\n                    </button>\n                  );\n                })}\n              </div>\n            </div>\n\n\n            {/* Gelişmiş Etkileşimli Takvim Rapor Paneli */}\n            {selectedDate && (\n              <div className=\"mt-6 space-y-4 flex-1 min-h-0 overflow-y-auto custom-scrollbar\">\n                {/* Ana Tarih Bilgisi Kartı */}\n                <div className=\"p-5 bg-gradient-to-r from-muted/50 to-muted/30 rounded-xl border border-border/30 backdrop-blur-sm\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <h4 className=\"font-bold text-lg text-foreground flex items-center\">\n                      <div className=\"w-3 h-3 bg-primary rounded-full mr-2 animate-pulse\"></div>\n                      {new Date(selectedDate + 'T12:00:00').toLocaleDateString('tr-TR', { \n                        day: 'numeric', \n                        month: 'long', \n                        year: 'numeric',\n                        weekday: 'long'\n                      })}\n                    </h4>\n                    <span className=\"px-3 py-1 bg-primary/10 text-primary text-xs font-medium rounded-full\">\n                      {calendarData?.daysRemaining && calendarData.daysRemaining > 0 \n                        ? `${calendarData.daysRemaining} gün sonra` \n                        : calendarData?.daysRemaining === 0 \n                        ? \"Bugün\" \n                        : `${Math.abs(calendarData?.daysRemaining || 0)} gün önce`}\n                    </span>\n                  </div>\n                  \n                  {(() => {\n                    const selectedDateObj = new Date(selectedDate + 'T12:00:00');\n                    const today = new Date();\n                    const todayDateStr = today.toISOString().split('T')[0];\n                    \n                    const isPast = selectedDate < todayDateStr;\n                    const isToday = selectedDate === todayDateStr;\n                    const isFuture = selectedDate > todayDateStr;\n                    \n                    const activities = getActivitiesForDate(selectedDateObj);\n                    \n                    if (isPast) {\n                      // Geçmiş Tarih Raporu - KÜÇÜK popup\n                      if (activities.total === 0) {\n                        return (\n                          <div className=\"text-center py-4\">\n                            <p className=\"text-sm font-medium text-muted-foreground\">\n                              Bugün hiç aktivite yapılmamış :(\n                            </p>\n                          </div>\n                        );\n                      } else {\n                        const taskProgress = activities.tasks.length;\n                        const questionProgress = activities.questionLogs.length;\n                        const examProgress = activities.examResults.length;\n                        \n                        return (\n                          <div className=\"space-y-4\">\n                            {/* Etkinlik Özeti Kartları */}\n                            <div className=\"grid grid-cols-3 gap-3\">\n                              <div className=\"bg-green-50 dark:bg-green-950/20 border border-green-200 dark:border-green-800 rounded-lg p-3 text-center\">\n                                <div className=\"text-2xl font-bold text-green-600 dark:text-green-400\">{taskProgress}</div>\n                                <div className=\"text-xs text-green-700 dark:text-green-300\">Görev</div>\n                              </div>\n                              <div className=\"bg-blue-50 dark:bg-blue-950/20 border border-blue-200 dark:border-blue-800 rounded-lg p-3 text-center\">\n                                <div className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">{questionProgress}</div>\n                                <div className=\"text-xs text-blue-700 dark:text-blue-300\">Soru</div>\n                              </div>\n                              <div className=\"bg-purple-50 dark:bg-purple-950/20 border border-purple-200 dark:border-purple-800 rounded-lg p-3 text-center\">\n                                <div className=\"text-2xl font-bold text-purple-600 dark:text-purple-400\">{examProgress}</div>\n                                <div className=\"text-xs text-purple-700 dark:text-purple-300\">Deneme</div>\n                              </div>\n                            </div>\n\n                            {/* Toplam Aktivite İlerlemesi */}\n                            <div className=\"bg-gradient-to-r from-primary/5 to-primary/10 rounded-lg p-4 border border-primary/20\">\n                              <div className=\"flex items-center justify-between mb-2\">\n                                <span className=\"text-sm font-medium text-foreground\">Günlük Performans</span>\n                                <span className=\"text-lg font-bold text-primary\">{activities.performanceTotal}</span>\n                              </div>\n                              <div className=\"w-full bg-muted rounded-full h-2\">\n                                <div \n                                  className=\"bg-gradient-to-r from-primary to-primary/80 h-2 rounded-full transition-all duration-500\" \n                                  style={{ width: `${Math.min((activities.performanceTotal / 10) * 100, 100)}%` }}\n                                ></div>\n                              </div>\n                              <div className=\"text-xs text-muted-foreground mt-1\">\n                                {activities.performanceTotal >= 10 ? \"Müthiş bir gün! 🎉\" : activities.performanceTotal >= 5 ? \"İyi gidiyor! 👍\" : \"Daha fazla çalışabiliriz! 💪\"}\n                              </div>\n                            </div>\n                            \n                            {/* Bugünün Çalışma Saatleri */}\n                            {activities.studyHours.length > 0 && (\n                              <div className=\"bg-gradient-to-r from-cyan-500/10 to-blue-500/10 rounded-lg p-4 border border-cyan-300/30 dark:border-cyan-700/30\">\n                                <div className=\"flex items-center justify-between\">\n                                  <div className=\"flex items-center gap-2\">\n                                    <Clock className=\"h-5 w-5 text-cyan-600 dark:text-cyan-400\" />\n                                    <span className=\"text-sm font-medium text-foreground\">Bugün Çalışılan Saat</span>\n                                  </div>\n                                  <span className=\"text-lg font-bold text-cyan-600 dark:text-cyan-400\">\n                                    {(() => {\n                                      const totalSeconds = activities.studyHours.reduce((sum: number, sh: any) => {\n                                        const h = parseInt(sh.hours) || 0;\n                                        const m = parseInt(sh.minutes) || 0;\n                                        const s = parseInt(sh.seconds) || 0;\n                                        return sum + (h * 3600 + m * 60 + s);\n                                      }, 0);\n                                      const hours = Math.floor(totalSeconds / 3600);\n                                      const minutes = Math.floor((totalSeconds % 3600) / 60);\n                                      return `${hours}s ${minutes}dk`;\n                                    })()}\n                                  </span>\n                                </div>\n                              </div>\n                            )}\n\n                            {/* Detaylı Aktivite Listesi */}\n                            <div className=\"space-y-2\">\n                              <h5 className=\"font-semibold text-sm text-foreground mb-3 flex items-center\">\n                                <div className=\"w-2 h-2 bg-primary rounded-full mr-2\"></div>\n                                Aktivite Detayları\n                              </h5>\n                              \n                              {/* Filter Buttons */}\n                              <div className=\"flex gap-2 mb-3\">\n                                <button \n                                  onClick={() => setActivityFilter('all')}\n                                  className={`px-3 py-1.5 text-xs font-medium rounded-lg transition-all duration-200 ${\n                                    activityFilter === 'all' \n                                      ? 'bg-primary text-white shadow-sm' \n                                      : 'bg-muted hover:bg-muted/80 text-muted-foreground hover:text-foreground'\n                                  }`}\n                                  data-testid=\"button-filter-all\"\n                                >\n                                  Tümü\n                                </button>\n                                <button \n                                  onClick={() => setActivityFilter('tasks')}\n                                  className={`px-3 py-1.5 text-xs font-medium rounded-lg transition-all duration-200 ${\n                                    activityFilter === 'tasks' \n                                      ? 'bg-green-500 text-white shadow-sm' \n                                      : 'bg-green-50 dark:bg-green-950/20 hover:bg-green-100 dark:hover:bg-green-950/30 text-green-700 dark:text-green-300'\n                                  }`}\n                                  data-testid=\"button-filter-tasks\"\n                                >\n                                  Görev\n                                </button>\n                                <button \n                                  onClick={() => setActivityFilter('questions')}\n                                  className={`px-3 py-1.5 text-xs font-medium rounded-lg transition-all duration-200 ${\n                                    activityFilter === 'questions' \n                                      ? 'bg-blue-500 text-white shadow-sm' \n                                      : 'bg-blue-50 dark:bg-blue-950/20 hover:bg-blue-100 dark:hover:bg-blue-950/30 text-blue-700 dark:text-blue-300'\n                                  }`}\n                                  data-testid=\"button-filter-questions\"\n                                >\n                                  Soru\n                                </button>\n                                <button \n                                  onClick={() => setActivityFilter('exams')}\n                                  className={`px-3 py-1.5 text-xs font-medium rounded-lg transition-all duration-200 ${\n                                    activityFilter === 'exams' \n                                      ? 'bg-purple-500 text-white shadow-sm' \n                                      : 'bg-purple-50 dark:bg-purple-950/20 hover:bg-purple-100 dark:hover:bg-purple-950/30 text-purple-700 dark:text-purple-300'\n                                  }`}\n                                  data-testid=\"button-filter-exams\"\n                                >\n                                  Deneme\n                                </button>\n                              </div>\n                              <div className=\"space-y-2 max-h-64 overflow-y-auto custom-scrollbar\">\n                                {/* Tamamlanan görevleri göster */}\n                                {(activityFilter === 'all' || activityFilter === 'tasks') && activities.tasks.map((task: Task) => {\n                                  const isExpanded = expandedTasks.has(task.id);\n                                  return (\n                                  <div key={`${selectedDate}-completed-${task.id}`} className=\"flex flex-col gap-2 p-2 bg-green-50 dark:bg-green-950/10 rounded-lg\">\n                                    <div className=\"flex items-center justify-between\">\n                                      <div className=\"flex items-center text-sm\">\n                                        <div className=\"w-2 h-2 bg-green-500 rounded-full mr-3\"></div>\n                                        <span className=\"font-medium\">Görev:</span>\n                                        <span className=\"ml-2 text-muted-foreground\">{task.title}</span>\n                                      </div>\n                                      <div className=\"flex items-center gap-2\">\n                                        {task.deleted && (\n                                          <div className=\"text-xs text-red-600 bg-red-100 dark:bg-red-900/20 px-2 py-1 rounded-full\">\n                                            🗑️ Silindi\n                                          </div>\n                                        )}\n                                        {task.archived && (\n                                          <div className=\"text-xs text-orange-600 bg-orange-100 dark:bg-orange-900/20 px-2 py-1 rounded-full\">\n                                            📦 Arşivlendi\n                                          </div>\n                                        )}\n                                        {!task.deleted && !task.archived && (\n                                          <div className=\"text-xs text-green-600 bg-green-100 dark:bg-green-900/20 px-2 py-1 rounded-full\">\n                                            ✓ Tamamlandı\n                                          </div>\n                                        )}\n                                        <button\n                                          onClick={() => {\n                                            setExpandedTasks(prev => {\n                                              const newSet = new Set(prev);\n                                              if (newSet.has(task.id)) {\n                                                newSet.delete(task.id);\n                                              } else {\n                                                newSet.add(task.id);\n                                              }\n                                              return newSet;\n                                            });\n                                          }}\n                                          className=\"p-0.5 hover:bg-green-200 dark:hover:bg-green-900/30 rounded transition-colors\"\n                                          data-testid={`button-expand-completed-task-${task.id}`}\n                                        >\n                                          {isExpanded ? <ChevronUp className=\"h-3.5 w-3.5 text-green-700 dark:text-green-400\" /> : <ChevronDown className=\"h-3.5 w-3.5 text-green-700 dark:text-green-400\" />}\n                                        </button>\n                                      </div>\n                                    </div>\n                                    {isExpanded && (\n                                      <div className=\"mt-1 pt-2 border-t border-green-200 dark:border-green-800 space-y-1.5 text-xs\">\n                                        {task.description && (\n                                          <div className=\"flex gap-2\">\n                                            <span className=\"font-semibold text-green-700 dark:text-green-400 min-w-[65px]\">Açıklama:</span>\n                                            <span className=\"text-foreground\">{task.description}</span>\n                                          </div>\n                                        )}\n                                        <div className=\"flex gap-2\">\n                                          <span className=\"font-semibold text-green-700 dark:text-green-400 min-w-[65px]\">Ders:</span>\n                                          <span className=\"text-foreground\">{getCategoryText(task.category)}</span>\n                                        </div>\n                                        {task.dueDate && (\n                                          <div className=\"flex gap-2\">\n                                            <span className=\"font-semibold text-green-700 dark:text-green-400 min-w-[65px]\">Tarih:</span>\n                                            <span className=\"text-foreground\">{new Date(task.dueDate).toLocaleDateString('tr-TR')}</span>\n                                          </div>\n                                        )}\n                                      </div>\n                                    )}\n                                  </div>\n                                  );\n                                })}\n                                \n                                {/* Planlanmış görevleri göster */}\n                                {(activityFilter === 'all' || activityFilter === 'tasks') && activities.scheduledTasks && activities.scheduledTasks.map((task: Task) => {\n                                  const isExpanded = expandedTasks.has(`scheduled-${task.id}`);\n                                  return (\n                                  <div key={`${selectedDate}-scheduled-${task.id}`} className=\"flex flex-col gap-2 p-2 bg-gray-50 dark:bg-gray-950/10 rounded-lg\">\n                                    <div className=\"flex items-center justify-between\">\n                                      <div className=\"flex items-center text-sm\">\n                                        <div className=\"w-2 h-2 bg-gray-400 dark:bg-gray-500 rounded-full mr-3\"></div>\n                                        <span className=\"font-medium\">Görev:</span>\n                                        <span className=\"ml-2 text-muted-foreground\">{task.title}</span>\n                                      </div>\n                                      <div className=\"flex items-center gap-2\">\n                                        <div className=\"text-xs text-gray-600 bg-gray-100 dark:bg-gray-900/20 px-2 py-1 rounded-full\">\n                                          📅 Planlandı\n                                        </div>\n                                        <button\n                                          onClick={() => {\n                                            setExpandedTasks(prev => {\n                                              const newSet = new Set(prev);\n                                              const key = `scheduled-${task.id}`;\n                                              if (newSet.has(key)) {\n                                                newSet.delete(key);\n                                              } else {\n                                                newSet.add(key);\n                                              }\n                                              return newSet;\n                                            });\n                                          }}\n                                          className=\"p-0.5 hover:bg-gray-200 dark:hover:bg-gray-900/30 rounded transition-colors\"\n                                          data-testid={`button-expand-scheduled-task-${task.id}`}\n                                        >\n                                          {isExpanded ? <ChevronUp className=\"h-3.5 w-3.5 text-gray-700 dark:text-gray-400\" /> : <ChevronDown className=\"h-3.5 w-3.5 text-gray-700 dark:text-gray-400\" />}\n                                        </button>\n                                      </div>\n                                    </div>\n                                    {isExpanded && (\n                                      <div className=\"mt-1 pt-2 border-t border-gray-200 dark:border-gray-800 space-y-1.5 text-xs\">\n                                        {task.description && (\n                                          <div className=\"flex gap-2\">\n                                            <span className=\"font-semibold text-gray-700 dark:text-gray-400 min-w-[65px]\">Açıklama:</span>\n                                            <span className=\"text-foreground\">{task.description}</span>\n                                          </div>\n                                        )}\n                                        <div className=\"flex gap-2\">\n                                          <span className=\"font-semibold text-gray-700 dark:text-gray-400 min-w-[65px]\">Ders:</span>\n                                          <span className=\"text-foreground\">{getCategoryText(task.category)}</span>\n                                        </div>\n                                        {task.dueDate && (\n                                          <div className=\"flex gap-2\">\n                                            <span className=\"font-semibold text-gray-700 dark:text-gray-400 min-w-[65px]\">Tarih:</span>\n                                            <span className=\"text-foreground\">{new Date(task.dueDate).toLocaleDateString('tr-TR')}</span>\n                                          </div>\n                                        )}\n                                      </div>\n                                    )}\n                                  </div>\n                                  );\n                                })}\n                                \n                                {/* Arşivlenen görevleri göster */}\n                                {(activityFilter === 'all' || activityFilter === 'tasks') && activities.archivedTasks && activities.archivedTasks.map((task: Task) => {\n                                  const isExpanded = expandedTasks.has(`archived-${task.id}`);\n                                  return (\n                                  <div key={`${selectedDate}-archived-${task.id}`} className=\"flex flex-col gap-2 p-2 bg-orange-50 dark:bg-orange-950/10 rounded-lg border border-orange-200 dark:border-orange-800\">\n                                    <div className=\"flex items-center justify-between\">\n                                      <div className=\"flex items-center text-sm\">\n                                        <div className=\"w-2 h-2 bg-orange-500 rounded-full mr-3\"></div>\n                                        <span className=\"font-medium\">Görev:</span>\n                                        <span className=\"ml-2 text-muted-foreground\">{task.title}</span>\n                                      </div>\n                                      <div className=\"flex items-center gap-2\">\n                                        <div className=\"text-xs text-orange-600 bg-orange-100 dark:bg-orange-900/20 px-2 py-1 rounded-full\">\n                                          📦 Arşivlendi\n                                        </div>\n                                        <button\n                                          onClick={() => {\n                                            setExpandedTasks(prev => {\n                                              const newSet = new Set(prev);\n                                              const key = `archived-${task.id}`;\n                                              if (newSet.has(key)) {\n                                                newSet.delete(key);\n                                              } else {\n                                                newSet.add(key);\n                                              }\n                                              return newSet;\n                                            });\n                                          }}\n                                          className=\"p-0.5 hover:bg-orange-200 dark:hover:bg-orange-900/30 rounded transition-colors\"\n                                          data-testid={`button-expand-archived-task-${task.id}`}\n                                        >\n                                          {isExpanded ? <ChevronUp className=\"h-3.5 w-3.5 text-orange-700 dark:text-orange-400\" /> : <ChevronDown className=\"h-3.5 w-3.5 text-orange-700 dark:text-orange-400\" />}\n                                        </button>\n                                      </div>\n                                    </div>\n                                    {isExpanded && (\n                                      <div className=\"mt-1 pt-2 border-t border-orange-200 dark:border-orange-800 space-y-1.5 text-xs\">\n                                        {task.description && (\n                                          <div className=\"flex gap-2\">\n                                            <span className=\"font-semibold text-orange-700 dark:text-orange-400 min-w-[65px]\">Açıklama:</span>\n                                            <span className=\"text-foreground\">{task.description}</span>\n                                          </div>\n                                        )}\n                                        <div className=\"flex gap-2\">\n                                          <span className=\"font-semibold text-orange-700 dark:text-orange-400 min-w-[65px]\">Ders:</span>\n                                          <span className=\"text-foreground\">{getCategoryText(task.category)}</span>\n                                        </div>\n                                        {task.dueDate && (\n                                          <div className=\"flex gap-2\">\n                                            <span className=\"font-semibold text-orange-700 dark:text-orange-400 min-w-[65px]\">Tarih:</span>\n                                            <span className=\"text-foreground\">{new Date(task.dueDate).toLocaleDateString('tr-TR')}</span>\n                                          </div>\n                                        )}\n                                      </div>\n                                    )}\n                                  </div>\n                                  );\n                                })}\n                                \n                                {/* Soru günlüklerini göster */}\n                                {(activityFilter === 'all' || activityFilter === 'questions') && activities.questionLogs.map((log: QuestionLog) => {\n                                  const correct = Number(log.correct_count) || 0;\n                                  const wrong = Number(log.wrong_count) || 0;\n                                  const blank = Number(log.blank_count) || 0;\n                                  const net = correct - (wrong * 0.25);\n                                  const isExpanded = expandedQuestionLogs.has(log.id);\n                                  \n                                  return (\n                                    <div key={log.id} className=\"flex flex-col gap-2 p-2 bg-blue-50 dark:bg-blue-950/10 rounded-lg\">\n                                      <div className=\"flex items-center justify-between\">\n                                        <div className=\"flex items-center text-sm\">\n                                          <div className=\"w-2 h-2 bg-blue-500 rounded-full mr-3\"></div>\n                                          <span className=\"font-medium\">Soru:</span>\n                                          <span className=\"ml-2 text-muted-foreground\">\n                                            {[log.exam_type, log.subject].filter(Boolean).join(' ') || 'Soru Çözümü'}\n                                          </span>\n                                        </div>\n                                        <div className=\"flex items-center gap-1 text-xs\">\n                                          <div className=\"bg-green-100 dark:bg-green-900/20 text-green-700 dark:text-green-300 px-2 py-1 rounded-full font-semibold\">\n                                            ✓ {correct}\n                                          </div>\n                                          <div \n                                            className=\"bg-red-100 dark:bg-red-900/20 text-red-700 dark:text-red-300 px-2 py-1 rounded-full cursor-pointer hover:bg-red-200 dark:hover:bg-red-800/30 transition-colors font-semibold\"\n                                            onClick={() => {\n                                              setExpandedQuestionLogs(prev => {\n                                                const newSet = new Set(prev);\n                                                if (newSet.has(log.id)) {\n                                                  newSet.delete(log.id);\n                                                } else {\n                                                  newSet.add(log.id);\n                                                }\n                                                return newSet;\n                                              });\n                                            }}\n                                          >\n                                            ✗ {wrong}\n                                          </div>\n                                          <div className=\"bg-gray-100 dark:bg-gray-900/20 text-gray-700 dark:text-gray-300 px-2 py-1 rounded-full font-semibold\">\n                                            ○ {blank}\n                                          </div>\n                                          <div className=\"bg-blue-100 dark:bg-blue-900/20 text-blue-700 dark:text-blue-300 px-2 py-1 rounded-full font-bold\">\n                                            Net: {net.toFixed(2)}\n                                          </div>\n                                        </div>\n                                      </div>\n                                      {isExpanded && log.wrong_topics && (typeof log.wrong_topics === 'string' ? JSON.parse(log.wrong_topics) : log.wrong_topics).length > 0 && (\n                                        <div className=\"mt-1 pt-2 border-t border-blue-200 dark:border-blue-800 animate-in slide-in-from-top-2\">\n                                          <div className=\"text-xs font-semibold text-red-600 dark:text-red-400 mb-1\">❌ Yanlış Konular:</div>\n                                          <div className=\"flex flex-wrap gap-1\">\n                                            {(() => {\n                                              try {\n                                                const topics = typeof log.wrong_topics === 'string' ? JSON.parse(log.wrong_topics) : log.wrong_topics;\n                                                return Array.isArray(topics) ? topics.map((topic: any, idx: number) => {\n                                                  const topicName = typeof topic === 'string' ? topic : (topic.topic || topic.name || '');\n                                                  return topicName ? (\n                                                    <span key={idx} className=\"text-xs px-2 py-0.5 bg-red-100 text-red-700 dark:bg-red-900/30 dark:text-red-300 rounded-full\">\n                                                      {topicName}\n                                                    </span>\n                                                  ) : null;\n                                                }) : null;\n                                              } catch (e) {\n                                                return null;\n                                              }\n                                            })()}\n                                          </div>\n                                        </div>\n                                      )}\n                                    </div>\n                                  );\n                                })}\n                                \n                                {/* Sınav sonuçlarını göster */}\n                                {(activityFilter === 'all' || activityFilter === 'exams') && activities.examResults.map((exam: ExamResult) => {\n                                  const isExpanded = expandedExams.has(exam.id);\n                                  const examSubjects = examSubjectNets.filter((subjectNet: any) => subjectNet.exam_id === exam.id);\n                                  const totalWrong = examSubjects.reduce((sum: number, subjectNet: any) => sum + (parseInt(subjectNet.wrong_count) || 0), 0);\n                                  \n                                  return (\n                                    <div key={exam.id} className=\"flex flex-col gap-2 p-2 bg-purple-50 dark:bg-purple-950/10 rounded-lg\">\n                                      <div className=\"flex items-center justify-between\">\n                                        <div className=\"flex items-center text-sm\">\n                                          <div className=\"w-2 h-2 bg-purple-500 rounded-full mr-3\"></div>\n                                          <span className=\"font-medium\">{exam.exam_scope === 'branch' ? 'Branş Denemesi:' : 'Genel Deneme:'}</span>\n                                          <span className=\"ml-2 text-muted-foreground\">{typeof (exam.display_name || exam.exam_name) === 'string' ? (exam.display_name || exam.exam_name) : 'Deneme'}</span>\n                                        </div>\n                                        <div className=\"flex items-center gap-1 text-xs\">\n                                          {totalWrong > 0 && (\n                                            <div \n                                              className=\"bg-red-100 dark:bg-red-900/20 text-red-700 dark:text-red-300 px-2 py-1 rounded-full cursor-pointer hover:bg-red-200 dark:hover:bg-red-800/30 transition-colors font-semibold\"\n                                              onClick={() => {\n                                                setExpandedExams(prev => {\n                                                  const newSet = new Set(prev);\n                                                  if (newSet.has(exam.id)) {\n                                                    newSet.delete(exam.id);\n                                                  } else {\n                                                    newSet.add(exam.id);\n                                                  }\n                                                  return newSet;\n                                                });\n                                              }}\n                                            >\n                                              ✗ {totalWrong}\n                                            </div>\n                                          )}\n                                          <div className=\"text-xs text-purple-600 bg-purple-100 dark:bg-purple-900/20 px-2 py-1 rounded-full\">\n                                            {exam.exam_type === 'TYT' ? (\n                                              `TYT: ${exam.tyt_net}`\n                                            ) : exam.exam_type === 'AYT' ? (\n                                              `AYT: ${exam.ayt_net}`\n                                            ) : (\n                                              `Net: ${parseFloat(exam.tyt_net) > 0 ? exam.tyt_net : exam.ayt_net}`\n                                            )}\n                                          </div>\n                                        </div>\n                                      </div>\n                                      {isExpanded && (\n                                        <div className=\"mt-1 pt-2 border-t border-purple-200 dark:border-purple-800 animate-in slide-in-from-top-2\">\n                                          <div className=\"text-xs font-semibold text-red-600 dark:text-red-400 mb-1\">❌ Yanlış Konular:</div>\n                                          <div className=\"flex flex-wrap gap-1\">\n                                            {examSubjects.map((subjectNet: any, idx: number) => {\n                                              if (!subjectNet.wrong_topics_json) return null;\n                                              try {\n                                                const wrongTopics = JSON.parse(subjectNet.wrong_topics_json);\n                                                if (!Array.isArray(wrongTopics) || wrongTopics.length === 0) return null;\n                                                return wrongTopics.map((topic: any, topicIdx: number) => {\n                                                  const topicName = typeof topic === 'string' ? topic : (topic.topic || topic.name || '');\n                                                  return topicName ? (\n                                                    <span key={`${idx}-${topicIdx}`} className=\"text-xs px-2 py-0.5 bg-red-100 text-red-700 dark:bg-red-900/30 dark:text-red-300 rounded-full\">\n                                                      {topicName}\n                                                    </span>\n                                                  ) : null;\n                                                });\n                                              } catch (e) {\n                                                return null;\n                                              }\n                                            })}\n                                          </div>\n                                        </div>\n                                      )}\n                                    </div>\n                                  );\n                                })}\n                              </div>\n                            </div>\n                          </div>\n                        );\n                      }\n                    } else if (isToday) {\n                      // Bugün - özel durum\n                      if (activities.total === 0) {\n                        return (\n                          <div className=\"text-center py-8\">\n                            <div className=\"w-16 h-16 mx-auto mb-4 bg-muted/50 rounded-full flex items-center justify-center\">\n                              <TrendingUp className=\"h-8 w-8 text-muted-foreground/50\" />\n                            </div>\n                            <p className=\"text-lg font-medium text-muted-foreground\">\n                              Bugün henüz hiçbir aktivite yapılmadı.\n                            </p>\n                          </div>\n                        );\n                      } else {\n                        // Bugün için aktivite varsa normal göster\n                        const taskProgress = activities.tasks.length;\n                        const questionProgress = activities.questionLogs.length;\n                        const examProgress = activities.examResults.length;\n                        \n                        return (\n                          <div className=\"space-y-4\">\n                            {/* Etkinlik Özeti Kartları */}\n                            <div className=\"grid grid-cols-3 gap-3\">\n                              <div className=\"bg-green-50 dark:bg-green-950/20 border border-green-200 dark:border-green-800 rounded-lg p-3 text-center\">\n                                <div className=\"text-2xl font-bold text-green-600 dark:text-green-400\">{taskProgress}</div>\n                                <div className=\"text-xs text-green-700 dark:text-green-300\">Görev</div>\n                              </div>\n                              <div className=\"bg-blue-50 dark:bg-blue-950/20 border border-blue-200 dark:border-blue-800 rounded-lg p-3 text-center\">\n                                <div className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">{questionProgress}</div>\n                                <div className=\"text-xs text-blue-700 dark:text-blue-300\">Soru</div>\n                              </div>\n                              <div className=\"bg-purple-50 dark:bg-purple-950/20 border border-purple-200 dark:border-purple-800 rounded-lg p-3 text-center\">\n                                <div className=\"text-2xl font-bold text-purple-600 dark:text-purple-400\">{examProgress}</div>\n                                <div className=\"text-xs text-purple-700 dark:text-purple-300\">Deneme</div>\n                              </div>\n                            </div>\n\n                            {/* Toplam Aktivite İlerlemesi */}\n                            <div className=\"bg-gradient-to-r from-primary/5 to-primary/10 rounded-lg p-4 border border-primary/20\">\n                              <div className=\"flex items-center justify-between mb-2\">\n                                <span className=\"text-sm font-medium text-foreground\">Günlük Performans</span>\n                                <span className=\"text-lg font-bold text-primary\">{activities.performanceTotal}</span>\n                              </div>\n                              <div className=\"w-full bg-muted rounded-full h-2\">\n                                <div \n                                  className=\"bg-gradient-to-r from-primary to-primary/80 h-2 rounded-full transition-all duration-500\" \n                                  style={{ width: `${Math.min((activities.performanceTotal / 10) * 100, 100)}%` }}\n                                ></div>\n                              </div>\n                              <div className=\"text-xs text-muted-foreground mt-1\">\n                                {activities.performanceTotal >= 10 ? \"Müthiş bir gün! 🎉\" : activities.performanceTotal >= 5 ? \"İyi gidiyor! 👍\" : \"Daha fazla çalışabiliriz! 💪\"}\n                              </div>\n                            </div>\n                            \n                            {/* Bugünün Çalışma Saatleri */}\n                            {activities.studyHours.length > 0 && (\n                              <div className=\"bg-gradient-to-r from-cyan-500/10 to-blue-500/10 rounded-lg p-4 border border-cyan-300/30 dark:border-cyan-700/30\">\n                                <div className=\"flex items-center justify-between\">\n                                  <div className=\"flex items-center gap-2\">\n                                    <Clock className=\"h-5 w-5 text-cyan-600 dark:text-cyan-400\" />\n                                    <span className=\"text-sm font-medium text-foreground\">Bugün Çalışılan Saat</span>\n                                  </div>\n                                  <span className=\"text-lg font-bold text-cyan-600 dark:text-cyan-400\">\n                                    {(() => {\n                                      const totalSeconds = activities.studyHours.reduce((sum: number, sh: any) => {\n                                        const h = parseInt(sh.hours) || 0;\n                                        const m = parseInt(sh.minutes) || 0;\n                                        const s = parseInt(sh.seconds) || 0;\n                                        return sum + (h * 3600 + m * 60 + s);\n                                      }, 0);\n                                      const hours = Math.floor(totalSeconds / 3600);\n                                      const minutes = Math.floor((totalSeconds % 3600) / 60);\n                                      return `${hours}s ${minutes}dk`;\n                                    })()}\n                                  </span>\n                                </div>\n                              </div>\n                            )}\n\n                            {/* Detaylı Aktivite Listesi - same as past with activities */}\n                            <div className=\"space-y-2\">\n                              <h5 className=\"font-semibold text-sm text-foreground mb-3 flex items-center\">\n                                <div className=\"w-2 h-2 bg-primary rounded-full mr-2\"></div>\n                                Aktivite Detayları\n                              </h5>\n                              \n                              {/* Filter Buttons */}\n                              <div className=\"flex gap-2 mb-3\">\n                                <button \n                                  onClick={() => setActivityFilter('all')}\n                                  className={`px-3 py-1.5 text-xs font-medium rounded-lg transition-all duration-200 ${\n                                    activityFilter === 'all' \n                                      ? 'bg-primary text-white shadow-sm' \n                                      : 'bg-muted hover:bg-muted/80 text-muted-foreground hover:text-foreground'\n                                  }`}\n                                  data-testid=\"button-filter-all\"\n                                >\n                                  Tümü\n                                </button>\n                                <button \n                                  onClick={() => setActivityFilter('tasks')}\n                                  className={`px-3 py-1.5 text-xs font-medium rounded-lg transition-all duration-200 ${\n                                    activityFilter === 'tasks' \n                                      ? 'bg-green-500 text-white shadow-sm' \n                                      : 'bg-green-50 dark:bg-green-950/20 hover:bg-green-100 dark:hover:bg-green-950/30 text-green-700 dark:text-green-300'\n                                  }`}\n                                  data-testid=\"button-filter-tasks\"\n                                >\n                                  Görev\n                                </button>\n                                <button \n                                  onClick={() => setActivityFilter('questions')}\n                                  className={`px-3 py-1.5 text-xs font-medium rounded-lg transition-all duration-200 ${\n                                    activityFilter === 'questions' \n                                      ? 'bg-blue-500 text-white shadow-sm' \n                                      : 'bg-blue-50 dark:bg-blue-950/20 hover:bg-blue-100 dark:hover:bg-blue-950/30 text-blue-700 dark:text-blue-300'\n                                  }`}\n                                  data-testid=\"button-filter-questions\"\n                                >\n                                  Soru\n                                </button>\n                                <button \n                                  onClick={() => setActivityFilter('exams')}\n                                  className={`px-3 py-1.5 text-xs font-medium rounded-lg transition-all duration-200 ${\n                                    activityFilter === 'exams' \n                                      ? 'bg-purple-500 text-white shadow-sm' \n                                      : 'bg-purple-50 dark:bg-purple-950/20 hover:bg-purple-100 dark:hover:bg-purple-950/30 text-purple-700 dark:text-purple-300'\n                                  }`}\n                                  data-testid=\"button-filter-exams\"\n                                >\n                                  Deneme\n                                </button>\n                              </div>\n                              <div className=\"space-y-2 max-h-64 overflow-y-auto custom-scrollbar\">\n                                {/* Tamamlanan görevleri göster */}\n                                {(activityFilter === 'all' || activityFilter === 'tasks') && activities.tasks.map((task: Task) => {\n                                  const isExpanded = expandedTasks.has(task.id);\n                                  return (\n                                  <div key={`${selectedDate}-completed-${task.id}`} className=\"flex flex-col gap-2 p-2 bg-green-50 dark:bg-green-950/10 rounded-lg\">\n                                    <div className=\"flex items-center justify-between\">\n                                      <div className=\"flex items-center text-sm\">\n                                        <div className=\"w-2 h-2 bg-green-500 rounded-full mr-3\"></div>\n                                        <span className=\"font-medium\">Görev:</span>\n                                        <span className=\"ml-2 text-muted-foreground\">{task.title}</span>\n                                      </div>\n                                      <div className=\"flex items-center gap-2\">\n                                        {task.deleted && (\n                                          <div className=\"text-xs text-red-600 bg-red-100 dark:bg-red-900/20 px-2 py-1 rounded-full\">\n                                            🗑️ Silindi\n                                          </div>\n                                        )}\n                                        {task.archived && (\n                                          <div className=\"text-xs text-orange-600 bg-orange-100 dark:bg-orange-900/20 px-2 py-1 rounded-full\">\n                                            📦 Arşivlendi\n                                          </div>\n                                        )}\n                                        {!task.deleted && !task.archived && (\n                                          <div className=\"text-xs text-green-600 bg-green-100 dark:bg-green-900/20 px-2 py-1 rounded-full\">\n                                            ✓ Tamamlandı\n                                          </div>\n                                        )}\n                                        <button\n                                          onClick={() => {\n                                            setExpandedTasks(prev => {\n                                              const newSet = new Set(prev);\n                                              if (newSet.has(task.id)) {\n                                                newSet.delete(task.id);\n                                              } else {\n                                                newSet.add(task.id);\n                                              }\n                                              return newSet;\n                                            });\n                                          }}\n                                          className=\"p-0.5 hover:bg-green-200 dark:hover:bg-green-900/30 rounded transition-colors\"\n                                          data-testid={`button-expand-completed-task-${task.id}`}\n                                        >\n                                          {isExpanded ? <ChevronUp className=\"h-3.5 w-3.5 text-green-700 dark:text-green-400\" /> : <ChevronDown className=\"h-3.5 w-3.5 text-green-700 dark:text-green-400\" />}\n                                        </button>\n                                      </div>\n                                    </div>\n                                    {isExpanded && (\n                                      <div className=\"mt-1 pt-2 border-t border-green-200 dark:border-green-800 space-y-1.5 text-xs\">\n                                        {task.description && (\n                                          <div className=\"flex gap-2\">\n                                            <span className=\"font-semibold text-green-700 dark:text-green-400 min-w-[65px]\">Açıklama:</span>\n                                            <span className=\"text-foreground\">{task.description}</span>\n                                          </div>\n                                        )}\n                                        <div className=\"flex gap-2\">\n                                          <span className=\"font-semibold text-green-700 dark:text-green-400 min-w-[65px]\">Ders:</span>\n                                          <span className=\"text-foreground\">{getCategoryText(task.category)}</span>\n                                        </div>\n                                        {task.dueDate && (\n                                          <div className=\"flex gap-2\">\n                                            <span className=\"font-semibold text-green-700 dark:text-green-400 min-w-[65px]\">Tarih:</span>\n                                            <span className=\"text-foreground\">{new Date(task.dueDate).toLocaleDateString('tr-TR')}</span>\n                                          </div>\n                                        )}\n                                      </div>\n                                    )}\n                                  </div>\n                                  );\n                                })}\n                                \n                                {/* Planlanmış görevleri göster */}\n                                {(activityFilter === 'all' || activityFilter === 'tasks') && activities.scheduledTasks && activities.scheduledTasks.map((task: Task) => {\n                                  const isExpanded = expandedTasks.has(`scheduled-${task.id}`);\n                                  return (\n                                  <div key={`${selectedDate}-scheduled-${task.id}`} className=\"flex flex-col gap-2 p-2 bg-gray-50 dark:bg-gray-950/10 rounded-lg\">\n                                    <div className=\"flex items-center justify-between\">\n                                      <div className=\"flex items-center text-sm\">\n                                        <div className=\"w-2 h-2 bg-gray-400 dark:bg-gray-500 rounded-full mr-3\"></div>\n                                        <span className=\"font-medium\">Görev:</span>\n                                        <span className=\"ml-2 text-muted-foreground\">{task.title}</span>\n                                      </div>\n                                      <div className=\"flex items-center gap-2\">\n                                        <div className=\"text-xs text-gray-600 bg-gray-100 dark:bg-gray-900/20 px-2 py-1 rounded-full\">\n                                          📅 Planlandı\n                                        </div>\n                                        <button\n                                          onClick={() => {\n                                            setExpandedTasks(prev => {\n                                              const newSet = new Set(prev);\n                                              const key = `scheduled-${task.id}`;\n                                              if (newSet.has(key)) {\n                                                newSet.delete(key);\n                                              } else {\n                                                newSet.add(key);\n                                              }\n                                              return newSet;\n                                            });\n                                          }}\n                                          className=\"p-0.5 hover:bg-gray-200 dark:hover:bg-gray-900/30 rounded transition-colors\"\n                                          data-testid={`button-expand-scheduled-task-${task.id}`}\n                                        >\n                                          {isExpanded ? <ChevronUp className=\"h-3.5 w-3.5 text-gray-700 dark:text-gray-400\" /> : <ChevronDown className=\"h-3.5 w-3.5 text-gray-700 dark:text-gray-400\" />}\n                                        </button>\n                                      </div>\n                                    </div>\n                                    {isExpanded && (\n                                      <div className=\"mt-1 pt-2 border-t border-gray-200 dark:border-gray-800 space-y-1.5 text-xs\">\n                                        {task.description && (\n                                          <div className=\"flex gap-2\">\n                                            <span className=\"font-semibold text-gray-700 dark:text-gray-400 min-w-[65px]\">Açıklama:</span>\n                                            <span className=\"text-foreground\">{task.description}</span>\n                                          </div>\n                                        )}\n                                        <div className=\"flex gap-2\">\n                                          <span className=\"font-semibold text-gray-700 dark:text-gray-400 min-w-[65px]\">Ders:</span>\n                                          <span className=\"text-foreground\">{getCategoryText(task.category)}</span>\n                                        </div>\n                                        {task.dueDate && (\n                                          <div className=\"flex gap-2\">\n                                            <span className=\"font-semibold text-gray-700 dark:text-gray-400 min-w-[65px]\">Tarih:</span>\n                                            <span className=\"text-foreground\">{new Date(task.dueDate).toLocaleDateString('tr-TR')}</span>\n                                          </div>\n                                        )}\n                                      </div>\n                                    )}\n                                  </div>\n                                  );\n                                })}\n                                \n                                {/* Arşivlenen görevleri göster */}\n                                {(activityFilter === 'all' || activityFilter === 'tasks') && activities.archivedTasks && activities.archivedTasks.map((task: Task) => {\n                                  const isExpanded = expandedTasks.has(`archived-${task.id}`);\n                                  return (\n                                  <div key={`${selectedDate}-archived-${task.id}`} className=\"flex flex-col gap-2 p-2 bg-orange-50 dark:bg-orange-950/10 rounded-lg border border-orange-200 dark:border-orange-800\">\n                                    <div className=\"flex items-center justify-between\">\n                                      <div className=\"flex items-center text-sm\">\n                                        <div className=\"w-2 h-2 bg-orange-500 rounded-full mr-3\"></div>\n                                        <span className=\"font-medium\">Görev:</span>\n                                        <span className=\"ml-2 text-muted-foreground\">{task.title}</span>\n                                      </div>\n                                      <div className=\"flex items-center gap-2\">\n                                        <div className=\"text-xs text-orange-600 bg-orange-100 dark:bg-orange-900/20 px-2 py-1 rounded-full\">\n                                          📦 Arşivlendi\n                                        </div>\n                                        <button\n                                          onClick={() => {\n                                            setExpandedTasks(prev => {\n                                              const newSet = new Set(prev);\n                                              const key = `archived-${task.id}`;\n                                              if (newSet.has(key)) {\n                                                newSet.delete(key);\n                                              } else {\n                                                newSet.add(key);\n                                              }\n                                              return newSet;\n                                            });\n                                          }}\n                                          className=\"p-0.5 hover:bg-orange-200 dark:hover:bg-orange-900/30 rounded transition-colors\"\n                                          data-testid={`button-expand-archived-task-${task.id}`}\n                                        >\n                                          {isExpanded ? <ChevronUp className=\"h-3.5 w-3.5 text-orange-700 dark:text-orange-400\" /> : <ChevronDown className=\"h-3.5 w-3.5 text-orange-700 dark:text-orange-400\" />}\n                                        </button>\n                                      </div>\n                                    </div>\n                                    {isExpanded && (\n                                      <div className=\"mt-1 pt-2 border-t border-orange-200 dark:border-orange-800 space-y-1.5 text-xs\">\n                                        {task.description && (\n                                          <div className=\"flex gap-2\">\n                                            <span className=\"font-semibold text-orange-700 dark:text-orange-400 min-w-[65px]\">Açıklama:</span>\n                                            <span className=\"text-foreground\">{task.description}</span>\n                                          </div>\n                                        )}\n                                        <div className=\"flex gap-2\">\n                                          <span className=\"font-semibold text-orange-700 dark:text-orange-400 min-w-[65px]\">Ders:</span>\n                                          <span className=\"text-foreground\">{getCategoryText(task.category)}</span>\n                                        </div>\n                                        {task.dueDate && (\n                                          <div className=\"flex gap-2\">\n                                            <span className=\"font-semibold text-orange-700 dark:text-orange-400 min-w-[65px]\">Tarih:</span>\n                                            <span className=\"text-foreground\">{new Date(task.dueDate).toLocaleDateString('tr-TR')}</span>\n                                          </div>\n                                        )}\n                                      </div>\n                                    )}\n                                  </div>\n                                  );\n                                })}\n                                \n                                {/* Soru günlüklerini göster */}\n                                {(activityFilter === 'all' || activityFilter === 'questions') && activities.questionLogs.map((log: QuestionLog) => {\n                                  const correct = Number(log.correct_count) || 0;\n                                  const wrong = Number(log.wrong_count) || 0;\n                                  const blank = Number(log.blank_count) || 0;\n                                  const net = correct - (wrong * 0.25);\n                                  const isExpanded = expandedQuestionLogs.has(log.id);\n                                  \n                                  return (\n                                    <div key={log.id} className=\"flex flex-col gap-2 p-2 bg-blue-50 dark:bg-blue-950/10 rounded-lg\">\n                                      <div className=\"flex items-center justify-between\">\n                                        <div className=\"flex items-center text-sm\">\n                                          <div className=\"w-2 h-2 bg-blue-500 rounded-full mr-3\"></div>\n                                          <span className=\"font-medium\">Soru:</span>\n                                          <span className=\"ml-2 text-muted-foreground\">\n                                            {[log.exam_type, log.subject].filter(Boolean).join(' ') || 'Soru Çözümü'}\n                                          </span>\n                                        </div>\n                                        <div className=\"flex items-center gap-1 text-xs\">\n                                          <div className=\"bg-green-100 dark:bg-green-900/20 text-green-700 dark:text-green-300 px-2 py-1 rounded-full font-semibold\">\n                                            ✓ {correct}\n                                          </div>\n                                          <div \n                                            className=\"bg-red-100 dark:bg-red-900/20 text-red-700 dark:text-red-300 px-2 py-1 rounded-full cursor-pointer hover:bg-red-200 dark:hover:bg-red-800/30 transition-colors font-semibold\"\n                                            onClick={() => {\n                                              setExpandedQuestionLogs(prev => {\n                                                const newSet = new Set(prev);\n                                                if (newSet.has(log.id)) {\n                                                  newSet.delete(log.id);\n                                                } else {\n                                                  newSet.add(log.id);\n                                                }\n                                                return newSet;\n                                              });\n                                            }}\n                                          >\n                                            ✗ {wrong}\n                                          </div>\n                                          <div className=\"bg-gray-100 dark:bg-gray-900/20 text-gray-700 dark:text-gray-300 px-2 py-1 rounded-full font-semibold\">\n                                            ○ {blank}\n                                          </div>\n                                          <div className=\"bg-blue-100 dark:bg-blue-900/20 text-blue-700 dark:text-blue-300 px-2 py-1 rounded-full font-bold\">\n                                            Net: {net.toFixed(2)}\n                                          </div>\n                                        </div>\n                                      </div>\n                                      {isExpanded && log.wrong_topics && (typeof log.wrong_topics === 'string' ? JSON.parse(log.wrong_topics) : log.wrong_topics).length > 0 && (\n                                        <div className=\"mt-1 pt-2 border-t border-blue-200 dark:border-blue-800 animate-in slide-in-from-top-2\">\n                                          <div className=\"text-xs font-semibold text-red-600 dark:text-red-400 mb-1\">❌ Yanlış Konular:</div>\n                                          <div className=\"flex flex-wrap gap-1\">\n                                            {(() => {\n                                              try {\n                                                const topics = typeof log.wrong_topics === 'string' ? JSON.parse(log.wrong_topics) : log.wrong_topics;\n                                                return Array.isArray(topics) ? topics.map((topic: any, idx: number) => {\n                                                  const topicName = typeof topic === 'string' ? topic : (topic.topic || topic.name || '');\n                                                  return topicName ? (\n                                                    <span key={idx} className=\"text-xs px-2 py-0.5 bg-red-100 text-red-700 dark:bg-red-900/30 dark:text-red-300 rounded-full\">\n                                                      {topicName}\n                                                    </span>\n                                                  ) : null;\n                                                }) : null;\n                                              } catch (e) {\n                                                return null;\n                                              }\n                                            })()}\n                                          </div>\n                                        </div>\n                                      )}\n                                    </div>\n                                  );\n                                })}\n                                \n                                {/* Sınav sonuçlarını göster */}\n                                {(activityFilter === 'all' || activityFilter === 'exams') && activities.examResults.map((exam: ExamResult) => {\n                                  const isExpanded = expandedExams.has(exam.id);\n                                  const examSubjects = examSubjectNets.filter((subjectNet: any) => subjectNet.exam_id === exam.id);\n                                  const totalWrong = examSubjects.reduce((sum: number, subjectNet: any) => sum + (parseInt(subjectNet.wrong_count) || 0), 0);\n                                  \n                                  return (\n                                    <div key={exam.id} className=\"flex flex-col gap-2 p-2 bg-purple-50 dark:bg-purple-950/10 rounded-lg\">\n                                      <div className=\"flex items-center justify-between\">\n                                        <div className=\"flex items-center text-sm\">\n                                          <div className=\"w-2 h-2 bg-purple-500 rounded-full mr-3\"></div>\n                                          <span className=\"font-medium\">{exam.exam_scope === 'branch' ? 'Branş Denemesi:' : 'Genel Deneme:'}</span>\n                                          <span className=\"ml-2 text-muted-foreground\">{typeof (exam.display_name || exam.exam_name) === 'string' ? (exam.display_name || exam.exam_name) : 'Deneme'}</span>\n                                        </div>\n                                        <div className=\"flex items-center gap-1 text-xs\">\n                                          {totalWrong > 0 && (\n                                            <div \n                                              className=\"bg-red-100 dark:bg-red-900/20 text-red-700 dark:text-red-300 px-2 py-1 rounded-full cursor-pointer hover:bg-red-200 dark:hover:bg-red-800/30 transition-colors font-semibold\"\n                                              onClick={() => {\n                                                setExpandedExams(prev => {\n                                                  const newSet = new Set(prev);\n                                                  if (newSet.has(exam.id)) {\n                                                    newSet.delete(exam.id);\n                                                  } else {\n                                                    newSet.add(exam.id);\n                                                  }\n                                                  return newSet;\n                                                });\n                                              }}\n                                            >\n                                              ✗ {totalWrong}\n                                            </div>\n                                          )}\n                                          <div className=\"text-xs text-purple-600 bg-purple-100 dark:bg-purple-900/20 px-2 py-1 rounded-full\">\n                                            {exam.exam_type === 'TYT' ? (\n                                              `TYT: ${exam.tyt_net}`\n                                            ) : exam.exam_type === 'AYT' ? (\n                                              `AYT: ${exam.ayt_net}`\n                                            ) : (\n                                              `Net: ${parseFloat(exam.tyt_net) > 0 ? exam.tyt_net : exam.ayt_net}`\n                                            )}\n                                          </div>\n                                        </div>\n                                      </div>\n                                      {isExpanded && (\n                                        <div className=\"mt-1 pt-2 border-t border-purple-200 dark:border-purple-800 animate-in slide-in-from-top-2\">\n                                          <div className=\"text-xs font-semibold text-red-600 dark:text-red-400 mb-1\">❌ Yanlış Konular:</div>\n                                          <div className=\"flex flex-wrap gap-1\">\n                                            {examSubjects.map((subjectNet: any, idx: number) => {\n                                              if (!subjectNet.wrong_topics_json) return null;\n                                              try {\n                                                const wrongTopics = JSON.parse(subjectNet.wrong_topics_json);\n                                                if (!Array.isArray(wrongTopics) || wrongTopics.length === 0) return null;\n                                                return wrongTopics.map((topic: any, topicIdx: number) => {\n                                                  const topicName = typeof topic === 'string' ? topic : (topic.topic || topic.name || '');\n                                                  return topicName ? (\n                                                    <span key={`${idx}-${topicIdx}`} className=\"text-xs px-2 py-0.5 bg-red-100 text-red-700 dark:bg-red-900/30 dark:text-red-300 rounded-full\">\n                                                      {topicName}\n                                                    </span>\n                                                  ) : null;\n                                                });\n                                              } catch (e) {\n                                                return null;\n                                              }\n                                            })}\n                                          </div>\n                                        </div>\n                                      )}\n                                    </div>\n                                  );\n                                })}\n                              </div>\n                            </div>\n                          </div>\n                        );\n                      }\n                    } else if (isFuture) {\n                      // Geliştirilmiş Gelecek Tarih Planlaması (SADECE gelecek günler için)\n                      return (\n                        <div className=\"space-y-4\">\n                          {/* Planlama Özeti */}\n                          <div className=\"bg-gradient-to-r from-accent/5 to-accent/10 rounded-lg p-4 border border-accent/20\">\n                            <div className=\"flex items-center justify-between mb-2\">\n                              <span className=\"text-sm font-medium text-foreground\">Planlanan Aktiviteler</span>\n                              <span className=\"text-lg font-bold text-accent\">{calendarData?.tasksCount || 0}</span>\n                            </div>\n                            <div className=\"text-xs text-muted-foreground\">\n                              {(calendarData?.tasksCount || 0) === 0 \n                                ? \"Henüz bugüne özel görev planlanmamış\" \n                                : `${calendarData?.tasksCount || 0} görev bugüne planlandı`}\n                            </div>\n                          </div>\n\n                          {/* Planlanan Görevler */}\n                          {calendarData?.tasks && calendarData.tasks.length > 0 && (\n                            <div className=\"space-y-2\">\n                              <h5 className=\"font-semibold text-sm text-foreground mb-3 flex items-center\">\n                                <div className=\"w-2 h-2 bg-accent rounded-full mr-2\"></div>\n                                Planlanan Görevler\n                              </h5>\n                              {calendarData.tasks.slice(0, showAllTasks ? calendarData.tasks.length : 3).map((task: Task) => (\n                                <div key={task.id} className=\"flex items-center justify-between p-3 bg-accent/5 rounded-lg border border-accent/10\">\n                                  <div className=\"flex items-center text-sm\">\n                                    <div className=\"w-2 h-2 bg-accent/60 rounded-full mr-3\"></div>\n                                    <span className=\"font-medium text-foreground\">{task.title}</span>\n                                  </div>\n                                  <div className=\"flex items-center space-x-2\">\n                                    <div className=\"text-xs text-accent bg-accent/10 px-2 py-1 rounded-full\">\n                                      {task.priority === 'high' ? '🔴 Yüksek' : task.priority === 'medium' ? '🟠 Orta' : '🟢 Düşük'}\n                                    </div>\n                                    <div className=\"text-xs text-muted-foreground\">\n                                      {getCategoryText(task.category)}\n                                    </div>\n                                  </div>\n                                </div>\n                              ))}\n                              {calendarData.tasks.length > 3 && (\n                                <div className=\"text-center\">\n                                  <button \n                                    onClick={() => setShowAllTasks(!showAllTasks)}\n                                    className=\"text-xs font-medium text-accent hover:text-accent/80 bg-accent/10 hover:bg-accent/20 px-4 py-2 rounded-lg transition-colors duration-200\"\n                                    data-testid=\"button-show-more-tasks\"\n                                  >\n                                    {showAllTasks ? 'Daha az göster' : `${calendarData.tasks.length - 3} görev daha göster`}\n                                  </button>\n                                </div>\n                              )}\n                            </div>\n                          )}\n\n                        </div>\n                      );\n                    }\n                  })()\n                  }\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Bugünün Görevleri Kolonu - 2 sütun alır */}\n          <div className=\"lg:col-span-2 h-full\">\n            <TodaysTasksWidget />\n          </div>\n        </div>\n\n        {/* Orta Satır - Hava Durumu Widget'ı (Tam Genişlik) */}\n        <div className=\"mb-8\">\n          <EnhancedWeatherWidget />\n        </div>\n\n\n        {/* Geri Sayım Bölümü - Aşağı Taşındı */}\n        <div className=\"mb-8\">\n          <CountdownWidget className=\"p-5 md:p-6\" />\n        </div>\n      </main>\n\n      {/* Rapor Gönderme Modalı */}\n      <Dialog open={showReportModal} onOpenChange={setShowReportModal}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle className=\"text-2xl font-bold bg-gradient-to-r from-purple-600 to-indigo-600 bg-clip-text text-transparent\">\n              📊 Aylık İlerleme Raporu\n            </DialogTitle>\n            <DialogDescription>\n              Tüm aktivitelerinizin özet raporu\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            {/* İstatistikler */}\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"bg-gradient-to-br from-purple-50 to-purple-100 dark:from-purple-950/30 dark:to-purple-900/20 p-4 rounded-lg border border-purple-200 dark:border-purple-800\">\n                <div className=\"text-sm text-muted-foreground mb-1\">Toplam Aktivite</div>\n                <div className=\"text-3xl font-bold text-purple-600 dark:text-purple-400\">\n                  {(tasks.length || 0) + (questionLogs.length || 0) + (examResults.length || 0)}\n                </div>\n              </div>\n              \n              <div className=\"bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-950/30 dark:to-blue-900/20 p-4 rounded-lg border border-blue-200 dark:border-blue-800\">\n                <div className=\"text-sm text-muted-foreground mb-1\">Tamamlanan Görevler</div>\n                <div className=\"text-3xl font-bold text-blue-600 dark:text-blue-400\">\n                  {tasks.filter(t => t.completed).length} / {tasks.length}\n                </div>\n              </div>\n              \n              <div className=\"bg-gradient-to-br from-green-50 to-green-100 dark:from-green-950/30 dark:to-green-900/20 p-4 rounded-lg border border-green-200 dark:border-green-800\">\n                <div className=\"text-sm text-muted-foreground mb-1\">Çözülen Soru Sayısı</div>\n                <div className=\"text-3xl font-bold text-green-600 dark:text-green-400\">\n                  {questionLogs.reduce((sum, log) => sum + (Number(log.correct_count) || 0) + (Number(log.wrong_count) || 0) + (Number(log.blank_count) || 0), 0)}\n                </div>\n              </div>\n              \n              <div className=\"bg-gradient-to-br from-orange-50 to-orange-100 dark:from-orange-950/30 dark:to-orange-900/20 p-4 rounded-lg border border-orange-200 dark:border-orange-800\">\n                <div className=\"text-sm text-muted-foreground mb-1\">Toplam Denemeler</div>\n                <div className=\"text-3xl font-bold text-orange-600 dark:text-orange-400\">\n                  {examResults.length}\n                </div>\n              </div>\n              \n              <div className=\"bg-gradient-to-br from-indigo-50 to-indigo-100 dark:from-indigo-950/30 dark:to-indigo-900/20 p-4 rounded-lg border border-indigo-200 dark:border-indigo-800 col-span-2\">\n                <div className=\"text-sm text-muted-foreground mb-1\">Toplam Çalışma Saati</div>\n                <div className=\"text-3xl font-bold text-indigo-600 dark:text-indigo-400\">\n                  {studyHours.reduce((sum, sh) => sum + (Number(sh.hours) || 0), 0)} saat\n                </div>\n              </div>\n            </div>\n            \n            {/* Email Bilgisi */}\n            <div className=\"mt-6 p-4 bg-muted/50 rounded-lg border border-border\">\n              <Label className=\"text-sm font-medium mb-2 block\">E-posta Adresi</Label>\n              <Input \n                type=\"email\" \n                value=\"Belirlediğiniz e-posta adresine rapor gönderilecektir\"\n                disabled\n                className=\"bg-muted/30 text-muted-foreground blur-[2px] cursor-not-allowed\"\n              />\n              <p className=\"text-xs text-muted-foreground mt-2\">\n                📧 .env dosyasında tanımlı EMAIL_FROM adresine detaylı rapor gönderilecek\n              </p>\n            </div>\n            \n            {/* Bilgilendirme */}\n            <div className=\"bg-gradient-to-r from-purple-50 to-indigo-50 dark:from-purple-950/20 dark:to-indigo-950/20 p-4 rounded-lg border border-purple-200 dark:border-purple-800\">\n              <p className=\"text-sm font-medium text-center\">\n                💡 Detaylı Analiz Raporu İçin Gönder Butonuna Tıklayın\n              </p>\n            </div>\n          </div>\n          \n          <div className=\"flex gap-2 justify-end mt-4\">\n            <Button\n              variant=\"outline\"\n              onClick={() => setShowReportModal(false)}\n              disabled={sendReportMutation.isPending}\n            >\n              İptal\n            </Button>\n            <Button\n              onClick={() => sendReportMutation.mutate()}\n              disabled={sendReportMutation.isPending}\n              className=\"bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 text-white\"\n            >\n              {sendReportMutation.isPending ? (\n                <>\n                  <span className=\"animate-spin mr-2\">⏳</span>\n                  Gönderiliyor...\n                </>\n              ) : (\n                <>\n                  <Mail className=\"h-4 w-4 mr-2\" />\n                  Gönder\n                </>\n              )}\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* copyright beroooş */}\n      <footer className=\"bg-muted/30 border-t border-border mt-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n          <div className=\"text-center text-sm text-muted-foreground\">\n            © {new Date().getFullYear()} Berat Cankır. Tüm hakları saklıdır.\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":109514},"playwright.config.ts":{"content":"import { defineConfig, devices } from '@playwright/test';\n\nconst getBaseURL = () => {\n  if (process.env.PLAYWRIGHT_BASE_URL) {\n    return process.env.PLAYWRIGHT_BASE_URL;\n  }\n  \n  if (process.env.REPL_SLUG && process.env.REPL_OWNER) {\n    return `https://${process.env.REPL_SLUG}.${process.env.REPL_OWNER}.repl.co`;\n  }\n  \n  return 'http://localhost:5000';\n};\n\nconst baseURL = getBaseURL();\n\nexport default defineConfig({\n  testDir: './testler',\n  fullyParallel: true,\n  forbidOnly: !!process.env.CI,\n  retries: process.env.CI ? 2 : 0,\n  workers: process.env.CI ? 1 : undefined,\n  reporter: 'html',\n  timeout: 120000,\n  use: {\n    baseURL,\n    trace: 'on-first-retry',\n    actionTimeout: 15000,\n    navigationTimeout: 30000,\n  },\n\n  projects: [\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'] },\n    },\n  ],\n\n  webServer: process.env.REPL_SLUG ? undefined : {\n    command: 'npm run dev',\n    url: 'http://localhost:5000',\n    reuseExistingServer: !process.env.CI,\n    timeout: 120000,\n  },\n});\n","size_bytes":1018},"client/src/bilesenler/profil-modal.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { X } from \"lucide-react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/bilesenler/arayuz/dialog\";\nimport { Button } from \"@/bilesenler/arayuz/button\";\nimport { Textarea } from \"@/bilesenler/arayuz/textarea\";\nimport { Mood, InsertMood } from \"@shared/sema\";\nimport { apiRequest, sorguIstemcisi } from \"@/kutuphane/sorguIstemcisi\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface ProfileModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nconst moodEmojis = {\n  \"very-happy\": { emoji: \"😄\", text: \"Harika\" },\n  \"happy\": { emoji: \"😊\", text: \"İyi\" },\n  \"neutral\": { emoji: \"😐\", text: \"Normal\" },\n  \"sad\": { emoji: \"😔\", text: \"Üzgün\" },\n  \"angry\": { emoji: \"😠\", text: \"Sinirli\" },\n};\n\nexport function ProfileModal({ open, onOpenChange }: ProfileModalProps) {\n  const [selectedMood, setSelectedMood] = useState<string>(\"\");\n  const [note, setNote] = useState(\"\");\n  const { toast } = useToast();\n\n  const { data: latestMood } = useQuery<Mood>({\n    queryKey: [\"/api/moods/latest\"],\n    enabled: open,\n  });\n\n  const saveMoodMutation = useMutation({\n    mutationFn: (data: InsertMood) => \n      apiRequest(\"POST\", \"/api/moods\", data),\n    onSuccess: () => {\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/moods\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/moods/latest\"] });\n      toast({\n        title: \"Ruh hali kaydedildi\",\n        description: \"Ruh haliniz başarıyla kaydedildi.\",\n      });\n      onOpenChange(false);\n      setSelectedMood(\"\");\n      setNote(\"\");\n    },\n    onError: () => {\n      toast({\n        title: \"Hata\",\n        description: \"Ruh hali kaydedilemedi.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSave = () => {\n    if (!selectedMood) {\n      toast({\n        title: \"Uyarı\",\n        description: \"Lütfen bir ruh hali seçin.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    saveMoodMutation.mutate({\n      mood: selectedMood as any,\n      note: note.trim() || undefined,\n    });\n  };\n\n  const formatTimeAgo = (date: Date) => {\n    const now = new Date();\n    const diffInHours = Math.floor((now.getTime() - new Date(date).getTime()) / (1000 * 60 * 60));\n    \n    if (diffInHours < 1) {\n      return \"Az önce\";\n    } else if (diffInHours < 24) {\n      return `${diffInHours} saat önce`;\n    } else {\n      const diffInDays = Math.floor(diffInHours / 24);\n      return `${diffInDays} gün önce`;\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Ruh Halini Paylaş</DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-4\">\n          {/* Mood seçici */}\n          <div>\n            <label className=\"block text-sm font-medium text-foreground mb-2\">\n              Bugün nasıl hissediyorsun?\n            </label>\n            <div className=\"grid grid-cols-5 gap-2\">\n              {Object.entries(moodEmojis).map(([mood, { emoji, text }]) => (\n                <button\n                  key={mood}\n                  onClick={() => setSelectedMood(mood)}\n                  className={`p-3 rounded-lg border transition-colors text-center ${\n                    selectedMood === mood\n                      ? \"border-primary bg-primary text-primary-foreground\"\n                      : \"border-border hover:bg-secondary\"\n                  }`}\n                  data-testid={`mood-${mood}`}\n                >\n                  <div className=\"text-2xl\">{emoji}</div>\n                  <div className=\"text-xs mt-1\">{text}</div>\n                </button>\n              ))}\n            </div>\n          </div>\n\n          {/* not */}\n          <div>\n            <label htmlFor=\"mood-note\" className=\"block text-sm font-medium text-foreground mb-2\">\n              Notun\n            </label>\n            <Textarea\n              id=\"mood-note\"\n              placeholder=\"Bugün nasıl hissediyorsun? Notunu buraya yaz...\"\n              value={note}\n              onChange={(e) => setNote(e.target.value)}\n              className=\"h-24 resize-none\"\n              data-testid=\"input-note\"\n            />\n          </div>\n\n          {/* Son Ruh Hali Gösterimi */}\n          {latestMood && (\n            <div className=\"bg-muted rounded-lg p-3\">\n              <div className=\"text-sm text-muted-foreground mb-1\">Son ruh hali:</div>\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"text-lg\">\n                  {moodEmojis[latestMood.mood as keyof typeof moodEmojis]?.emoji}\n                </span>\n                <span className=\"text-sm text-foreground\">\n                  {moodEmojis[latestMood.mood as keyof typeof moodEmojis]?.text} hissediyorum\n                </span>\n                <span className=\"text-xs text-muted-foreground\">\n                  • {formatTimeAgo(latestMood.createdAt!)}\n                </span>\n              </div>\n              {latestMood.note && (\n                <p className=\"text-xs text-muted-foreground mt-2 italic\">\n                  \"{latestMood.note}\"\n                </p>\n              )}\n            </div>\n          )}\n\n          {/* Eylem Düğmeleri */}\n          <div className=\"flex space-x-3 pt-2\">\n            <Button \n              onClick={handleSave}\n              disabled={saveMoodMutation.isPending}\n              className=\"flex-1\"\n              data-testid=\"button-save-mood\"\n            >\n              {saveMoodMutation.isPending ? \"Kaydediliyor...\" : \"Kaydet\"}\n            </Button>\n            <Button \n              variant=\"secondary\"\n              onClick={() => onOpenChange(false)}\n              className=\"flex-1\"\n              data-testid=\"button-cancel-mood\"\n            >\n              İptal\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":6114},"client/src/sayfalar/panel.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport { useState, useEffect, useMemo, useCallback, memo } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Header } from \"@/bilesenler/baslik\";\nimport { TrendingUp, BarChart3, Target, Brain, BookOpen, Plus, CalendarDays, X, FlaskConical, Trash2, AlertTriangle, Sparkles, Award, Clock, Zap, Edit, Search, Tag, BookX, Lightbulb, Eye, Calendar, FileText, Archive, CheckCircle, Circle, Lock, Mail } from \"lucide-react\";\nimport { Task, Goal, QuestionLog, InsertQuestionLog, ExamResult, InsertExamResult, SUBJECT_LIMITS } from \"@shared/sema\";\nimport { DashboardSummaryCards } from \"@/bilesenler/panel-ozet-kartlar\";\nimport { AdvancedCharts } from \"@/bilesenler/gelismis-grafikler\";\nimport { QuestionAnalysisCharts } from \"@/bilesenler/soru-analiz-grafikleri\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/bilesenler/arayuz/dialog\";\nimport { Button } from \"@/bilesenler/arayuz/button\";\nimport { Input } from \"@/bilesenler/arayuz/input\";\nimport { Textarea } from \"@/bilesenler/arayuz/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/bilesenler/arayuz/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/bilesenler/arayuz/card\";\nimport { Badge } from \"@/bilesenler/arayuz/badge\";\nimport { Progress } from \"@/bilesenler/arayuz/progress\";\nimport { Separator } from \"@/bilesenler/arayuz/separator\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/bilesenler/arayuz/popover\";\nimport { Calendar as CalendarComponent } from \"@/bilesenler/arayuz/calendar\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/bilesenler/arayuz/alert-dialog\";\nimport { apiRequest, sorguIstemcisi } from \"@/kutuphane/sorguIstemcisi\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { tytTopics, aytTopics } from \"@/data/yks-konular\";\n\n// Türkiye saatine göre bugünün tarihini döndüren yardımcı fonksiyon (UTC sorununu çözer)\nconst getTurkeyDate = (): string => {\n  const now = new Date();\n  const year = now.getFullYear();\n  const month = String(now.getMonth() + 1).padStart(2, '0');\n  const day = String(now.getDate()).padStart(2, '0');\n  return `${year}-${month}-${day}`;\n};\n\n// Başlık harflerinin dönüştürülmesi için yardımcı işlev\nconst toTitleCase = (str: string): string => {\n  return str.trim()\n    .toLowerCase()\n    .split(' ')\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(' ');\n};\n\n// Sayı inputlarından önde gelen sıfırları temizleyen yardımcı fonksiyon\nconst cleanNumberInput = (value: string): string => {\n  // Boş string veya sadece \"0\" ise olduğu gibi bırak\n  if (value === '' || value === '0') return value;\n  // Önde gelen sıfırları temizle (örn: \"015\" -> \"15\")\n  return value.replace(/^0+/, '') || '0';\n};\n\n// Konu isimlerinden TYT/AYT ve ders başlıklarını kaldıran yardımcı fonksiyon\nconst normalizeTopic = (topic: any): string => {\n  // topic'in string olduğundan emin ol\n  if (typeof topic !== 'string') {\n    if (topic && typeof topic === 'object') {\n      topic = topic.topic || topic.name || String(topic);\n    } else {\n      topic = String(topic || '');\n    }\n  }\n  // \"TYT Türkçe - \" veya \"AYT Fizik - \" gibi desenleri konu isimlerinden kaldırır\n  return topic.replace(/^(TYT|AYT)\\s+[^-]+\\s*-\\s*/, '').trim();\n};\n\n// Ders adına göre örnek konular döndüren yardımcı fonksiyon\nconst getTopicExamples = (examType: string, subject: string): string => {\n  const allTopics = examType === 'TYT' ? tytTopics : aytTopics;\n  const subjectData = allTopics.find(s => s.name === subject || s.name.includes(subject));\n  \n  if (subjectData && subjectData.topics.length > 0) {\n    const exampleTopics = subjectData.topics.slice(0, 3).map(t => t.topic).join(', ');\n    return `Örnek: ${exampleTopics}...`;\n  }\n  \n  return \"Konu adını yazın ve Enter'a basın...\";\n};\n\n// Deneme modalı için ders adına göre örnek konular döndüren yardımcı fonksiyon\nconst getTopicExamplesForExam = (examType: string, subjectKey: string): string => {\n  const subjectNameMap: {[key: string]: string} = {\n    'turkce': 'Türkçe',\n    'matematik': 'Matematik',\n    'fizik': 'Fizik',\n    'kimya': 'Kimya',\n    'biyoloji': 'Biyoloji',\n    'sosyal': 'Sosyal Bilimler',\n    'fen': 'Fen Bilimleri',\n    'geometri': 'Geometri'\n  };\n  \n  const subjectName = subjectNameMap[subjectKey] || subjectKey;\n  const allTopics = examType === 'TYT' ? tytTopics : aytTopics;\n  const subjectData = allTopics.find(s => {\n    if (examType === 'TYT') {\n      return s.name === `TYT ${subjectName}` || s.name.includes(subjectName);\n    } else {\n      return s.name === `AYT ${subjectName}` || s.name.includes(subjectName);\n    }\n  });\n  \n  if (subjectData && subjectData.topics.length > 0) {\n    const exampleTopics = subjectData.topics.slice(0, 4).map(t => t.topic).join(', ');\n    return `Örnek: ${exampleTopics}...`;\n  }\n  \n  return `Örnek konular: konu1, konu2, konu3...`;\n};\n\ninterface DailySummary {\n  date: string;\n  tasksCompleted: number;\n  totalTasks: number;\n  moods: any[];\n  productivity: number;\n}\n\ninterface TopicStats {\n  topic: string;\n  wrongMentions: number;\n  totalSessions: number;\n  mentionFrequency: number;\n}\n\ninterface PriorityTopic {\n  topic: string;\n  priority: number;\n  lastSeen: string;\n  improvementNeeded: boolean;\n}\n\nexport default function Dashboard() {\n  const [showQuestionDialog, setShowQuestionDialog] = useState(false);\n  const [editingQuestionLog, setEditingQuestionLog] = useState<QuestionLog | null>(null);\n  const [showDeleteAllQuestionsDialog, setShowDeleteAllQuestionsDialog] = useState(false);\n  const [showDeleteAllExamsDialog, setShowDeleteAllExamsDialog] = useState(false);\n  const [showArchivedExamsModal, setShowArchivedExamsModal] = useState(false);\n  const [newQuestion, setNewQuestion] = useState({ \n    exam_type: \"TYT\" as \"TYT\" | \"AYT\", \n    subject: \"Türkçe\", \n    correct_count: \"\", \n    wrong_count: \"\", \n    blank_count: \"\", \n    study_date: getTurkeyDate(),\n    wrong_topics: [] as Array<{\n      topic: string;\n      difficulty: 'kolay' | 'orta' | 'zor';\n      category: 'kavram' | 'hesaplama' | 'analiz' | 'dikkatsizlik';\n      notes?: string;\n    }>,\n    time_spent_minutes: \"\"\n  });\n  const [wrongTopicInput, setWrongTopicInput] = useState(\"\");\n  const [selectedTopicDifficulty, setSelectedTopicDifficulty] = useState<'kolay' | 'orta' | 'zor'>('kolay');\n  const [selectedTopicCategory, setSelectedTopicCategory] = useState<'kavram' | 'hesaplama' | 'analiz' | 'dikkatsizlik'>('kavram');\n  const [showExamDialog, setShowExamDialog] = useState(false);\n  const [editingExam, setEditingExam] = useState<ExamResult | null>(null);\n  const [newExamResult, setNewExamResult] = useState({ \n    exam_name: \"\", \n    display_name: \"\",\n    exam_date: getTurkeyDate(), \n    exam_type: \"TYT\" as \"TYT\" | \"AYT\",\n    examScope: \"full\" as \"full\" | \"branch\",\n    selectedSubject: \"turkce\" as string,\n    wrongTopicsText: \"\",\n    time_spent_minutes: \"\",\n    subjects: {\n      turkce: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n      matematik: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n      sosyal: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n      fen: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n      fizik: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n      kimya: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n      biyoloji: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n      geometri: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] }\n    }\n  });\n  const [currentWrongTopics, setCurrentWrongTopics] = useState<{[key: string]: string}>({});\n  const [selectedHeatmapDay, setSelectedHeatmapDay] = useState<{\n    date: string;\n    count: number;\n    questionCount: number;\n    taskCount: number;\n    intensity: number;\n    dayActivities: {\n      questions: any[];\n      tasks: any[];\n      exams: any[];\n      studyHours?: any[];\n    };\n  } | null>(null);\n  const [expandedExams, setExpandedExams] = useState<Set<string>>(new Set());\n\n  // Çalışma Saati Modal Durumu\n  const [showStudyHoursModal, setShowStudyHoursModal] = useState(false);\n  const [newStudyHours, setNewStudyHours] = useState({\n    study_date: getTurkeyDate(),\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n  });\n\n  // Arşivlenen Veriler Modal Durumu\n  const [showArchivedDataModal, setShowArchivedDataModal] = useState(false);\n  const [archivedTab, setArchivedTab] = useState<'questions' | 'exams' | 'tasks' | 'studyHours'>('questions');\n  const [nextArchiveCountdown, setNextArchiveCountdown] = useState<string>(\"\");\n  const [showDeleteAllDataDialog, setShowDeleteAllDataDialog] = useState(false);\n  const [showDeleteAllDataConfirmDialog, setShowDeleteAllDataConfirmDialog] = useState(false);\n  \n  // Deneme Geçmişi Modal Durumu\n  const [showExamHistoryModal, setShowExamHistoryModal] = useState(false);\n  const [examHistoryFilter, setExamHistoryFilter] = useState<'all' | 'tyt-general' | 'ayt-general' | 'tyt-branch' | 'ayt-branch'>('all');\n  \n  // Soru Geçmişi Modal Durumu\n  const [showQuestionHistoryModal, setShowQuestionHistoryModal] = useState(false);\n  const [questionHistoryFilter, setQuestionHistoryFilter] = useState<'all' | 'tyt' | 'ayt'>('all');\n  \n  // Tamamlanan Hatalı Konular Modal Durumu\n  const [showCompletedTopicsModal, setShowCompletedTopicsModal] = useState(false);\n  const [completedTopicsRefreshKey, setCompletedTopicsRefreshKey] = useState(0);\n  \n  // Rapor Gönderme Modal ve Lock Durumu\n  const [reportLockEnabled, setReportLockEnabled] = useState(false);\n  const [showReportModal, setShowReportModal] = useState(false);\n  \n  // Ay sonu geri sayım hesaplama - gerçek zamanlı\n  const [monthEndCountdown, setMonthEndCountdown] = useState({ hours: 0, minutes: 0, seconds: 0 });\n  \n  useEffect(() => {\n    const updateCountdown = () => {\n      const now = new Date();\n      const lastDayOfMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59);\n      const diff = lastDayOfMonth.getTime() - now.getTime();\n      \n      const hours = Math.floor(diff / (1000 * 60 * 60));\n      const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\n      const seconds = Math.floor((diff % (1000 * 60)) / 1000);\n      \n      setMonthEndCountdown({ hours, minutes, seconds });\n    };\n    \n    updateCountdown();\n    const interval = setInterval(updateCountdown, 1000);\n    \n    return () => clearInterval(interval);\n  }, []);\n\n  // URL parametresi kontrolü - Rapor modalını aç\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    if (params.get('openReport') === 'true') {\n      setShowReportModal(true);\n      // URL'den parametreyi temizle\n      window.history.replaceState({}, '', '/panel');\n    }\n  }, []);\n  \n  // Tüm Verileri Temizle 3. Modal ve Geri Sayım - BERAT CANKIR - 03:03:03\n  const [showDeleteAllDataCountdownDialog, setShowDeleteAllDataCountdownDialog] = useState(false);\n  const [deleteCountdown, setDeleteCountdown] = useState(300); // 5 dakika = 300 saniye\n  const [isDeleteButtonUnlocked, setIsDeleteButtonUnlocked] = useState(false);\n\n  // Arşivlenen verileri getir (modal için)\n  const { data: archivedQuestionsModal = [] } = useQuery<QuestionLog[]>({\n    queryKey: [\"/api/question-logs/archived\"],\n    enabled: showArchivedDataModal,\n  });\n\n  const { data: archivedExamsModal = [] } = useQuery<ExamResult[]>({\n    queryKey: [\"/api/exam-results/archived\"],\n    enabled: showArchivedDataModal,\n  });\n\n  // Arşivlenen deneme sonuçlarını ayrı modal için getir\n  const { data: archivedExams = [] } = useQuery<ExamResult[]>({\n    queryKey: [\"/api/exam-results/archived\"],\n    enabled: showArchivedExamsModal,\n  });\n\n  const { data: archivedTasksModal = [] } = useQuery<Task[]>({\n    queryKey: [\"/api/tasks/archived\"],\n    enabled: showArchivedDataModal,\n  });\n\n  const { data: archivedStudyHoursModal = [] } = useQuery<any[]>({\n    queryKey: [\"/api/study-hours/archived\"],\n    enabled: showArchivedDataModal,\n  });\n\n  // Tüm mutasyonları sil\n  const deleteAllQuestionLogsMutation = useMutation({\n    mutationFn: () => apiRequest(\"DELETE\", \"/api/question-logs/all\"),\n    onSuccess: () => {\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/question-logs\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/topics/stats\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/topics/priority\"] });\n      toast({ title: \"🗑️ Tüm soru kayıtları silindi\", description: \"Tüm soru çözüm kayıtlarınız başarıyla silindi.\" });\n    },\n    onError: () => {\n      toast({ title: \"❌ Hata\", description: \"Soru kayıtları silinemedi.\", variant: \"destructive\" });\n    },\n  });\n\n  const deleteAllExamResultsMutation = useMutation({\n    mutationFn: () => apiRequest(\"DELETE\", \"/api/exam-results/all\"),\n    onSuccess: () => {\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/exam-results\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/exam-subject-nets\"] });\n      toast({ title: \"🗑️ Tüm denemeler silindi\", description: \"Tüm deneme sınav sonuçlarınız başarıyla silindi.\" });\n    },\n    onError: () => {\n      toast({ title: \"❌ Hata\", description: \"Denemeler silinemedi.\", variant: \"destructive\" });\n    },\n  });\n\n  const deleteExamResultMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/exam-results/${id}`),\n    onSuccess: () => {\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/exam-results\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/exam-results/archived\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/exam-subject-nets\"] });\n      toast({ title: \"🗑️ Deneme silindi\", description: \"Deneme sınav sonucu başarıyla silindi.\", duration: 3000 });\n    },\n    onError: () => {\n      toast({ title: \"❌ Hata\", description: \"Deneme silinemedi.\", variant: \"destructive\", duration: 3000 });\n    },\n  });\n\n  const archiveExamResultMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"PUT\", `/api/exam-results/${id}`, { archived: true, archivedAt: new Date().toISOString() }),\n    onSuccess: () => {\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/exam-results\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/exam-results/archived\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/exam-subject-nets\"] });\n      toast({ title: \"📦 Arşivlendi\", description: \"Deneme arşive taşındı. Raporlarda görünmeye devam edecek.\", duration: 3000 });\n    },\n    onError: () => {\n      toast({ title: \"❌ Hata\", description: \"Deneme arşivlenemedi.\", variant: \"destructive\", duration: 3000 });\n    },\n  });\n\n  const unarchiveExamResultMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"PUT\", `/api/exam-results/${id}`, { archived: false, archivedAt: null }),\n    onSuccess: () => {\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/exam-results\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/exam-results/archived\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/exam-subject-nets\"] });\n      toast({ title: \"📤 Arşivden Çıkarıldı\", description: \"Deneme aktif denemelere geri taşındı.\", duration: 3000 });\n    },\n    onError: () => {\n      toast({ title: \"❌ Hata\", description: \"Deneme arşivden çıkarılamadı.\", variant: \"destructive\", duration: 3000 });\n    },\n  });\n\n  const sendReportMutation = useMutation({\n    mutationFn: () => apiRequest(\"POST\", \"/api/reports/send\", { isManualRequest: true }),\n    onSuccess: () => {\n      toast({ title: \"📧 Rapor Gönderildi\", description: \"Aylık ilerleme raporunuz .env dosyasındaki email adresine gönderildi.\", duration: 5000 });\n      setShowReportModal(false);\n    },\n    onError: () => {\n      toast({ title: \"❌ Hata\", description: \"Rapor gönderilemedi. .env dosyasındaki EMAIL_USER ve EMAIL_PASS ayarlarını kontrol edin.\", variant: \"destructive\", duration: 5000 });\n    },\n  });\n\n  const archiveAllExamResultsMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"GET\", \"/api/exam-results\");\n      const results = await response.json() as ExamResult[];\n      const archivePromises = results.map((exam: ExamResult) => \n        apiRequest(\"PUT\", `/api/exam-results/${exam.id}`, { archived: true, archivedAt: new Date().toISOString() })\n      );\n      await Promise.all(archivePromises);\n    },\n    onSuccess: () => {\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/exam-results\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/exam-results/archived\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/exam-subject-nets\"] });\n      toast({ title: \"📦 Tümü Arşivlendi\", description: \"Tüm deneme sonuçları arşive taşındı. Raporlarda görünmeye devam edecek.\", duration: 3000 });\n    },\n    onError: () => {\n      toast({ title: \"❌ Hata\", description: \"Denemeler arşivlenemedi.\", variant: \"destructive\", duration: 3000 });\n    },\n  });\n\n  // TÜM VERİLERİ VE CACHE'LERİ TEMİZLE\n  const deleteAllDataMutation = useMutation({\n    mutationFn: async () => {\n      // Tüm verileri sil - hataları görmezden gel (bazı endpoint'ler olmayabilir)\n      const deletePromises = [\n        apiRequest(\"DELETE\", \"/api/question-logs/all\").catch(() => null),\n        apiRequest(\"DELETE\", \"/api/exam-results/all\").catch(() => null),\n        apiRequest(\"DELETE\", \"/api/study-hours/all\").catch(() => null),\n      ];\n      \n      await Promise.allSettled(deletePromises);\n      \n      // BERAT CANKIR - 03:03:03 - TÜM DEPOLAMALARI TEMİZLE\n      // localStorage'daki TÜM verileri temizle\n      localStorage.clear();\n      \n      // sessionStorage'daki TÜM verileri temizle\n      sessionStorage.clear();\n      \n      // IndexedDB'deki TÜM verileri temizle\n      if ('indexedDB' in window) {\n        try {\n          const databases = await window.indexedDB.databases();\n          for (const db of databases) {\n            if (db.name) {\n              window.indexedDB.deleteDatabase(db.name);\n            }\n          }\n        } catch (e) {\n          console.log('IndexedDB temizlenemedi:', e);\n        }\n      }\n      \n      // Service Worker cache'lerini temizle\n      if ('caches' in window) {\n        try {\n          const cacheNames = await caches.keys();\n          await Promise.all(cacheNames.map(name => caches.delete(name)));\n        } catch (e) {\n          console.log('Cache temizlenemedi:', e);\n        }\n      }\n      \n      return { success: true };\n    },\n    onSuccess: () => {\n      // Tüm query cache'lerini temizle\n      sorguIstemcisi.clear();\n      \n      // Tüm queryKey'leri invalidate et\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/question-logs\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/exam-results\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/study-hours\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/exam-subject-nets\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/topics/stats\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/topics/priority\"] });\n      \n      toast({ \n        title: \"🗑️ Tüm veriler temizlendi\", \n        description: \"Tüm verileriniz ve cache'ler başarıyla silindi. Uygulama yenileniyor...\",\n        duration: 3000\n      });\n      \n      // 2 saniye sonra sayfayı yenile\n      setTimeout(() => {\n        window.location.reload();\n      }, 2000);\n    },\n    onError: () => {\n      toast({ title: \"❌ Hata\", description: \"Veriler temizlenemedi.\", variant: \"destructive\" });\n    },\n  });\n\n  // Arşivden silme mutations\n  const deleteArchivedQuestionMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/question-logs/${id}`),\n    onSuccess: () => {\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/question-logs/archived\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/question-logs\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/topics/stats\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/topics/priority\"] });\n      toast({ title: \"🗑️ Soru silindi\", description: \"Arşivlenen soru başarıyla silindi.\" });\n    },\n  });\n\n  const deleteArchivedExamMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/exam-results/${id}`),\n    onSuccess: () => {\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/exam-results/archived\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/exam-results\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/exam-subject-nets\"] });\n      toast({ title: \"🗑️ Deneme silindi\", description: \"Arşivlenen deneme başarıyla silindi.\" });\n    },\n  });\n\n  const deleteArchivedTaskMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/tasks/${id}`),\n    onSuccess: () => {\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/tasks/archived\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      toast({ title: \"🗑️ Görev silindi\", description: \"Arşivlenen görev başarıyla silindi.\" });\n    },\n  });\n\n  const { toast } = useToast();\n\n  const { data: tasks = [] } = useQuery<Task[]>({\n    queryKey: [\"/api/tasks\"],\n    staleTime: 30000,\n    gcTime: 300000,\n  });\n\n  const { data: archivedTasks = [] } = useQuery<Task[]>({\n    queryKey: [\"/api/tasks/archived\"],\n    staleTime: 60000,\n    gcTime: 600000,\n  });\n\n  const { data: dailySummary = [] } = useQuery<DailySummary[]>({\n    queryKey: [\"/api/summary/daily\"],\n    staleTime: 60000,\n    gcTime: 600000,\n  });\n  \n  const { data: questionLogs = [] } = useQuery<QuestionLog[]>({\n    queryKey: [\"/api/question-logs\"],\n    staleTime: 30000,\n    gcTime: 300000,\n  });\n\n  const { data: archivedQuestionLogs = [] } = useQuery<QuestionLog[]>({\n    queryKey: [\"/api/question-logs/archived\"],\n    staleTime: 60000,\n    gcTime: 600000,\n  });\n  \n  const { data: examResults = [] } = useQuery<ExamResult[]>({\n    queryKey: [\"/api/exam-results\"],\n    staleTime: 30000,\n    gcTime: 300000,\n  });\n\n  const { data: archivedExamResults = [] } = useQuery<ExamResult[]>({\n    queryKey: [\"/api/exam-results/archived\"],\n    staleTime: 60000,\n    gcTime: 600000,\n  });\n\n  const { data: topicStats = [] } = useQuery<TopicStats[]>({\n    queryKey: [\"/api/topics/stats\"],\n    staleTime: 30000,\n    gcTime: 300000,\n  });\n\n  const { data: priorityTopics = [] } = useQuery<PriorityTopic[]>({\n    queryKey: [\"/api/topics/priority\"],\n    staleTime: 30000,\n    gcTime: 300000,\n  });\n\n  const { data: studyHours = [] } = useQuery<any[]>({\n    queryKey: [\"/api/study-hours\"],\n    staleTime: 30000,\n    gcTime: 300000,\n  });\n\n  const { data: archivedStudyHours = [] } = useQuery<any[]>({\n    queryKey: [\"/api/study-hours/archived\"],\n    staleTime: 60000,\n    gcTime: 600000,\n  });\n\n  // Heatmap/takvim ve raporlar için TÜM verileri birleştir (arşivli + aktif)\n  const allTasks = useMemo(() => [...tasks, ...archivedTasks], [tasks, archivedTasks]);\n  const allQuestionLogs = useMemo(() => [...questionLogs, ...archivedQuestionLogs], [questionLogs, archivedQuestionLogs]);\n  const allStudyHours = useMemo(() => [...studyHours, ...archivedStudyHours], [studyHours, archivedStudyHours]);\n  const allExamResults = useMemo(() => [...examResults, ...archivedExamResults], [examResults, archivedExamResults]);\n  \n  // Geri Sayım Yönetimi - BERAT CANKIR - 03:03:03\n  useEffect(() => {\n    if (!showDeleteAllDataCountdownDialog) return;\n    \n    const timer = setInterval(() => {\n      setDeleteCountdown((prev) => {\n        if (prev <= 1) {\n          clearInterval(timer);\n          // Geri sayım bitti, verileri sil\n          deleteAllDataMutation.mutate();\n          setShowDeleteAllDataCountdownDialog(false);\n          return 300;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n    \n    return () => clearInterval(timer);\n  }, [showDeleteAllDataCountdownDialog]);\n\n  // localStorage değişikliklerini dinle (Tamamlanan Hatalı Konular için)\n  useEffect(() => {\n    const handleLocalStorageUpdate = () => {\n      setCompletedTopicsRefreshKey(prev => prev + 1);\n    };\n    \n    window.addEventListener('localStorageUpdate', handleLocalStorageUpdate);\n    \n    return () => {\n      window.removeEventListener('localStorageUpdate', handleLocalStorageUpdate);\n    };\n  }, []);\n\n  // Eski çalışma saatlerini SİLME - ar şivleme sistemi kullan\n  // useEffect kaldırıldı - veriler artık otomatik arşivleniyor, silinmiyor\n\n  // Gereksiz yeniden render işlemlerini önlemek için useMemo ile optimize edilmiş hesaplamalar\n  // ARŞİVLENEN VERİLERİ DAHİL ET - Arşivlenen veriler de performans özetinde gösterilecek\n  const memoizedStats = useMemo(() => {\n    const totalQuestions = allQuestionLogs.reduce((sum, log) => {\n      return sum + (parseInt(log.correct_count) || 0) + (parseInt(log.wrong_count) || 0) + (parseInt(log.blank_count) || 0);\n    }, 0);\n\n    const totalCorrect = allQuestionLogs.reduce((sum, log) => {\n      return sum + (parseInt(log.correct_count) || 0);\n    }, 0);\n\n    const totalWrong = allQuestionLogs.reduce((sum, log) => {\n      return sum + (parseInt(log.wrong_count) || 0);\n    }, 0);\n\n    const averageAccuracy = totalQuestions > 0 ? (totalCorrect / totalQuestions) * 100 : 0;\n    \n    return {\n      totalQuestions,\n      totalCorrect,\n      totalWrong,\n      averageAccuracy\n    };\n  }, [allQuestionLogs]);\n\n  const memoizedExamStats = useMemo(() => {\n    const totalExams = allExamResults.length;\n    const tytExams = allExamResults.filter(exam => exam.tyt_net && parseFloat(exam.tyt_net) > 0).length;\n    const aytExams = allExamResults.filter(exam => exam.ayt_net && parseFloat(exam.ayt_net) > 0).length;\n    \n    const lastTytNet = allExamResults\n      .filter(exam => exam.tyt_net && parseFloat(exam.tyt_net) > 0)\n      .sort((a, b) => new Date(b.exam_date).getTime() - new Date(a.exam_date).getTime())[0]?.tyt_net || \"0\";\n    \n    const lastAytNet = allExamResults\n      .filter(exam => exam.ayt_net && parseFloat(exam.ayt_net) > 0)\n      .sort((a, b) => new Date(b.exam_date).getTime() - new Date(a.exam_date).getTime())[0]?.ayt_net || \"0\";\n\n    return {\n      totalExams,\n      tytExams,\n      aytExams,\n      lastTytNet: parseFloat(lastTytNet),\n      lastAytNet: parseFloat(lastAytNet)\n    };\n  }, [allExamResults]);\n\n\n  const createQuestionLogMutation = useMutation({\n    mutationFn: (data: InsertQuestionLog) => apiRequest(\"POST\", \"/api/question-logs\", data),\n    onSuccess: () => {\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/question-logs\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/topics/stats\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/topics/priority\"] });\n      toast({ title: \"✅ Soru kaydı eklendi\", description: \"Soru çözüm kaydınız eklendi ve analiz güncellendi!\" });\n      setShowQuestionDialog(false);\n      setNewQuestion({ \n        exam_type: \"TYT\", \n        subject: \"Türkçe\", \n        correct_count: \"\", \n        wrong_count: \"\", \n        blank_count: \"\", \n        study_date: getTurkeyDate(),\n        wrong_topics: [],\n        time_spent_minutes: \"\"\n      });\n      setWrongTopicInput(\"\");\n    },\n    onError: () => {\n      toast({ title: \"❌ Hata\", description: \"Soru kaydı eklenemedi.\", variant: \"destructive\" });\n    },\n  });\n\n  const deleteQuestionLogMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/question-logs/${id}`),\n    onSuccess: () => {\n      // Tüm ilgili query'leri invalidate et\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/question-logs\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/question-logs/archived\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/topics/stats\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/topics/priority\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/calendar\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/summary/daily\"] });\n      toast({ title: \"🗑️ Soru kaydı silindi\", description: \"Soru çözüm kaydınız başarıyla silindi.\" });\n    },\n    onError: (error: any) => {\n      console.error(\"Delete error:\", error);\n      toast({ title: \"❌ Hata\", description: error?.message || \"Soru kaydı silinemedi.\", variant: \"destructive\" });\n    },\n  });\n\n  const archiveQuestionLogMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"PUT\", `/api/question-logs/${id}`, { archived: true, archivedAt: new Date().toISOString() }),\n    onSuccess: () => {\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/question-logs\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/question-logs/archived\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/topics/stats\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/topics/priority\"] });\n      toast({ title: \"📦 Arşivlendi\", description: \"Soru kaydı arşive taşındı. Raporlarda görünmeye devam edecek.\", duration: 3000 });\n    },\n    onError: () => {\n      toast({ title: \"❌ Hata\", description: \"Soru kaydı arşivlenemedi.\", variant: \"destructive\", duration: 3000 });\n    },\n  });\n\n  const updateQuestionLogMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<InsertQuestionLog> }) => \n      apiRequest(\"PUT\", `/api/question-logs/${id}`, data),\n    onSuccess: () => {\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/question-logs\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/topics/stats\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/topics/priority\"] });\n      setEditingQuestionLog(null);\n      setShowQuestionDialog(false);\n      toast({ title: \"📝 Soru kaydı güncellendi\", description: \"Soru çözüm kaydınız başarıyla güncellendi.\" });\n    },\n    onError: () => {\n      toast({ title: \"❌ Hata\", description: \"Soru kaydı güncellenemedi.\", variant: \"destructive\" });\n    },\n  });\n\n  const updateExamResultMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<InsertExamResult> }) => \n      apiRequest(\"PUT\", `/api/exam-results/${id}`, data),\n    onSuccess: () => {\n      setEditingExam(null);\n      setShowExamDialog(false);\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/exam-results\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/exam-subject-nets\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/topics/stats\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/topics/priority\"] });\n      toast({ title: \"📝 Deneme güncellendi\", description: \"Deneme sınav sonucunuz başarıyla güncellendi.\" });\n      setCurrentWrongTopics({});\n      setNewExamResult({ \n        exam_name: \"\", \n        display_name: \"\",\n        exam_date: getTurkeyDate(), \n        exam_type: \"TYT\" as \"TYT\" | \"AYT\",\n        examScope: \"full\" as \"full\" | \"branch\",\n        selectedSubject: \"turkce\" as string,\n        wrongTopicsText: \"\",\n        time_spent_minutes: \"\",\n        subjects: {\n          turkce: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n          matematik: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n          sosyal: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n          fen: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n          fizik: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n          kimya: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n          biyoloji: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n          geometri: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] }\n        }\n      });\n    },\n    onError: () => {\n      toast({ title: \"❌ Hata\", description: \"Deneme güncellenemedi.\", variant: \"destructive\" });\n    },\n  });\n  \n  const createExamResultMutation = useMutation({\n    mutationFn: (data: InsertExamResult) => apiRequest(\"POST\", \"/api/exam-results\", data),\n    onSuccess: () => {\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/exam-results\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/exam-subject-nets\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/question-logs\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/topics/stats\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/topics/priority\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/calendar\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/summary/daily\"] });\n      toast({ title: \"Deneme sonucu eklendi\", description: \"Deneme sınav sonucunuz kaydedildi.\" });\n      setShowExamDialog(false);\n      setEditingExam(null);\n      setNewExamResult({ \n        exam_name: \"\", \n        display_name: \"\",\n        exam_date: getTurkeyDate(), \n        exam_type: \"TYT\" as \"TYT\" | \"AYT\",\n        examScope: \"full\" as \"full\" | \"branch\",\n        selectedSubject: \"turkce\" as string,\n        wrongTopicsText: \"\",\n        time_spent_minutes: \"\",\n        subjects: {\n          turkce: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n          matematik: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n          sosyal: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n          fen: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n          fizik: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n          kimya: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n          biyoloji: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n          geometri: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] }\n        }\n      });\n      setCurrentWrongTopics({}); // Tüm yanlış konu giriş alanlarını temizle\n    },\n    onError: () => {\n      toast({ title: \"Hata\", description: \"Deneme sonucu eklenemedi.\", variant: \"destructive\" });\n    },\n  });\n\n  const createStudyHoursMutation = useMutation({\n    mutationFn: (data: any) => {\n      // Aynı gün için zaten kayıt var mı kontrol et\n      const existingEntry = studyHours.find((sh: any) => sh.study_date === data.study_date);\n      if (existingEntry) {\n        throw new Error(\"Bu tarih için zaten çalışma saati kaydı var!\");\n      }\n      return apiRequest(\"POST\", \"/api/study-hours\", data);\n    },\n    onSuccess: () => {\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/study-hours\"] });\n      toast({ title: \"⏱️ Çalışma saati eklendi\", description: \"Çalışma süreniz başarıyla kaydedildi!\" });\n      setShowStudyHoursModal(false);\n      setNewStudyHours({\n        study_date: getTurkeyDate(),\n        hours: 0,\n        minutes: 0,\n        seconds: 0,\n      });\n    },\n    onError: (error: any) => {\n      const message = error?.message || \"Çalışma saati eklenemedi.\";\n      toast({ title: \"❌ Hata\", description: message, variant: \"destructive\" });\n    },\n  });\n\n  const deleteStudyHoursMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/study-hours/${id}`),\n    onSuccess: () => {\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/study-hours\"] });\n      toast({ title: \"🗑️ Çalışma saati silindi\", description: \"Çalışma süreniz başarıyla silindi.\" });\n    },\n    onError: () => {\n      toast({ title: \"Hata\", description: \"Çalışma saati silinemedi.\", variant: \"destructive\" });\n    },\n  });\n\n  // Gereksiz yeniden render işlemlerini önlemek için useCallback ile optimize edilmiş olay işleyicileri\n  const handleQuestionLogSubmit = useCallback(() => {\n    const questionData: InsertQuestionLog = {\n      exam_type: newQuestion.exam_type,\n      subject: newQuestion.subject,\n      correct_count: newQuestion.correct_count,\n      wrong_count: newQuestion.wrong_count,\n      blank_count: newQuestion.blank_count,\n      study_date: newQuestion.study_date,\n      wrong_topics_json: JSON.stringify(newQuestion.wrong_topics),\n      time_spent_minutes: newQuestion.time_spent_minutes ? parseInt(newQuestion.time_spent_minutes) : null\n    };\n\n    if (editingQuestionLog) {\n      updateQuestionLogMutation.mutate({ id: editingQuestionLog.id, data: questionData });\n    } else {\n      createQuestionLogMutation.mutate(questionData);\n    }\n  }, [newQuestion, editingQuestionLog, updateQuestionLogMutation, createQuestionLogMutation]);\n\n  const handleResetQuestionForm = useCallback(() => {\n    setNewQuestion({ \n      exam_type: \"TYT\", \n      subject: \"Türkçe\", \n      correct_count: \"\", \n      wrong_count: \"\", \n      blank_count: \"\", \n      study_date: getTurkeyDate(),\n      wrong_topics: [],\n      time_spent_minutes: \"\"\n    });\n    setWrongTopicInput(\"\");\n    setEditingQuestionLog(null);\n    setShowQuestionDialog(false);\n  }, []);\n\n  const handleAddWrongTopic = useCallback(() => {\n    if (wrongTopicInput.trim()) {\n      const topic = {\n        topic: toTitleCase(wrongTopicInput.trim()),\n        difficulty: selectedTopicDifficulty,\n        category: selectedTopicCategory,\n        notes: \"\"\n      };\n      setNewQuestion(prev => ({\n        ...prev,\n        wrong_topics: [...prev.wrong_topics, topic]\n      }));\n      setWrongTopicInput(\"\");\n    }\n  }, [wrongTopicInput, selectedTopicDifficulty, selectedTopicCategory]);\n\n  const handleRemoveWrongTopic = useCallback((index: number) => {\n    setNewQuestion(prev => ({\n      ...prev,\n      wrong_topics: prev.wrong_topics.filter((_, i) => i !== index)\n    }));\n  }, []);\n\n  const handleOpenQuestionDialog = useCallback(() => {\n    // Diyalog penceresini açarken tarihi her zaman bugüne güncelle\n    setNewQuestion(prev => ({\n      ...prev,\n      study_date: getTurkeyDate() // Bugünün tarihine ayarla\n    }));\n    setShowQuestionDialog(true);\n  }, []);\n\n  const handleExamResultSubmit = useCallback(() => {\n    // Soru limitleri - SUBJECT_LIMITS'den alınacak\n    const getSubjectLimit = (examType: string, subject: string): number => {\n      // Subject key mapping\n      const subjectMap: Record<string, string> = {\n        'turkce': 'Türkçe',\n        'sosyal': 'Sosyal Bilimler',\n        'matematik': 'Matematik',\n                                'geometri': 'Geometri',\n        'fen': 'Fen Bilimleri',\n        'fizik': 'Fizik',\n        'kimya': 'Kimya',\n        'biyoloji': 'Biyoloji'\n      };\n      const mappedSubject = subjectMap[subject] || subject;\n      return SUBJECT_LIMITS[examType]?.[mappedSubject] || 100;\n    };\n    \n    // Soru sayısı kontrolü yap\n    const tytSubjects = ['turkce', 'sosyal', 'matematik', 'geometri', 'fen'];\n    const aytSubjects = ['matematik', 'geometri', 'fizik', 'kimya', 'biyoloji'];\n    \n    // Branş denemesi için sadece seçilen dersi kontrol et, Genel deneme için tüm dersleri kontrol et\n    const subjectsToCheck = newExamResult.examScope === \"branch\" \n      ? [newExamResult.selectedSubject] \n      : (newExamResult.exam_type === 'TYT' ? tytSubjects : aytSubjects);\n    \n    for (const subjectKey of subjectsToCheck) {\n      const subject = newExamResult.subjects[subjectKey];\n      if (subject) {\n        const correct = parseInt(subject.correct) || 0;\n        const wrong = parseInt(subject.wrong) || 0;\n        const blank = parseInt(subject.blank) || 0;\n        const total = correct + wrong + blank;\n        \n        // Branş denemesi için exam_type'a göre limit belirle\n        const examTypeForLimit = newExamResult.exam_type;\n        const limit = getSubjectLimit(examTypeForLimit, subjectKey);\n        \n        if (total > limit) {\n          toast({ \n            title: \"❌ Hata\", \n            description: `${examTypeForLimit} ${subjectKey.charAt(0).toUpperCase() + subjectKey.slice(1)} için toplam soru sayısı ${limit}'i geçemez! (Girilen: ${total})`,\n            variant: \"destructive\" \n          });\n          return;\n        }\n      }\n    }\n    \n    // Branş denemesiyse, wrongTopicsText'i subjects array'ine ekle\n    let updatedSubjects = { ...newExamResult.subjects };\n    if (newExamResult.examScope === \"branch\" && newExamResult.wrongTopicsText && newExamResult.wrongTopicsText.trim()) {\n      const topics = newExamResult.wrongTopicsText\n        .split(',')\n        .map(t => toTitleCase(t.trim()))\n        .filter(t => t.length > 0);\n      const uniqueTopics = [...new Set(topics)];\n      \n      updatedSubjects = {\n        ...updatedSubjects,\n        [newExamResult.selectedSubject]: {\n          ...updatedSubjects[newExamResult.selectedSubject],\n          wrong_topics: uniqueTopics\n        }\n      };\n    }\n    \n    // TYT ve AYT Net Hesapla - SADECE seçilen sınav tipi için hesaplama yap\n    let tytNet = 0;\n    let aytNet = 0;\n    \n    // Branş denemesi için sadece seçilen dersin netini hesapla, Genel deneme için tüm dersleri hesapla\n    if (newExamResult.exam_type === 'TYT') {\n      const subjectsToCalculate = newExamResult.examScope === \"branch\" \n        ? [newExamResult.selectedSubject] \n        : tytSubjects;\n      \n      subjectsToCalculate.forEach(subjectKey => {\n        const subject = updatedSubjects[subjectKey];\n        if (subject) {\n          const correct = parseInt(subject.correct) || 0;\n          const wrong = parseInt(subject.wrong) || 0;\n          tytNet += correct - (wrong * 0.25);\n        }\n      });\n    }\n    \n    // AYT seçildiyse sadece AYT netini hesapla\n    if (newExamResult.exam_type === 'AYT') {\n      const subjectsToCalculate = newExamResult.examScope === \"branch\" \n        ? [newExamResult.selectedSubject] \n        : aytSubjects;\n      \n      subjectsToCalculate.forEach(subjectKey => {\n        const subject = updatedSubjects[subjectKey];\n        if (subject) {\n          const correct = parseInt(subject.correct) || 0;\n          const wrong = parseInt(subject.wrong) || 0;\n          aytNet += correct - (wrong * 0.25);\n        }\n      });\n    }\n    \n    createExamResultMutation.mutate({\n      exam_name: newExamResult.exam_name,\n      exam_date: newExamResult.exam_date,\n      exam_type: newExamResult.exam_type, // Kritik: TYT/AYT ayrımı için exam_type'ı dahil et\n      exam_scope: newExamResult.examScope, // Kritik: Genel/Branş ayrımı için exam_scope'u dahil et\n      selected_subject: newExamResult.examScope === 'branch' ? newExamResult.selectedSubject : null,\n      tyt_net: Math.max(0, tytNet).toFixed(2), // Negatif olmamasını sağla ve 2 ondalık basamak\n      ayt_net: Math.max(0, aytNet).toFixed(2), // Negatif olmamasını sağla ve 2 ondalık basamak\n      subjects_data: JSON.stringify(updatedSubjects),\n      time_spent_minutes: parseInt(newExamResult.time_spent_minutes) || null\n    });\n  }, [newExamResult, createExamResultMutation]);\n\n  // Subject options based on TYT/AYT\n  const getSubjectOptions = (examType: string) => {\n    if (examType === \"TYT\") {\n      return [\"Türkçe\", \"Sosyal Bilimler\", \"Matematik\", \"Geometri\", \"Fizik\", \"Kimya\", \"Biyoloji\"];\n    } else {\n      return [\"Matematik\", \"Geometri\", \"Fizik\", \"Kimya\", \"Biyoloji\"];\n    }\n  };\n\n  // Heatmap verilerini oluştur - 1 Ocak'tan bugüne kadar tam yıl (OPTIMIZED with pre-computed maps)\n  const generateYearlyHeatmapData = () => {\n    const data = [];\n    // Türkiye saati (GMT+3) için bugünün tarihini al\n    const today = new Date();\n    const turkeyTimeString = today.toLocaleString('en-US', { timeZone: 'Europe/Istanbul' });\n    const turkeyDate = new Date(turkeyTimeString);\n    const currentYear = turkeyDate.getFullYear();\n    const currentMonth = turkeyDate.getMonth();\n    const currentDay = turkeyDate.getDate();\n    \n    // Türkiye saatinde YYYY-MM-DD formatını al (UTC kaymadan)\n    const todayDateStr = new Intl.DateTimeFormat('en-CA', { \n      timeZone: 'Europe/Istanbul' \n    }).format(today);\n    \n    // Pre-compute date maps for O(1) lookups instead of O(n) filters\n    const questionsByDate = new Map<string, number>();\n    const tasksByDate = new Map<string, number>();\n    const studyHoursByDate = new Map<string, number>();\n    const generalExamsByDate = new Map<string, number>();\n    const branchExamsByDate = new Map<string, number>();\n    const deletedQuestionsByDate = new Map<string, number>();\n    const deletedTasksByDate = new Map<string, number>();\n    const deletedStudyHoursByDate = new Map<string, number>();\n    const archivedTasksByDate = new Map<string, number>();\n    const archivedQuestionsByDate = new Map<string, number>();\n    const archivedStudyHoursByDate = new Map<string, number>();\n    const archivedGeneralExamsByDate = new Map<string, number>();\n    const archivedBranchExamsByDate = new Map<string, number>();\n    \n    allQuestionLogs.forEach(log => {\n      const questionCount = (parseInt(log.correct_count) || 0) + (parseInt(log.wrong_count) || 0) + (parseInt(log.blank_count || '0') || 0);\n      questionsByDate.set(log.study_date, (questionsByDate.get(log.study_date) || 0) + questionCount);\n      if (log.deleted) {\n        deletedQuestionsByDate.set(log.study_date, (deletedQuestionsByDate.get(log.study_date) || 0) + questionCount);\n      }\n      if (log.archived) {\n        archivedQuestionsByDate.set(log.study_date, (archivedQuestionsByDate.get(log.study_date) || 0) + questionCount);\n      }\n    });\n    \n    allExamResults.forEach(exam => {\n      if (exam.exam_scope === 'full') {\n        generalExamsByDate.set(exam.exam_date, (generalExamsByDate.get(exam.exam_date) || 0) + 1);\n        if (exam.archived) {\n          archivedGeneralExamsByDate.set(exam.exam_date, (archivedGeneralExamsByDate.get(exam.exam_date) || 0) + 1);\n        }\n      } else if (exam.exam_scope === 'branch') {\n        branchExamsByDate.set(exam.exam_date, (branchExamsByDate.get(exam.exam_date) || 0) + 1);\n        if (exam.archived) {\n          archivedBranchExamsByDate.set(exam.exam_date, (archivedBranchExamsByDate.get(exam.exam_date) || 0) + 1);\n        }\n      }\n    });\n    \n    allTasks.forEach(task => {\n      // Görevleri şu öncelikle göster:\n      // 1. Arşivlenmişse -> archivedAt tarihinde\n      // 2. Silinmişse -> deletedAt tarihinde (varsa)\n      // 3. Tamamlanmışsa -> completedAt tarihinde (SADECE TAMAMLANMIŞSA!)\n      // 4. Değilse -> dueDate veya createdAt'te\n      let taskDate: string | null = null;\n      \n      if (task.archived && task.archivedAt) {\n        taskDate = new Date(task.archivedAt).toISOString().split('T')[0];\n      } else if (task.deleted && task.deletedAt) {\n        taskDate = new Date(task.deletedAt).toISOString().split('T')[0];\n      } else if (task.completed && task.completedAt) {\n        taskDate = new Date(task.completedAt).toISOString().split('T')[0];\n      } else if (task.dueDate) {\n        taskDate = task.dueDate.split('T')[0];\n      } else if (task.createdAt) {\n        taskDate = new Date(task.createdAt).toISOString().split('T')[0];\n      }\n      \n      if (taskDate) {\n        tasksByDate.set(taskDate, (tasksByDate.get(taskDate) || 0) + 1);\n        if (task.deleted) {\n          deletedTasksByDate.set(taskDate, (deletedTasksByDate.get(taskDate) || 0) + 1);\n        }\n        if (task.archived) {\n          archivedTasksByDate.set(taskDate, (archivedTasksByDate.get(taskDate) || 0) + 1);\n        }\n      }\n    });\n    \n    allStudyHours.forEach(sh => {\n      studyHoursByDate.set(sh.study_date, (studyHoursByDate.get(sh.study_date) || 0) + 1);\n      if (sh.deleted) {\n        deletedStudyHoursByDate.set(sh.study_date, (deletedStudyHoursByDate.get(sh.study_date) || 0) + 1);\n      }\n      if (sh.archived) {\n        archivedStudyHoursByDate.set(sh.study_date, (archivedStudyHoursByDate.get(sh.study_date) || 0) + 1);\n      }\n    });\n    \n    // 1 Ocak'tan bugüne kadar tüm günleri oluştur (bugün DAHİL)\n    const startDate = new Date(currentYear, 0, 1);\n    \n    // Tüm günleri oluştur - bugünkü tarihe ulaşana kadar\n    for (let i = 0; ; i++) {\n      const currentDate = new Date(currentYear, 0, 1 + i, 12, 0, 0); // Öğlen saati = timezone safe\n      const dateStr = currentDate.toLocaleDateString('en-CA'); // YYYY-MM-DD format\n      \n      // Bugünü geçtikse dur\n      if (dateStr > todayDateStr) break;\n      \n      // O(1) lookup from pre-computed maps\n      const questionCount = questionsByDate.get(dateStr) || 0;\n      const taskCount = tasksByDate.get(dateStr) || 0;\n      const studyHoursCount = studyHoursByDate.get(dateStr) || 0;\n      const generalExamCount = generalExamsByDate.get(dateStr) || 0;\n      const branchExamCount = branchExamsByDate.get(dateStr) || 0;\n      const deletedQuestionCount = deletedQuestionsByDate.get(dateStr) || 0;\n      const deletedTaskCount = deletedTasksByDate.get(dateStr) || 0;\n      const deletedStudyHoursCount = deletedStudyHoursByDate.get(dateStr) || 0;\n      const archivedTaskCount = archivedTasksByDate.get(dateStr) || 0;\n      const archivedQuestionCount = archivedQuestionsByDate.get(dateStr) || 0;\n      const archivedStudyHoursCount = archivedStudyHoursByDate.get(dateStr) || 0;\n      const archivedGeneralExamCount = archivedGeneralExamsByDate.get(dateStr) || 0;\n      const archivedBranchExamCount = archivedBranchExamsByDate.get(dateStr) || 0;\n      \n      const studyIntensity = Math.min((questionCount * 2 + taskCount + studyHoursCount * 3 + generalExamCount * 4 + branchExamCount * 2) / 20, 1);\n      \n      // Bugün olup olmadığını kontrol et\n      const isToday = dateStr === todayDateStr;\n      \n      data.push({\n        date: dateStr,\n        day: currentDate.getDate(),\n        month: currentDate.getMonth(),\n        year: currentDate.getFullYear(),\n        dayOfWeek: currentDate.getDay(), // 0=Pazar, 1=Pazartesi, ...\n        intensity: studyIntensity,\n        count: questionCount + taskCount + studyHoursCount + generalExamCount + branchExamCount,\n        questionCount: questionCount,\n        taskCount: taskCount,\n        studyHoursCount: studyHoursCount,\n        generalExamCount: generalExamCount,\n        branchExamCount: branchExamCount,\n        deletedQuestionCount: deletedQuestionCount,\n        deletedTaskCount: deletedTaskCount,\n        deletedStudyHoursCount: deletedStudyHoursCount,\n        archivedTaskCount: archivedTaskCount,\n        archivedQuestionCount: archivedQuestionCount,\n        archivedStudyHoursCount: archivedStudyHoursCount,\n        archivedGeneralExamCount: archivedGeneralExamCount,\n        archivedBranchExamCount: archivedBranchExamCount,\n        isToday: isToday\n      });\n    }\n    \n    return data;\n  };\n\n  // Heatmap'i haftalara organize et - sadece bugüne kadar\n  const organizeHeatmapIntoWeeks = (data: any[]) => {\n    const weeks = [];\n    \n    if (data.length === 0) return weeks;\n    \n    // İlk günden başla\n    const firstDate = new Date(data[0].date);\n    const firstDayOfWeek = firstDate.getDay(); // 0=Paz, 1=Pzt, ...\n    const daysToMonday = firstDayOfWeek === 0 ? 6 : firstDayOfWeek - 1;\n    \n    // Hafta başlangıcı (Pazartesi)\n    const startDate = new Date(firstDate);\n    startDate.setDate(firstDate.getDate() - daysToMonday);\n    \n    // Bugüne kadar - haftayı tamamlama\n    const today = new Date();\n    \n    // Veri haritası oluştur\n    const dateMap = new Map();\n    data.forEach(day => {\n      dateMap.set(day.date, day);\n    });\n    \n    // Haftaları oluştur\n    const currentDate = new Date(startDate);\n    \n    while (currentDate <= today) {\n      const week = [];\n      \n      // Her hafta 7 gün (Pzt-Paz)\n      for (let i = 0; i < 7; i++) {\n        const dateStr = currentDate.toISOString().split('T')[0];\n        const dayData = dateMap.get(dateStr);\n        \n        // Sadece bugüne kadar olan günleri ekle\n        if (currentDate <= today) {\n          week.push(dayData || null);\n        } else {\n          week.push(null);\n        }\n        \n        currentDate.setDate(currentDate.getDate() + 1);\n      }\n      \n      // Haftanın en az bir gerçek günü varsa ekle\n      const hasRealDay = week.some(day => day !== null);\n      if (hasRealDay) {\n        weeks.push(week);\n      }\n    }\n    \n    // Maksimum gösterilecek hafta sayısı (ekrana sığacak kadar, en az 1 sütun boşluk bırakarak)\n    // Her sütun ~28px genişliğinde, sayfa genişliği ~1280px olduğunda yaklaşık 40 hafta sığar\n    const MAX_WEEKS = 40;\n    \n    // Eğer hafta sayısı maksimumdan fazlaysa, en soldaki haftaları sil\n    if (weeks.length > MAX_WEEKS) {\n      const weeksToRemove = weeks.length - MAX_WEEKS;\n      return weeks.slice(weeksToRemove); // En soldaki haftaları sil\n    }\n    \n    return weeks;\n  };\n\n  // OPTIMIZED: useMemo ile performans iyileştirmesi\n  const yearlyHeatmapData = useMemo(() => {\n    return generateYearlyHeatmapData();\n  }, [allQuestionLogs, allTasks, allStudyHours]);\n  \n  const heatmapWeeks = useMemo(() => {\n    return organizeHeatmapIntoWeeks(yearlyHeatmapData);\n  }, [yearlyHeatmapData]);\n\n  // Isı haritası gün tıklamasını işleme (ARŞİVLİ VERİLER DAHİL) - OPTIMIZED\n  const handleHeatmapDayClick = useCallback((day: any) => {\n    const dayQuestions = allQuestionLogs.filter(log => log.study_date === day.date);\n    const dayTasks = allTasks.filter(task => {\n      // Görevleri şu öncelikle filtrele:\n      // 1. Arşivlenmişse -> archivedAt tarihinde\n      // 2. Silinmişse -> deletedAt tarihinde\n      // 3. Tamamlanmışsa -> completedAt tarihinde (SADECE TAMAMLANMIŞSA!)\n      // 4. Değilse -> dueDate veya createdAt'te\n      let taskDate: string | null = null;\n      \n      if (task.archived && task.archivedAt) {\n        taskDate = new Date(task.archivedAt).toISOString().split('T')[0];\n      } else if (task.deleted && task.deletedAt) {\n        taskDate = new Date(task.deletedAt).toISOString().split('T')[0];\n      } else if (task.completed && task.completedAt) {\n        taskDate = new Date(task.completedAt).toISOString().split('T')[0];\n      } else if (task.dueDate) {\n        taskDate = task.dueDate.split('T')[0];\n      } else if (task.createdAt) {\n        taskDate = new Date(task.createdAt).toISOString().split('T')[0];\n      }\n      \n      return taskDate === day.date;\n    });\n    const dayExams = allExamResults.filter(exam => exam.exam_date === day.date);\n    const dayStudyHours = allStudyHours.filter(sh => sh.study_date === day.date);\n    \n    setSelectedHeatmapDay({\n      ...day,\n      dayActivities: {\n        questions: dayQuestions,\n        tasks: dayTasks,\n        exams: dayExams,\n        studyHours: dayStudyHours\n      }\n    });\n  }, [allQuestionLogs, allTasks, allExamResults, allStudyHours]);\n\n  // Modal açıkken veriler değiştiğinde (ör. görev arşivlendiğinde) modal içeriğini güncelle\n  useEffect(() => {\n    if (selectedHeatmapDay) {\n      const dayQuestions = allQuestionLogs.filter(log => log.study_date === selectedHeatmapDay.date);\n      const dayTasks = allTasks.filter(task => {\n        // Görevleri şu öncelikle filtrele:\n        // 1. Arşivlenmişse -> archivedAt tarihinde\n        // 2. Silinmişse -> deletedAt tarihinde\n        // 3. Tamamlanmışsa -> completedAt tarihinde\n        // 4. Değilse -> dueDate veya createdAt'te\n        let taskDate: string | null = null;\n        \n        if (task.archived && task.archivedAt) {\n          taskDate = new Date(task.archivedAt).toISOString().split('T')[0];\n        } else if (task.deleted && task.deletedAt) {\n          taskDate = new Date(task.deletedAt).toISOString().split('T')[0];\n        } else if (task.completedAt) {\n          taskDate = new Date(task.completedAt).toISOString().split('T')[0];\n        } else if (task.dueDate) {\n          taskDate = task.dueDate.split('T')[0];\n        } else if (task.createdAt) {\n          taskDate = new Date(task.createdAt).toISOString().split('T')[0];\n        }\n        \n        return taskDate === selectedHeatmapDay.date;\n      });\n      const dayExams = allExamResults.filter(exam => exam.exam_date === selectedHeatmapDay.date);\n      const dayStudyHours = allStudyHours.filter(sh => sh.study_date === selectedHeatmapDay.date);\n      \n      setSelectedHeatmapDay({\n        ...selectedHeatmapDay,\n        dayActivities: {\n          questions: dayQuestions,\n          tasks: dayTasks,\n          exams: dayExams,\n          studyHours: dayStudyHours\n        }\n      });\n    }\n  }, [allQuestionLogs, allTasks, allExamResults, allStudyHours]);\n\n  // Countdown timer for next archive (Sunday 23:59 Turkey time)\n  useEffect(() => {\n    const updateCountdown = () => {\n      const now = new Date();\n      const turkeyTime = new Date(now.toLocaleString('en-US', { timeZone: 'Europe/Istanbul' }));\n      \n      // Calculate next Sunday 23:59\n      const nextSunday = new Date(turkeyTime);\n      const currentDay = nextSunday.getDay(); // 0 = Sunday\n      \n      // Bugün Pazar ise ve saat 23:59'u geçmemişse, bugün arşivle\n      // Bugün Pazar ise ve saat 23:59'u geçtiyse, gelecek Pazar arşivle\n      // Diğer günlerdeyse, bu haftanın veya gelecek haftanın Pazarına göre hesapla\n      let daysUntilSunday: number;\n      if (currentDay === 0) {\n        // Pazar günü\n        const targetTime = new Date(turkeyTime);\n        targetTime.setHours(23, 59, 0, 0);\n        daysUntilSunday = turkeyTime < targetTime ? 0 : 7;\n      } else {\n        // Pazar değil\n        daysUntilSunday = 7 - currentDay;\n      }\n      \n      nextSunday.setDate(nextSunday.getDate() + daysUntilSunday);\n      nextSunday.setHours(23, 59, 0, 0);\n      \n      const msUntilSunday = nextSunday.getTime() - turkeyTime.getTime();\n      \n      // Convert to days, hours, minutes, seconds\n      const days = Math.floor(msUntilSunday / (1000 * 60 * 60 * 24));\n      const hours = Math.floor((msUntilSunday % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n      const minutes = Math.floor((msUntilSunday % (1000 * 60 * 60)) / (1000 * 60));\n      const seconds = Math.floor((msUntilSunday % (1000 * 60)) / 1000);\n      \n      let countdownText = \"Bir sonraki otomatik arşivleme: \";\n      if (days > 0) {\n        countdownText += `${days} gün ${hours} saat`;\n      } else if (hours > 0) {\n        countdownText += `${hours} saat ${minutes} dakika`;\n      } else if (minutes > 0) {\n        countdownText += `${minutes} dakika ${seconds} saniye`;\n      } else {\n        countdownText += `${seconds} saniye`;\n      }\n      countdownText += \" sonra (Pazar 23:59)\";\n      \n      setNextArchiveCountdown(countdownText);\n    };\n    \n    updateCountdown();\n    const interval = setInterval(updateCountdown, 1000);\n    \n    return () => clearInterval(interval);\n  }, []);\n\n  // Electron IPC listener - Tray'den \"Tüm Verileri Temizle\" modal açma\n  useEffect(() => {\n    const handleOpenDeleteAllModal = () => {\n      setShowDeleteAllDataDialog(true);\n    };\n\n    if ((window as any).electronAPI?.ipcRenderer) {\n      (window as any).electronAPI.ipcRenderer.on('open-delete-all-data-modal', handleOpenDeleteAllModal);\n      \n      return () => {\n        (window as any).electronAPI.ipcRenderer.removeListener('open-delete-all-data-modal', handleOpenDeleteAllModal);\n      };\n    }\n  }, []);\n\n  // Son etkinlikler (son 10 öğe birleştirilmiş) - OPTIMIZED\n  const recentActivities = useMemo(() => [\n    ...questionLogs.slice(0, 5).map(log => ({\n      type: 'question',\n      title: `${log.exam_type} ${log.subject} - ${log.correct_count} doğru`,\n      date: log.study_date,\n      icon: Brain\n    })),\n    ...examResults.slice(0, 5).map(exam => ({\n      type: 'exam',\n      title: `${typeof (exam.display_name || exam.exam_name) === 'string' ? (exam.display_name || exam.exam_name) : 'Deneme'} - TYT: ${exam.tyt_net}`,\n      date: exam.exam_date,\n      icon: BarChart3\n    })),\n    ...tasks.filter(t => t.completed).slice(0, 5).map(task => ({\n      type: 'task',\n      title: task.title,\n      date: task.createdAt || new Date().toISOString(),\n      icon: Target\n    }))\n  ].sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()).slice(0, 8), [questionLogs, examResults, tasks]);\n\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background to-secondary/20\">\n      <Header />\n      \n\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n        {/* Modern Kontrol Paneli Başlığı */}\n        <div className=\"mb-8 text-center\">\n          <h1 className=\"text-4xl font-bold mb-3 bg-gradient-to-r from-primary via-purple-600 to-blue-600 bg-clip-text text-transparent flex items-center justify-center gap-3\">\n            <BarChart3 className=\"h-10 w-10 text-primary\" />\n            📊 Raporlarım\n            <Target className=\"h-10 w-10 text-blue-600\" />\n          </h1>\n          <p className=\"text-lg text-muted-foreground\">Çalışma verilerim için kapsamlı analiz ve kişiselleştirilmiş sayfa</p>\n          \n          {/* Arşiv, Tamamlanan Hatalı Konular ve Veri Temizleme Butonları */}\n          <div className=\"mt-6 flex justify-center gap-4 flex-wrap\">\n            <Button\n              onClick={() => setShowArchivedDataModal(true)}\n              variant=\"outline\"\n              className=\"border-2 border-indigo-600 text-indigo-600 hover:bg-indigo-50 dark:hover:bg-indigo-950 px-8 py-3 rounded-full text-lg font-semibold shadow-lg hover:shadow-xl transition-all duration-300\"\n              data-testid=\"button-view-archived\"\n            >\n              <Archive className=\"mr-2 h-5 w-5\" />\n              📁 Arşivlenen Veriler\n            </Button>\n          </div>\n        </div>\n\n\n        {/* Özet Kartları */}\n        {/* BERAT CANKIR - 03:03:03 */}\n        <DashboardSummaryCards onAddStudyHours={() => setShowStudyHoursModal(true)} />\n        \n        {/* Geliştirilmiş Çalışma Isı Haritası - GitHub Stili */}\n        <div className=\"mb-8\">\n          <Card className=\"bg-gradient-to-br from-purple-50/50 via-card to-indigo-50/50 dark:from-purple-950/30 dark:via-card dark:to-indigo-950/30 backdrop-blur-sm border-2 border-purple-200/30 dark:border-purple-800/30 shadow-2xl\">\n            <CardHeader className=\"bg-gradient-to-r from-purple-500/10 to-indigo-500/10 rounded-t-lg border-b border-purple-200/30\">\n              <CardTitle className=\"text-xl font-bold bg-gradient-to-r from-purple-600 to-indigo-600 bg-clip-text text-transparent flex items-center gap-2\">\n                <CalendarDays className=\"h-6 w-6 text-purple-500\" />\n                📈 Yıllık Aktivite Heatmap\n              </CardTitle>\n              <p className=\"text-sm text-purple-600/70 dark:text-purple-400/70 font-medium mt-1\">1 Ocak {new Date().getFullYear()} - Bugün • Her gün için aktivite yoğunluğu</p>\n            </CardHeader>\n            <CardContent className=\"p-4\">\n              {/* Heatmap Container - Düzgün Boyut ve Boşluklar */}\n              <div className=\"w-full\">\n                <div className=\"flex flex-col gap-2\">\n                  {/* Ay Etiketleri */}\n                  <div className=\"flex gap-1 pl-10 relative h-5 mb-1\">\n                    {(() => {\n                      const months = ['Oca', 'Şub', 'Mar', 'Nis', 'May', 'Haz', 'Tem', 'Ağu', 'Eyl', 'Eki', 'Kas', 'Ara'];\n                      const currentMonth = new Date().getMonth();\n                      \n                      const monthsMap = new Map();\n                      heatmapWeeks.forEach((week, weekIndex) => {\n                        week.forEach((day) => {\n                          if (day) {\n                            if (!monthsMap.has(day.month)) {\n                              monthsMap.set(day.month, { start: weekIndex, end: weekIndex });\n                            } else {\n                              monthsMap.get(day.month).end = weekIndex;\n                            }\n                          }\n                        });\n                      });\n                      \n                      return Array.from(monthsMap.entries())\n                        .sort((a, b) => a[0] - b[0])\n                        .map(([monthIdx, { start, end }]) => {\n                          const weeks = end - start + 1;\n                          const w = weeks * 28;\n                          const centerPosition = start * 28 + (w * 0.35);\n                          \n                          return (\n                            <div \n                              key={monthIdx}\n                              className={`absolute text-xs font-semibold ${\n                                monthIdx === currentMonth \n                                  ? 'text-purple-600 dark:text-purple-400 font-bold' \n                                  : 'text-gray-600 dark:text-gray-400'\n                              }`}\n                              style={{ left: `${centerPosition}px` }}\n                            >\n                              {months[monthIdx]}\n                            </div>\n                          );\n                        });\n                    })()}\n                  </div>\n                  \n                  {/* Heatmap Grid */}\n                  <div className=\"flex gap-1\">\n                    {/* Gün İsimleri */}\n                    <div className=\"flex flex-col gap-1 w-9 pr-1\">\n                      <div className=\"h-6 flex items-center justify-end text-[10px] font-medium text-gray-500 dark:text-gray-400\">Pzt</div>\n                      <div className=\"h-6 flex items-center justify-end text-[10px] font-medium text-gray-500 dark:text-gray-400\">Sal</div>\n                      <div className=\"h-6 flex items-center justify-end text-[10px] font-medium text-gray-500 dark:text-gray-400\">Çar</div>\n                      <div className=\"h-6 flex items-center justify-end text-[10px] font-medium text-gray-500 dark:text-gray-400\">Per</div>\n                      <div className=\"h-6 flex items-center justify-end text-[10px] font-medium text-gray-500 dark:text-gray-400\">Cum</div>\n                      <div className=\"h-6 flex items-center justify-end text-[10px] font-medium text-gray-500 dark:text-gray-400\">Cmt</div>\n                      <div className=\"h-6 flex items-center justify-end text-[10px] font-medium text-gray-500 dark:text-gray-400\">Paz</div>\n                    </div>\n                    \n                    {/* Heatmap Kutuları - Daha Büyük ve Rahat */}\n                    <div className=\"flex gap-1\">\n                      {heatmapWeeks.map((week, weekIndex) => (\n                        <div key={weekIndex} className=\"flex flex-col gap-1\">\n                          {week.map((day, dayIndex) => {\n                            if (!day) {\n                              return (\n                                <div\n                                  key={dayIndex}\n                                  className=\"w-6 h-6 rounded-sm bg-transparent\"\n                                />\n                              );\n                            }\n                            \n                            // Aktivite sayısına göre renk belirleme (görevler, sorular, denemeler, çalışma saatleri)\n                            const activityCount = day.count;\n                            \n                            // Mor ve pembe tonlarında renk gradyan sistemi - Aktivite sayısına göre renk belirleme\n                            let bgColor = '';\n                            \n                            // Aktivite sayısına göre rengi belirle (1-3, 3-6, 6-9, 9-12, 12-15, 15-18, 18-21+)\n                            if (activityCount === 0) {\n                              bgColor = 'bg-gray-200/80 dark:bg-gray-800/80';\n                            } else if (activityCount <= 3) {\n                              // 1-3 aktivite - çok açık mor/pembe\n                              bgColor = 'bg-purple-100 dark:bg-purple-900/40';\n                            } else if (activityCount <= 6) {\n                              // 3-6 aktivite - açık mor/pembe\n                              bgColor = 'bg-purple-200 dark:bg-purple-800/60';\n                            } else if (activityCount <= 9) {\n                              // 6-9 aktivite - orta açık mor/pembe\n                              bgColor = 'bg-purple-300 dark:bg-purple-700/80';\n                            } else if (activityCount <= 12) {\n                              // 9-12 aktivite - orta mor\n                              bgColor = 'bg-purple-400 dark:bg-purple-600';\n                            } else if (activityCount <= 15) {\n                              // 12-15 aktivite - orta koyu mor\n                              bgColor = 'bg-purple-500 dark:bg-purple-500';\n                            } else if (activityCount <= 18) {\n                              // 15-18 aktivite - koyu mor\n                              bgColor = 'bg-purple-600 dark:bg-purple-400';\n                            } else if (activityCount <= 21) {\n                              // 18-21 aktivite - çok koyu mor\n                              bgColor = 'bg-purple-700 dark:bg-purple-300';\n                            } else {\n                              // 21+ aktivite - en koyu mor/pembe\n                              bgColor = 'bg-purple-800 dark:bg-purple-200';\n                            }\n                            \n                            // BUGÜN ise ekstra parlak gölge efekti ekle (renk aktiviteye göre kalsın)\n                            if (day.isToday) {\n                              bgColor += ' shadow-lg shadow-purple-400/60 dark:shadow-purple-500/60';\n                            }\n                            \n                            // BERAT CANKIR - 03:03:03 - Arşivlenmiş veriler tooltip'te gösterilsin\n                            const hasArchivedData = (day.archivedTaskCount || 0) + (day.archivedQuestionCount || 0) + (day.archivedStudyHoursCount || 0) + (day.archivedGeneralExamCount || 0) + (day.archivedBranchExamCount || 0) > 0;\n                            \n                            // Tooltip içeriğini oluştur\n                            let tooltipText = `${day.date}\\n`;\n                            if (day.questionCount > 0) tooltipText += `📚 Çözülen Sorular: ${day.questionCount}\\n`;\n                            if (day.generalExamCount > 0) tooltipText += `📝 Genel Denemeler: ${day.generalExamCount}\\n`;\n                            if (day.branchExamCount > 0) tooltipText += `📖 Branş Denemeler: ${day.branchExamCount}\\n`;\n                            if (day.taskCount > 0) tooltipText += `✓ Görevler: ${day.taskCount}\\n`;\n                            if (day.studyHoursCount > 0) tooltipText += `⏱ Çalışma Saatleri: ${day.studyHoursCount}\\n`;\n                            if (hasArchivedData) {\n                              tooltipText += `\\n📦 Arşivlenmiş:`;\n                              if (day.archivedQuestionCount > 0) tooltipText += `\\n  • ${day.archivedQuestionCount} soru`;\n                              if (day.archivedGeneralExamCount > 0) tooltipText += `\\n  • ${day.archivedGeneralExamCount} genel deneme`;\n                              if (day.archivedBranchExamCount > 0) tooltipText += `\\n  • ${day.archivedBranchExamCount} branş deneme`;\n                              if (day.archivedTaskCount > 0) tooltipText += `\\n  • ${day.archivedTaskCount} görev`;\n                              if (day.archivedStudyHoursCount > 0) tooltipText += `\\n  • ${day.archivedStudyHoursCount} çalışma saati`;\n                            }\n                            if (activityCount === 0 && !hasArchivedData) tooltipText += `Aktivite yok`;\n                            \n                            return (\n                              <div\n                                key={dayIndex}\n                                className={`w-6 h-6 rounded-sm cursor-pointer transition-all duration-200 relative ${bgColor} ${\n                                  day.isToday \n                                    ? 'ring-4 ring-purple-400 dark:ring-purple-300 ring-offset-2 ring-offset-white dark:ring-offset-gray-900 z-20 scale-110' \n                                    : 'hover:scale-125 hover:z-10 hover:shadow-md'\n                                } ${\n                                  activityCount === 0 \n                                    ? 'hover:bg-gray-300 dark:hover:bg-gray-700' \n                                    : ''\n                                }`}\n                                style={{\n                                  animation: day.isToday ? 'pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite, purpleGlow 2s ease-in-out infinite' : undefined\n                                }}\n                                onClick={() => handleHeatmapDayClick(day)}\n                                data-testid={`heatmap-day-${day.date}`}\n                                title={tooltipText}\n                              >\n                              </div>\n                            );\n                          })}\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Aktivite göstergesi - Renk Paleti */}\n              <div className=\"flex flex-col gap-3 mt-6\">\n                <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n                  <span className=\"font-medium\">Aktivite Seviyesi</span>\n                </div>\n                <div className=\"flex gap-2 items-center justify-center\">\n                  <span className=\"text-xs text-muted-foreground mr-1\">Az</span>\n                  <div className=\"flex gap-1\">\n                    <div className=\"w-4 h-4 bg-purple-100 dark:bg-purple-900/40 rounded-sm\"></div>\n                    <div className=\"w-4 h-4 bg-purple-200 dark:bg-purple-800/60 rounded-sm\"></div>\n                    <div className=\"w-4 h-4 bg-purple-300 dark:bg-purple-700/80 rounded-sm\"></div>\n                    <div className=\"w-4 h-4 bg-purple-400 dark:bg-purple-600 rounded-sm\"></div>\n                    <div className=\"w-4 h-4 bg-purple-500 dark:bg-purple-500 rounded-sm\"></div>\n                    <div className=\"w-4 h-4 bg-purple-600 dark:bg-purple-400 rounded-sm\"></div>\n                    <div className=\"w-4 h-4 bg-purple-700 dark:bg-purple-300 rounded-sm\"></div>\n                    <div className=\"w-4 h-4 bg-purple-800 dark:bg-purple-200 rounded-sm\"></div>\n                  </div>\n                  <span className=\"text-xs text-muted-foreground ml-1\">Çok</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n        \n\n        {/* Çözülen Sorular Sayısı Bölümü ile CRUD */}\n        <div className=\"grid grid-cols-1 gap-6 mb-8\">\n          <Card className=\"bg-gradient-to-br from-green-50/50 via-card to-emerald-50/50 dark:from-green-950/30 dark:via-card dark:to-emerald-950/30 backdrop-blur-sm border-2 border-green-200/30 dark:border-green-800/30 shadow-2xl\">\n            <CardHeader className=\"bg-gradient-to-r from-green-500/10 to-emerald-500/10 rounded-t-lg border-b border-green-200/30\">\n              <CardTitle className=\"text-xl font-bold bg-gradient-to-r from-green-600 to-emerald-600 bg-clip-text text-transparent flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <BarChart3 className=\"h-6 w-6 text-green-500\" />\n                  📊 Çözülmüş Sorular\n                </div>\n                <div className=\"flex gap-2\">\n                  <Button \n                    onClick={() => setShowQuestionHistoryModal(true)}\n                    size=\"sm\" \n                    variant=\"outline\"\n                    className=\"text-xs border-blue-300 text-blue-700 hover:bg-blue-50\"\n                  >\n                    <Eye className=\"h-3 w-3 mr-1\" />\n                    Soru Geçmişi\n                  </Button>\n                  {questionLogs.length > 0 && (\n                    <Button \n                      onClick={() => setShowDeleteAllQuestionsDialog(true)}\n                      size=\"sm\" \n                      variant=\"outline\"\n                      className=\"text-xs border-red-300 text-red-700 hover:bg-red-50\"\n                      disabled={deleteAllQuestionLogsMutation.isPending}\n                    >\n                      <Trash2 className=\"h-3 w-3 mr-1\" />\n                      {deleteAllQuestionLogsMutation.isPending ? 'Siliniyor...' : 'Tüm Soruları Sil'}\n                    </Button>\n                  )}\n                  <Button \n                    onClick={handleOpenQuestionDialog}\n                    size=\"sm\" \n                    variant=\"outline\"\n                    className=\"text-xs border-green-300 text-green-700 hover:bg-green-50\"\n                  >\n                    <Plus className=\"h-3 w-3 mr-1\" />\n                    Soru Ekle\n                  </Button>\n                </div>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"pt-6\">\n              {questionLogs.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <BarChart3 className=\"h-12 w-12 mx-auto mb-3 opacity-40\" />\n                  <h3 className=\"font-medium mb-1\">Henüz soru kaydı yok</h3>\n                  <p className=\"text-sm\">Çözdüğünüz soruları kaydetmeye başlayın - istatistiklerinizi görmek için! 📊</p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {/* Özet İstatistikleri - İyileştirilmiş Tasarım */}\n                  <div className=\"grid grid-cols-3 gap-3 mb-4\">\n                    {/* Toplam Doğru */}\n                    <div className=\"group relative overflow-hidden rounded-xl bg-gradient-to-br from-green-50/80 via-emerald-50/60 to-green-50/80 dark:from-green-950/40 dark:via-emerald-950/30 dark:to-green-950/40 border border-green-200/50 dark:border-green-700/40 p-3 hover:scale-105 transition-all duration-300 hover:shadow-lg\">\n                      <div className=\"absolute top-0 right-0 w-16 h-16 bg-gradient-to-br from-green-400/20 to-emerald-400/20 rounded-full blur-xl group-hover:scale-150 transition-transform duration-500\"></div>\n                      <div className=\"relative z-10\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <div className=\"p-1.5 bg-green-100/80 dark:bg-green-900/40 rounded-lg\">\n                            <CheckCircle className=\"h-4 w-4 text-green-600 dark:text-green-400\" />\n                          </div>\n                        </div>\n                        <div className=\"text-2xl font-black text-green-600 dark:text-green-400 mb-1\">\n                          {allQuestionLogs.reduce((total, log) => total + parseInt(log.correct_count), 0)}\n                        </div>\n                        <div className=\"text-xs font-semibold text-green-700/80 dark:text-green-300/80\">✓ Toplam Doğru</div>\n                      </div>\n                    </div>\n\n                    {/* Toplam Yanlış */}\n                    <div className=\"group relative overflow-hidden rounded-xl bg-gradient-to-br from-red-50/80 via-rose-50/60 to-red-50/80 dark:from-red-950/40 dark:via-rose-950/30 dark:to-red-950/40 border border-red-200/50 dark:border-red-700/40 p-3 hover:scale-105 transition-all duration-300 hover:shadow-lg\">\n                      <div className=\"absolute top-0 right-0 w-16 h-16 bg-gradient-to-br from-red-400/20 to-rose-400/20 rounded-full blur-xl group-hover:scale-150 transition-transform duration-500\"></div>\n                      <div className=\"relative z-10\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <div className=\"p-1.5 bg-red-100/80 dark:bg-red-900/40 rounded-lg\">\n                            <X className=\"h-4 w-4 text-red-600 dark:text-red-400\" />\n                          </div>\n                        </div>\n                        <div className=\"text-2xl font-black text-red-600 dark:text-red-400 mb-1\">\n                          {allQuestionLogs.reduce((total, log) => total + parseInt(log.wrong_count), 0)}\n                        </div>\n                        <div className=\"text-xs font-semibold text-red-700/80 dark:text-red-300/80\">✗ Toplam Yanlış</div>\n                      </div>\n                    </div>\n\n                    {/* Toplam Boş */}\n                    <div className=\"group relative overflow-hidden rounded-xl bg-gradient-to-br from-amber-50/80 via-yellow-50/60 to-amber-50/80 dark:from-amber-950/40 dark:via-yellow-950/30 dark:to-amber-950/40 border border-amber-200/50 dark:border-amber-700/40 p-3 hover:scale-105 transition-all duration-300 hover:shadow-lg\">\n                      <div className=\"absolute top-0 right-0 w-16 h-16 bg-gradient-to-br from-amber-400/20 to-yellow-400/20 rounded-full blur-xl group-hover:scale-150 transition-transform duration-500\"></div>\n                      <div className=\"relative z-10\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <div className=\"p-1.5 bg-amber-100/80 dark:bg-amber-900/40 rounded-lg\">\n                            <Circle className=\"h-4 w-4 text-amber-600 dark:text-amber-400\" />\n                          </div>\n                        </div>\n                        <div className=\"text-2xl font-black text-amber-600 dark:text-amber-400 mb-1\">\n                          {allQuestionLogs.reduce((total, log) => total + parseInt(log.blank_count || '0'), 0)}\n                        </div>\n                        <div className=\"text-xs font-semibold text-amber-700/80 dark:text-amber-300/80\">○ Toplam Boş</div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Soru Kayıtları Listesi - Düzenleme/Silme ile - ARŞİVLİ VERİLER DAHİL */}\n                  <div className=\"space-y-3\">\n                    <div className=\"space-y-3 max-h-64 overflow-y-auto custom-scrollbar\">\n                      {allQuestionLogs.map((log, index) => (\n                      <div key={log.id} className=\"p-4 bg-gradient-to-r from-green-100/30 to-emerald-100/30 dark:from-green-900/20 dark:to-emerald-900/20 rounded-xl border border-green-200/50 transition-all hover:scale-102 hover:shadow-md\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <div className=\"flex items-center gap-3\">\n                            <div className=\"w-8 h-8 rounded-full bg-gradient-to-r from-green-500 to-emerald-500 text-white flex items-center justify-center font-bold text-sm\">\n                              {index + 1}\n                            </div>\n                            <div>\n                              <div className=\"font-semibold text-foreground\">\n                                {log.exam_type} - {log.subject}\n                              </div>\n                              <div className=\"text-xs flex items-center gap-2\">\n                                <span className=\"text-muted-foreground\">{new Date(log.study_date).toLocaleDateString('tr-TR')}</span>\n                                {log.time_spent_minutes && log.time_spent_minutes > 0 && (\n                                  <span className=\"inline-flex items-center gap-1.5 px-2.5 py-1 bg-gradient-to-r from-emerald-100 to-green-100 dark:from-emerald-900/40 dark:to-green-900/40 rounded-full border border-emerald-200 dark:border-emerald-700\">\n                                    <Clock className=\"h-3.5 w-3.5 text-emerald-600 dark:text-emerald-400\" />\n                                    <span className=\"font-semibold text-emerald-700 dark:text-emerald-300\">\n                                      {Math.floor(log.time_spent_minutes / 60) > 0 && `${Math.floor(log.time_spent_minutes / 60)}s `}\n                                      {log.time_spent_minutes % 60}dk\n                                    </span>\n                                  </span>\n                                )}\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            <button\n                              onClick={() => archiveQuestionLogMutation.mutate(log.id)}\n                              disabled={archiveQuestionLogMutation.isPending}\n                              className=\"text-blue-500 hover:text-blue-700 p-1 hover:bg-blue-50 dark:hover:bg-blue-900/20 rounded transition-colors\"\n                              title=\"Arşive Taşı\"\n                            >\n                              <Archive className=\"h-3 w-3\" />\n                            </button>\n                            <button\n                              onClick={() => deleteQuestionLogMutation.mutate(log.id)}\n                              disabled={deleteQuestionLogMutation.isPending}\n                              className=\"text-red-500 hover:text-red-700 p-1 hover:bg-red-50 dark:hover:bg-red-900/20 rounded transition-colors\"\n                              title=\"Sil\"\n                            >\n                              <Trash2 className=\"h-3 w-3\" />\n                            </button>\n                          </div>\n                        </div>\n                        <div className=\"grid grid-cols-4 gap-2 text-sm\">\n                          <div className=\"text-center p-2 bg-white/50 dark:bg-slate-800/50 rounded-lg\">\n                            <div className=\"font-bold text-green-600\">{log.correct_count}</div>\n                            <div className=\"text-xs text-muted-foreground\">Doğru</div>\n                          </div>\n                          <div className=\"text-center p-2 bg-white/50 dark:bg-slate-800/50 rounded-lg\">\n                            <div className=\"font-bold text-red-600\">{log.wrong_count}</div>\n                            <div className=\"text-xs text-muted-foreground\">Yanlış</div>\n                          </div>\n                          <div className=\"text-center p-2 bg-white/50 dark:bg-slate-800/50 rounded-lg\">\n                            <div className=\"font-bold text-yellow-600\">{log.blank_count || '0'}</div>\n                            <div className=\"text-xs text-muted-foreground\">Boş</div>\n                          </div>\n                          <div className=\"text-center p-2 bg-white/50 dark:bg-slate-800/50 rounded-lg\">\n                            <div className=\"font-bold text-blue-600\">\n                              {(parseInt(log.correct_count) - (parseInt(log.wrong_count) / 4)).toFixed(2)}\n                            </div>\n                            <div className=\"text-xs text-muted-foreground\">Net</div>\n                          </div>\n                        </div>\n                      </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Günlük Soru Analizi - Çözülen Sorulardan Sonra Buraya Taşı */}\n        <div className=\"mb-8\">\n          <QuestionAnalysisCharts />\n        </div>\n\n        {/* Kompakt Deneme Sonuçları */}\n        <div className=\"grid grid-cols-1 gap-4 mb-6\">\n          <Card className=\"border-emerald-200/50 dark:border-emerald-800/30 bg-gradient-to-br from-emerald-50/40 via-white/60 to-green-50/40 dark:from-emerald-950/30 dark:via-gray-900/60 dark:to-green-950/30\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"text-xl font-bold flex items-center gap-2 text-emerald-700 dark:text-emerald-300\">\n                  <Target className=\"h-5 w-5\" />\n                  🎯 Deneme Sonuçları\n                </CardTitle>\n                <div className=\"flex gap-2\">\n                  <Button \n                    onClick={() => setShowExamHistoryModal(true)}\n                    size=\"sm\" \n                    variant=\"outline\"\n                    className=\"border-emerald-500 text-emerald-700 hover:bg-emerald-50 dark:border-emerald-600 dark:text-emerald-400\"\n                    data-testid=\"button-view-exam-history\"\n                  >\n                    <Eye className=\"h-4 w-4 mr-1\" />\n                    Deneme Geçmişi\n                  </Button>\n                  {examResults.length > 0 && (\n                    <Button \n                      onClick={() => setShowDeleteAllExamsDialog(true)}\n                      size=\"sm\" \n                      variant=\"outline\"\n                      className=\"border-red-300 text-red-700 hover:bg-red-50 dark:border-red-700 dark:text-red-400\"\n                      disabled={deleteAllExamResultsMutation.isPending}\n                    >\n                      <Trash2 className=\"h-4 w-4 mr-1\" />\n                      {deleteAllExamResultsMutation.isPending ? 'Siliniyor...' : 'Tüm Denemeleri Sil'}\n                    </Button>\n                  )}\n                  <Button \n                    onClick={() => setShowExamDialog(true)}\n                    size=\"sm\" \n                    className=\"bg-emerald-600 hover:bg-emerald-700 text-white\"\n                    data-testid=\"button-add-exam-result\"\n                  >\n                    <Plus className=\"h-4 w-4 mr-1\" />\n                    Deneme Ekle\n                  </Button>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent className=\"pt-0\">\n            \n            {examResults.length === 0 ? (\n              <div className=\"text-center py-20 text-muted-foreground\">\n                <div className=\"w-32 h-32 rounded-full bg-gradient-to-br from-emerald-100 to-green-100 dark:from-emerald-900/30 dark:to-green-900/30 flex items-center justify-center mx-auto mb-8 shadow-2xl animate-pulse\">\n                  <Target className=\"h-16 w-16 text-emerald-500\" />\n                </div>\n                <h4 className=\"text-3xl font-bold text-emerald-700 dark:text-emerald-300 mb-4\">Henüz deneme kaydı yok</h4>\n                <p className=\"text-lg opacity-75 mb-8 max-w-md mx-auto\">Deneme eklemeden veriler gözükmez.</p>\n                <div className=\"flex justify-center space-x-2\">\n                  <div className=\"w-3 h-3 rounded-full bg-emerald-500 animate-bounce\"></div>\n                  <div className=\"w-3 h-3 rounded-full bg-green-500 animate-bounce delay-150\"></div>\n                  <div className=\"w-3 h-3 rounded-full bg-emerald-600 animate-bounce delay-300\"></div>\n                </div>\n              </div>\n            ) : (\n              <div className=\"space-y-6\">\n                {/* SADECE AKTİF DENEMELER - Arşivlenenler hariç */}\n                <div className=\"space-y-6 max-h-[800px] overflow-y-auto custom-scrollbar\">\n                  {examResults\n                    .sort((a, b) => new Date(b.exam_date).getTime() - new Date(a.exam_date).getTime())\n                    .map((exam, index) => {\n                  // Sınav türünü ve ilgili net puanı öğrenin\n                  const examType = exam.exam_type || (parseFloat(exam.ayt_net) > 0 ? 'AYT' : 'TYT');\n                  const relevantNet = examType === 'TYT' ? parseFloat(exam.tyt_net) || 0 : parseFloat(exam.ayt_net) || 0;\n                  \n                  // Sınav türünü ve ilgili net puanı alınBu sınav türü için sınav numarasını hesaplayın\n                  const sameTypeExams = examResults\n                    .filter(e => (e.exam_type || (parseFloat(e.ayt_net) > 0 ? 'AYT' : 'TYT')) === examType)\n                    .sort((a, b) => new Date(a.exam_date).getTime() - new Date(b.exam_date).getTime());\n                  const examNumber = sameTypeExams.findIndex(e => e.id === exam.id) + 1;\n                  \n                  // Performans göstergelerini hesaplayın\n                  const isRecentExam = new Date(exam.exam_date) > new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\n                  const examDate = new Date(exam.exam_date);\n                  const daysSinceExam = Math.floor((Date.now() - examDate.getTime()) / (1000 * 60 * 60 * 24));\n                  \n                  return (\n                    <Card key={exam.id} className=\"group bg-white dark:bg-slate-800 hover:shadow-md transition-all duration-200 border-emerald-200/60 dark:border-emerald-700/50 relative overflow-hidden\">\n                      \n                      <CardContent className=\"p-4 relative\">\n                        <div className=\"flex items-center justify-between mb-3\">\n                          <div className=\"flex items-center gap-4\">\n                            <div>\n                              <div className=\"text-lg font-bold text-emerald-700 dark:text-emerald-300 mb-1\">\n                                {exam.display_name || exam.exam_name || 'Deneme'}\n                              </div>\n                              <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                                <Calendar className=\"h-3.5 w-3.5\" />\n                                <span>\n                                  {examDate.toLocaleDateString('tr-TR', { \n                                    day: '2-digit', \n                                    month: '2-digit', \n                                    year: 'numeric' \n                                  })} • {exam.createdAt ? new Date(exam.createdAt).toLocaleTimeString('tr-TR', {\n                                    hour: '2-digit',\n                                    minute: '2-digit'\n                                  }) : ''}\n                                </span>\n                                {exam.time_spent_minutes && exam.time_spent_minutes > 0 && (\n                                  <span className=\"inline-flex items-center gap-1.5 px-2.5 py-1 bg-gradient-to-r from-cyan-100 to-blue-100 dark:from-cyan-900/40 dark:to-blue-900/40 rounded-full border border-cyan-200 dark:border-cyan-700\">\n                                    <Clock className=\"h-3.5 w-3.5 text-cyan-600 dark:text-cyan-400\" />\n                                    <span className=\"font-semibold text-cyan-700 dark:text-cyan-300\">\n                                      {Math.floor(exam.time_spent_minutes / 60) > 0 && `${Math.floor(exam.time_spent_minutes / 60)}s `}\n                                      {exam.time_spent_minutes % 60}dk\n                                    </span>\n                                  </span>\n                                )}\n                              </div>\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex items-center gap-3\">\n                            <div className=\"text-center p-3 bg-emerald-50 dark:bg-emerald-900/30 rounded-lg border border-emerald-200 dark:border-emerald-700\">\n                              <div className=\"flex items-center justify-center gap-1.5 mb-1\">\n                                <div className={`w-2 h-2 rounded-full ${examType === 'TYT' ? 'bg-emerald-500' : 'bg-blue-500'}`}></div>\n                                <span className={`text-xs font-bold ${examType === 'TYT' ? 'text-emerald-600 dark:text-emerald-400' : 'text-blue-600 dark:text-blue-400'}`}>\n                                  {examType}\n                                </span>\n                              </div>\n                              <div className={`text-2xl font-bold ${examType === 'TYT' ? 'text-emerald-700 dark:text-emerald-300' : 'text-blue-700 dark:text-blue-300'}`}>\n                                {relevantNet.toFixed(2)}\n                              </div>\n                              <div className={`text-xs ${examType === 'TYT' ? 'text-emerald-600/70 dark:text-emerald-400/70' : 'text-blue-600/70 dark:text-blue-400/70'}`}>\n                                / {(() => {\n                                  // Branş denemesi ise belirli dersin soru sayısını göster\n                                  if (exam.exam_scope === 'branch' && exam.selected_subject) {\n                                    const subjectLimits: {[key: string]: {TYT?: number, AYT?: number}} = {\n                                      turkce: { TYT: 40 },\n                                      sosyal: { TYT: 20 },\n                                      matematik: { TYT: 30, AYT: 30 },\n                                      geometri: { TYT: 10, AYT: 10 },\n                                      fen: { TYT: 20 },\n                                      fizik: { AYT: 14 },\n                                      kimya: { AYT: 13 },\n                                      biyoloji: { AYT: 13 }\n                                    };\n                                    return subjectLimits[exam.selected_subject]?.[examType as 'TYT' | 'AYT'] || '?';\n                                  }\n                                  // Tam deneme ise standart soru sayısını göster\n                                  return examType === 'TYT' ? '120' : '80';\n                                })()} soruluk\n                              </div>\n                            </div>\n                            \n                            <div className=\"flex items-center gap-2\">\n                              <button\n                                onClick={() => {\n                                  const newExpanded = new Set(expandedExams);\n                                  if (newExpanded.has(exam.id)) {\n                                    newExpanded.delete(exam.id);\n                                  } else {\n                                    newExpanded.add(exam.id);\n                                  }\n                                  setExpandedExams(newExpanded);\n                                }}\n                                className=\"p-2 text-emerald-600 hover:bg-emerald-50 dark:hover:bg-emerald-900/20 rounded-lg transition-all\"\n                              >\n                                <Eye className=\"h-4 w-4\" />\n                              </button>\n                              <button\n                                onClick={() => {\n                                  setEditingExam(exam);\n                                  setNewExamResult({\n                                    exam_name: exam.exam_name || exam.display_name || \"\",\n                                    display_name: exam.display_name || exam.exam_name || \"\",\n                                    exam_date: exam.exam_date.split('T')[0],\n                                    exam_type: exam.exam_type || \"TYT\",\n                                    examScope: exam.exam_scope || \"full\",\n                                    selectedSubject: exam.selected_subject || \"turkce\",\n                                    wrongTopicsText: \"\",\n                                    time_spent_minutes: (exam.time_spent_minutes || 0).toString(),\n                                    subjects: {\n                                      turkce: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n                                      matematik: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n                                      sosyal: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n                                      fen: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n                                      fizik: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n                                      kimya: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n                                      biyoloji: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n                                      geometri: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] }\n                                    }\n                                  });\n                                  setShowExamDialog(true);\n                                }}\n                                className=\"p-2 text-blue-600 hover:bg-blue-50 dark:hover:bg-blue-900/20 rounded-lg transition-all\"\n                              >\n                                <Edit className=\"h-4 w-4\" />\n                              </button>\n                              <button\n                                onClick={() => archiveExamResultMutation.mutate(exam.id)}\n                                disabled={archiveExamResultMutation.isPending}\n                                className=\"p-2 text-amber-600 hover:bg-amber-50 dark:hover:bg-amber-900/20 rounded-lg transition-all\"\n                                title=\"Arşivle\"\n                              >\n                                <Archive className=\"h-4 w-4\" />\n                              </button>\n                              <button\n                                onClick={() => deleteExamResultMutation.mutate(exam.id)}\n                                disabled={deleteExamResultMutation.isPending}\n                                className=\"p-2 text-red-400 hover:text-red-600 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-lg transition-all\"\n                              >\n                                <Trash2 className=\"h-4 w-4\" />\n                              </button>\n                            </div>\n                          </div>\n                        </div>\n                        \n                        {/* Konu Ayrıntıları Bölümü - COLLAPSED by default */}\n                        {expandedExams.has(exam.id) && exam.subjects_data && (() => {\n                          try {\n                            const subjectsData = JSON.parse(exam.subjects_data);\n                            const subjects = Object.entries(subjectsData).map(([key, data]: [string, any]) => {\n                              const subjectNames: {[key: string]: string} = {\n                                'turkce': 'Türkçe',\n                                'matematik': 'Matematik',\n                                'geometri': 'Geometri',\n                                'sosyal': 'Sosyal Bilimler',\n                                'fen': 'Fen Bilimleri',\n                                'fizik': 'Fizik',\n                                'kimya': 'Kimya',\n                                'biyoloji': 'Biyoloji'\n                              };\n                              return {\n                                name: subjectNames[key] || key,\n                                correct: parseInt(data.correct) || 0,\n                                wrong: parseInt(data.wrong) || 0,\n                                blank: parseInt(data.blank) || 0,\n                                total: (parseInt(data.correct) || 0) + (parseInt(data.wrong) || 0) + (parseInt(data.blank) || 0)\n                              };\n                            }).filter(subject => subject.total > 0);\n                            \n                            if (subjects.length > 0) {\n                              return (\n                                <div className=\"mt-6 pt-4 border-t border-emerald-200/50 dark:border-emerald-700/30\">\n                                  <h4 className=\"text-sm font-bold text-emerald-700 dark:text-emerald-300 mb-3 flex items-center gap-2\">\n                                    📊 Ders Detayları\n                                  </h4>\n                                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3\">\n                                    {subjects.map((subject, idx) => (\n                                      <div key={idx} className=\"bg-gradient-to-r from-white/60 to-emerald-50/40 dark:from-gray-800/60 dark:to-emerald-900/20 rounded-xl p-3 border border-emerald-200/40 dark:border-emerald-700/30\">\n                                        <div className=\"flex items-center justify-between mb-2\">\n                                          <span className=\"font-semibold text-gray-700 dark:text-gray-300 text-sm\">\n                                            {subject.name}\n                                          </span>\n                                          <span className=\"text-xs text-muted-foreground font-medium\">\n                                            {subject.total} soru\n                                          </span>\n                                        </div>\n                                        <div className=\"flex items-center justify-between text-xs\">\n                                          <div className=\"flex items-center gap-3\">\n                                            <div className=\"flex items-center gap-1\">\n                                              <div className=\"w-2 h-2 rounded-full bg-green-500\"></div>\n                                              <span className=\"text-green-600 dark:text-green-400 font-semibold\">{subject.correct}D</span>\n                                            </div>\n                                            <div className=\"flex items-center gap-1\">\n                                              <div className=\"w-2 h-2 rounded-full bg-red-500\"></div>\n                                              <span className=\"text-red-600 dark:text-red-400 font-semibold\">{subject.wrong}Y</span>\n                                            </div>\n                                            <div className=\"flex items-center gap-1\">\n                                              <div className=\"w-2 h-2 rounded-full bg-gray-400\"></div>\n                                              <span className=\"text-gray-600 dark:text-gray-400 font-semibold\">{subject.blank}B</span>\n                                            </div>\n                                          </div>\n                                          <span className=\"text-emerald-600 dark:text-emerald-400 font-bold\">\n                                            {(subject.correct - subject.wrong * 0.25).toFixed(1)} net\n                                          </span>\n                                        </div>\n                                      </div>\n                                    ))}\n                                  </div>\n                                </div>\n                              );\n                            }\n                          } catch (e) {\n                            console.error('Error parsing subjects_data:', e);\n                          }\n                          return null;\n                        })()}\n                        \n                        {/* Ekleme Tarihi ve Saati */}\n                        <div className=\"flex items-center justify-between pt-4 border-t border-emerald-200/50 dark:border-emerald-700/30\">\n                          <div className=\"flex items-center gap-2\">\n                            <div className=\"text-xs text-muted-foreground\">\n                              {exam.createdAt ? new Date(exam.createdAt).toLocaleDateString('tr-TR', { \n                                day: 'numeric', \n                                month: 'long', \n                                year: 'numeric' \n                              }) + ' Saat ' + new Date(exam.createdAt).toLocaleTimeString('tr-TR', {\n                                hour: '2-digit',\n                                minute: '2-digit'\n                              }) : 'Tarih belirtilmemiş'}\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n                            <Award className=\"h-4 w-4\" />\n                            <span>{exam.display_name || exam.exam_name}</span>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  );\n                })}\n                </div>\n              </div>\n            )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Analitik Grafikler - Bu önemli analitikleri koruyun */}\n        <div className=\"space-y-8 mb-8\">\n          <AdvancedCharts />\n        </div>\n\n      </main>\n\n      {/* Isı Haritası Gün Detayları Diyaloğu */}\n      <Dialog open={selectedHeatmapDay !== null} onOpenChange={(open) => !open && setSelectedHeatmapDay(null)}>\n        <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto custom-scrollbar\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <CalendarDays className=\"h-5 w-5 text-purple-500\" />\n              {selectedHeatmapDay && (\n                <>\n                  {new Date(selectedHeatmapDay.date + 'T12:00:00').toLocaleDateString('tr-TR', { \n                    weekday: 'long', \n                    year: 'numeric', \n                    month: 'long', \n                    day: 'numeric',\n                    timeZone: 'Europe/Istanbul'\n                  })} Aktiviteleri\n                </>\n              )}\n            </DialogTitle>\n            <DialogDescription>\n              Seçilen gün için detaylı aktivite bilgilerini görüntüleyin.\n            </DialogDescription>\n          </DialogHeader>\n          {selectedHeatmapDay && (\n            <div className=\"space-y-6\">\n              {/* Özet */}\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <div className=\"text-center p-4 bg-gradient-to-r from-blue-100 to-cyan-100 dark:from-blue-900/20 dark:to-cyan-900/20 rounded-xl\">\n                  <div className=\"text-2xl font-bold text-blue-600\">{selectedHeatmapDay.dayActivities.tasks.filter((task: any) => task.completed).length}</div>\n                  <div className=\"text-sm text-muted-foreground\">Tamamlanan Görev</div>\n                </div>\n                <div className=\"text-center p-4 bg-gradient-to-r from-green-100 to-emerald-100 dark:from-green-900/20 dark:to-emerald-900/20 rounded-xl\">\n                  <div className=\"text-2xl font-bold text-green-600\">{selectedHeatmapDay.dayActivities.questions.reduce((sum: number, q: any) => sum + ((parseInt(q.correct_count) || 0) + (parseInt(q.wrong_count) || 0) + (parseInt(q.blank_count || '0') || 0)), 0)}</div>\n                  <div className=\"text-sm text-muted-foreground\">Çözülen Toplam Soru</div>\n                </div>\n                <div className=\"text-center p-4 bg-gradient-to-r from-purple-100 to-violet-100 dark:from-purple-900/20 dark:to-violet-900/20 rounded-xl\">\n                  <div className=\"text-2xl font-bold text-purple-600\">{selectedHeatmapDay.dayActivities.exams.length}</div>\n                  <div className=\"text-sm text-muted-foreground\">Çözülen Toplam Deneme</div>\n                </div>\n                <div className=\"text-center p-4 bg-gradient-to-r from-cyan-100 to-teal-100 dark:from-cyan-900/20 dark:to-teal-900/20 rounded-xl\">\n                  <div className=\"text-2xl font-bold text-cyan-600\">\n                    {(() => {\n                      if (!selectedHeatmapDay.dayActivities.studyHours || selectedHeatmapDay.dayActivities.studyHours.length === 0) return \"0s 0dk\";\n                      const totalSeconds = selectedHeatmapDay.dayActivities.studyHours.reduce((sum: number, sh: any) => {\n                        const h = parseInt(sh.hours) || 0;\n                        const m = parseInt(sh.minutes) || 0;\n                        const s = parseInt(sh.seconds) || 0;\n                        return sum + (h * 3600 + m * 60 + s);\n                      }, 0);\n                      const hours = Math.floor(totalSeconds / 3600);\n                      const minutes = Math.floor((totalSeconds % 3600) / 60);\n                      return `${hours}s ${minutes}dk`;\n                    })()}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Toplam Çalışılan Saat</div>\n                </div>\n              </div>\n\n              {/* Detaylı Aktiviteler */}\n              {selectedHeatmapDay.dayActivities.questions.length > 0 && (\n                <div>\n                  <h3 className=\"text-lg font-semibold mb-3 flex items-center gap-2\">\n                    <Brain className=\"h-5 w-5 text-green-500\" />\n                    Çözülen Sorular\n                  </h3>\n                  <div className=\"space-y-2\">\n                    {selectedHeatmapDay.dayActivities.questions.map((question: any, index: number) => (\n                      <div key={question.id || `question-${index}-${question.subject}`} className=\"p-3 bg-green-50 dark:bg-green-900/10 rounded-lg border border-green-200 dark:border-green-800\">\n                        <div className=\"flex flex-col gap-2\">\n                          <div className=\"flex justify-between items-center\">\n                            <span className=\"font-medium\">\n                              {question.exam_type} - {question.subject}\n                              {question.deleted && <span className=\"ml-2 text-xs text-red-500\">(silinen)</span>}\n                              {question.archived && <span className=\"ml-2 text-xs px-2 py-0.5 rounded-full bg-orange-100 text-orange-700 dark:bg-orange-900 dark:text-orange-200\">(arşivlendi)</span>}\n                            </span>\n                            <div className=\"flex items-center gap-1 text-xs\">\n                              <div className=\"bg-green-100 dark:bg-green-900/20 text-green-700 dark:text-green-300 px-2 py-1 rounded-full font-semibold\">\n                                ✓ {question.correct_count}\n                              </div>\n                              <div className=\"bg-red-100 dark:bg-red-900/20 text-red-700 dark:text-red-300 px-2 py-1 rounded-full font-semibold\">\n                                ✗ {question.wrong_count}\n                              </div>\n                              <div className=\"bg-gray-100 dark:bg-gray-900/20 text-gray-700 dark:text-gray-300 px-2 py-1 rounded-full font-semibold\">\n                                ○ {question.blank_count || 0}\n                              </div>\n                              <div className=\"bg-blue-100 dark:bg-blue-900/20 text-blue-700 dark:text-blue-300 px-2 py-1 rounded-full font-semibold\">\n                                Net: {(parseInt(question.correct_count) - (parseInt(question.wrong_count) / 4)).toFixed(2)}\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {/* Planlanan Görevler */}\n              {selectedHeatmapDay.dayActivities.tasks.filter((task: any) => !task.completed).length > 0 && (\n                <div>\n                  <h3 className=\"text-lg font-semibold mb-3 flex items-center gap-2\">\n                    <CalendarDays className=\"h-5 w-5 text-orange-500\" />\n                    Planlanan Görevler\n                  </h3>\n                  <div className=\"space-y-2\">\n                    {selectedHeatmapDay.dayActivities.tasks.filter((task: any) => !task.completed).map((task: any, index: number) => (\n                      <div key={task.id || `task-pending-${index}`} className=\"p-3 bg-orange-50 dark:bg-orange-900/10 rounded-lg border border-orange-200 dark:border-orange-800\">\n                        <div className=\"font-medium\">\n                          {task.title}\n                          {task.archived && <span className=\"ml-2 text-xs px-2 py-0.5 rounded-full bg-orange-100 text-orange-700 dark:bg-orange-900 dark:text-orange-200\">(arşivlendi)</span>}\n                          {task.deleted && <span className=\"ml-2 text-xs px-2 py-0.5 rounded-full bg-red-100 text-red-700 dark:bg-red-900 dark:text-red-200\">(silindi)</span>}\n                        </div>\n                        {task.description && (\n                          <div className=\"text-sm text-muted-foreground mt-1\">{task.description}</div>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {/* Tamamlanan Görevler */}\n              {selectedHeatmapDay.dayActivities.tasks.filter((task: any) => task.completed).length > 0 && (\n                <div>\n                  <h3 className=\"text-lg font-semibold mb-3 flex items-center gap-2\">\n                    <Target className=\"h-5 w-5 text-blue-500\" />\n                    Tamamlanan Görevler\n                  </h3>\n                  <div className=\"space-y-2\">\n                    {selectedHeatmapDay.dayActivities.tasks.filter((task: any) => task.completed).map((task: any, index: number) => (\n                      <div key={task.id || `task-completed-${index}`} className=\"p-3 bg-blue-50 dark:bg-blue-900/10 rounded-lg border border-blue-200 dark:border-blue-800\">\n                        <div className=\"font-medium\">\n                          {task.title}\n                          {task.archived && <span className=\"ml-2 text-xs px-2 py-0.5 rounded-full bg-orange-100 text-orange-700 dark:bg-orange-900 dark:text-orange-200\">(arşivlendi)</span>}\n                          {task.deleted && <span className=\"ml-2 text-xs px-2 py-0.5 rounded-full bg-red-100 text-red-700 dark:bg-red-900 dark:text-red-200\">(silindi)</span>}\n                        </div>\n                        {task.description && (\n                          <div className=\"text-sm text-muted-foreground mt-1\">{task.description}</div>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {selectedHeatmapDay.dayActivities.exams.length > 0 && (\n                <div>\n                  <h3 className=\"text-lg font-semibold mb-3 flex items-center gap-2\">\n                    <Award className=\"h-5 w-5 text-purple-500\" />\n                    Deneme Sınavları\n                  </h3>\n                  <div className=\"space-y-2\">\n                    {selectedHeatmapDay.dayActivities.exams.map((exam: any, index: number) => (\n                      <div key={exam.id || `exam-${index}-${exam.exam_name}`} className=\"p-3 bg-purple-50 dark:bg-purple-900/10 rounded-lg border border-purple-200 dark:border-purple-800\">\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"font-medium\">\n                            {exam.display_name || exam.exam_name}\n                            {exam.deleted && <span className=\"ml-2 text-xs text-red-500\">(silinen)</span>}\n                            {exam.archived && <span className=\"ml-2 text-xs px-2 py-0.5 rounded-full bg-orange-100 text-orange-700 dark:bg-orange-900 dark:text-orange-200\">(arşivlendi)</span>}\n                          </span>\n                          <div className=\"text-xs text-muted-foreground\">\n                            {exam.exam_type === 'TYT' ? (\n                              `TYT: ${exam.tyt_net}`\n                            ) : exam.exam_type === 'AYT' ? (\n                              `AYT: ${exam.ayt_net}`\n                            ) : (\n                              // Exam_type yoksa netlere göre karar ver\n                              parseFloat(exam.tyt_net) > 0 && parseFloat(exam.ayt_net) > 0 ? (\n                                `TYT: ${exam.tyt_net} • AYT: ${exam.ayt_net}`\n                              ) : parseFloat(exam.tyt_net) > 0 ? (\n                                `TYT: ${exam.tyt_net}`\n                              ) : (\n                                `AYT: ${exam.ayt_net}`\n                              )\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {/* Aktivite yok mesajı - sadece gerçekten hiçbir aktivite yoksa göster */}\n              {selectedHeatmapDay.dayActivities.questions.length === 0 && \n               selectedHeatmapDay.dayActivities.tasks.length === 0 && \n               selectedHeatmapDay.dayActivities.exams.length === 0 && \n               (!selectedHeatmapDay.dayActivities.studyHours || selectedHeatmapDay.dayActivities.studyHours.length === 0) && (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <CalendarDays className=\"h-12 w-12 mx-auto mb-3 opacity-40\" />\n                  <p>Bugünde herhangi bir aktivite kaydedilmemiş.</p>\n                </div>\n              )}\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Soru Diyaloğu */}\n      <Dialog open={showQuestionDialog} onOpenChange={setShowQuestionDialog}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>\n              {editingQuestionLog ? 'Soru Kaydını Düzenle' : 'Yeni Soru Kaydı'}\n            </DialogTitle>\n            <DialogDescription>\n              Soru çözüm kaydınızı ekleyin veya düzenleyin.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Sınav Türü</label>\n                <Select value={newQuestion.exam_type} onValueChange={(value) => setNewQuestion({...newQuestion, exam_type: value as \"TYT\" | \"AYT\"})}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"TYT\">TYT</SelectItem>\n                    <SelectItem value=\"AYT\">AYT</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Ders</label>\n                <Select value={newQuestion.subject} onValueChange={(value) => setNewQuestion({...newQuestion, subject: value})}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {getSubjectOptions(newQuestion.exam_type).map(subject => (\n                      <SelectItem key={subject} value={subject}>{subject}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-3 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Doğru</label>\n                <Input\n                  type=\"number\"\n                  value={newQuestion.correct_count}\n                  onChange={(e) => {\n                    const maxLimit = SUBJECT_LIMITS[newQuestion.exam_type]?.[newQuestion.subject] || 100;\n                    const inputValue = parseInt(e.target.value) || 0;\n                    const currentWrong = parseInt(newQuestion.wrong_count) || 0;\n                    const currentBlank = parseInt(newQuestion.blank_count) || 0;\n                    const remaining = maxLimit - currentWrong - currentBlank;\n                    const value = Math.min(Math.max(0, inputValue), remaining);\n                    setNewQuestion({...newQuestion, correct_count: value.toString()});\n                  }}\n                  placeholder=\"0\"\n                  min=\"0\"\n                  max={SUBJECT_LIMITS[newQuestion.exam_type]?.[newQuestion.subject] || 100}\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Yanlış</label>\n                <Input\n                  type=\"number\"\n                  value={newQuestion.wrong_count}\n                  onChange={(e) => {\n                    const maxLimit = SUBJECT_LIMITS[newQuestion.exam_type]?.[newQuestion.subject] || 100;\n                    const inputValue = parseInt(e.target.value) || 0;\n                    const currentCorrect = parseInt(newQuestion.correct_count) || 0;\n                    const currentBlank = parseInt(newQuestion.blank_count) || 0;\n                    const remaining = maxLimit - currentCorrect - currentBlank;\n                    const value = Math.min(Math.max(0, inputValue), remaining);\n                    setNewQuestion({...newQuestion, wrong_count: value.toString()});\n                  }}\n                  placeholder=\"0\"\n                  min=\"0\"\n                  max={SUBJECT_LIMITS[newQuestion.exam_type]?.[newQuestion.subject] || 100}\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Boş</label>\n                <Input\n                  type=\"number\"\n                  value={newQuestion.blank_count}\n                  onChange={(e) => {\n                    const maxLimit = SUBJECT_LIMITS[newQuestion.exam_type]?.[newQuestion.subject] || 100;\n                    const inputValue = parseInt(e.target.value) || 0;\n                    const currentCorrect = parseInt(newQuestion.correct_count) || 0;\n                    const currentWrong = parseInt(newQuestion.wrong_count) || 0;\n                    const remaining = maxLimit - currentCorrect - currentWrong;\n                    const value = Math.min(Math.max(0, inputValue), remaining);\n                    setNewQuestion({...newQuestion, blank_count: value.toString()});\n                  }}\n                  placeholder=\"0\"\n                  min=\"0\"\n                  max={SUBJECT_LIMITS[newQuestion.exam_type]?.[newQuestion.subject] || 100}\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Tarih</label>\n                <Input\n                  type=\"date\"\n                  value={newQuestion.study_date}\n                  onChange={(e) => setNewQuestion({...newQuestion, study_date: e.target.value})}\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Süre (dk)</label>\n                <Input\n                  type=\"number\"\n                  value={newQuestion.time_spent_minutes}\n                  onChange={(e) => {\n                    const value = e.target.value.replace(/^0+(?=\\d)/, '');\n                    setNewQuestion({...newQuestion, time_spent_minutes: value});\n                  }}\n                  placeholder=\"45\"\n                  min=\"0\"\n                />\n              </div>\n            </div>\n\n            {/* Geliştirilmiş Yanlış Konular Bölümü - Sadece yanlış sayısı > 0 ise göster */}\n            {parseInt(newQuestion.wrong_count) > 0 && (\n            <div className=\"bg-gradient-to-r from-red-50/50 to-orange-50/50 dark:from-red-900/10 dark:to-orange-900/10 rounded-xl p-6 border border-red-200/30 dark:border-red-700/20\">\n              <div className=\"flex items-center gap-3 mb-6\">\n                <div className=\"p-2 bg-gradient-to-br from-red-500 to-orange-600 rounded-lg shadow-md\">\n                  <AlertTriangle className=\"h-5 w-5 text-white\" />\n                </div>\n                <div>\n                  <label className=\"text-lg font-semibold text-red-700 dark:text-red-300\">🔍 Yanlış Konu Analizi</label>\n                  <p className=\"text-sm text-red-600/70 dark:text-red-400/70\">Detaylı hata analizi ile eksik konuları belirleyin</p>\n                </div>\n              </div>\n              \n              <div className=\"space-y-6\">\n                {/* Kategori ve Zorluk Seçimi */}\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-red-700 dark:text-red-300 mb-2\">Hata Kategorisi</label>\n                    <Select value={selectedTopicCategory} onValueChange={(value) => setSelectedTopicCategory(value as any)}>\n                      <SelectTrigger className=\"bg-white/80 dark:bg-gray-800/80 border-red-200 dark:border-red-700/50\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"kavram\">🧠 Kavram Eksikliği</SelectItem>\n                        <SelectItem value=\"hesaplama\">🔢 Hesaplama Hatası</SelectItem>\n                        <SelectItem value=\"analiz\">🔍 Analiz Sorunu</SelectItem>\n                        <SelectItem value=\"dikkatsizlik\">⚠️ Dikkatsizlik</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-red-700 dark:text-red-300 mb-2\">Zorluk Derecesi</label>\n                    <Select value={selectedTopicDifficulty} onValueChange={(value) => setSelectedTopicDifficulty(value as any)}>\n                      <SelectTrigger className=\"bg-white/80 dark:bg-gray-800/80 border-red-200 dark:border-red-700/50\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"kolay\">🟢 Kolay</SelectItem>\n                        <SelectItem value=\"orta\">🟠 Orta</SelectItem>\n                        <SelectItem value=\"zor\">🔴 Zor</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                {/* Geliştirilmiş Konu Girişi */}\n                <div className=\"relative\">\n                  <Input\n                    value={wrongTopicInput}\n                    onChange={(e) => setWrongTopicInput(e.target.value)}\n                    placeholder={getTopicExamples(newQuestion.exam_type, newQuestion.subject)}\n                    className=\"pl-10 pr-16 h-12 text-base bg-white/80 dark:bg-gray-800/80 border-red-200 dark:border-red-700/50 focus:border-red-400 dark:focus:border-red-500 rounded-xl shadow-sm\"\n                    onKeyPress={(e) => {\n                      if (e.key === 'Enter' && wrongTopicInput.trim()) {\n                        // Title case conversion: her kelimenin baş harfini büyük yap\n                        const titleCaseTopic = toTitleCase(wrongTopicInput);\n                        \n                        // Yinelenenleri kontrol et\n                        const isDuplicate = newQuestion.wrong_topics.some(existingTopic => \n                          existingTopic.topic.toLowerCase() === titleCaseTopic.toLowerCase()\n                        );\n                        \n                        if (!isDuplicate) {\n                          setNewQuestion({\n                            ...newQuestion, \n                            wrong_topics: [...newQuestion.wrong_topics, {\n                              topic: titleCaseTopic,\n                              difficulty: selectedTopicDifficulty,\n                              category: selectedTopicCategory\n                            }]\n                          });\n                          setWrongTopicInput(\"\");\n                        } else {\n                          toast({ title: \"⚠️ Uyarı\", description: \"Bu konu zaten eklenmiş!\", variant: \"destructive\" });\n                        }\n                      }\n                    }}\n                    data-testid=\"input-wrong-topics\"\n                  />\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-red-400 dark:text-red-500\" />\n                  {wrongTopicInput.trim() && (\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      className=\"absolute right-2 top-1/2 transform -translate-y-1/2 h-8 w-8 p-0 text-red-500 hover:text-red-700 hover:bg-red-100 dark:hover:bg-red-900/30\"\n                      onClick={() => {\n                        if (wrongTopicInput.trim()) {\n                          // Başlık durumuna dönüştürme\n                          const titleCaseTopic = toTitleCase(wrongTopicInput);\n\n                          // Yinelenenleri kontrol et\n                          const isDuplicate = newQuestion.wrong_topics.some(existingTopic =>\n                            existingTopic.topic.toLowerCase() === titleCaseTopic.toLowerCase()\n                          );\n                          \n                          if (!isDuplicate) {\n                            setNewQuestion({\n                              ...newQuestion, \n                              wrong_topics: [...newQuestion.wrong_topics, {\n                                topic: titleCaseTopic,\n                                difficulty: selectedTopicDifficulty,\n                                category: selectedTopicCategory\n                              }]\n                            });\n                            setWrongTopicInput(\"\");\n                          } else {\n                            toast({ title: \"⚠️ Uyarı\", description: \"Bu konu zaten eklenmiş!\", variant: \"destructive\" });\n                          }\n                        }\n                      }}\n                      data-testid=\"button-add-topic\"\n                    >\n                      <Plus className=\"h-4 w-4\" />\n                    </Button>\n                  )}\n                </div>\n\n                {/* Geliştirilmiş Konu Etiketleri Görüntüleme */}\n                {newQuestion.wrong_topics.length > 0 && (\n                  <div>\n                    <div className=\"flex items-center gap-2 mb-4\">\n                      <Tag className=\"h-4 w-4 text-red-600 dark:text-red-400\" />\n                      <span className=\"text-sm font-medium text-red-700 dark:text-red-300\">\n                        Eklenen Konular ({newQuestion.wrong_topics.length})\n                      </span>\n                    </div>\n                    <div className=\"space-y-3\">\n                      {newQuestion.wrong_topics.map((topicData, index) => {\n                        const getDifficultyIcon = (difficulty: string) => {\n                          switch(difficulty) {\n                            case 'kolay': return '🟢';\n                            case 'orta': return '🟠';\n                            case 'zor': return '🔴';\n                            default: return '⚪';\n                          }\n                        };\n                        \n                        const getCategoryIcon = (category: string) => {\n                          switch(category) {\n                            case 'kavram': return '🧠';\n                            case 'hesaplama': return '🔢';\n                            case 'analiz': return '🔍';\n                            case 'dikkatsizlik': return '⚠️';\n                            default: return '📝';\n                          }\n                        };\n                        \n                        const getDifficultyBg = (difficulty: string) => {\n                          switch(difficulty) {\n                            case 'kolay': return 'from-green-100 to-emerald-100 dark:from-green-900/40 dark:to-emerald-900/40 border-green-200 dark:border-green-700/50';\n                            case 'orta': return 'from-orange-100 to-amber-100 dark:from-orange-900/40 dark:to-amber-900/40 border-orange-200 dark:border-orange-700/50';\n                            case 'zor': return 'from-red-100 to-rose-100 dark:from-red-900/40 dark:to-rose-900/40 border-red-200 dark:border-red-700/50';\n                            default: return 'from-gray-100 to-slate-100 dark:from-gray-900/40 dark:to-slate-900/40 border-gray-200 dark:border-gray-700/50';\n                          }\n                        };\n                        \n                        return (\n                          <div\n                            key={index}\n                            className={`group bg-gradient-to-r ${getDifficultyBg(topicData.difficulty)} border rounded-xl p-4 transition-all duration-300 hover:shadow-lg hover:scale-105`}\n                            data-testid={`topic-tag-${index}`}\n                          >\n                            <div className=\"flex items-start justify-between\">\n                              <div className=\"flex-1\">\n                                <div className=\"flex items-center gap-3 mb-2\">\n                                  <div className=\"flex items-center gap-2\">\n                                    <span className=\"text-lg\">{getCategoryIcon(topicData.category)}</span>\n                                    <span className=\"text-lg font-bold text-red-700 dark:text-red-300\">\n                                      {topicData.topic}\n                                    </span>\n                                  </div>\n                                  <div className=\"flex items-center gap-1 text-sm\">\n                                    <span>{getDifficultyIcon(topicData.difficulty)}</span>\n                                    <span className=\"capitalize text-muted-foreground\">\n                                      {topicData.difficulty}\n                                    </span>\n                                  </div>\n                                </div>\n                                <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\n                                  <span className=\"capitalize\">\n                                    {topicData.category === 'kavram' && 'Kavram Eksikliği'}\n                                    {topicData.category === 'hesaplama' && 'Hesaplama Hatası'}\n                                    {topicData.category === 'analiz' && 'Analiz Sorunu'}\n                                    {topicData.category === 'dikkatsizlik' && 'Dikkatsizlik'}\n                                  </span>\n                                </div>\n                              </div>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                className=\"h-8 w-8 p-0 opacity-0 group-hover:opacity-100 transition-opacity duration-200 text-red-500 hover:text-red-700 hover:bg-red-200 dark:hover:bg-red-800/50 rounded-full\"\n                                onClick={() => {\n                                  setNewQuestion({\n                                    ...newQuestion,\n                                    wrong_topics: newQuestion.wrong_topics.filter((_, i) => i !== index)\n                                  });\n                                }}\n                                data-testid={`button-remove-topic-${index}`}\n                              >\n                                <X className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </div>\n                )}\n\n                {/* Geliştirilmiş Konu Önizlemesi */}\n                {wrongTopicInput.trim() && (\n                  <div className=\"p-4 bg-gradient-to-r from-blue-50/50 via-purple-50/30 to-indigo-50/50 dark:from-blue-950/30 dark:via-purple-950/20 dark:to-indigo-950/30 rounded-xl border border-blue-200/40 dark:border-blue-800/40\">\n                    <div className=\"flex items-center gap-2 mb-3\">\n                      <Eye className=\"h-4 w-4 text-blue-600 dark:text-blue-400\" />\n                      <span className=\"text-sm font-medium text-blue-700 dark:text-blue-300\">Önizleme</span>\n                    </div>\n                    <div className=\"flex items-center gap-3 p-3 bg-white/50 dark:bg-gray-800/50 rounded-lg\">\n                      <span className=\"text-lg\">\n                        {selectedTopicCategory === 'kavram' && '🧠'}\n                        {selectedTopicCategory === 'hesaplama' && '🔢'}\n                        {selectedTopicCategory === 'analiz' && '🔍'}\n                        {selectedTopicCategory === 'dikkatsizlik' && '⚠️'}\n                      </span>\n                      <span className=\"font-medium text-gray-700 dark:text-gray-300\">{wrongTopicInput.trim()}</span>\n                      <span className=\"text-sm\">\n                        {selectedTopicDifficulty === 'kolay' && '🟢'}\n                        {selectedTopicDifficulty === 'orta' && '🟠'}\n                        {selectedTopicDifficulty === 'zor' && '🔴'}\n                      </span>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n            )}\n\n            <div className=\"flex gap-2\">\n              <Button\n                onClick={() => {\n                  // Doğru + Yanlış + Boş toplamı kontrolü\n                  const maxLimit = SUBJECT_LIMITS[newQuestion.exam_type]?.[newQuestion.subject] || 100;\n                  const totalAnswered = (parseInt(newQuestion.correct_count) || 0) + (parseInt(newQuestion.wrong_count) || 0) + (parseInt(newQuestion.blank_count) || 0);\n                  \n                  if (totalAnswered > maxLimit) {\n                    toast({\n                      title: \"⚠️ Uyarı\",\n                      description: `Doğru + Yanlış + Boş toplamı (${totalAnswered}) maksimum soru sayısını (${maxLimit}) aşamaz!`,\n                      variant: \"destructive\"\n                    });\n                    return;\n                  }\n\n                  // Yapılandırılmış analiz verilerini basit konu adlarından ayır\n                  const wrong_topics_json = newQuestion.wrong_topics.length > 0 ? \n                    JSON.stringify(newQuestion.wrong_topics) : null;\n                  const wrong_topics_simple = newQuestion.wrong_topics.map(topic => \n                    typeof topic === 'string' ? topic : topic.topic\n                  );\n\n                  if (editingQuestionLog) {\n                    updateQuestionLogMutation.mutate({\n                      id: editingQuestionLog.id,\n                      data: {\n                        exam_type: newQuestion.exam_type as \"TYT\" | \"AYT\",\n                        subject: newQuestion.subject,\n                        correct_count: newQuestion.correct_count,\n                        wrong_count: newQuestion.wrong_count,\n                        blank_count: newQuestion.blank_count || \"0\",\n                        study_date: newQuestion.study_date,\n                        wrong_topics: wrong_topics_simple,\n                        wrong_topics_json: wrong_topics_json,\n                        time_spent_minutes: parseInt(newQuestion.time_spent_minutes) || null\n                      }\n                    });\n                  } else {\n                    createQuestionLogMutation.mutate({\n                      exam_type: newQuestion.exam_type as \"TYT\" | \"AYT\",\n                      subject: newQuestion.subject,\n                      correct_count: newQuestion.correct_count,\n                      wrong_count: newQuestion.wrong_count,\n                      blank_count: newQuestion.blank_count || \"0\",\n                      study_date: newQuestion.study_date,\n                      wrong_topics: wrong_topics_simple,\n                      wrong_topics_json: wrong_topics_json,\n                      time_spent_minutes: parseInt(newQuestion.time_spent_minutes) || null\n                    });\n                  }\n                }}\n                disabled={!newQuestion.correct_count || !newQuestion.wrong_count || createQuestionLogMutation.isPending}\n                className=\"flex-1\"\n              >\n                {createQuestionLogMutation.isPending ? 'Kaydediliyor...' : (editingQuestionLog ? 'Güncelle' : 'Kaydet')}\n              </Button>\n              <Button \n                variant=\"outline\" \n                onClick={() => {\n                  setShowQuestionDialog(false);\n                  setEditingQuestionLog(null);\n                  setNewQuestion({ \n                    exam_type: \"TYT\", \n                    subject: \"Türkçe\", \n                    correct_count: \"\", \n                    wrong_count: \"\", \n                    blank_count: \"\", \n                    study_date: getTurkeyDate(),\n                    wrong_topics: [],\n                    time_spent_minutes: \"\"\n                  });\n                  setWrongTopicInput(\"\");\n                }}\n              >\n                İptal\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Sınav Sonucu Diyaloğu */}\n      <Dialog open={showExamDialog} onOpenChange={(open) => {\n        setShowExamDialog(open);\n        if (!open) {\n          setEditingExam(null);\n          setNewExamResult({ \n            exam_name: \"\", \n            display_name: \"\",\n            exam_date: getTurkeyDate(), \n            exam_type: \"TYT\" as \"TYT\" | \"AYT\",\n            examScope: \"full\" as \"full\" | \"branch\",\n            selectedSubject: \"turkce\" as string,\n            wrongTopicsText: \"\",\n            time_spent_minutes: \"\",\n            subjects: {\n              turkce: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n              matematik: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n              sosyal: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n              fen: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n              fizik: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n              kimya: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n              biyoloji: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n              geometri: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] }\n            }\n          });\n        }\n      }}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto custom-scrollbar\">\n          <DialogHeader>\n            <DialogTitle>{editingExam ? \"Deneme Düzenle\" : \"Yeni Deneme Sonucu\"}</DialogTitle>\n            <DialogDescription>\n              {editingExam ? \"Deneme adı ve süresini düzenleyin.\" : \"Deneme sınav sonuçlarınızı girin ve net analizinizi takip edin.\"}\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            {!editingExam && (\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium mb-1\">Tarih</label>\n                  <Popover>\n                    <PopoverTrigger asChild>\n                      <Button\n                        variant=\"outline\"\n                        className=\"w-full justify-start text-left font-normal\"\n                      >\n                        <CalendarDays className=\"mr-2 h-4 w-4\" />\n                        {newExamResult.exam_date ? new Date(newExamResult.exam_date).toLocaleDateString('tr-TR', { \n                          day: 'numeric', \n                          month: 'long', \n                          year: 'numeric' \n                        }) : \"Tarih seçin\"}\n                      </Button>\n                    </PopoverTrigger>\n                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                      <CalendarComponent\n                        mode=\"single\"\n                        selected={newExamResult.exam_date ? new Date(newExamResult.exam_date) : undefined}\n                        onSelect={(date) => {\n                          if (date) {\n                            setNewExamResult({\n                              ...newExamResult, \n                              exam_date: date.toLocaleDateString('en-CA')\n                            });\n                          }\n                        }}\n                        initialFocus\n                      />\n                    </PopoverContent>\n                  </Popover>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium mb-1\">Süre (dakika)</label>\n                  <Input\n                    type=\"number\"\n                    value={newExamResult.time_spent_minutes}\n                    onChange={(e) => {\n                      const value = e.target.value.replace(/^0+(?=\\d)/, '');\n                      setNewExamResult({...newExamResult, time_spent_minutes: value});\n                    }}\n                    placeholder=\"120\"\n                    min=\"0\"\n                    className=\"bg-white dark:bg-gray-800\"\n                  />\n                </div>\n              </div>\n            )}\n            \n            {editingExam && (\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Süre (dakika)</label>\n                <Input\n                  type=\"number\"\n                  value={newExamResult.time_spent_minutes}\n                  onChange={(e) => setNewExamResult({...newExamResult, time_spent_minutes: e.target.value})}\n                  placeholder=\"120\"\n                  min=\"0\"\n                  className=\"bg-white dark:bg-gray-800\"\n                />\n              </div>\n            )}\n            \n            <div>\n              <label className=\"block text-sm font-medium mb-1\">\n                Deneme İsmi {!editingExam && \"(Opsiyonel)\"}\n              </label>\n              <Input\n                type=\"text\"\n                placeholder={\n                  newExamResult.examScope === \"branch\"\n                    ? \"Örn: 345 TYT Fizik Branş Denemesi, Bilgi Sarmal AYT Matematik Denemesi\"\n                    : \"Örn: 345 AYT Genel Deneme, Bilgi Sarmal TYT Genel Deneme, Özdebir Türkiye Geneli TYT Denemesi 1\"\n                }\n                value={newExamResult.display_name}\n                onChange={(e) => setNewExamResult({...newExamResult, display_name: e.target.value})}\n                className=\"bg-white dark:bg-gray-800\"\n              />\n              {!editingExam && (\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Boş bırakırsanız otomatik isim oluşturulacak\n                </p>\n              )}\n            </div>\n\n            {!editingExam && (\n              <>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium mb-1\">Deneme Türü</label>\n                    <Select \n                      value={newExamResult.examScope} \n                      onValueChange={(value: \"full\" | \"branch\") => {\n                      setCurrentWrongTopics({});\n                      setNewExamResult({\n                        ...newExamResult, \n                        examScope: value,\n                        selectedSubject: \"turkce\",\n                        wrongTopicsText: \"\",\n                        subjects: {\n                          turkce: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n                          matematik: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n                          sosyal: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n                          fen: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n                          fizik: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n                          kimya: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n                          biyoloji: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n                          geometri: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] }\n                        }\n                      });\n                    }}\n                    data-testid=\"select-exam-scope\"\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"full\">Genel Deneme</SelectItem>\n                      <SelectItem value=\"branch\">Branş Denemesi</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium mb-1\">Alan</label>\n                  <Select \n                    value={newExamResult.exam_type} \n                    onValueChange={(value: \"TYT\" | \"AYT\") => {\n                      setCurrentWrongTopics({});\n                      setNewExamResult({\n                        ...newExamResult, \n                        exam_type: value,\n                        selectedSubject: \"turkce\",\n                        wrongTopicsText: \"\",\n                        subjects: {\n                          turkce: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n                          matematik: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n                          sosyal: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n                          fen: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n                          fizik: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n                          kimya: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n                          biyoloji: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n                          geometri: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] }\n                        }\n                      });\n                    }}\n                    data-testid=\"select-exam-type\"\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"TYT\">TYT</SelectItem>\n                      <SelectItem value=\"AYT\">Sayısal(AYT)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              {/* Branş Denemesi Modu */}\n              {newExamResult.examScope === \"branch\" && (\n              <div className=\"border-2 border-purple-300 rounded-lg p-4 space-y-4 bg-purple-50 dark:bg-purple-900/10\">\n                <h3 className=\"text-lg font-semibold text-purple-700 dark:text-purple-300\">Branş Denemesi</h3>\n                \n                {/* Ders Seçimi */}\n                <div>\n                  <label className=\"block text-sm font-medium mb-1\">Ders</label>\n                  <Select \n                    value={newExamResult.selectedSubject} \n                    onValueChange={(value: string) => {\n                      setCurrentWrongTopics({});\n                      setNewExamResult({\n                        ...newExamResult, \n                        selectedSubject: value,\n                        wrongTopicsText: \"\",\n                        subjects: {\n                          turkce: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n                          matematik: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n                          sosyal: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n                          fen: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n                          fizik: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n                          kimya: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n                          biyoloji: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n                          geometri: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] }\n                        }\n                      });\n                    }}\n                    data-testid=\"select-branch-subject\"\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {newExamResult.exam_type === \"TYT\" ? (\n                        <>\n                          <SelectItem value=\"turkce\">Türkçe</SelectItem>\n                          <SelectItem value=\"sosyal\">Sosyal Bilimler</SelectItem>\n                          <SelectItem value=\"matematik\">Matematik</SelectItem>\n                          <SelectItem value=\"geometri\">Geometri</SelectItem>\n                          <SelectItem value=\"fizik\">Fizik</SelectItem>\n                          <SelectItem value=\"kimya\">Kimya</SelectItem>\n                          <SelectItem value=\"biyoloji\">Biyoloji</SelectItem>\n                        </>\n                      ) : (\n                        <>\n                          <SelectItem value=\"matematik\">Matematik</SelectItem>\n                          <SelectItem value=\"geometri\">Geometri</SelectItem>\n                          <SelectItem value=\"fizik\">Fizik</SelectItem>\n                          <SelectItem value=\"kimya\">Kimya</SelectItem>\n                          <SelectItem value=\"biyoloji\">Biyoloji</SelectItem>\n                        </>\n                      )}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* Doğru Yanlış Boş */}\n                {(() => {\n                  // Branş deneme soru limitleri\n                  const getMaxQuestions = (subject: string, examType: string) => {\n                    const limits: {[key: string]: {TYT?: number, AYT?: number}} = {\n                      turkce: { TYT: 40 },\n                      sosyal: { TYT: 20 },\n                      matematik: { TYT: 30, AYT: 30 },\n                      geometri: { TYT: 10, AYT: 10 },\n                      fen: { TYT: 20 },\n                      fizik: { TYT: 7, AYT: 14 },\n                      kimya: { TYT: 7, AYT: 13 },\n                      biyoloji: { TYT: 6, AYT: 13 }\n                    };\n                    return limits[subject]?.[examType as 'TYT' | 'AYT'] || 100;\n                  };\n\n                  const maxQuestions = getMaxQuestions(newExamResult.selectedSubject, newExamResult.exam_type);\n                  const currentCorrect = parseInt(newExamResult.subjects[newExamResult.selectedSubject]?.correct || \"0\");\n                  const currentWrong = parseInt(newExamResult.subjects[newExamResult.selectedSubject]?.wrong || \"0\");\n                  const currentBlank = parseInt(newExamResult.subjects[newExamResult.selectedSubject]?.blank || \"0\");\n                  const totalAnswered = currentCorrect + currentWrong + currentBlank;\n\n                  return (\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm font-medium text-purple-700 dark:text-purple-300\">\n                          📝 Soru Girişi\n                        </span>\n                        <span className=\"text-xs bg-purple-100 dark:bg-purple-900/40 text-purple-700 dark:text-purple-300 px-2 py-1 rounded-full\">\n                          {totalAnswered} / {maxQuestions} soru\n                        </span>\n                      </div>\n                      <div className=\"grid grid-cols-3 gap-4\">\n                        <div>\n                          <label className=\"block text-sm font-medium mb-1\">Doğru</label>\n                          <Input\n                            type=\"number\"\n                            min=\"0\"\n                            max={maxQuestions}\n                            value={newExamResult.subjects[newExamResult.selectedSubject]?.correct || \"\"}\n                            onChange={(e) => {\n                              const inputValue = parseInt(e.target.value) || 0;\n                              const remaining = maxQuestions - currentWrong - currentBlank;\n                              const value = Math.min(Math.max(0, inputValue), remaining);\n                              setNewExamResult({\n                                ...newExamResult,\n                                subjects: {\n                                  ...newExamResult.subjects,\n                                  [newExamResult.selectedSubject]: { \n                                    ...newExamResult.subjects[newExamResult.selectedSubject], \n                                    correct: value.toString()\n                                  }\n                                }\n                              });\n                            }}\n                            placeholder=\"Doğru sayısı\"\n                            data-testid=\"input-branch-correct\"\n                          />\n                        </div>\n                        <div>\n                          <label className=\"block text-sm font-medium mb-1\">Yanlış</label>\n                          <Input\n                            type=\"number\"\n                            min=\"0\"\n                            max={maxQuestions}\n                            value={newExamResult.subjects[newExamResult.selectedSubject]?.wrong || \"\"}\n                            onChange={(e) => {\n                              const inputValue = parseInt(e.target.value) || 0;\n                              const remaining = maxQuestions - currentCorrect - currentBlank;\n                              const value = Math.min(Math.max(0, inputValue), remaining);\n                              setNewExamResult({\n                                ...newExamResult,\n                                subjects: {\n                                  ...newExamResult.subjects,\n                                  [newExamResult.selectedSubject]: { \n                                    ...newExamResult.subjects[newExamResult.selectedSubject], \n                                    wrong: value.toString()\n                                  }\n                                }\n                              });\n                            }}\n                            placeholder=\"Yanlış sayısı\"\n                            data-testid=\"input-branch-wrong\"\n                          />\n                        </div>\n                        <div>\n                          <label className=\"block text-sm font-medium mb-1\">Boş</label>\n                          <Input\n                            type=\"number\"\n                            min=\"0\"\n                            max={maxQuestions}\n                            value={newExamResult.subjects[newExamResult.selectedSubject]?.blank || \"\"}\n                            onChange={(e) => {\n                              const inputValue = parseInt(e.target.value) || 0;\n                              const remaining = maxQuestions - currentCorrect - currentWrong;\n                              const value = Math.min(Math.max(0, inputValue), remaining);\n                              setNewExamResult({\n                                ...newExamResult,\n                                subjects: {\n                                  ...newExamResult.subjects,\n                                  [newExamResult.selectedSubject]: { \n                                    ...newExamResult.subjects[newExamResult.selectedSubject], \n                                    blank: value.toString()\n                                  }\n                                }\n                              });\n                            }}\n                            placeholder=\"Boş sayısı\"\n                            data-testid=\"input-branch-blank\"\n                          />\n                        </div>\n                      </div>\n                      {totalAnswered > maxQuestions && (\n                        <div className=\"flex items-center gap-2 p-2 bg-red-100 dark:bg-red-900/30 rounded-lg border border-red-200 dark:border-red-700/40\">\n                          <span className=\"text-xs text-red-700 dark:text-red-300\">\n                            ⚠️ Toplam soru sayısı {maxQuestions}'i geçemez!\n                          </span>\n                        </div>\n                      )}\n                    </div>\n                  );\n                })()}\n\n                {/* Yanlış Konular - Geliştirilmiş Önizleme ile */}\n                {(() => {\n                  const subjectColors: {[key: string]: {bg: string; border: string; text: string; icon: string; badge: string; input: string}} = {\n                    turkce: {\n                      bg: \"from-green-50/80 via-white/60 to-emerald-50/60 dark:from-green-950/30 dark:via-gray-800/60 dark:to-emerald-950/30\",\n                      border: \"border-green-200/50 dark:border-green-700/40\",\n                      text: \"text-green-800 dark:text-green-200\",\n                      icon: \"from-green-500 to-green-600\",\n                      badge: \"bg-green-100 dark:bg-green-900/40 text-green-700 dark:text-green-300\",\n                      input: \"border-green-300/60 dark:border-green-600/50 focus:border-green-500 dark:focus:border-green-400 focus:ring-2 focus:ring-green-200 dark:focus:ring-green-800/50\"\n                    },\n                    matematik: {\n                      bg: \"from-blue-50/80 via-white/60 to-cyan-50/60 dark:from-blue-950/30 dark:via-gray-800/60 dark:to-cyan-950/30\",\n                      border: \"border-blue-200/50 dark:border-blue-700/40\",\n                      text: \"text-blue-800 dark:text-blue-200\",\n                      icon: \"from-blue-500 to-blue-600\",\n                      badge: \"bg-blue-100 dark:bg-blue-900/40 text-blue-700 dark:text-blue-300\",\n                      input: \"border-blue-300/60 dark:border-blue-600/50 focus:border-blue-500 dark:focus:border-blue-400 focus:ring-2 focus:ring-blue-200 dark:focus:ring-blue-800/50\"\n                    },\n                    fizik: {\n                      bg: \"from-indigo-50/80 via-white/60 to-purple-50/60 dark:from-indigo-950/30 dark:via-gray-800/60 dark:to-purple-950/30\",\n                      border: \"border-indigo-200/50 dark:border-indigo-700/40\",\n                      text: \"text-indigo-800 dark:text-indigo-200\",\n                      icon: \"from-indigo-500 to-indigo-600\",\n                      badge: \"bg-indigo-100 dark:bg-indigo-900/40 text-indigo-700 dark:text-indigo-300\",\n                      input: \"border-indigo-300/60 dark:border-indigo-600/50 focus:border-indigo-500 dark:focus:border-indigo-400 focus:ring-2 focus:ring-indigo-200 dark:focus:ring-indigo-800/50\"\n                    },\n                    kimya: {\n                      bg: \"from-emerald-50/80 via-white/60 to-green-50/60 dark:from-emerald-950/30 dark:via-gray-800/60 dark:to-green-950/30\",\n                      border: \"border-emerald-200/50 dark:border-emerald-700/40\",\n                      text: \"text-emerald-800 dark:text-emerald-200\",\n                      icon: \"from-emerald-500 to-emerald-600\",\n                      badge: \"bg-emerald-100 dark:bg-emerald-900/40 text-emerald-700 dark:text-emerald-300\",\n                      input: \"border-emerald-300/60 dark:border-emerald-600/50 focus:border-emerald-500 dark:focus:border-emerald-400 focus:ring-2 focus:ring-emerald-200 dark:focus:ring-emerald-800/50\"\n                    },\n                    biyoloji: {\n                      bg: \"from-teal-50/80 via-white/60 to-cyan-50/60 dark:from-teal-950/30 dark:via-gray-800/60 dark:to-cyan-950/30\",\n                      border: \"border-teal-200/50 dark:border-teal-700/40\",\n                      text: \"text-teal-800 dark:text-teal-200\",\n                      icon: \"from-teal-500 to-teal-600\",\n                      badge: \"bg-teal-100 dark:bg-teal-900/40 text-teal-700 dark:text-teal-300\",\n                      input: \"border-teal-300/60 dark:border-teal-600/50 focus:border-teal-500 dark:focus:border-teal-400 focus:ring-2 focus:ring-teal-200 dark:focus:ring-teal-800/50\"\n                    },\n                    sosyal: {\n                      bg: \"from-amber-50/80 via-white/60 to-yellow-50/60 dark:from-amber-950/30 dark:via-gray-800/60 dark:to-yellow-950/30\",\n                      border: \"border-amber-200/50 dark:border-amber-700/40\",\n                      text: \"text-amber-800 dark:text-amber-200\",\n                      icon: \"from-amber-500 to-amber-600\",\n                      badge: \"bg-amber-100 dark:bg-amber-900/40 text-amber-700 dark:text-amber-300\",\n                      input: \"border-amber-300/60 dark:border-amber-600/50 focus:border-amber-500 dark:focus:border-amber-400 focus:ring-2 focus:ring-amber-200 dark:focus:ring-amber-800/50\"\n                    },\n                    fen: {\n                      bg: \"from-purple-50/80 via-white/60 to-pink-50/60 dark:from-purple-950/30 dark:via-gray-800/60 dark:to-pink-950/30\",\n                      border: \"border-purple-200/50 dark:border-purple-700/40\",\n                      text: \"text-purple-800 dark:text-purple-200\",\n                      icon: \"from-purple-500 to-purple-600\",\n                      badge: \"bg-purple-100 dark:bg-purple-900/40 text-purple-700 dark:text-purple-300\",\n                      input: \"border-purple-300/60 dark:border-purple-600/50 focus:border-purple-500 dark:focus:border-purple-400 focus:ring-2 focus:ring-purple-200 dark:focus:ring-purple-800/50\"\n                    },\n                    geometri: {\n                      bg: \"from-pink-50/80 via-white/60 to-rose-50/60 dark:from-pink-950/30 dark:via-gray-800/60 dark:to-rose-950/30\",\n                      border: \"border-pink-200/50 dark:border-pink-700/40\",\n                      text: \"text-pink-800 dark:text-pink-200\",\n                      icon: \"from-pink-500 to-pink-600\",\n                      badge: \"bg-pink-100 dark:bg-pink-900/40 text-pink-700 dark:text-pink-300\",\n                      input: \"border-pink-300/60 dark:border-pink-600/50 focus:border-pink-500 dark:focus:border-pink-400 focus:ring-2 focus:ring-pink-200 dark:focus:ring-pink-800/50\"\n                    }\n                  };\n\n                  const subjectExamples: {[key: string]: string} = {\n                    turkce: \"Örnek: cümle çözümleme, sözcük türleri, yazım kuralları, anlatım bozuklukları...\",\n                    matematik: \"Örnek: türev, integral, logaritma, fonksiyonlar, diziler...\",\n                    fizik: \"Örnek: hareket, kuvvet, enerji, elektrik, manyetizma...\",\n                    kimya: \"Örnek: mol kavramı, kimyasal bağlar, asit-baz, elektrokimya...\",\n                    biyoloji: \"Örnek: hücre, kalıtım, ekosistem, sinir sistemi, fotosentez...\",\n                    sosyal: \"Örnek: Osmanlı tarihi, coğrafya, felsefe, Atatürk ilkeleri...\",\n                    fen: \"Örnek: madde ve özellikleri, ışık, ses, basınç, ekosistem...\",\n                    geometri: \"Örnek: üçgenler, dörtgenler, çember, analitik geometri, trigonometri...\"\n                  };\n\n                  const selectedSubject = newExamResult.selectedSubject;\n                  const colors = subjectColors[selectedSubject] || subjectColors.turkce;\n                  const placeholder = getTopicExamplesForExam(newExamResult.exam_type, selectedSubject);\n                  const wrongCount = parseInt(newExamResult.subjects[newExamResult.selectedSubject]?.wrong) || 0;\n\n                  // Sadece yanlış sayısı > 0 olduğunda göster\n                  if (wrongCount === 0) {\n                    return null;\n                  }\n\n                  return (\n                    <div className={`bg-gradient-to-br ${colors.bg} rounded-2xl p-5 border-2 ${colors.border} shadow-lg backdrop-blur-sm`}>\n                      <div className=\"flex items-center gap-3 mb-4\">\n                        <div className={`p-2 bg-gradient-to-br ${colors.icon} rounded-xl shadow-lg`}>\n                          <Search className=\"h-4 w-4 text-white\" />\n                        </div>\n                        <div>\n                          <label className={`text-sm font-bold ${colors.text} flex items-center gap-2`}>\n                            🔍 Yanlış Konu Analizi\n                            <div className={`text-xs ${colors.badge} px-2 py-1 rounded-full`}>\n                              {wrongCount} yanlış\n                            </div>\n                          </label>\n                          <p className={`text-xs ${colors.text} opacity-80 mt-1`}>\n                            Eksik konuları belirterek öncelik listesine ekleyin\n                          </p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"space-y-3\">\n                        <Textarea\n                          value={newExamResult.wrongTopicsText}\n                          onChange={(e) => setNewExamResult({...newExamResult, wrongTopicsText: e.target.value})}\n                          placeholder={placeholder}\n                          className={`h-20 bg-white/90 dark:bg-gray-800/90 ${colors.input} rounded-xl shadow-sm`}\n                          data-testid=\"textarea-branch-wrong-topics\"\n                        />\n                        <p className=\"text-xs text-gray-500/80 dark:text-gray-400/80\">Virgülle ayırarak birden fazla konu girebilirsiniz</p>\n                    \n                        {newExamResult.wrongTopicsText && newExamResult.wrongTopicsText.trim() && (\n                          <div className=\"flex items-center gap-2 p-3 bg-red-100/60 dark:bg-red-900/30 rounded-xl border border-red-200/60 dark:border-red-700/40\">\n                            <Lightbulb className=\"h-4 w-4 text-red-600 dark:text-red-400 flex-shrink-0\" />\n                            <div className=\"text-xs text-red-700/90 dark:text-red-300/90\">\n                              <strong>{newExamResult.wrongTopicsText.split(',').filter(t => t.trim()).length} konu</strong> öncelik listesine eklenecek ve hata sıklığı analizinde gösterilecek\n                            </div>\n                          </div>\n                        )}\n                        \n                        {newExamResult.wrongTopicsText && newExamResult.wrongTopicsText.trim() && (\n                          <div className=\"bg-white/70 dark:bg-gray-800/70 rounded-xl p-4 border border-purple-200/60 dark:border-purple-700/40\">\n                            <div className=\"flex items-center gap-2 mb-3\">\n                              <div className=\"p-1.5 bg-purple-500 rounded-lg\">\n                                <FileText className=\"h-3.5 w-3.5 text-white\" />\n                              </div>\n                              <span className=\"text-xs font-semibold text-purple-700 dark:text-purple-300\">Konu Önizlemesi</span>\n                            </div>\n                            <div className=\"flex flex-wrap gap-2\">\n                              {newExamResult.wrongTopicsText.split(',').filter(t => t.trim()).map((topic, index) => (\n                                <div key={index} className=\"px-3 py-1.5 bg-gradient-to-br from-purple-100 to-pink-100 dark:from-purple-900/40 dark:to-pink-900/40 rounded-lg border border-purple-200 dark:border-purple-700 text-xs font-medium text-purple-800 dark:text-purple-200 shadow-sm\">\n                                  {topic.trim()}\n                                </div>\n                              ))}\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  );\n                })()}\n              </div>\n            )}\n\n            {/* TYT Konular */}\n            {newExamResult.examScope === \"full\" && newExamResult.exam_type === \"TYT\" && (\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold\">TYT Dersleri</h3>\n                \n                {/* Türkçe */}\n                <div className=\"border rounded-lg p-4 space-y-3\">\n                  <h4 className=\"font-medium text-green-600\">Türkçe</h4>\n                  <div className=\"grid grid-cols-3 gap-2\">\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Doğru</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"40\"\n                        value={newExamResult.subjects.turkce.correct}\n                        onChange={(e) => {\n                          const cleanedValue = cleanNumberInput(e.target.value);\n          const value = parseInt(cleanedValue) || 0;\n                          const wrong = parseInt(newExamResult.subjects.turkce.wrong) || 0;\n                          const blank = parseInt(newExamResult.subjects.turkce.blank) || 0;\n                          const maxAllowed = SUBJECT_LIMITS.TYT['Türkçe'] - wrong - blank;\n                          const limitedValue = Math.min(value, maxAllowed);\n                          setNewExamResult({\n                            ...newExamResult,\n                            subjects: {\n                              ...newExamResult.subjects,\n                              turkce: { ...newExamResult.subjects.turkce, correct: limitedValue.toString() }\n                            }\n                          });\n                        }}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Yanlış</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"40\"\n                        value={newExamResult.subjects.turkce.wrong}\n                        onChange={(e) => {\n                          const cleanedValue = cleanNumberInput(e.target.value);\n          const value = parseInt(cleanedValue) || 0;\n                          const correct = parseInt(newExamResult.subjects.turkce.correct) || 0;\n                          const blank = parseInt(newExamResult.subjects.turkce.blank) || 0;\n                          const maxAllowed = SUBJECT_LIMITS.TYT['Türkçe'] - correct - blank;\n                          const limitedValue = Math.min(value, maxAllowed);\n                          setNewExamResult({\n                            ...newExamResult,\n                            subjects: {\n                              ...newExamResult.subjects,\n                              turkce: { ...newExamResult.subjects.turkce, wrong: limitedValue.toString() }\n                            }\n                          });\n                        }}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Boş</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"40\"\n                        value={newExamResult.subjects.turkce.blank}\n                        onChange={(e) => {\n                          const cleanedValue = cleanNumberInput(e.target.value);\n          const value = parseInt(cleanedValue) || 0;\n                          const correct = parseInt(newExamResult.subjects.turkce.correct) || 0;\n                          const wrong = parseInt(newExamResult.subjects.turkce.wrong) || 0;\n                          const maxAllowed = SUBJECT_LIMITS.TYT['Türkçe'] - correct - wrong;\n                          const limitedValue = Math.min(value, maxAllowed);\n                          setNewExamResult({\n                            ...newExamResult,\n                            subjects: {\n                              ...newExamResult.subjects,\n                              turkce: { ...newExamResult.subjects.turkce, blank: limitedValue.toString() }\n                            }\n                          });\n                        }}\n                      />\n                    </div>\n                  </div>\n                  {parseInt(newExamResult.subjects.turkce.wrong) > 0 && (\n                    <div className=\"bg-gradient-to-br from-red-50/80 via-white/60 to-orange-50/60 dark:from-red-950/30 dark:via-gray-800/60 dark:to-orange-950/30 rounded-2xl p-5 border-2 border-red-200/50 dark:border-red-700/40 shadow-lg backdrop-blur-sm mt-4\">\n                      <div className=\"flex items-center gap-3 mb-4\">\n                        <div className=\"p-2 bg-gradient-to-br from-red-500 to-red-600 rounded-xl shadow-lg\">\n                          <Search className=\"h-4 w-4 text-white\" />\n                        </div>\n                        <div>\n                          <label className=\"text-sm font-bold text-red-800 dark:text-red-200 flex items-center gap-2\">\n                            🔍 Türkçe Yanlış Konu Analizi\n                            <div className=\"text-xs bg-red-100 dark:bg-red-900/40 px-2 py-1 rounded-full text-red-700 dark:text-red-300\">\n                              {parseInt(newExamResult.subjects.turkce.wrong)} yanlış\n                            </div>\n                          </label>\n                          <p className=\"text-xs text-red-600/80 dark:text-red-400/80 mt-1\">\n                            Eksik konuları belirterek öncelik listesine ekleyin\n                          </p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"space-y-3\">\n                        <Input\n                          value={currentWrongTopics.turkce || \"\"}\n                          onChange={(e) => {\n                            setCurrentWrongTopics({...currentWrongTopics, turkce: e.target.value});\n                            const topics = e.target.value.split(',').map(t => toTitleCase(t.trim())).filter(t => t.length > 0);\n                            const uniqueTopics = [...new Set(topics)];\n                            setNewExamResult({\n                              ...newExamResult,\n                              subjects: {\n                                ...newExamResult.subjects,\n                                turkce: { ...newExamResult.subjects.turkce, wrong_topics: uniqueTopics }\n                              }\n                            });\n                          }}\n                          placeholder=\"Örnek: cümle çözümleme, sözcük türleri, yazım kuralları...\"\n                          className=\"bg-white/90 dark:bg-gray-800/90 border-red-300/60 dark:border-red-600/50 focus:border-red-500 dark:focus:border-red-400 focus:ring-2 focus:ring-red-200 dark:focus:ring-red-800/50 rounded-xl shadow-sm text-sm\"\n                        />\n                        {currentWrongTopics.turkce && (\n                          <div className=\"flex items-center gap-2 p-3 bg-red-100/60 dark:bg-red-900/30 rounded-xl border border-red-200/60 dark:border-red-700/40\">\n                            <Lightbulb className=\"h-4 w-4 text-red-600 dark:text-red-400 flex-shrink-0\" />\n                            <div className=\"text-xs text-red-700/90 dark:text-red-300/90\">\n                              <strong>{currentWrongTopics.turkce.split(',').length} konu</strong> öncelik listesine eklenecek ve hata sıklığı analizinde gösterilecek\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  )}\n                </div>\n                {/* Sosyal */}\n                <div className=\"border rounded-lg p-4 space-y-3\">\n                  <h4 className=\"font-medium text-purple-600\">Sosyal Bilimler</h4>\n                  <div className=\"grid grid-cols-3 gap-2\">\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Doğru</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"20\"\n                        value={newExamResult.subjects.sosyal.correct}\n                        onChange={(e) => {\n                          const cleanedValue = cleanNumberInput(e.target.value);\n          const value = parseInt(cleanedValue) || 0;\n                          const wrong = parseInt(newExamResult.subjects.sosyal.wrong) || 0;\n                          const blank = parseInt(newExamResult.subjects.sosyal.blank) || 0;\n                          const maxAllowed = SUBJECT_LIMITS.TYT['Sosyal Bilimler'] - wrong - blank;\n                          const limitedValue = Math.min(value, maxAllowed);\n                          setNewExamResult({\n                            ...newExamResult,\n                            subjects: {\n                              ...newExamResult.subjects,\n                              sosyal: { ...newExamResult.subjects.sosyal, correct: limitedValue.toString() }\n                            }\n                          });\n                        }}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Yanlış</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"20\"\n                        value={newExamResult.subjects.sosyal.wrong}\n                        onChange={(e) => {\n                          const cleanedValue = cleanNumberInput(e.target.value);\n          const value = parseInt(cleanedValue) || 0;\n                          const correct = parseInt(newExamResult.subjects.sosyal.correct) || 0;\n                          const blank = parseInt(newExamResult.subjects.sosyal.blank) || 0;\n                          const maxAllowed = SUBJECT_LIMITS.TYT['Sosyal Bilimler'] - correct - blank;\n                          const limitedValue = Math.min(value, maxAllowed);\n                          setNewExamResult({\n                            ...newExamResult,\n                            subjects: {\n                              ...newExamResult.subjects,\n                              sosyal: { ...newExamResult.subjects.sosyal, wrong: limitedValue.toString() }\n                            }\n                          });\n                        }}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Boş</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"20\"\n                        value={newExamResult.subjects.sosyal.blank}\n                        onChange={(e) => {\n                          const cleanedValue = cleanNumberInput(e.target.value);\n          const value = parseInt(cleanedValue) || 0;\n                          const correct = parseInt(newExamResult.subjects.sosyal.correct) || 0;\n                          const wrong = parseInt(newExamResult.subjects.sosyal.wrong) || 0;\n                          const maxAllowed = SUBJECT_LIMITS.TYT['Sosyal Bilimler'] - correct - wrong;\n                          const limitedValue = Math.min(value, maxAllowed);\n                          setNewExamResult({\n                            ...newExamResult,\n                            subjects: {\n                              ...newExamResult.subjects,\n                              sosyal: { ...newExamResult.subjects.sosyal, blank: limitedValue.toString() }\n                            }\n                          });\n                        }}\n                      />\n                    </div>\n                  </div>\n                  {parseInt(newExamResult.subjects.sosyal.wrong) > 0 && (\n                    <div className=\"bg-gradient-to-br from-purple-50/80 via-white/60 to-indigo-50/60 dark:from-purple-950/30 dark:via-gray-800/60 dark:to-indigo-950/30 rounded-2xl p-5 border-2 border-purple-200/50 dark:border-purple-700/40 shadow-lg backdrop-blur-sm mt-4\">\n                      <div className=\"flex items-center gap-3 mb-4\">\n                        <div className=\"p-2 bg-gradient-to-br from-purple-500 to-purple-600 rounded-xl shadow-lg\">\n                          <Search className=\"h-4 w-4 text-white\" />\n                        </div>\n                        <div>\n                          <label className=\"text-sm font-bold text-purple-800 dark:text-purple-200 flex items-center gap-2\">\n                            🔍 Sosyal Bilimler Yanlış Konu Analizi\n                            <div className=\"text-xs bg-purple-100 dark:bg-purple-900/40 px-2 py-1 rounded-full text-purple-700 dark:text-purple-300\">\n                              {parseInt(newExamResult.subjects.sosyal.wrong)} yanlış\n                            </div>\n                          </label>\n                          <p className=\"text-xs text-purple-600/80 dark:text-purple-400/80 mt-1\">\n                            Eksik konuları belirterek öncelik listesine ekleyin\n                          </p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"space-y-3\">\n                        <Input\n                          value={currentWrongTopics.sosyal || \"\"}\n                          onChange={(e) => {\n                            setCurrentWrongTopics({...currentWrongTopics, sosyal: e.target.value});\n                            const topics = e.target.value.split(',').map(t => toTitleCase(t.trim())).filter(t => t.length > 0);\n                            const uniqueTopics = [...new Set(topics)];\n                            setNewExamResult({\n                              ...newExamResult,\n                              subjects: {\n                                ...newExamResult.subjects,\n                                sosyal: { ...newExamResult.subjects.sosyal, wrong_topics: uniqueTopics }\n                              }\n                            });\n                          }}\n                          placeholder=\"Örnek: Osmanlı tarihi, fiziki coğrafya, felsefe akımları, din kültürü konuları...\"\n                          className=\"bg-white/90 dark:bg-gray-800/90 border-purple-300/60 dark:border-purple-600/50 focus:border-purple-500 dark:focus:border-purple-400 focus:ring-2 focus:ring-purple-200 dark:focus:ring-purple-800/50 rounded-xl shadow-sm text-sm\"\n                        />\n                        {currentWrongTopics.sosyal && (\n                          <div className=\"flex items-center gap-2 p-3 bg-purple-100/60 dark:bg-purple-900/30 rounded-xl border border-purple-200/60 dark:border-purple-700/40\">\n                            <Lightbulb className=\"h-4 w-4 text-purple-600 dark:text-purple-400 flex-shrink-0\" />\n                            <div className=\"text-xs text-purple-700/90 dark:text-purple-300/90\">\n                              <strong>{currentWrongTopics.sosyal.split(',').length} konu</strong> öncelik listesine eklenecek ve hata sıklığı analizinde gösterilecek\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  )}\n                </div>\n                {/* Matematik */}\n                <div className=\"border rounded-lg p-4 space-y-3\">\n                  <h4 className=\"font-medium text-blue-600\">Matematik</h4>\n                  <div className=\"grid grid-cols-3 gap-2\">\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Doğru</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"30\"\n                        value={newExamResult.subjects.matematik.correct}\n                        onChange={(e) => {\n                          const cleanedValue = cleanNumberInput(e.target.value);\n          const value = parseInt(cleanedValue) || 0;\n                          const wrong = parseInt(newExamResult.subjects.matematik.wrong) || 0;\n                          const blank = parseInt(newExamResult.subjects.matematik.blank) || 0;\n                          const maxAllowed = SUBJECT_LIMITS.TYT['Matematik'] - wrong - blank;\n                          const limitedValue = Math.min(value, maxAllowed);\n                          setNewExamResult({\n                            ...newExamResult,\n                            subjects: {\n                              ...newExamResult.subjects,\n                              matematik: { ...newExamResult.subjects.matematik, correct: limitedValue.toString() }\n                            }\n                          });\n                        }}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Yanlış</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"30\"\n                        value={newExamResult.subjects.matematik.wrong}\n                        onChange={(e) => {\n                          const cleanedValue = cleanNumberInput(e.target.value);\n          const value = parseInt(cleanedValue) || 0;\n                          const correct = parseInt(newExamResult.subjects.matematik.correct) || 0;\n                          const blank = parseInt(newExamResult.subjects.matematik.blank) || 0;\n                          const maxAllowed = SUBJECT_LIMITS.TYT['Matematik'] - correct - blank;\n                          const limitedValue = Math.min(value, maxAllowed);\n                          setNewExamResult({\n                            ...newExamResult,\n                            subjects: {\n                              ...newExamResult.subjects,\n                              matematik: { ...newExamResult.subjects.matematik, wrong: limitedValue.toString() }\n                            }\n                          });\n                        }}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Boş</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"30\"\n                        value={newExamResult.subjects.matematik.blank}\n                        onChange={(e) => {\n                          const cleanedValue = cleanNumberInput(e.target.value);\n          const value = parseInt(cleanedValue) || 0;\n                          const correct = parseInt(newExamResult.subjects.matematik.correct) || 0;\n                          const wrong = parseInt(newExamResult.subjects.matematik.wrong) || 0;\n                          const maxAllowed = SUBJECT_LIMITS.TYT['Matematik'] - correct - wrong;\n                          const limitedValue = Math.min(value, maxAllowed);\n                          setNewExamResult({\n                            ...newExamResult,\n                            subjects: {\n                              ...newExamResult.subjects,\n                              matematik: { ...newExamResult.subjects.matematik, blank: limitedValue.toString() }\n                            }\n                          });\n                        }}\n                      />\n                    </div>\n                  </div>\n                  {parseInt(newExamResult.subjects.matematik.wrong) > 0 && (\n                    <div className=\"bg-gradient-to-br from-blue-50/80 via-white/60 to-cyan-50/60 dark:from-blue-950/30 dark:via-gray-800/60 dark:to-cyan-950/30 rounded-2xl p-5 border-2 border-blue-200/50 dark:border-blue-700/40 shadow-lg backdrop-blur-sm mt-4\">\n                      <div className=\"flex items-center gap-3 mb-4\">\n                        <div className=\"p-2 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl shadow-lg\">\n                          <Search className=\"h-4 w-4 text-white\" />\n                        </div>\n                        <div>\n                          <label className=\"text-sm font-bold text-blue-800 dark:text-blue-200 flex items-center gap-2\">\n                            🔍 Matematik Yanlış Konu Analizi\n                            <div className=\"text-xs bg-blue-100 dark:bg-blue-900/40 px-2 py-1 rounded-full text-blue-700 dark:text-blue-300\">\n                              {parseInt(newExamResult.subjects.matematik.wrong)} yanlış\n                            </div>\n                          </label>\n                          <p className=\"text-xs text-blue-600/80 dark:text-blue-400/80 mt-1\">\n                            Eksik konuları belirterek öncelik listesine ekleyin\n                          </p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"space-y-3\">\n                        <Input\n                          value={currentWrongTopics.matematik || \"\"}\n                          onChange={(e) => {\n                            setCurrentWrongTopics({...currentWrongTopics, matematik: e.target.value});\n                            const topics = e.target.value.split(',').map(t => toTitleCase(t.trim())).filter(t => t.length > 0);\n                            const uniqueTopics = [...new Set(topics)];\n                            setNewExamResult({\n                              ...newExamResult,\n                              subjects: {\n                                ...newExamResult.subjects,\n                                matematik: { ...newExamResult.subjects.matematik, wrong_topics: uniqueTopics }\n                              }\n                            });\n                          }}\n                          placeholder=\"Örnek: temel kavramlar, problemler, fonksiyonlar, permütasyon-kombinasyon, olasılık...\"\n                          className=\"bg-white/90 dark:bg-gray-800/90 border-blue-300/60 dark:border-blue-600/50 focus:border-blue-500 dark:focus:border-blue-400 focus:ring-2 focus:ring-blue-200 dark:focus:ring-blue-800/50 rounded-xl shadow-sm text-sm\"\n                        />\n                        {currentWrongTopics.matematik && (\n                          <div className=\"flex items-center gap-2 p-3 bg-blue-100/60 dark:bg-blue-900/30 rounded-xl border border-blue-200/60 dark:border-blue-700/40\">\n                            <Lightbulb className=\"h-4 w-4 text-blue-600 dark:text-blue-400 flex-shrink-0\" />\n                            <div className=\"text-xs text-blue-700/90 dark:text-blue-300/90\">\n                              <strong>{currentWrongTopics.matematik.split(',').length} konu</strong> öncelik listesine eklenecek ve hata sıklığı analizinde gösterilecek\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  )}\n                </div>\n                {/* TYT Geometri */}\n                <div className=\"border rounded-lg p-4 space-y-3\">\n                  <h4 className=\"font-medium text-pink-600\">Geometri</h4>\n                  <div className=\"grid grid-cols-3 gap-2\">\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Doğru</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"10\"\n                        value={newExamResult.subjects.geometri.correct}\n                        onChange={(e) => {\n                          const cleanedValue = cleanNumberInput(e.target.value);\n                          const value = parseInt(cleanedValue) || 0;\n                          const wrong = parseInt(newExamResult.subjects.geometri.wrong) || 0;\n                          const blank = parseInt(newExamResult.subjects.geometri.blank) || 0;\n                          const maxAllowed = SUBJECT_LIMITS.TYT['Geometri'] - wrong - blank;\n                          const limitedValue = Math.min(value, maxAllowed);\n                          setNewExamResult({\n                            ...newExamResult,\n                            subjects: {\n                              ...newExamResult.subjects,\n                              geometri: { ...newExamResult.subjects.geometri, correct: limitedValue.toString() }\n                            }\n                          });\n                        }}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Yanlış</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"10\"\n                        value={newExamResult.subjects.geometri.wrong}\n                        onChange={(e) => {\n                          const cleanedValue = cleanNumberInput(e.target.value);\n                          const value = parseInt(cleanedValue) || 0;\n                          const correct = parseInt(newExamResult.subjects.geometri.correct) || 0;\n                          const blank = parseInt(newExamResult.subjects.geometri.blank) || 0;\n                          const maxAllowed = SUBJECT_LIMITS.TYT['Geometri'] - correct - blank;\n                          const limitedValue = Math.min(value, maxAllowed);\n                          setNewExamResult({\n                            ...newExamResult,\n                            subjects: {\n                              ...newExamResult.subjects,\n                              geometri: { ...newExamResult.subjects.geometri, wrong: limitedValue.toString() }\n                            }\n                          });\n                        }}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Boş</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"10\"\n                        value={newExamResult.subjects.geometri.blank}\n                        onChange={(e) => {\n                          const cleanedValue = cleanNumberInput(e.target.value);\n                          const value = parseInt(cleanedValue) || 0;\n                          const correct = parseInt(newExamResult.subjects.geometri.correct) || 0;\n                          const wrong = parseInt(newExamResult.subjects.geometri.wrong) || 0;\n                          const maxAllowed = SUBJECT_LIMITS.TYT['Geometri'] - correct - wrong;\n                          const limitedValue = Math.min(value, maxAllowed);\n                          setNewExamResult({\n                            ...newExamResult,\n                            subjects: {\n                              ...newExamResult.subjects,\n                              geometri: { ...newExamResult.subjects.geometri, blank: limitedValue.toString() }\n                            }\n                          });\n                        }}\n                      />\n                    </div>\n                  </div>\n                  {parseInt(newExamResult.subjects.geometri.wrong) > 0 && (\n                    <div className=\"bg-gradient-to-br from-pink-50/80 via-white/60 to-rose-50/60 dark:from-pink-950/30 dark:via-gray-800/60 dark:to-rose-950/30 rounded-2xl p-5 border-2 border-pink-200/50 dark:border-pink-700/40 shadow-lg backdrop-blur-sm mt-4\">\n                      <div className=\"flex items-center gap-3 mb-4\">\n                        <div className=\"p-2 bg-gradient-to-br from-pink-500 to-pink-600 rounded-xl shadow-lg\">\n                          <Search className=\"h-4 w-4 text-white\" />\n                        </div>\n                        <div>\n                          <label className=\"text-sm font-bold text-pink-800 dark:text-pink-200 flex items-center gap-2\">\n                            🔍 Geometri Yanlış Konu Analizi\n                            <div className=\"text-xs bg-pink-100 dark:bg-pink-900/40 px-2 py-1 rounded-full text-pink-700 dark:text-pink-300\">\n                              {parseInt(newExamResult.subjects.geometri.wrong)} yanlış\n                            </div>\n                          </label>\n                          <p className=\"text-xs text-pink-600/80 dark:text-pink-400/80 mt-1\">\n                            Eksik konuları belirterek öncelik listesine ekleyin\n                          </p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"space-y-3\">\n                        <Input\n                          value={currentWrongTopics.geometri || \"\"}\n                          onChange={(e) => {\n                            setCurrentWrongTopics({...currentWrongTopics, geometri: e.target.value});\n                            const topics = e.target.value.split(',').map(t => toTitleCase(t.trim())).filter(t => t.length > 0);\n                            const uniqueTopics = [...new Set(topics)];\n                            setNewExamResult({\n                              ...newExamResult,\n                              subjects: {\n                                ...newExamResult.subjects,\n                                geometri: { ...newExamResult.subjects.geometri, wrong_topics: uniqueTopics }\n                              }\n                            });\n                          }}\n                          placeholder=\"Örnek: açılar ve üçgenler, çokgenler, çember ve daire, analitik geometri, katı cisimler...\"\n                          className=\"bg-white/90 dark:bg-gray-800/90 border-pink-300/60 dark:border-pink-600/50 focus:border-pink-500 dark:focus:border-pink-400 focus:ring-2 focus:ring-pink-200 dark:focus:ring-pink-800/50 rounded-xl shadow-sm text-sm\"\n                        />\n                        {currentWrongTopics.geometri && (\n                          <div className=\"flex items-center gap-2 p-3 bg-pink-100/60 dark:bg-pink-900/30 rounded-xl border border-pink-200/60 dark:border-pink-700/40\">\n                            <Lightbulb className=\"h-4 w-4 text-pink-600 dark:text-pink-400 flex-shrink-0\" />\n                            <div className=\"text-xs text-pink-700/90 dark:text-pink-300/90\">\n                              <strong>{currentWrongTopics.geometri.split(',').length} konu</strong> öncelik listesine eklenecek ve hata sıklığı analizinde gösterilecek\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  )}\n                </div>\n                {/* Fen */}\n                <div className=\"border rounded-lg p-4 space-y-3\">\n                  <h4 className=\"font-medium text-orange-600\">Fen Bilimleri</h4>\n                  <div className=\"grid grid-cols-3 gap-2\">\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Doğru</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"20\"\n                        value={newExamResult.subjects.fen.correct}\n                        onChange={(e) => {\n                          const cleanedValue = cleanNumberInput(e.target.value);\n          const value = parseInt(cleanedValue) || 0;\n                          const wrong = parseInt(newExamResult.subjects.fen.wrong) || 0;\n                          const blank = parseInt(newExamResult.subjects.fen.blank) || 0;\n                          const maxAllowed = SUBJECT_LIMITS.TYT['Fen Bilimleri'] - wrong - blank;\n                          const limitedValue = Math.min(value, maxAllowed);\n                          setNewExamResult({\n                            ...newExamResult,\n                            subjects: {\n                              ...newExamResult.subjects,\n                              fen: { ...newExamResult.subjects.fen, correct: limitedValue.toString() }\n                            }\n                          });\n                        }}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Yanlış</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"20\"\n                        value={newExamResult.subjects.fen.wrong}\n                        onChange={(e) => {\n                          const cleanedValue = cleanNumberInput(e.target.value);\n          const value = parseInt(cleanedValue) || 0;\n                          const correct = parseInt(newExamResult.subjects.fen.correct) || 0;\n                          const blank = parseInt(newExamResult.subjects.fen.blank) || 0;\n                          const maxAllowed = SUBJECT_LIMITS.TYT['Fen Bilimleri'] - correct - blank;\n                          const limitedValue = Math.min(value, maxAllowed);\n                          setNewExamResult({\n                            ...newExamResult,\n                            subjects: {\n                              ...newExamResult.subjects,\n                              fen: { ...newExamResult.subjects.fen, wrong: limitedValue.toString() }\n                            }\n                          });\n                        }}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Boş</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"20\"\n                        value={newExamResult.subjects.fen.blank}\n                        onChange={(e) => {\n                          const cleanedValue = cleanNumberInput(e.target.value);\n          const value = parseInt(cleanedValue) || 0;\n                          const correct = parseInt(newExamResult.subjects.fen.correct) || 0;\n                          const wrong = parseInt(newExamResult.subjects.fen.wrong) || 0;\n                          const maxAllowed = SUBJECT_LIMITS.TYT['Fen Bilimleri'] - correct - wrong;\n                          const limitedValue = Math.min(value, maxAllowed);\n                          setNewExamResult({\n                            ...newExamResult,\n                            subjects: {\n                              ...newExamResult.subjects,\n                              fen: { ...newExamResult.subjects.fen, blank: limitedValue.toString() }\n                            }\n                          });\n                        }}\n                      />\n                    </div>\n                  </div>\n                  {parseInt(newExamResult.subjects.fen.wrong) > 0 && (\n                    <div className=\"bg-gradient-to-br from-orange-50/80 via-white/60 to-amber-50/60 dark:from-orange-950/30 dark:via-gray-800/60 dark:to-amber-950/30 rounded-2xl p-5 border-2 border-orange-200/50 dark:border-orange-700/40 shadow-lg backdrop-blur-sm mt-4\">\n                      <div className=\"flex items-center gap-3 mb-4\">\n                        <div className=\"p-2 bg-gradient-to-br from-orange-500 to-orange-600 rounded-xl shadow-lg\">\n                          <Search className=\"h-4 w-4 text-white\" />\n                        </div>\n                        <div>\n                          <label className=\"text-sm font-bold text-orange-800 dark:text-orange-200 flex items-center gap-2\">\n                            🔍 Fen Bilimleri Yanlış Konu Analizi\n                            <div className=\"text-xs bg-orange-100 dark:bg-orange-900/40 px-2 py-1 rounded-full text-orange-700 dark:text-orange-300\">\n                              {parseInt(newExamResult.subjects.fen.wrong)} yanlış\n                            </div>\n                          </label>\n                          <p className=\"text-xs text-orange-600/80 dark:text-orange-400/80 mt-1\">\n                            Eksik konuları belirterek öncelik listesine ekleyin\n                          </p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"space-y-3\">\n                        <Input\n                          value={currentWrongTopics.fen || \"\"}\n                          onChange={(e) => {\n                            setCurrentWrongTopics({...currentWrongTopics, fen: e.target.value});\n                            const topics = e.target.value.split(',').map(t => {\n                              const cleanTopic = toTitleCase(t.trim());\n                              return cleanTopic ? `${newExamResult.exam_type} Fen Bilimleri - ${cleanTopic}` : '';\n                            }).filter(t => t.length > 0);\n                            \n                            // Yinelenenleri kaldır\n                            const uniqueTopics = [...new Set(topics)];\n                            \n                            setNewExamResult({\n                              ...newExamResult,\n                              subjects: {\n                                ...newExamResult.subjects,\n                                fen: { ...newExamResult.subjects.fen, wrong_topics: uniqueTopics }\n                              }\n                            });\n                          }}\n                          placeholder=\"Örnek: kuvvet ve hareket, maddenin halleri, hücre ve organelleri...\"\n                          className=\"bg-white/90 dark:bg-gray-800/90 border-orange-300/60 dark:border-orange-600/50 focus:border-orange-500 dark:focus:border-orange-400 focus:ring-2 focus:ring-orange-200 dark:focus:ring-orange-800/50 rounded-xl shadow-sm text-sm\"\n                        />\n                        {currentWrongTopics.fen && (\n                          <div className=\"flex items-center gap-2 p-3 bg-orange-100/60 dark:bg-orange-900/30 rounded-xl border border-orange-200/60 dark:border-orange-700/40\">\n                            <Lightbulb className=\"h-4 w-4 text-orange-600 dark:text-orange-400 flex-shrink-0\" />\n                            <div className=\"text-xs text-orange-700/90 dark:text-orange-300/90\">\n                              <strong>{currentWrongTopics.fen.split(',').length} konu</strong> öncelik listesine eklenecek ve hata sıklığı analizinde gösterilecek\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {/* AYT Sayısal Konular */}\n            {newExamResult.examScope === \"full\" && newExamResult.exam_type === \"AYT\" && (\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold\">AYT Sayısal Dersleri</h3>\n                \n                {/* Matematik */}\n                <div className=\"border rounded-lg p-4 space-y-3\">\n                  <h4 className=\"font-medium text-blue-600\">Matematik</h4>\n                  <div className=\"grid grid-cols-3 gap-2\">\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Doğru</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"30\"\n                        value={newExamResult.subjects.matematik.correct}\n                        onChange={(e) => {\n                          const cleanedValue = cleanNumberInput(e.target.value);\n          const value = parseInt(cleanedValue) || 0;\n                          const wrong = parseInt(newExamResult.subjects.matematik.wrong) || 0;\n                          const blank = parseInt(newExamResult.subjects.matematik.blank) || 0;\n                          const maxAllowed = SUBJECT_LIMITS.AYT['Matematik'] - wrong - blank;\n                          const limitedValue = Math.min(value, maxAllowed);\n                          setNewExamResult({\n                            ...newExamResult,\n                            subjects: {\n                              ...newExamResult.subjects,\n                              matematik: { ...newExamResult.subjects.matematik, correct: limitedValue.toString() }\n                            }\n                          });\n                        }}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Yanlış</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"30\"\n                        value={newExamResult.subjects.matematik.wrong}\n                        onChange={(e) => {\n                          const cleanedValue = cleanNumberInput(e.target.value);\n          const value = parseInt(cleanedValue) || 0;\n                          const correct = parseInt(newExamResult.subjects.matematik.correct) || 0;\n                          const blank = parseInt(newExamResult.subjects.matematik.blank) || 0;\n                          const maxAllowed = SUBJECT_LIMITS.AYT['Matematik'] - correct - blank;\n                          const limitedValue = Math.min(value, maxAllowed);\n                          setNewExamResult({\n                            ...newExamResult,\n                            subjects: {\n                              ...newExamResult.subjects,\n                              matematik: { ...newExamResult.subjects.matematik, wrong: limitedValue.toString() }\n                            }\n                          });\n                        }}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Boş</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"30\"\n                        value={newExamResult.subjects.matematik.blank}\n                        onChange={(e) => {\n                          const cleanedValue = cleanNumberInput(e.target.value);\n          const value = parseInt(cleanedValue) || 0;\n                          const correct = parseInt(newExamResult.subjects.matematik.correct) || 0;\n                          const wrong = parseInt(newExamResult.subjects.matematik.wrong) || 0;\n                          const maxAllowed = SUBJECT_LIMITS.AYT['Matematik'] - correct - wrong;\n                          const limitedValue = Math.min(value, maxAllowed);\n                          setNewExamResult({\n                            ...newExamResult,\n                            subjects: {\n                              ...newExamResult.subjects,\n                              matematik: { ...newExamResult.subjects.matematik, blank: limitedValue.toString() }\n                            }\n                          });\n                        }}\n                      />\n                    </div>\n                  </div>\n                  {parseInt(newExamResult.subjects.matematik.wrong) > 0 && (\n                    <div className=\"bg-gradient-to-r from-blue-50/70 to-indigo-50/50 dark:from-blue-900/20 dark:to-indigo-900/15 rounded-xl p-4 border border-blue-200/40 dark:border-blue-700/30 mt-3\">\n                      <div className=\"flex items-center gap-2 mb-3\">\n                        <AlertTriangle className=\"h-4 w-4 text-blue-500\" />\n                        <label className=\"text-sm font-semibold text-blue-700 dark:text-blue-300\">🔍 Matematik Eksik Konular</label>\n                      </div>\n                      <Input\n                        value={currentWrongTopics.matematik || \"\"}\n                        onChange={(e) => {\n                          setCurrentWrongTopics({...currentWrongTopics, matematik: e.target.value});\n                          const topics = e.target.value.split(',').map(t => toTitleCase(t.trim())).filter(t => t.length > 0);\n                          const uniqueTopics = [...new Set(topics)];\n                          setNewExamResult({\n                            ...newExamResult,\n                            subjects: {\n                              ...newExamResult.subjects,\n                              matematik: { ...newExamResult.subjects.matematik, wrong_topics: uniqueTopics }\n                            }\n                          });\n                        }}\n                        placeholder=\"Limit, Türev, İntegral, Trigonometri, Logaritma gibi...\"\n                        className=\"bg-white/80 dark:bg-gray-800/80 border-blue-200 dark:border-blue-700/50 focus:border-blue-400 dark:focus:border-blue-500 rounded-xl shadow-sm\"\n                      />\n                      {currentWrongTopics.matematik && (\n                        <div className=\"mt-2 text-xs text-blue-600/70 dark:text-blue-400/70\">\n                          💡 Bu konular öncelik listesine eklenecek\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n\n                {/* AYT Geometri */}\n                <div className=\"border rounded-lg p-4 space-y-3\">\n                  <h4 className=\"font-medium text-pink-600\">Geometri</h4>\n                  <div className=\"grid grid-cols-3 gap-2\">\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Doğru</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"10\"\n                        value={newExamResult.subjects.geometri.correct}\n                        onChange={(e) => {\n                          const cleanedValue = cleanNumberInput(e.target.value);\n          const value = parseInt(cleanedValue) || 0;\n                          const wrong = parseInt(newExamResult.subjects.geometri.wrong) || 0;\n                          const blank = parseInt(newExamResult.subjects.geometri.blank) || 0;\n                          const maxAllowed = SUBJECT_LIMITS.AYT['Geometri'] - wrong - blank;\n                          const limitedValue = Math.min(value, maxAllowed);\n                          setNewExamResult({\n                            ...newExamResult,\n                            subjects: {\n                              ...newExamResult.subjects,\n                              geometri: { ...newExamResult.subjects.geometri, correct: limitedValue.toString() }\n                            }\n                          });\n                        }}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Yanlış</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"10\"\n                        value={newExamResult.subjects.geometri.wrong}\n                        onChange={(e) => {\n                          const cleanedValue = cleanNumberInput(e.target.value);\n          const value = parseInt(cleanedValue) || 0;\n                          const correct = parseInt(newExamResult.subjects.geometri.correct) || 0;\n                          const blank = parseInt(newExamResult.subjects.geometri.blank) || 0;\n                          const maxAllowed = SUBJECT_LIMITS.AYT['Geometri'] - correct - blank;\n                          const limitedValue = Math.min(value, maxAllowed);\n                          setNewExamResult({\n                            ...newExamResult,\n                            subjects: {\n                              ...newExamResult.subjects,\n                              geometri: { ...newExamResult.subjects.geometri, wrong: limitedValue.toString() }\n                            }\n                          });\n                        }}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Boş</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"10\"\n                        value={newExamResult.subjects.geometri.blank}\n                        onChange={(e) => {\n                          const cleanedValue = cleanNumberInput(e.target.value);\n          const value = parseInt(cleanedValue) || 0;\n                          const correct = parseInt(newExamResult.subjects.geometri.correct) || 0;\n                          const wrong = parseInt(newExamResult.subjects.geometri.wrong) || 0;\n                          const maxAllowed = SUBJECT_LIMITS.AYT['Geometri'] - correct - wrong;\n                          const limitedValue = Math.min(value, maxAllowed);\n                          setNewExamResult({\n                            ...newExamResult,\n                            subjects: {\n                              ...newExamResult.subjects,\n                              geometri: { ...newExamResult.subjects.geometri, blank: limitedValue.toString() }\n                            }\n                          });\n                        }}\n                      />\n                    </div>\n                  </div>\n                  {parseInt(newExamResult.subjects.geometri.wrong) > 0 && (\n                    <div className=\"bg-gradient-to-r from-pink-50/70 to-rose-50/50 dark:from-pink-900/20 dark:to-rose-900/15 rounded-xl p-4 border border-pink-200/40 dark:border-pink-700/30 mt-3\">\n                      <div className=\"flex items-center gap-2 mb-3\">\n                        <AlertTriangle className=\"h-4 w-4 text-pink-500\" />\n                        <label className=\"text-sm font-semibold text-pink-700 dark:text-pink-300\">🔍 Geometri Eksik Konular</label>\n                      </div>\n                      <Input\n                        value={currentWrongTopics.geometri || \"\"}\n                        onChange={(e) => {\n                          setCurrentWrongTopics({...currentWrongTopics, geometri: e.target.value});\n                          const topics = e.target.value.split(',').map(t => toTitleCase(t.trim())).filter(t => t.length > 0);\n                          const uniqueTopics = [...new Set(topics)];\n                          setNewExamResult({\n                            ...newExamResult,\n                            subjects: {\n                              ...newExamResult.subjects,\n                              geometri: { ...newExamResult.subjects.geometri, wrong_topics: uniqueTopics }\n                            }\n                          });\n                        }}\n                        placeholder=\"Örnek: doğruda ve üçgende açı, özel üçgenler, çember ve daire, doğrunun analitiği, çemberin analitiği...\"\n                        className=\"bg-white/80 dark:bg-gray-800/80 border-pink-200 dark:border-pink-700/50 focus:border-pink-400 dark:focus:border-pink-500 rounded-xl shadow-sm\"\n                      />\n                      {currentWrongTopics.geometri && (\n                        <div className=\"mt-2 text-xs text-pink-600/70 dark:text-pink-400/70\">\n                          💡 Bu konular öncelik listesine eklenecek\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n\n                {/* Fizik */}\n                <div className=\"border rounded-lg p-4 space-y-3\">\n                  <h4 className=\"font-medium text-red-600\">Fizik</h4>\n                  <div className=\"grid grid-cols-3 gap-2\">\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Doğru</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"14\"\n                        value={newExamResult.subjects.fizik.correct}\n                        onChange={(e) => {\n                          const cleanedValue = cleanNumberInput(e.target.value);\n          const value = parseInt(cleanedValue) || 0;\n                          const wrong = parseInt(newExamResult.subjects.fizik.wrong) || 0;\n                          const blank = parseInt(newExamResult.subjects.fizik.blank) || 0;\n                          const maxAllowed = SUBJECT_LIMITS.AYT['Fizik'] - wrong - blank;\n                          const limitedValue = Math.min(value, maxAllowed);\n                          setNewExamResult({\n                            ...newExamResult,\n                            subjects: {\n                              ...newExamResult.subjects,\n                              fizik: { ...newExamResult.subjects.fizik, correct: limitedValue.toString() }\n                            }\n                          });\n                        }}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Yanlış</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"14\"\n                        value={newExamResult.subjects.fizik.wrong}\n                        onChange={(e) => {\n                          const cleanedValue = cleanNumberInput(e.target.value);\n          const value = parseInt(cleanedValue) || 0;\n                          const correct = parseInt(newExamResult.subjects.fizik.correct) || 0;\n                          const blank = parseInt(newExamResult.subjects.fizik.blank) || 0;\n                          const maxAllowed = SUBJECT_LIMITS.AYT['Fizik'] - correct - blank;\n                          const limitedValue = Math.min(value, maxAllowed);\n                          setNewExamResult({\n                            ...newExamResult,\n                            subjects: {\n                              ...newExamResult.subjects,\n                              fizik: { ...newExamResult.subjects.fizik, wrong: limitedValue.toString() }\n                            }\n                          });\n                        }}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Boş</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"14\"\n                        value={newExamResult.subjects.fizik.blank}\n                        onChange={(e) => {\n                          const cleanedValue = cleanNumberInput(e.target.value);\n          const value = parseInt(cleanedValue) || 0;\n                          const correct = parseInt(newExamResult.subjects.fizik.correct) || 0;\n                          const wrong = parseInt(newExamResult.subjects.fizik.wrong) || 0;\n                          const maxAllowed = SUBJECT_LIMITS.AYT['Fizik'] - correct - wrong;\n                          const limitedValue = Math.min(value, maxAllowed);\n                          setNewExamResult({\n                            ...newExamResult,\n                            subjects: {\n                              ...newExamResult.subjects,\n                              fizik: { ...newExamResult.subjects.fizik, blank: limitedValue.toString() }\n                            }\n                          });\n                        }}\n                      />\n                    </div>\n                  </div>\n                  {parseInt(newExamResult.subjects.fizik.wrong) > 0 && (\n                    <div className=\"bg-gradient-to-r from-indigo-50/70 to-blue-50/50 dark:from-indigo-900/20 dark:to-blue-900/15 rounded-xl p-4 border border-indigo-200/40 dark:border-indigo-700/30 mt-3\">\n                      <div className=\"flex items-center gap-2 mb-3\">\n                        <AlertTriangle className=\"h-4 w-4 text-indigo-500\" />\n                        <label className=\"text-sm font-semibold text-indigo-700 dark:text-indigo-300\">🔍 Fizik Eksik Konular</label>\n                      </div>\n                      <Input\n                        value={currentWrongTopics.fizik || \"\"}\n                        onChange={(e) => {\n                          setCurrentWrongTopics({...currentWrongTopics, fizik: e.target.value});\n                          const topics = e.target.value.split(',').map(t => toTitleCase(t.trim())).filter(t => t.length > 0);\n                          const uniqueTopics = [...new Set(topics)];\n                          setNewExamResult({\n                            ...newExamResult,\n                            subjects: {\n                              ...newExamResult.subjects,\n                              fizik: { ...newExamResult.subjects.fizik, wrong_topics: uniqueTopics }\n                            }\n                          });\n                        }}\n                        placeholder=\"Hareket, Newton'un Hareket Yasaları, İş Güç Enerji gibi...\"\n                        className=\"bg-white/80 dark:bg-gray-800/80 border-indigo-200 dark:border-indigo-700/50 focus:border-indigo-400 dark:focus:border-indigo-500 rounded-xl shadow-sm\"\n                      />\n                      {currentWrongTopics.fizik && (\n                        <div className=\"mt-2 text-xs text-indigo-600/70 dark:text-indigo-400/70\">\n                          💡 Bu konular öncelik listesine eklenecek\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n\n                {/* Kimya */}\n                <div className=\"border rounded-lg p-4 space-y-3\">\n                  <h4 className=\"font-medium text-green-600\">Kimya</h4>\n                  <div className=\"grid grid-cols-3 gap-2\">\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Doğru</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"13\"\n                        value={newExamResult.subjects.kimya.correct}\n                        onChange={(e) => {\n                          const cleanedValue = cleanNumberInput(e.target.value);\n          const value = parseInt(cleanedValue) || 0;\n                          const wrong = parseInt(newExamResult.subjects.kimya.wrong) || 0;\n                          const blank = parseInt(newExamResult.subjects.kimya.blank) || 0;\n                          const maxAllowed = SUBJECT_LIMITS.AYT['Kimya'] - wrong - blank;\n                          const limitedValue = Math.min(value, maxAllowed);\n                          setNewExamResult({\n                            ...newExamResult,\n                            subjects: {\n                              ...newExamResult.subjects,\n                              kimya: { ...newExamResult.subjects.kimya, correct: limitedValue.toString() }\n                            }\n                          });\n                        }}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Yanlış</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"13\"\n                        value={newExamResult.subjects.kimya.wrong}\n                        onChange={(e) => {\n                          const cleanedValue = cleanNumberInput(e.target.value);\n          const value = parseInt(cleanedValue) || 0;\n                          const correct = parseInt(newExamResult.subjects.kimya.correct) || 0;\n                          const blank = parseInt(newExamResult.subjects.kimya.blank) || 0;\n                          const maxAllowed = SUBJECT_LIMITS.AYT['Kimya'] - correct - blank;\n                          const limitedValue = Math.min(value, maxAllowed);\n                          setNewExamResult({\n                            ...newExamResult,\n                            subjects: {\n                              ...newExamResult.subjects,\n                              kimya: { ...newExamResult.subjects.kimya, wrong: limitedValue.toString() }\n                            }\n                          });\n                        }}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Boş</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"13\"\n                        value={newExamResult.subjects.kimya.blank}\n                        onChange={(e) => {\n                          const cleanedValue = cleanNumberInput(e.target.value);\n          const value = parseInt(cleanedValue) || 0;\n                          const correct = parseInt(newExamResult.subjects.kimya.correct) || 0;\n                          const wrong = parseInt(newExamResult.subjects.kimya.wrong) || 0;\n                          const maxAllowed = SUBJECT_LIMITS.AYT['Kimya'] - correct - wrong;\n                          const limitedValue = Math.min(value, maxAllowed);\n                          setNewExamResult({\n                            ...newExamResult,\n                            subjects: {\n                              ...newExamResult.subjects,\n                              kimya: { ...newExamResult.subjects.kimya, blank: limitedValue.toString() }\n                            }\n                          });\n                        }}\n                      />\n                    </div>\n                  </div>\n                  {parseInt(newExamResult.subjects.kimya.wrong) > 0 && (\n                    <div className=\"bg-gradient-to-r from-green-50/70 to-emerald-50/50 dark:from-green-900/20 dark:to-emerald-900/15 rounded-xl p-4 border border-green-200/40 dark:border-green-700/30 mt-3\">\n                      <div className=\"flex items-center gap-2 mb-3\">\n                        <AlertTriangle className=\"h-4 w-4 text-green-500\" />\n                        <label className=\"text-sm font-semibold text-green-700 dark:text-green-300\">🔍 Kimya Eksik Konular</label>\n                      </div>\n                      <Input\n                        value={currentWrongTopics.kimya || \"\"}\n                        onChange={(e) => {\n                          setCurrentWrongTopics({...currentWrongTopics, kimya: e.target.value});\n                          const topics = e.target.value.split(',').map(t => toTitleCase(t.trim())).filter(t => t.length > 0);\n                          const uniqueTopics = [...new Set(topics)];\n                          setNewExamResult({\n                            ...newExamResult,\n                            subjects: {\n                              ...newExamResult.subjects,\n                              kimya: { ...newExamResult.subjects.kimya, wrong_topics: uniqueTopics }\n                            }\n                          });\n                        }}\n                        placeholder=\"Kimyasal Denge, Asit-Baz, Elektrokimya, Organik Kimya gibi...\"\n                        className=\"bg-white/80 dark:bg-gray-800/80 border-green-200 dark:border-green-700/50 focus:border-green-400 dark:focus:border-green-500 rounded-xl shadow-sm\"\n                      />\n                      {currentWrongTopics.kimya && (\n                        <div className=\"mt-2 text-xs text-green-600/70 dark:text-green-400/70\">\n                          💡 Bu konular öncelik listesine eklenecek\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n\n                {/* Biyoloji */}\n                <div className=\"border rounded-lg p-4 space-y-3\">\n                  <h4 className=\"font-medium text-teal-600\">Biyoloji</h4>\n                  <div className=\"grid grid-cols-3 gap-2\">\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Doğru</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"13\"\n                        value={newExamResult.subjects.biyoloji.correct}\n                        onChange={(e) => {\n                          const cleanedValue = cleanNumberInput(e.target.value);\n          const value = parseInt(cleanedValue) || 0;\n                          const wrong = parseInt(newExamResult.subjects.biyoloji.wrong) || 0;\n                          const blank = parseInt(newExamResult.subjects.biyoloji.blank) || 0;\n                          const maxAllowed = SUBJECT_LIMITS.AYT['Biyoloji'] - wrong - blank;\n                          const limitedValue = Math.min(value, maxAllowed);\n                          setNewExamResult({\n                            ...newExamResult,\n                            subjects: {\n                              ...newExamResult.subjects,\n                              biyoloji: { ...newExamResult.subjects.biyoloji, correct: limitedValue.toString() }\n                            }\n                          });\n                        }}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Yanlış</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"13\"\n                        value={newExamResult.subjects.biyoloji.wrong}\n                        onChange={(e) => {\n                          const cleanedValue = cleanNumberInput(e.target.value);\n          const value = parseInt(cleanedValue) || 0;\n                          const correct = parseInt(newExamResult.subjects.biyoloji.correct) || 0;\n                          const blank = parseInt(newExamResult.subjects.biyoloji.blank) || 0;\n                          const maxAllowed = SUBJECT_LIMITS.AYT['Biyoloji'] - correct - blank;\n                          const limitedValue = Math.min(value, maxAllowed);\n                          setNewExamResult({\n                            ...newExamResult,\n                            subjects: {\n                              ...newExamResult.subjects,\n                              biyoloji: { ...newExamResult.subjects.biyoloji, wrong: limitedValue.toString() }\n                            }\n                          });\n                        }}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Boş</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"13\"\n                        value={newExamResult.subjects.biyoloji.blank}\n                        onChange={(e) => {\n                          const cleanedValue = cleanNumberInput(e.target.value);\n          const value = parseInt(cleanedValue) || 0;\n                          const correct = parseInt(newExamResult.subjects.biyoloji.correct) || 0;\n                          const wrong = parseInt(newExamResult.subjects.biyoloji.wrong) || 0;\n                          const maxAllowed = SUBJECT_LIMITS.AYT['Biyoloji'] - correct - wrong;\n                          const limitedValue = Math.min(value, maxAllowed);\n                          setNewExamResult({\n                            ...newExamResult,\n                            subjects: {\n                              ...newExamResult.subjects,\n                              biyoloji: { ...newExamResult.subjects.biyoloji, blank: limitedValue.toString() }\n                            }\n                          });\n                        }}\n                      />\n                    </div>\n                  </div>\n                  {parseInt(newExamResult.subjects.biyoloji.wrong) > 0 && (\n                    <div className=\"bg-gradient-to-r from-teal-50/70 to-cyan-50/50 dark:from-teal-900/20 dark:to-cyan-900/15 rounded-xl p-4 border border-teal-200/40 dark:border-teal-700/30 mt-3\">\n                      <div className=\"flex items-center gap-2 mb-3\">\n                        <AlertTriangle className=\"h-4 w-4 text-teal-500\" />\n                        <label className=\"text-sm font-semibold text-teal-700 dark:text-teal-300\">🔍 Biyoloji Eksik Konular</label>\n                      </div>\n                      <Input\n                        value={currentWrongTopics.biyoloji || \"\"}\n                        onChange={(e) => {\n                          setCurrentWrongTopics({...currentWrongTopics, biyoloji: e.target.value});\n                          const topics = e.target.value.split(',').map(t => toTitleCase(t.trim())).filter(t => t.length > 0);\n                          const uniqueTopics = [...new Set(topics)];\n                          setNewExamResult({\n                            ...newExamResult,\n                            subjects: {\n                              ...newExamResult.subjects,\n                              biyoloji: { ...newExamResult.subjects.biyoloji, wrong_topics: uniqueTopics }\n                            }\n                          });\n                        }}\n                        placeholder=\"Sinir Sistemi, Hücre Bölünmesi, Ekosistem, Kalıtım gibi...\"\n                        className=\"bg-white/80 dark:bg-gray-800/80 border-teal-200 dark:border-teal-700/50 focus:border-teal-400 dark:focus:border-teal-500 rounded-xl shadow-sm\"\n                      />\n                      {currentWrongTopics.biyoloji && (\n                        <div className=\"mt-2 text-xs text-teal-600/70 dark:text-teal-400/70\">\n                          💡 Bu konular öncelik listesine eklenecek\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n            </>\n            )}\n\n            <div className=\"flex gap-2\">\n              <Button\n                onClick={() => {\n                  if (editingExam) {\n                    // Düzenleme modu - sadece display_name ve time_spent_minutes güncelle\n                    updateExamResultMutation.mutate({\n                      id: editingExam.id,\n                      data: {\n                        display_name: newExamResult.display_name.trim() || undefined,\n                        time_spent_minutes: parseInt(newExamResult.time_spent_minutes) || null\n                      }\n                    });\n                  } else {\n                    // Yeni kayıt modu - tüm deneme verisini kaydet\n                    \n                    // Genel deneme ise, ilgili sınav türüne göre GEREKLİ dersler için veri girilmiş olmalı\n                    if (newExamResult.examScope === \"full\") {\n                      // TYT için: Türkçe, Sosyal, Matematik, Geometri, Fen\n                      // AYT için: Matematik, Geometri, Fizik, Kimya, Biyoloji\n                      const requiredSubjects = newExamResult.exam_type === \"TYT\" \n                        ? ['turkce', 'sosyal', 'matematik', 'geometri', 'fen']\n                        : ['matematik', 'geometri', 'fizik', 'kimya', 'biyoloji'];\n                      \n                      const subjectDisplayNames: {[key: string]: string} = {\n                        'turkce': 'Türkçe',\n                        'sosyal': 'Sosyal Bilimler',\n                        'matematik': 'Matematik',\n                                'geometri': 'Geometri',\n                        'fen': 'Fen Bilimleri',\n                        'fizik': 'Fizik',\n                        'kimya': 'Kimya',\n                        'biyoloji': 'Biyoloji'\n                      };\n                      \n                      // Boş dersleri bul - bir dersin boş olması için doğru, yanlış VE boş hepsinin 0 olması gerekir\n                      // Doğru=0, Yanlış=0 ama Boş>0 ise geçerlidir (ders eklenebilir)\n                      const emptySubjects = requiredSubjects.filter(subjectKey => {\n                        const subject = newExamResult.subjects[subjectKey];\n                        const correct = parseInt(subject?.correct || \"0\") || 0;\n                        const wrong = parseInt(subject?.wrong || \"0\") || 0;\n                        const blank = parseInt(subject?.blank || \"0\") || 0;\n                        // Doğru VE yanlış VE boş hepsi 0 ise ders boş sayılır\n                        return correct === 0 && wrong === 0 && blank === 0;\n                      });\n                      \n                      if (emptySubjects.length > 0) {\n                        const emptySubjectNames = emptySubjects.map(key => subjectDisplayNames[key] || key).join(', ');\n                        toast({\n                          title: \"❌ Deneme Verisi Eklenemedi\",\n                          description: `Bir Deneme Verisi Eklemek İçin Tüm Alanlardan Veri Eklemen Gerek! Eksik dersler: ${emptySubjectNames}`,\n                          variant: \"destructive\"\n                        });\n                        return;\n                      }\n                    }\n                    \n                    // Branş denemesi için de süre kontrolü\n                    if (newExamResult.examScope === \"branch\") {\n                      const selectedSubject = newExamResult.selectedSubject;\n                      const subjectData = newExamResult.subjects[selectedSubject];\n                      const correct = parseInt(subjectData?.correct || \"0\") || 0;\n                      const wrong = parseInt(subjectData?.wrong || \"0\") || 0;\n                      \n                      // Branş denemesinde seçilen ders için en az doğru veya yanlış olmalı\n                      if (correct === 0 && wrong === 0) {\n                        toast({\n                          title: \"❌ Deneme Verisi Eklenemedi\",\n                          description: \"Branş denemesi için en az doğru veya yanlış sayısı girmelisiniz!\",\n                          variant: \"destructive\"\n                        });\n                        return;\n                      }\n                    }\n                    \n                    let tytNet = 0;\n                    let aytNet = 0;\n                    let submittedSubjects = { ...newExamResult.subjects };\n                    let generatedExamName = '';\n\n                    const getSubjectDisplayName = (subjectKey: string) => {\n                      const subjectMap: {[key: string]: string} = {\n                        'sosyal': 'Sosyal Bilimler',\n                        'turkce': 'Türkçe',\n                        'matematik': 'Matematik',\n                                'geometri': 'Geometri',\n                        'fizik': 'Fizik',\n                        'kimya': 'Kimya',\n                        'biyoloji': 'Biyoloji',\n                        'fen': 'Fen Bilimleri'\n                      };\n                      return subjectMap[subjectKey] || subjectKey;\n                    };\n\n                    if (newExamResult.examScope === \"branch\") {\n                      const selectedSubject = newExamResult.selectedSubject;\n                      const subjectData = newExamResult.subjects[selectedSubject];\n                      const subjectDisplayName = getSubjectDisplayName(selectedSubject);\n                      \n                      generatedExamName = `${newExamResult.exam_type} ${subjectDisplayName} Branş Denemesi`;\n                      \n                      const wrongTopics = newExamResult.wrongTopicsText\n                        .split(',')\n                        .map(t => toTitleCase(t.trim()))\n                        .filter(t => t.length > 0);\n                      \n                      const uniqueWrongTopics = [...new Set(wrongTopics)];\n                      \n                      submittedSubjects = {\n                        turkce: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] },\n                        matematik: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] },\n                        sosyal: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] },\n                        fen: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] },\n                        fizik: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] },\n                        kimya: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] },\n                        biyoloji: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] },\n                        geometri: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] },\n                        [selectedSubject]: {\n                          ...subjectData,\n                          wrong_topics: uniqueWrongTopics\n                        }\n                      };\n                      \n                      const correct = parseInt(subjectData.correct) || 0;\n                      const wrong = parseInt(subjectData.wrong) || 0;\n                      const branchNet = Math.max(0, correct - (wrong * 0.25));\n                      \n                      if (newExamResult.exam_type === \"TYT\") {\n                        tytNet = branchNet;\n                        aytNet = 0;\n                      } else {\n                        tytNet = 0;\n                        aytNet = branchNet;\n                      }\n                    } else {\n                      generatedExamName = `Genel ${newExamResult.exam_type} Deneme`;\n                      \n                      // TYT dersleri: Türkçe, Sosyal, Matematik, Geometri, Fen\n                      const tytSubjects = ['turkce', 'sosyal', 'matematik', 'geometri', 'fen'];\n                      // AYT dersleri: Matematik, Geometri, Fizik, Kimya, Biyoloji\n                      const aytSubjects = ['matematik', 'geometri', 'fizik', 'kimya', 'biyoloji'];\n                      \n                      // SADECE seçilen sınav tipi için hesaplama yap\n                      if (newExamResult.exam_type === 'TYT') {\n                        tytSubjects.forEach(subjectKey => {\n                          const subject = newExamResult.subjects[subjectKey];\n                          if (subject) {\n                            const correct = parseInt(subject.correct) || 0;\n                            const wrong = parseInt(subject.wrong) || 0;\n                            tytNet += correct - (wrong * 0.25);\n                          }\n                        });\n                        aytNet = 0; // AYT netini 0 yap\n                      } else if (newExamResult.exam_type === 'AYT') {\n                        aytSubjects.forEach(subjectKey => {\n                          const subject = newExamResult.subjects[subjectKey];\n                          if (subject) {\n                            const correct = parseInt(subject.correct) || 0;\n                            const wrong = parseInt(subject.wrong) || 0;\n                            aytNet += correct - (wrong * 0.25);\n                          }\n                        });\n                        tytNet = 0; // TYT netini 0 yap\n                      }\n                    }\n                    \n                    createExamResultMutation.mutate({\n                      exam_name: generatedExamName,\n                      display_name: newExamResult.display_name.trim() || undefined,\n                      exam_date: newExamResult.exam_date,\n                      exam_type: newExamResult.exam_type,\n                      exam_scope: newExamResult.examScope,\n                      selected_subject: newExamResult.examScope === 'branch' ? newExamResult.selectedSubject : undefined,\n                      tyt_net: Math.max(0, tytNet).toFixed(2),\n                      ayt_net: Math.max(0, aytNet).toFixed(2),\n                      subjects_data: JSON.stringify(submittedSubjects),\n                      time_spent_minutes: parseInt(newExamResult.time_spent_minutes) || null\n                    });\n                  }\n                }}\n                disabled={editingExam ? updateExamResultMutation.isPending : createExamResultMutation.isPending}\n                className=\"flex-1\"\n                data-testid=\"button-save-exam\"\n              >\n                {editingExam \n                  ? (updateExamResultMutation.isPending ? 'Güncelleniyor...' : 'Güncelle')\n                  : (createExamResultMutation.isPending ? 'Kaydediliyor...' : 'Kaydet')\n                }\n              </Button>\n              <Button \n                variant=\"outline\" \n                onClick={() => {\n                  setShowExamDialog(false);\n                  setNewExamResult({ \n                    exam_name: \"\", \n                    display_name: \"\",\n                    exam_date: getTurkeyDate(), \n                    exam_type: \"TYT\" as \"TYT\" | \"AYT\",\n                    examScope: \"full\" as \"full\" | \"branch\",\n                    selectedSubject: \"turkce\" as string,\n                    wrongTopicsText: \"\",\n                    time_spent_minutes: \"\",\n                    subjects: {\n                      turkce: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n                      matematik: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n                      sosyal: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n                      fen: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n                      fizik: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n                      kimya: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n                      biyoloji: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n                      geometri: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] }\n                    }\n                  });\n                  setCurrentWrongTopics({}); // Tüm yanlış konu giriş alanlarını temizle\n                }}\n                data-testid=\"button-cancel-exam\"\n              >\n                İptal\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Çalışma Saati Ekle Modalı */}\n      <Dialog open={showStudyHoursModal} onOpenChange={setShowStudyHoursModal}>\n        <DialogContent className=\"sm:max-w-lg\">\n          <DialogHeader>\n            <DialogTitle className=\"text-2xl font-bold text-center bg-gradient-to-r from-purple-600 to-indigo-600 bg-clip-text text-transparent\">\n              ⏱️ Çalıştığım Süreyi Ekle\n            </DialogTitle>\n            <DialogDescription className=\"text-center text-muted-foreground\">\n              Bugün çalıştığınız süreyi kaydedin\n            </DialogDescription>\n          </DialogHeader>\n          \n          {/* Aylık Toplam Gösterim */}\n          {(() => {\n            const currentMonth = new Date().getMonth();\n            const currentYear = new Date().getFullYear();\n            const monthlyTotal = studyHours\n              .filter((sh: any) => {\n                const date = new Date(sh.study_date);\n                return date.getMonth() === currentMonth && date.getFullYear() === currentYear;\n              })\n              .reduce((total: number, sh: any) => {\n                return total + (sh.hours * 3600) + (sh.minutes * 60) + sh.seconds;\n              }, 0);\n            \n            const totalHours = Math.floor(monthlyTotal / 3600);\n            const totalMinutes = Math.floor((monthlyTotal % 3600) / 60);\n            const totalSeconds = monthlyTotal % 60;\n            \n            return (\n              <Card className=\"bg-gradient-to-br from-purple-50 to-indigo-50 dark:from-purple-900/20 dark:to-indigo-900/20 border-2 border-purple-200 dark:border-purple-700 mb-4\">\n                <CardContent className=\"py-4\">\n                  <div className=\"text-center\">\n                    <p className=\"text-sm font-medium text-purple-700 dark:text-purple-300 mb-2\">Bu Ay Toplam Çalışma Sürem</p>\n                    <p className=\"text-3xl font-bold text-purple-900 dark:text-purple-100\">\n                      {String(totalHours).padStart(2, '0')}:{String(totalMinutes).padStart(2, '0')}:{String(totalSeconds).padStart(2, '0')}\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })()}\n          \n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium text-foreground mb-2 block\">\n                📅 Tarih\n              </label>\n              <Input\n                type=\"date\"\n                value={newStudyHours.study_date}\n                onChange={(e) => setNewStudyHours(prev => ({ ...prev, study_date: e.target.value }))}\n                className=\"w-full\"\n                data-testid=\"input-study-date\"\n              />\n            </div>\n            \n            <div className=\"grid grid-cols-3 gap-4\">\n              <div>\n                <label className=\"text-sm font-medium text-foreground mb-2 block\">\n                  ⏰ Saat\n                </label>\n                <Input\n                  type=\"number\"\n                  min=\"0\"\n                  max=\"24\"\n                  placeholder=\"0\"\n                  value={newStudyHours.hours}\n                  onChange={(e) => setNewStudyHours(prev => ({ ...prev, hours: parseInt(e.target.value) || 0 }))}\n                  className=\"w-full\"\n                  data-testid=\"input-study-hours\"\n                />\n              </div>\n              \n              <div>\n                <label className=\"text-sm font-medium text-foreground mb-2 block\">\n                  ⏱️ Dakika\n                </label>\n                <Input\n                  type=\"number\"\n                  min=\"0\"\n                  max=\"60\"\n                  placeholder=\"0\"\n                  value={newStudyHours.minutes}\n                  onChange={(e) => setNewStudyHours(prev => ({ ...prev, minutes: parseInt(e.target.value) || 0 }))}\n                  className=\"w-full\"\n                  data-testid=\"input-study-minutes\"\n                />\n              </div>\n              \n              <div>\n                <label className=\"text-sm font-medium text-foreground mb-2 block\">\n                  ⏲️ Saniye\n                </label>\n                <Input\n                  type=\"number\"\n                  min=\"0\"\n                  max=\"60\"\n                  placeholder=\"0\"\n                  value={newStudyHours.seconds}\n                  onChange={(e) => setNewStudyHours(prev => ({ ...prev, seconds: parseInt(e.target.value) || 0 }))}\n                  className=\"w-full\"\n                  data-testid=\"input-study-seconds\"\n                />\n              </div>\n            </div>\n          </div>\n\n\n          <div className=\"flex gap-3 mt-6\">\n            <Button\n              onClick={() => createStudyHoursMutation.mutate(newStudyHours)}\n              disabled={createStudyHoursMutation.isPending}\n              className=\"flex-1 bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700\"\n              data-testid=\"button-save-study-hours\"\n            >\n              💾 Kaydet\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setShowStudyHoursModal(false);\n                setNewStudyHours({\n                  study_date: getTurkeyDate(),\n                  hours: 0,\n                  minutes: 0,\n                  seconds: 0,\n                });\n              }}\n              className=\"px-6\"\n              data-testid=\"button-cancel-study-hours\"\n            >\n              İptal\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Deneme Geçmişi Modalı */}\n      <Dialog open={showExamHistoryModal} onOpenChange={setShowExamHistoryModal}>\n        <DialogContent className=\"sm:max-w-6xl max-h-[85vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"text-3xl font-bold text-center bg-gradient-to-r from-emerald-600 via-green-600 to-teal-600 bg-clip-text text-transparent\">\n              📚 Deneme Geçmişi\n            </DialogTitle>\n            <DialogDescription className=\"text-center text-muted-foreground text-lg\">\n              Tüm deneme sınavlarınızın detaylı geçmişi (Arşivlenmiş denemeler dahil)\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            {/* İstatistikler */}\n            <div className=\"grid grid-cols-4 gap-3 mb-6\">\n              <Card className=\"bg-gradient-to-br from-slate-50 to-gray-50 dark:from-slate-950/30 dark:to-gray-950/30 border-2 border-slate-200 dark:border-slate-800\">\n                <CardContent className=\"p-4 text-center\">\n                  <div className=\"text-3xl font-bold text-slate-600 dark:text-slate-400\">{allExamResults.length}</div>\n                  <div className=\"text-sm text-muted-foreground\">Toplam Deneme</div>\n                </CardContent>\n              </Card>\n              <Card className=\"bg-gradient-to-br from-blue-50 to-indigo-50 dark:from-blue-950/30 dark:to-indigo-950/30 border-2 border-blue-200 dark:border-blue-800\">\n                <CardContent className=\"p-4 text-center\">\n                  <div className=\"text-3xl font-bold text-blue-600 dark:text-blue-400\">\n                    {allExamResults.filter(e => (e.exam_type === 'TYT' || parseFloat(e.tyt_net) > 0) && e.exam_scope !== 'branch').length}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">TYT Genel Denemesi</div>\n                </CardContent>\n              </Card>\n              <Card className=\"bg-gradient-to-br from-purple-50 to-pink-50 dark:from-purple-950/30 dark:to-pink-950/30 border-2 border-purple-200 dark:border-purple-800\">\n                <CardContent className=\"p-4 text-center\">\n                  <div className=\"text-3xl font-bold text-purple-600 dark:text-purple-400\">\n                    {allExamResults.filter(e => (e.exam_type === 'AYT' || parseFloat(e.ayt_net) > 0) && e.exam_scope !== 'branch').length}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">AYT Genel Denemesi</div>\n                </CardContent>\n              </Card>\n              <Card className=\"bg-gradient-to-br from-orange-50 to-amber-50 dark:from-orange-950/30 dark:to-amber-950/30 border-2 border-orange-200 dark:border-orange-800\">\n                <CardContent className=\"p-4 text-center\">\n                  <div className=\"text-3xl font-bold text-orange-600 dark:text-orange-400\">\n                    {allExamResults.filter(e => e.exam_scope === 'branch').length}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Branş Denemesi</div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Filtre Butonları */}\n            <div className=\"flex gap-2 flex-wrap justify-center mb-4\">\n              <Button\n                variant={examHistoryFilter === 'all' ? 'default' : 'outline'}\n                onClick={() => setExamHistoryFilter('all')}\n                size=\"sm\"\n                className=\"flex-1 min-w-[120px]\"\n              >\n                Tümü ({allExamResults.length})\n              </Button>\n              {allExamResults.some(e => (e.exam_type === 'TYT' || parseFloat(e.tyt_net) > 0) && e.exam_scope !== 'branch') && (\n                <Button\n                  variant={examHistoryFilter === 'tyt-general' ? 'default' : 'outline'}\n                  onClick={() => setExamHistoryFilter('tyt-general')}\n                  size=\"sm\"\n                  className=\"flex-1 min-w-[120px] bg-blue-600 hover:bg-blue-700 text-white\"\n                >\n                  TYT Genel ({allExamResults.filter(e => (e.exam_type === 'TYT' || parseFloat(e.tyt_net) > 0) && e.exam_scope !== 'branch').length})\n                </Button>\n              )}\n              {allExamResults.some(e => (e.exam_type === 'AYT' || parseFloat(e.ayt_net) > 0) && e.exam_scope !== 'branch') && (\n                <Button\n                  variant={examHistoryFilter === 'ayt-general' ? 'default' : 'outline'}\n                  onClick={() => setExamHistoryFilter('ayt-general')}\n                  size=\"sm\"\n                  className=\"flex-1 min-w-[120px] bg-purple-600 hover:bg-purple-700 text-white\"\n                >\n                  AYT Genel ({allExamResults.filter(e => (e.exam_type === 'AYT' || parseFloat(e.ayt_net) > 0) && e.exam_scope !== 'branch').length})\n                </Button>\n              )}\n              {allExamResults.some(e => e.exam_scope === 'branch' && (e.exam_type === 'TYT' || parseFloat(e.tyt_net) > 0)) && (\n                <Button\n                  variant={examHistoryFilter === 'tyt-branch' ? 'default' : 'outline'}\n                  onClick={() => setExamHistoryFilter('tyt-branch')}\n                  size=\"sm\"\n                  className=\"flex-1 min-w-[120px] bg-cyan-600 hover:bg-cyan-700 text-white\"\n                >\n                  TYT Branş ({allExamResults.filter(e => e.exam_scope === 'branch' && (e.exam_type === 'TYT' || parseFloat(e.tyt_net) > 0)).length})\n                </Button>\n              )}\n              {allExamResults.some(e => e.exam_scope === 'branch' && (e.exam_type === 'AYT' || parseFloat(e.ayt_net) > 0)) && (\n                <Button\n                  variant={examHistoryFilter === 'ayt-branch' ? 'default' : 'outline'}\n                  onClick={() => setExamHistoryFilter('ayt-branch')}\n                  size=\"sm\"\n                  className=\"flex-1 min-w-[120px] bg-pink-600 hover:bg-pink-700 text-white\"\n                >\n                  AYT Branş ({allExamResults.filter(e => e.exam_scope === 'branch' && (e.exam_type === 'AYT' || parseFloat(e.ayt_net) > 0)).length})\n                </Button>\n              )}\n            </div>\n\n            {/* Deneme Listesi */}\n            <div className=\"space-y-4 max-h-[50vh] overflow-y-auto custom-scrollbar pr-2\">\n              {allExamResults.length === 0 ? (\n                <div className=\"text-center py-12 text-muted-foreground\">\n                  <Target className=\"h-16 w-16 mx-auto mb-4 opacity-40\" />\n                  <p className=\"text-lg\">Henüz deneme kaydı yok</p>\n                </div>\n              ) : (\n                allExamResults\n                  .filter(exam => {\n                    const examType = exam.exam_type || (parseFloat(exam.ayt_net) > 0 ? 'AYT' : 'TYT');\n                    const isBranchExam = exam.exam_scope === 'branch';\n                    \n                    if (examHistoryFilter === 'all') return true;\n                    if (examHistoryFilter === 'tyt-general') return examType === 'TYT' && !isBranchExam;\n                    if (examHistoryFilter === 'ayt-general') return examType === 'AYT' && !isBranchExam;\n                    if (examHistoryFilter === 'tyt-branch') return examType === 'TYT' && isBranchExam;\n                    if (examHistoryFilter === 'ayt-branch') return examType === 'AYT' && isBranchExam;\n                    return true;\n                  })\n                  .sort((a, b) => new Date(b.exam_date).getTime() - new Date(a.exam_date).getTime())\n                  .slice(0, (() => {\n                    // Genel denemeleri son 5, branş denemeleri son 10 ile sınırla\n                    if (examHistoryFilter === 'tyt-general' || examHistoryFilter === 'ayt-general') return 5;\n                    if (examHistoryFilter === 'tyt-branch' || examHistoryFilter === 'ayt-branch') return 10;\n                    // 'all' filtresinde: genel ve branş karışık olacağından daha geniş limit (15)\n                    return 15;\n                  })())\n                  .map((exam, index) => {\n                    const examType = exam.exam_type || (parseFloat(exam.ayt_net) > 0 ? 'AYT' : 'TYT');\n                    const isArchived = exam.archived;\n                    const isBranchExam = exam.exam_scope === 'branch';\n                    \n                    // subjects_data'yı parse et\n                    let subjectsData: any = {};\n                    try {\n                      if (exam.subjects_data) {\n                        subjectsData = JSON.parse(exam.subjects_data);\n                      }\n                    } catch (e) {\n                      console.error('Parse error:', e);\n                    }\n                    \n                    // Ders sıralaması: TYT için Türkçe, Sosyal Bilimler, Matematik, Geometri, Fen Bilimleri\n                    // AYT için: Matematik, Geometri, Fizik, Kimya, Biyoloji\n                    const subjectOrder = examType === 'TYT' \n                      ? ['turkce', 'sosyal', 'matematik', 'geometri', 'fen']\n                      : ['matematik', 'geometri', 'fizik', 'kimya', 'biyoloji'];\n                    \n                    const orderedSubjects = Object.entries(subjectsData).sort(([a], [b]) => {\n                      const aIndex = subjectOrder.indexOf(a);\n                      const bIndex = subjectOrder.indexOf(b);\n                      return (aIndex === -1 ? 999 : aIndex) - (bIndex === -1 ? 999 : bIndex);\n                    });\n\n                    return (\n                      <Card \n                        key={exam.id} \n                        className={`${\n                          isArchived \n                            ? 'bg-gradient-to-br from-gray-100 to-slate-100 dark:from-gray-900/50 dark:to-slate-900/50 border-gray-300 dark:border-gray-700 opacity-75' \n                            : 'bg-gradient-to-br from-white to-emerald-50/30 dark:from-gray-900 dark:to-emerald-950/20 border-emerald-200 dark:border-emerald-800'\n                        } border-2 shadow-md hover:shadow-xl transition-all duration-300`}\n                      >\n                        <CardHeader className=\"pb-3\">\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center gap-3\">\n                              <div className={`p-3 rounded-lg ${\n                                examType === 'TYT' \n                                  ? 'bg-blue-100 dark:bg-blue-900/30' \n                                  : 'bg-purple-100 dark:bg-purple-900/30'\n                              }`}>\n                                <Target className={`h-6 w-6 ${\n                                  examType === 'TYT' ? 'text-blue-600 dark:text-blue-400' : 'text-purple-600 dark:text-purple-400'\n                                }`} />\n                              </div>\n                              <div>\n                                <h3 className=\"text-lg font-bold text-foreground flex items-center gap-2\">\n                                  {exam.display_name || exam.exam_name}\n                                  {isArchived && <Badge variant=\"outline\" className=\"text-xs\">Arşivlenmiş</Badge>}\n                                  {isBranchExam && <Badge className=\"text-xs bg-orange-500\">Branş</Badge>}\n                                </h3>\n                                <p className=\"text-sm text-muted-foreground\">\n                                  📅 {new Date(exam.exam_date).toLocaleDateString('tr-TR', { \n                                    day: 'numeric', \n                                    month: 'long', \n                                    year: 'numeric' \n                                  })}\n                                </p>\n                                {exam.createdAt && (\n                                  <p className=\"text-xs text-muted-foreground/70\">\n                                    Oluşturuldu: {new Date(exam.createdAt).toLocaleString('tr-TR', {\n                                      day: 'numeric',\n                                      month: 'numeric',\n                                      year: 'numeric',\n                                      hour: '2-digit',\n                                      minute: '2-digit'\n                                    })}\n                                  </p>\n                                )}\n                              </div>\n                            </div>\n                            <div className=\"text-right flex flex-col items-end gap-2\">\n                              <div className=\"flex items-center gap-2\">\n                                <Badge className={`text-lg px-4 py-2 ${\n                                  examType === 'TYT' \n                                    ? 'bg-blue-600 hover:bg-blue-700' \n                                    : 'bg-purple-600 hover:bg-purple-700'\n                                }`}>\n                                  {examType}\n                                </Badge>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  onClick={() => {\n                                    if (confirm(`\"${exam.display_name || exam.exam_name}\" isimli denemeyi silmek istediğinizden emin misiniz?`)) {\n                                      deleteExamResultMutation.mutate(exam.id);\n                                    }\n                                  }}\n                                  className=\"h-9 w-9 p-0 hover:bg-red-100 dark:hover:bg-red-900/30 hover:text-red-600 dark:hover:text-red-400 transition-colors\"\n                                  title=\"Denemeyi Sil\"\n                                >\n                                  <Trash2 className=\"h-4 w-4\" />\n                                </Button>\n                              </div>\n                              {(() => {\n                                const subjectNames: {[key: string]: string} = {\n                                  'turkce': 'Türkçe', 'matematik': 'Matematik', 'geometri': 'Geometri',\n                                  'sosyal': 'Sosyal Bilimler', 'fen': 'Fen Bilimleri',\n                                  'fizik': 'Fizik', 'kimya': 'Kimya', 'biyoloji': 'Biyoloji'\n                                };\n                                \n                                let defaultName = '';\n                                if (exam.exam_scope === 'full') {\n                                  defaultName = `${examType} Genel Deneme`;\n                                } else if (exam.exam_scope === 'branch' && exam.selected_subject) {\n                                  const subjectName = subjectNames[exam.selected_subject] || exam.selected_subject;\n                                  defaultName = `${examType} ${subjectName} Branş Denemesi`;\n                                }\n                                \n                                return defaultName ? (\n                                  <p className=\"text-xs text-muted-foreground/70 italic\">\n                                    {defaultName}\n                                  </p>\n                                ) : null;\n                              })()}\n                            </div>\n                          </div>\n                        </CardHeader>\n                        <CardContent>\n                          {/* Net Skorları */}\n                          <div className=\"grid grid-cols-1 gap-4 mb-4\">\n                            {examType === 'TYT' && (\n                              <div className={`${isBranchExam ? 'bg-cyan-50 dark:bg-cyan-950/30 border-2 border-cyan-200 dark:border-cyan-800' : 'bg-blue-50 dark:bg-blue-950/30 border-2 border-blue-200 dark:border-blue-800'} p-4 rounded-lg`}>\n                                <div className=\"text-sm text-muted-foreground mb-1\">\n                                  {isBranchExam ? 'TYT Branş Denemesi Toplam Net' : 'Toplam Net'}\n                                </div>\n                                <div className={`text-3xl font-bold ${isBranchExam ? 'text-cyan-600 dark:text-cyan-400' : 'text-blue-600 dark:text-blue-400'}`}>\n                                  {parseFloat(exam.tyt_net).toFixed(2)}\n                                </div>\n                              </div>\n                            )}\n                            {examType === 'AYT' && (\n                              <div className={`${isBranchExam ? 'bg-pink-50 dark:bg-pink-950/30 border-2 border-pink-200 dark:border-pink-800' : 'bg-purple-50 dark:bg-purple-950/30 border-2 border-purple-200 dark:border-purple-800'} p-4 rounded-lg`}>\n                                <div className=\"text-sm text-muted-foreground mb-1\">\n                                  {isBranchExam ? 'AYT Branş Denemesi Toplam Net' : 'Toplam Net'}\n                                </div>\n                                <div className={`text-3xl font-bold ${isBranchExam ? 'text-pink-600 dark:text-pink-400' : 'text-purple-600 dark:text-purple-400'}`}>\n                                  {parseFloat(exam.ayt_net).toFixed(2)}\n                                </div>\n                              </div>\n                            )}\n                          </div>\n\n                          {/* Ders Detayları */}\n                          {orderedSubjects.length > 0 && (\n                            <div className=\"space-y-2\">\n                              <h4 className=\"font-semibold text-sm text-muted-foreground mb-3\">Ders Detayları:</h4>\n                              <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-3\">\n                                {orderedSubjects.map(([subject, data]: [string, any]) => {\n                                  const correct = parseInt(data.correct) || 0;\n                                  const wrong = parseInt(data.wrong) || 0;\n                                  const blank = parseInt(data.blank) || 0;\n                                  const net = correct - (wrong * 0.25);\n                                  \n                                  if (correct === 0 && wrong === 0 && blank === 0) return null;\n\n                                  return (\n                                    <div key={subject} className=\"bg-white/50 dark:bg-gray-800/50 p-3 rounded-lg border border-gray-200 dark:border-gray-700\">\n                                      <div className=\"font-semibold text-xs text-muted-foreground mb-2 capitalize\">\n                                        {subject === 'turkce' ? 'Türkçe' : \n                                         subject === 'sosyal' ? 'Sosyal Bilimler' :\n                                         subject === 'matematik' ? 'Matematik' :\n                                         subject === 'geometri' ? 'Geometri' :\n                                         subject === 'fen' ? 'Fen Bilimleri' :\n                                         subject === 'fizik' ? 'Fizik' :\n                                         subject === 'kimya' ? 'Kimya' :\n                                         subject === 'biyoloji' ? 'Biyoloji' : subject}\n                                      </div>\n                                      <div className=\"space-y-1 text-xs\">\n                                        <div className=\"flex justify-between\">\n                                          <span className=\"text-green-600 dark:text-green-400\">D: {correct}</span>\n                                          <span className=\"text-red-600 dark:text-red-400\">Y: {wrong}</span>\n                                          <span className=\"text-yellow-600 dark:text-yellow-400\">B: {blank}</span>\n                                        </div>\n                                        <div className=\"font-bold text-center text-blue-600 dark:text-blue-400\">\n                                          Net: {net.toFixed(2)}\n                                        </div>\n                                      </div>\n                                      {data.wrong_topics && data.wrong_topics.length > 0 && (\n                                        <div className=\"mt-2 pt-2 border-t border-gray-200 dark:border-gray-700\">\n                                          <div className=\"text-xs font-semibold text-red-600 dark:text-red-400 mb-1\">\n                                            Hatalı Konular:\n                                          </div>\n                                          <div className=\"text-xs text-muted-foreground space-y-0.5\">\n                                            {data.wrong_topics.slice(0, 3).map((topic: string, i: number) => (\n                                              <div key={i} className=\"truncate\">• {normalizeTopic(topic)}</div>\n                                            ))}\n                                            {data.wrong_topics.length > 3 && (\n                                              <div className=\"text-xs italic\">+{data.wrong_topics.length - 3} daha...</div>\n                                            )}\n                                          </div>\n                                        </div>\n                                      )}\n                                    </div>\n                                  );\n                                })}\n                              </div>\n                            </div>\n                          )}\n\n                          {/* Süre Bilgisi */}\n                          {exam.time_spent_minutes && (\n                            <div className=\"mt-4 text-sm text-muted-foreground flex items-center gap-2\">\n                              <Clock className=\"h-4 w-4\" />\n                              <span>Denemenin Çözüldüğü Süre: {exam.time_spent_minutes} dakika</span>\n                            </div>\n                          )}\n                        </CardContent>\n                      </Card>\n                    );\n                  })\n              )}\n            </div>\n          </div>\n\n          <div className=\"flex justify-end gap-3 mt-4\">\n            <Button\n              variant=\"outline\"\n              onClick={() => setShowExamHistoryModal(false)}\n            >\n              Kapat\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Soru Geçmişi Modalı */}\n      <Dialog open={showQuestionHistoryModal} onOpenChange={setShowQuestionHistoryModal}>\n        <DialogContent className=\"sm:max-w-6xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"text-3xl font-bold text-center bg-gradient-to-r from-green-600 via-emerald-600 to-teal-600 bg-clip-text text-transparent\">\n              📚 Soru Çözüm Geçmişi\n            </DialogTitle>\n            <DialogDescription className=\"text-center text-muted-foreground text-lg\">\n              Soru kayıtları ve branş denemeleri dahil tüm çözümleriniz\n            </DialogDescription>\n          </DialogHeader>\n\n          {(() => {\n            // Branş denemelerinden soru verileri çıkar\n            const branchExams = allExamResults.filter(exam => exam.exam_scope === 'branch');\n            \n            // Filtreleme uygula\n            let filteredQuestionLogs = allQuestionLogs;\n            let filteredBranchExams = branchExams;\n            \n            if (questionHistoryFilter === 'tyt') {\n              filteredQuestionLogs = allQuestionLogs.filter(log => log.exam_type === 'TYT');\n              filteredBranchExams = branchExams.filter(exam => exam.exam_type === 'TYT');\n            } else if (questionHistoryFilter === 'ayt') {\n              filteredQuestionLogs = allQuestionLogs.filter(log => log.exam_type === 'AYT');\n              filteredBranchExams = branchExams.filter(exam => exam.exam_type === 'AYT');\n            }\n            \n            // İstatistikleri hesapla\n            const questionLogStats = {\n              total: filteredQuestionLogs.reduce((sum, log) => sum + (Number(log.correct_count) || 0) + (Number(log.wrong_count) || 0) + (Number(log.blank_count) || 0), 0),\n              correct: filteredQuestionLogs.reduce((sum, log) => sum + (Number(log.correct_count) || 0), 0),\n              wrong: filteredQuestionLogs.reduce((sum, log) => sum + (Number(log.wrong_count) || 0), 0),\n              blank: filteredQuestionLogs.reduce((sum, log) => sum + (Number(log.blank_count) || 0), 0)\n            };\n            \n            const branchExamStats = filteredBranchExams.reduce((stats, exam) => {\n              const subjects = typeof exam.subjects_data === 'string' ? JSON.parse(exam.subjects_data) : exam.subjects_data;\n              if (subjects && typeof subjects === 'object') {\n                Object.values(subjects).forEach((subject: any) => {\n                  stats.total += (Number(subject.correct) || 0) + (Number(subject.wrong) || 0) + (Number(subject.blank) || 0);\n                  stats.correct += Number(subject.correct) || 0;\n                  stats.wrong += Number(subject.wrong) || 0;\n                  stats.blank += Number(subject.blank) || 0;\n                });\n              }\n              return stats;\n            }, { total: 0, correct: 0, wrong: 0, blank: 0 });\n            \n            const totalStats = {\n              total: questionLogStats.total + branchExamStats.total,\n              correct: questionLogStats.correct + branchExamStats.correct,\n              wrong: questionLogStats.wrong + branchExamStats.wrong,\n              blank: questionLogStats.blank + branchExamStats.blank\n            };\n            \n            // TYT ve AYT istatistikleri\n            const tytQuestionCount = allQuestionLogs\n              .filter(log => log.exam_type === 'TYT')\n              .reduce((sum, log) => sum + (Number(log.correct_count) || 0) + (Number(log.wrong_count) || 0) + (Number(log.blank_count) || 0), 0);\n            const tytBranchCount = branchExams\n              .filter(exam => exam.exam_type === 'TYT')\n              .reduce((sum, exam) => {\n                const subjects = typeof exam.subjects_data === 'string' ? JSON.parse(exam.subjects_data) : exam.subjects_data;\n                if (subjects && typeof subjects === 'object') {\n                  return sum + (Object.values(subjects) as any[]).reduce((s: number, subject: any) => \n                    s + (Number(subject.correct) || 0) + (Number(subject.wrong) || 0) + (Number(subject.blank) || 0), 0);\n                }\n                return sum;\n              }, 0);\n            \n            const aytQuestionCount = allQuestionLogs\n              .filter(log => log.exam_type === 'AYT')\n              .reduce((sum, log) => sum + (Number(log.correct_count) || 0) + (Number(log.wrong_count) || 0) + (Number(log.blank_count) || 0), 0);\n            const aytBranchCount = branchExams\n              .filter(exam => exam.exam_type === 'AYT')\n              .reduce((sum, exam) => {\n                const subjects = typeof exam.subjects_data === 'string' ? JSON.parse(exam.subjects_data) : exam.subjects_data;\n                if (subjects && typeof subjects === 'object') {\n                  return sum + (Object.values(subjects) as any[]).reduce((s: number, subject: any) => \n                    s + (Number(subject.correct) || 0) + (Number(subject.wrong) || 0) + (Number(subject.blank) || 0), 0);\n                }\n                return sum;\n              }, 0);\n            \n            return (\n              <div className=\"space-y-4\">\n                {/* Filtrele Butonlar */}\n                <div className=\"flex gap-2 justify-center border-b pb-3\">\n                  <Button\n                    variant={questionHistoryFilter === 'all' ? 'default' : 'outline'}\n                    onClick={() => setQuestionHistoryFilter('all')}\n                    className=\"flex-1 max-w-[150px]\"\n                  >\n                    📊 Genel\n                  </Button>\n                  <Button\n                    variant={questionHistoryFilter === 'tyt' ? 'default' : 'outline'}\n                    onClick={() => setQuestionHistoryFilter('tyt')}\n                    className=\"flex-1 max-w-[150px]\"\n                  >\n                    📘 TYT\n                  </Button>\n                  <Button\n                    variant={questionHistoryFilter === 'ayt' ? 'default' : 'outline'}\n                    onClick={() => setQuestionHistoryFilter('ayt')}\n                    className=\"flex-1 max-w-[150px]\"\n                  >\n                    📗 AYT\n                  </Button>\n                </div>\n\n                {/* Özet İstatistikler */}\n                <div className=\"grid grid-cols-4 gap-3 p-4 bg-gradient-to-r from-green-50 to-emerald-50 dark:from-green-950/30 dark:to-emerald-950/30 rounded-xl border border-green-200 dark:border-green-800\">\n                  <div className=\"text-center\">\n                    <div className=\"text-3xl font-bold text-green-600 dark:text-green-400\">\n                      {totalStats.total}\n                    </div>\n                    <div className=\"text-xs text-muted-foreground font-semibold\">Toplam Çözülen Soru</div>\n                    <div className=\"mt-2 pt-2 border-t border-green-200 dark:border-green-800 space-y-1\">\n                      <div className=\"text-xs text-blue-600 dark:text-blue-400\">TYT: {tytQuestionCount + tytBranchCount}</div>\n                      <div className=\"text-xs text-purple-600 dark:text-purple-400\">AYT: {aytQuestionCount + aytBranchCount}</div>\n                    </div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-3xl font-bold text-green-600 dark:text-green-400\">\n                      {totalStats.correct}\n                    </div>\n                    <div className=\"text-xs text-muted-foreground font-semibold\">✓ Doğru</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-3xl font-bold text-red-600 dark:text-red-400\">\n                      {totalStats.wrong}\n                    </div>\n                    <div className=\"text-xs text-muted-foreground font-semibold\">✗ Yanlış</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-3xl font-bold text-amber-600 dark:text-amber-400\">\n                      {totalStats.blank}\n                    </div>\n                    <div className=\"text-xs text-muted-foreground font-semibold\">○ Boş</div>\n                  </div>\n                </div>\n\n                {/* Soru Kayıtları ve Branş Denemeleri Listesi */}\n                <div className=\"space-y-3\">\n                  {filteredQuestionLogs.length === 0 && filteredBranchExams.length === 0 ? (\n                    <div className=\"text-center py-12 text-muted-foreground\">\n                      <BarChart3 className=\"h-16 w-16 mx-auto mb-4 opacity-40\" />\n                      <p className=\"text-lg\">Henüz kayıt yok</p>\n                    </div>\n                  ) : (\n                    <div className=\"space-y-4 max-h-[50vh] overflow-y-auto pr-1\" style={{\n                      scrollbarWidth: 'thin',\n                      scrollbarColor: 'rgb(134 239 172) transparent'\n                    }}>\n                      {/* Soru Kayıtları */}\n                      {filteredQuestionLogs\n                        .sort((a, b) => new Date(b.study_date).getTime() - new Date(a.study_date).getTime())\n                        .map((log, index) => (\n                          <div \n                            key={`question-${log.id}`} \n                            className=\"group relative p-5 bg-gradient-to-br from-white via-green-50/30 to-emerald-50/40 dark:from-gray-900/95 dark:via-green-950/20 dark:to-emerald-950/30 rounded-xl border border-green-200/60 dark:border-green-700/40 hover:border-green-400/80 dark:hover:border-green-500/60 shadow-md hover:shadow-xl transition-all duration-300 overflow-hidden backdrop-blur-sm\"\n                          >\n                            <div className=\"absolute inset-0 bg-gradient-to-br from-green-400/0 via-emerald-400/0 to-transparent group-hover:from-green-400/5 group-hover:via-emerald-400/5 transition-all duration-300\"></div>\n                            <div className=\"relative z-10\">\n                            <div className=\"flex items-start justify-between mb-3\">\n                              <div className=\"flex-1\">\n                                <div className=\"flex items-center gap-2 mb-2\">\n                                  <span className=\"px-2 py-1 bg-orange-100 dark:bg-orange-900/40 text-orange-700 dark:text-orange-400 text-xs font-bold rounded-full\">\n                                    📝 Soru Kaydı\n                                  </span>\n                                  <span className=\"px-2 py-1 bg-blue-100 dark:bg-blue-900/40 text-blue-700 dark:text-blue-400 text-xs font-bold rounded-full\">\n                                    {log.exam_type}\n                                  </span>\n                                  <span className=\"px-2 py-1 bg-green-100 dark:bg-green-900/40 text-green-700 dark:text-green-400 text-xs font-bold rounded-full\">\n                                    {log.exam_type} {log.subject}\n                                  </span>\n                                </div>\n                                <div className=\"text-xs text-gray-600 dark:text-gray-400 flex items-center gap-2\">\n                                  <Calendar className=\"h-3 w-3\" />\n                                  {new Date(log.study_date).toLocaleDateString('tr-TR', {\n                                    year: 'numeric',\n                                    month: 'long',\n                                    day: 'numeric'\n                                  })}\n                                </div>\n                              </div>\n                              <button\n                                onClick={() => deleteQuestionLogMutation.mutate(log.id)}\n                                disabled={deleteQuestionLogMutation.isPending}\n                                className=\"ml-2 p-2 text-red-500 hover:text-red-700 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-lg transition-colors\"\n                                title=\"Soru Kaydını Sil\"\n                              >\n                                <Trash2 className=\"h-4 w-4\" />\n                              </button>\n                            </div>\n\n                            {/* Soru İstatistikleri */}\n                            <div className=\"grid grid-cols-3 gap-2\">\n                              <div className=\"text-center p-2 bg-green-100 dark:bg-green-900/30 rounded-lg\">\n                                <div className=\"text-lg font-bold text-green-600 dark:text-green-400\">{log.correct_count}</div>\n                                <div className=\"text-xs text-muted-foreground\">✓ Doğru</div>\n                              </div>\n                              <div className=\"text-center p-2 bg-red-100 dark:bg-red-900/30 rounded-lg\">\n                                <div className=\"text-lg font-bold text-red-600 dark:text-red-400\">{log.wrong_count}</div>\n                                <div className=\"text-xs text-muted-foreground\">✗ Yanlış</div>\n                              </div>\n                              <div className=\"text-center p-2 bg-amber-100 dark:bg-amber-900/30 rounded-lg\">\n                                <div className=\"text-lg font-bold text-amber-600 dark:text-amber-400\">{log.blank_count || '0'}</div>\n                                <div className=\"text-xs text-muted-foreground\">○ Boş</div>\n                              </div>\n                            </div>\n\n                            {/* Yanlış Konular */}\n                            {log.wrong_topics_json && JSON.parse(log.wrong_topics_json).length > 0 && (\n                              <div className=\"mt-3 p-2 bg-red-50 dark:bg-red-900/20 rounded-lg border border-red-200 dark:border-red-800\">\n                                <div className=\"text-xs font-semibold text-red-700 dark:text-red-400 mb-1\">\n                                  🔍 Yanlış Konular:\n                                </div>\n                                <div className=\"flex flex-wrap gap-2\">\n                                  {JSON.parse(log.wrong_topics_json).map((topicItem: any, idx: number) => {\n                                    const topicName = typeof topicItem === 'string' ? topicItem : topicItem.topic;\n                                    const category = typeof topicItem === 'object' ? topicItem.category : null;\n                                    const difficulty = typeof topicItem === 'object' ? topicItem.difficulty : null;\n                                    \n                                    const getCategoryData = (cat: string) => {\n                                      switch(cat) {\n                                        case 'kavram': return { icon: '🧠', label: 'Kavram' };\n                                        case 'hesaplama': return { icon: '🔢', label: 'Hesaplama' };\n                                        case 'analiz': return { icon: '🔍', label: 'Analiz' };\n                                        case 'dikkatsizlik': return { icon: '⚠️', label: 'Dikkatsizlik' };\n                                        default: return null;\n                                      }\n                                    };\n                                    \n                                    const getDifficultyData = (diff: string) => {\n                                      switch(diff) {\n                                        case 'kolay': return { icon: '🟢', label: 'Kolay' };\n                                        case 'orta': return { icon: '🟠', label: 'Orta' };\n                                        case 'zor': return { icon: '🔴', label: 'Zor' };\n                                        default: return null;\n                                      }\n                                    };\n                                    \n                                    const categoryData = category ? getCategoryData(category) : null;\n                                    const difficultyData = difficulty ? getDifficultyData(difficulty) : null;\n                                    \n                                    return (\n                                      <div key={idx} className=\"flex items-center gap-2\">\n                                        {categoryData && (\n                                          <span className=\"flex items-center gap-1 px-2 py-1 text-xs font-medium rounded-lg bg-purple-100 text-purple-700 dark:bg-purple-900/40 dark:text-purple-400 border border-purple-200 dark:border-purple-700\">\n                                            {categoryData.icon} {categoryData.label}\n                                          </span>\n                                        )}\n                                        <span className=\"px-2 py-1 text-xs font-semibold rounded-lg bg-red-100 text-red-700 dark:bg-red-900/40 dark:text-red-400 border border-red-200 dark:border-red-700\">\n                                          {topicName}\n                                        </span>\n                                        {difficultyData && (\n                                          <span className=\"flex items-center gap-1 px-2 py-1 text-xs font-medium rounded-lg bg-amber-100 text-amber-700 dark:bg-amber-900/40 dark:text-amber-400 border border-amber-200 dark:border-amber-700\">\n                                            {difficultyData.icon} {difficultyData.label}\n                                          </span>\n                                        )}\n                                      </div>\n                                    );\n                                  })}\n                                </div>\n                              </div>\n                            )}\n                            </div>\n                          </div>\n                        ))}\n                      \n                      {/* Branş Denemeleri */}\n                      {filteredBranchExams\n                        .sort((a, b) => new Date(b.exam_date).getTime() - new Date(a.exam_date).getTime())\n                        .map((exam) => {\n                          const subjects = typeof exam.subjects_data === 'string' ? JSON.parse(exam.subjects_data) : exam.subjects_data;\n                          \n                          if (!subjects || typeof subjects !== 'object') {\n                            return null;\n                          }\n                          \n                          const totalQuestions = (Object.values(subjects) as any[]).reduce((sum: number, subject: any) => \n                            sum + (Number(subject.correct) || 0) + (Number(subject.wrong) || 0) + (Number(subject.blank) || 0), 0);\n                          const totalCorrect: number = (Object.values(subjects) as any[]).reduce((sum: number, subject: any) => sum + (Number(subject.correct) || 0), 0);\n                          const totalWrong: number = (Object.values(subjects) as any[]).reduce((sum: number, subject: any) => sum + (Number(subject.wrong) || 0), 0);\n                          const totalBlank: number = (Object.values(subjects) as any[]).reduce((sum: number, subject: any) => sum + (Number(subject.blank) || 0), 0);\n                          \n                          return (\n                            <div \n                              key={`branch-${exam.id}`} \n                              className=\"group relative p-5 bg-gradient-to-br from-white via-purple-50/30 to-indigo-50/40 dark:from-gray-900/95 dark:via-purple-950/20 dark:to-indigo-950/30 rounded-xl border border-purple-200/60 dark:border-purple-700/40 hover:border-purple-400/80 dark:hover:border-purple-500/60 shadow-md hover:shadow-xl transition-all duration-300 overflow-hidden backdrop-blur-sm\"\n                            >\n                              <div className=\"absolute inset-0 bg-gradient-to-br from-purple-400/0 via-indigo-400/0 to-transparent group-hover:from-purple-400/5 group-hover:via-indigo-400/5 transition-all duration-300\"></div>\n                              <div className=\"relative z-10\">\n                              <div className=\"flex items-start justify-between mb-3\">\n                                <div className=\"flex-1\">\n                                  <div className=\"flex items-center gap-2 mb-2\">\n                                    <span className=\"px-2 py-1 bg-purple-100 dark:bg-purple-900/40 text-purple-700 dark:text-purple-400 text-xs font-bold rounded-full\">\n                                      📊 Branş Deneme\n                                    </span>\n                                    <span className=\"px-2 py-1 bg-blue-100 dark:bg-blue-900/40 text-blue-700 dark:text-blue-400 text-xs font-bold rounded-full\">\n                                      {exam.exam_type}\n                                    </span>\n                                    {exam.exam_name && (\n                                      <span className=\"text-sm font-semibold text-gray-700 dark:text-gray-300\">\n                                        {exam.exam_name}\n                                      </span>\n                                    )}\n                                  </div>\n                                  <div className=\"text-xs text-gray-600 dark:text-gray-400 flex items-center gap-2\">\n                                    <Calendar className=\"h-3 w-3\" />\n                                    {new Date(exam.exam_date).toLocaleDateString('tr-TR', {\n                                      year: 'numeric',\n                                      month: 'long',\n                                      day: 'numeric'\n                                    })}\n                                  </div>\n                                </div>\n                              </div>\n\n                              {/* Toplam İstatistikler */}\n                              <div className=\"grid grid-cols-3 gap-2 mb-3\">\n                                <div className=\"text-center p-2 bg-green-100 dark:bg-green-900/30 rounded-lg\">\n                                  <div className=\"text-lg font-bold text-green-600 dark:text-green-400\">{totalCorrect}</div>\n                                  <div className=\"text-xs text-muted-foreground\">✓ Doğru</div>\n                                </div>\n                                <div className=\"text-center p-2 bg-red-100 dark:bg-red-900/30 rounded-lg\">\n                                  <div className=\"text-lg font-bold text-red-600 dark:text-red-400\">{totalWrong}</div>\n                                  <div className=\"text-xs text-muted-foreground\">✗ Yanlış</div>\n                                </div>\n                                <div className=\"text-center p-2 bg-amber-100 dark:bg-amber-900/30 rounded-lg\">\n                                  <div className=\"text-lg font-bold text-amber-600 dark:text-amber-400\">{totalBlank}</div>\n                                  <div className=\"text-xs text-muted-foreground\">○ Boş</div>\n                                </div>\n                              </div>\n\n                              {/* Ders Detayları */}\n                              <div className=\"space-y-2\">\n                                {Object.entries(subjects).map(([subjectName, subjectData]: [string, any]) => (\n                                  <div key={subjectName} className=\"flex items-center justify-between p-2 bg-white/50 dark:bg-gray-800/50 rounded-lg text-xs\">\n                                    <span className=\"font-semibold text-gray-700 dark:text-gray-300\">{subjectName}</span>\n                                    <div className=\"flex gap-3\">\n                                      <span className=\"text-green-600 dark:text-green-400\">D:{subjectData.correct || 0}</span>\n                                      <span className=\"text-red-600 dark:text-red-400\">Y:{subjectData.wrong || 0}</span>\n                                      <span className=\"text-amber-600 dark:text-amber-400\">B:{subjectData.blank || 0}</span>\n                                    </div>\n                                  </div>\n                                ))}\n                              </div>\n                              </div>\n                            </div>\n                          );\n                        })}\n                    </div>\n                  )}\n                </div>\n              </div>\n            );\n          })()}\n\n          <div className=\"flex justify-end gap-3 mt-4\">\n            <Button\n              variant=\"outline\"\n              onClick={() => setShowQuestionHistoryModal(false)}\n            >\n              Kapat\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Arşivlenen Veriler Modalı */}\n      <Dialog open={showArchivedDataModal} onOpenChange={setShowArchivedDataModal}>\n        <DialogContent className=\"sm:max-w-4xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"text-2xl font-bold text-center bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent\">\n              📁 Arşivlenen Veriler\n            </DialogTitle>\n            <div className=\"text-center space-y-2\">\n              <div className=\"text-muted-foreground text-sm\">\n                Her Pazar 23:59'da otomatik olarak arşivlenen eski verileriniz\n              </div>\n              {nextArchiveCountdown && (\n                <div className=\"text-sm font-semibold text-indigo-600 dark:text-indigo-400 bg-indigo-50 dark:bg-indigo-950/30 rounded-lg py-2 px-4 inline-block\">\n                  ⏳ {nextArchiveCountdown}\n                </div>\n              )}\n            </div>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            {/* Tabs */}\n            <div className=\"flex gap-2 border-b pb-2\">\n              <Button\n                variant={archivedTab === 'questions' ? 'default' : 'outline'}\n                onClick={() => setArchivedTab('questions')}\n                className=\"flex-1\"\n              >\n                📝 Sorular ({archivedQuestionsModal.length})\n              </Button>\n              <Button\n                variant={archivedTab === 'exams' ? 'default' : 'outline'}\n                onClick={() => setArchivedTab('exams')}\n                className=\"flex-1\"\n              >\n                🎯 Denemeler ({archivedExamsModal.length})\n              </Button>\n              <Button\n                variant={archivedTab === 'tasks' ? 'default' : 'outline'}\n                onClick={() => setArchivedTab('tasks')}\n                className=\"flex-1\"\n              >\n                ✓ Görevler ({archivedTasksModal.length})\n              </Button>\n              <Button\n                variant={archivedTab === 'studyHours' ? 'default' : 'outline'}\n                onClick={() => setArchivedTab('studyHours')}\n                className=\"flex-1\"\n              >\n                ⏱️ Çalışma ({archivedStudyHoursModal.length})\n              </Button>\n            </div>\n\n            {/* Tab Content */}\n            <div className=\"min-h-[300px]\">\n              {archivedTab === 'questions' && (\n                <div className={`space-y-3 ${archivedQuestionsModal.length > 5 ? 'max-h-[500px] overflow-y-auto pr-2' : ''}`}>\n                  {archivedQuestionsModal.length === 0 ? (\n                    <div className=\"text-center py-12 text-muted-foreground\">\n                      <BookX className=\"h-12 w-12 mx-auto mb-3 opacity-40\" />\n                      <p>Arşivlenmiş soru kaydı yok</p>\n                    </div>\n                  ) : (\n                    archivedQuestionsModal.map((log) => {\n                      const correct = parseInt(log.correct_count) || 0;\n                      const wrong = parseInt(log.wrong_count) || 0;\n                      const blank = parseInt(log.blank_count) || 0;\n                      const netScore = correct - (wrong * 0.25);\n                      \n                      return (\n                        <div key={log.id} className=\"p-4 bg-gradient-to-r from-green-50 to-emerald-50 dark:from-green-950/30 dark:to-emerald-950/30 rounded-lg border border-green-200 dark:border-green-800 space-y-2\">\n                          <div className=\"flex items-start justify-between\">\n                            <div className=\"flex-1\">\n                              <div className=\"font-semibold text-foreground text-lg\">{log.exam_type} {log.subject}</div>\n                              {log.topic && <div className=\"text-sm font-medium text-muted-foreground\">📚 Konu: {log.topic}</div>}\n                              <div className=\"text-sm text-muted-foreground\">📅 {new Date(log.study_date).toLocaleDateString('tr-TR')}</div>\n                            </div>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => deleteArchivedQuestionMutation.mutate(log.id)}\n                              className=\"text-red-600 hover:text-red-700 hover:bg-red-50 dark:hover:bg-red-950/30\"\n                              data-testid={`button-delete-archived-question-${log.id}`}\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                          \n                          <div className=\"flex gap-2 flex-wrap\">\n                            <Badge variant=\"secondary\" className=\"bg-green-100 text-green-700 dark:bg-green-900/40 dark:text-green-400\">\n                              ✅ Doğru: {correct}\n                            </Badge>\n                            <Badge variant=\"secondary\" className=\"bg-red-100 text-red-700 dark:bg-red-900/40 dark:text-red-400\">\n                              ❌ Yanlış: {wrong}\n                            </Badge>\n                            <Badge variant=\"secondary\" className=\"bg-gray-100 text-gray-700 dark:bg-gray-900/40 dark:text-gray-400\">\n                              ⭕ Boş: {blank}\n                            </Badge>\n                            <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-700 dark:bg-blue-900/40 dark:text-blue-400 font-bold\">\n                              📊 Net: {netScore.toFixed(2)}\n                            </Badge>\n                          </div>\n                          \n                          {log.wrong_topics && log.wrong_topics.length > 0 && (\n                            <div className=\"mt-2 p-2 bg-orange-50 dark:bg-orange-950/20 rounded border border-orange-200 dark:border-orange-800\">\n                              <div className=\"text-xs font-semibold text-orange-700 dark:text-orange-400 mb-1\">🔍 Yanlış Yapılan Konular:</div>\n                              <div className=\"flex flex-wrap gap-1\">\n                                {log.wrong_topics.map((topic, idx) => (\n                                  <span key={idx} className=\"text-xs px-2 py-1 bg-orange-100 dark:bg-orange-900/30 text-orange-800 dark:text-orange-300 rounded\">\n                                    {typeof topic === 'string' ? topic : (topic as any).topic || (topic as any).name || ''}\n                                  </span>\n                                ))}\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                      );\n                    })\n                  )}\n                </div>\n              )}\n\n              {archivedTab === 'exams' && (\n                <div className={`space-y-3 ${archivedExamsModal.length > 5 ? 'max-h-[500px] overflow-y-auto pr-2' : ''}`}>\n                  {archivedExamsModal.length === 0 ? (\n                    <div className=\"text-center py-12 text-muted-foreground\">\n                      <FlaskConical className=\"h-12 w-12 mx-auto mb-3 opacity-40\" />\n                      <p>Arşivlenmiş deneme yok</p>\n                    </div>\n                  ) : (\n                    archivedExamsModal.map((exam) => {\n                      // Parse subjects data if available\n                      let subjects: any[] = [];\n                      if (exam.subjects_data) {\n                        try {\n                          const subjectsData = JSON.parse(exam.subjects_data);\n                          const subjectNames: {[key: string]: string} = {\n                            'turkce': 'Türkçe', 'matematik': 'Matematik', 'geometri': 'Geometri', 'sosyal': 'Sosyal Bilimler', 'fen': 'Fen Bilimleri',\n                            'fizik': 'Fizik', 'kimya': 'Kimya', 'biyoloji': 'Biyoloji'\n                          };\n                          subjects = Object.entries(subjectsData).map(([key, data]: [string, any]) => {\n                            const correct = parseInt(data.correct) || 0;\n                            const wrong = parseInt(data.wrong) || 0;\n                            const blank = parseInt(data.blank) || 0;\n                            const netScore = correct - (wrong * 0.25);\n                            return {\n                              name: subjectNames[key] || key,\n                              correct,\n                              wrong,\n                              blank,\n                              netScore,\n                              wrong_topics: data.wrong_topics || []\n                            };\n                          }).filter(s => (s.correct + s.wrong + s.blank) > 0);\n                        } catch (e) {\n                          console.error('Error parsing subjects_data:', e);\n                        }\n                      }\n                      \n                      const examTypeLabel = exam.exam_scope === 'full' ? 'Genel Deneme' : 'Branş Denemesi';\n                      \n                      return (\n                        <div key={exam.id} className=\"p-4 bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-950/30 dark:to-indigo-950/30 rounded-lg border border-blue-200 dark:border-blue-800 space-y-3\">\n                          <div className=\"flex items-start justify-between\">\n                            <div className=\"flex-1\">\n                              <div className=\"font-semibold text-foreground text-lg\">{exam.display_name || exam.exam_name}</div>\n                              <div className=\"text-sm font-medium text-muted-foreground\">{examTypeLabel}</div>\n                              <div className=\"text-sm text-muted-foreground\">📅 {new Date(exam.exam_date).toLocaleDateString('tr-TR')}</div>\n                            </div>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => deleteArchivedExamMutation.mutate(exam.id)}\n                              className=\"text-red-600 hover:text-red-700 hover:bg-red-50 dark:hover:bg-red-950/30\"\n                              data-testid={`button-delete-archived-exam-${exam.id}`}\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                          \n                          <div className=\"flex gap-2\">\n                            {exam.exam_type === 'TYT' || exam.exam_scope === 'full' ? (\n                              <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-700 dark:bg-blue-900/40 dark:text-blue-400 font-bold\">\n                                📊 TYT Net: {exam.tyt_net}\n                              </Badge>\n                            ) : null}\n                            {exam.exam_type === 'AYT' || exam.exam_scope === 'full' ? (\n                              <Badge variant=\"secondary\" className=\"bg-purple-100 text-purple-700 dark:bg-purple-900/40 dark:text-purple-400 font-bold\">\n                                📊 AYT Net: {exam.ayt_net}\n                              </Badge>\n                            ) : null}\n                          </div>\n                          \n                          {subjects.length > 0 && (\n                            <div className=\"mt-2 space-y-2\">\n                              <div className=\"text-xs font-semibold text-blue-700 dark:text-blue-400\">📚 Ders Detayları:</div>\n                              {subjects.map((subject, idx) => (\n                                <div key={idx} className=\"p-3 bg-white/50 dark:bg-gray-800/50 rounded-lg border border-blue-200/50 dark:border-blue-700/30 space-y-2\">\n                                  <div className=\"font-semibold text-sm\">{subject.name}</div>\n                                  <div className=\"flex gap-2 flex-wrap text-xs\">\n                                    <Badge variant=\"outline\" className=\"bg-green-50 text-green-700 dark:bg-green-900/30 dark:text-green-400\">\n                                      ✅ {subject.correct}\n                                    </Badge>\n                                    <Badge variant=\"outline\" className=\"bg-red-50 text-red-700 dark:bg-red-900/30 dark:text-red-400\">\n                                      ❌ {subject.wrong}\n                                    </Badge>\n                                    <Badge variant=\"outline\" className=\"bg-gray-50 text-gray-700 dark:bg-gray-900/30 dark:text-gray-400\">\n                                      ⭕ {subject.blank}\n                                    </Badge>\n                                    <Badge variant=\"outline\" className=\"bg-blue-50 text-blue-700 dark:bg-blue-900/30 dark:text-blue-400 font-bold\">\n                                      Net: {subject.netScore.toFixed(2)}\n                                    </Badge>\n                                  </div>\n                                  \n                                  {subject.wrong_topics && subject.wrong_topics.length > 0 && (\n                                    <div className=\"p-2 bg-orange-50 dark:bg-orange-950/20 rounded border border-orange-200 dark:border-orange-800\">\n                                      <div className=\"text-xs font-semibold text-orange-700 dark:text-orange-400 mb-1\">🔍 Yanlış Konular:</div>\n                                      <div className=\"flex flex-wrap gap-1\">\n                                        {subject.wrong_topics.map((topic: any, tIdx: number) => (\n                                          <span key={tIdx} className=\"text-xs px-2 py-0.5 bg-orange-100 dark:bg-orange-900/30 text-orange-800 dark:text-orange-300 rounded\">\n                                            {typeof topic === 'string' ? topic : topic.topic || topic.name || ''}\n                                          </span>\n                                        ))}\n                                      </div>\n                                    </div>\n                                  )}\n                                </div>\n                              ))}\n                            </div>\n                          )}\n                        </div>\n                      );\n                    })\n                  )}\n                </div>\n              )}\n\n              {archivedTab === 'tasks' && (\n                <div className={`space-y-3 ${archivedTasksModal.length > 5 ? 'max-h-[500px] overflow-y-auto pr-2' : ''}`}>\n                  {archivedTasksModal.length === 0 ? (\n                    <div className=\"text-center py-12 text-muted-foreground\">\n                      <Target className=\"h-12 w-12 mx-auto mb-3 opacity-40\" />\n                      <p>Arşivlenmiş görev yok</p>\n                    </div>\n                  ) : (\n                    archivedTasksModal.map((task) => {\n                      // Get the most relevant date (archivedAt > completedAt > dueDate > createdAt)\n                      let displayDate = task.archivedAt || task.completedAt || task.dueDate || task.createdAt;\n                      let dateLabel = task.archivedAt ? 'Arşivlenme' : task.completedAt ? 'Tamamlanma' : task.dueDate ? 'Bitiş' : 'Oluşturma';\n                      \n                      return (\n                        <div key={task.id} className=\"p-4 bg-gradient-to-r from-purple-50 to-pink-50 dark:from-purple-950/30 dark:to-pink-950/30 rounded-lg border border-purple-200 dark:border-purple-800 space-y-2\">\n                          <div className=\"flex items-start justify-between\">\n                            <div className=\"flex-1\">\n                              <div className=\"font-semibold text-foreground text-lg\">{task.title}</div>\n                              {task.description && (\n                                <div className=\"text-sm text-muted-foreground mt-1 p-2 bg-purple-50/50 dark:bg-purple-900/20 rounded border border-purple-200/50 dark:border-purple-700/30\">\n                                  📝 {task.description}\n                                </div>\n                              )}\n                              {displayDate && (\n                                <div className=\"text-xs text-muted-foreground mt-2\">\n                                  📅 {dateLabel} Tarihi: {new Date(displayDate).toLocaleDateString('tr-TR')}\n                                </div>\n                              )}\n                            </div>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => deleteArchivedTaskMutation.mutate(task.id)}\n                              className=\"text-red-600 hover:text-red-700 hover:bg-red-50 dark:hover:bg-red-950/30 ml-2\"\n                              data-testid={`button-delete-archived-task-${task.id}`}\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                          \n                          <div className=\"flex gap-2\">\n                            {task.completed && (\n                              <Badge variant=\"secondary\" className=\"bg-green-100 text-green-700 dark:bg-green-900/40 dark:text-green-400\">\n                                ✅ Tamamlandı\n                              </Badge>\n                            )}\n                            {!task.completed && (\n                              <Badge variant=\"secondary\" className=\"bg-orange-100 text-orange-700 dark:bg-orange-900/40 dark:text-orange-400\">\n                                ⏳ Tamamlanmadı\n                              </Badge>\n                            )}\n                          </div>\n                        </div>\n                      );\n                    })\n                  )}\n                </div>\n              )}\n\n              {archivedTab === 'studyHours' && (\n                <div className={`space-y-3 ${archivedStudyHoursModal.length > 5 ? 'max-h-[500px] overflow-y-auto pr-2' : ''}`}>\n                  {archivedStudyHoursModal.length === 0 ? (\n                    <div className=\"text-center py-12 text-muted-foreground\">\n                      <Clock className=\"h-12 w-12 mx-auto mb-3 opacity-40\" />\n                      <p>Arşivlenmiş çalışma saati yok</p>\n                    </div>\n                  ) : (\n                    archivedStudyHoursModal.map((sh: any) => (\n                      <div key={sh.id} className=\"p-4 bg-gradient-to-r from-cyan-50 to-blue-50 dark:from-cyan-950/30 dark:to-blue-950/30 rounded-lg border border-cyan-200 dark:border-cyan-800\">\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex-1\">\n                            <div className=\"font-semibold text-foreground\">\n                              {sh.hours}s {sh.minutes}d {sh.seconds}sn\n                            </div>\n                            <div className=\"text-sm text-muted-foreground\">{new Date(sh.study_date).toLocaleDateString('tr-TR')}</div>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            <Badge variant=\"secondary\" className=\"bg-cyan-100 text-cyan-700 dark:bg-cyan-900/40 dark:text-cyan-400\">\n                              ⏱️ Çalışma Saati\n                            </Badge>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => deleteStudyHoursMutation.mutate(sh.id)}\n                              className=\"text-red-600 hover:text-red-700 hover:bg-red-50 dark:hover:bg-red-950/30\"\n                              disabled={deleteStudyHoursMutation.isPending}\n                              data-testid={`button-delete-archived-study-hour-${sh.id}`}\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    ))\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n\n          <div className=\"flex justify-end gap-3 mt-4\">\n            <Button\n              variant=\"outline\"\n              onClick={() => setShowArchivedDataModal(false)}\n            >\n              Kapat\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Tamamlanan Hatalı Konular Modalı */}\n      <Dialog open={showCompletedTopicsModal} onOpenChange={setShowCompletedTopicsModal}>\n        <DialogContent className=\"sm:max-w-5xl max-h-[85vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"text-3xl font-bold text-center bg-gradient-to-r from-green-600 via-emerald-600 to-teal-600 bg-clip-text text-transparent\">\n              ✅ Tamamlanan Hatalı Konular Geçmişi\n            </DialogTitle>\n            <DialogDescription className=\"text-center text-muted-foreground text-lg\">\n              Checkbox ile işaretlediğiniz ve tamamladığınız tüm konuların geçmişi\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\" key={completedTopicsRefreshKey}>\n            {(() => {\n              // LocalStorage'dan tüm tamamlanan konuları topla\n              const completedGeneral = JSON.parse(localStorage.getItem('completedGeneralExamErrors') || '[]');\n              const completedBranch = JSON.parse(localStorage.getItem('completedBranchExamErrors') || '[]');\n              const completedQuestion = JSON.parse(localStorage.getItem('completedQuestionErrors') || '[]');\n              \n              const allCompleted = [...completedGeneral, ...completedBranch, ...completedQuestion]\n                .sort((a, b) => new Date(b.completedAt).getTime() - new Date(a.completedAt).getTime());\n              \n              if (allCompleted.length === 0) {\n                return (\n                  <div className=\"text-center py-12 text-muted-foreground\">\n                    <CheckCircle className=\"h-16 w-16 mx-auto mb-4 opacity-40\" />\n                    <p className=\"text-lg\">Henüz tamamlanmış konu yok</p>\n                    <p className=\"text-sm mt-2\">Eksik Olduğum Konular veya Hata Sıklığı bölümlerinden konuları işaretleyerek tamamlayabilirsiniz</p>\n                  </div>\n                );\n              }\n              \n              return (\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between mb-4 p-3 bg-green-50 dark:bg-green-950/30 rounded-lg\">\n                    <div className=\"text-sm font-semibold text-green-700 dark:text-green-400\">\n                      Toplam {allCompleted.length} konu tamamlandı 🎉\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-3 max-h-[60vh] overflow-y-auto custom-scrollbar pr-2\">\n                    {allCompleted.map((item, index) => (\n                      <div \n                        key={index} \n                        className=\"bg-gradient-to-r from-green-50/50 to-emerald-50/50 dark:from-green-950/20 dark:to-emerald-950/20 rounded-xl p-4 border-2 border-green-200/50 dark:border-green-800/50 hover:shadow-lg transition-all duration-300\"\n                      >\n                        <div className=\"flex items-start justify-between gap-4\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center gap-3 mb-2\">\n                              <span className=\"px-3 py-1 bg-green-500 text-white text-xs font-bold rounded-full\">\n                                {item.subject || 'Ders'}\n                              </span>\n                              <span className={`px-3 py-1 text-xs font-bold rounded-full ${\n                                item.tag === 'Genel Deneme' ? 'bg-blue-100 text-blue-700 dark:bg-blue-900/40 dark:text-blue-400' :\n                                item.tag === 'Branş Denemesi' ? 'bg-purple-100 text-purple-700 dark:bg-purple-900/40 dark:text-purple-400' :\n                                'bg-orange-100 text-orange-700 dark:bg-orange-900/40 dark:text-orange-400'\n                              }`}>\n                                {item.tag}\n                              </span>\n                            </div>\n                            <div className=\"text-base font-bold text-gray-800 dark:text-gray-200 mb-1\">\n                              {item.topic || 'Konu'}\n                            </div>\n                            <div className=\"text-xs text-gray-600 dark:text-gray-400 flex items-center gap-2\">\n                              <Calendar className=\"h-3.5 w-3.5\" />\n                              {new Date(item.completedAt).toLocaleDateString('tr-TR', { \n                                year: 'numeric', \n                                month: 'long', \n                                day: 'numeric',\n                                hour: '2-digit',\n                                minute: '2-digit'\n                              })}\n                            </div>\n                          </div>\n                          <div className=\"flex-shrink-0 flex items-center gap-2\">\n                            <div className=\"p-3 bg-green-100 dark:bg-green-900/40 rounded-xl\">\n                              <CheckCircle className=\"h-6 w-6 text-green-600 dark:text-green-400\" />\n                            </div>\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              className=\"h-10 w-10 p-0 text-red-500 hover:text-red-700 hover:bg-red-100 dark:hover:bg-red-900/30\"\n                              onClick={() => {\n                                const storageKey = \n                                  item.tag === 'Genel Deneme' ? 'completedGeneralExamErrors' :\n                                  item.tag === 'Branş Denemesi' ? 'completedBranchExamErrors' :\n                                  'completedQuestionErrors';\n                                \n                                console.log('Silme işlemi:', { storageKey, itemKey: item.key, itemTag: item.tag, itemTopic: item.topic });\n                                \n                                const saved = localStorage.getItem(storageKey);\n                                if (saved) {\n                                  const arr = JSON.parse(saved);\n                                  console.log('Mevcut veriler:', arr);\n                                  const filtered = arr.filter((entry: any) => entry.key !== item.key);\n                                  console.log('Filtrelenmiş veriler:', filtered);\n                                  localStorage.setItem(storageKey, JSON.stringify(filtered));\n                                  window.dispatchEvent(new Event('localStorageUpdate'));\n                                  toast({ \n                                    title: \"🗑️ Silindi\", \n                                    description: `${item.topic} tamamlanmış konulardan kaldırıldı.`\n                                  });\n                                } else {\n                                  console.error('localStorage\\'da veri bulunamadı:', storageKey);\n                                }\n                              }}\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              );\n            })()}\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Tüm Soruları Sil Onay Modalı */}\n      <AlertDialog open={showDeleteAllQuestionsDialog} onOpenChange={setShowDeleteAllQuestionsDialog}>\n        <AlertDialogContent className=\"bg-white dark:bg-gray-900 border-red-200 dark:border-red-800\">\n          <AlertDialogHeader>\n            <AlertDialogTitle className=\"text-red-700 dark:text-red-400 text-xl flex items-center gap-2\">\n              <Trash2 className=\"h-6 w-6\" />\n              Tüm Soru Kayıtlarını Sil\n            </AlertDialogTitle>\n            <AlertDialogDescription className=\"text-gray-600 dark:text-gray-400\">\n              Tüm soru çözüm kayıtlarınızı silmek üzeresiniz. Bu işlem geri alınamaz!\n            </AlertDialogDescription>\n            <div className=\"mt-4 p-4 bg-red-50 dark:bg-red-950/30 rounded-lg border border-red-200 dark:border-red-800\">\n              <p className=\"text-sm font-semibold text-red-700 dark:text-red-400\">⚠️ Uyarı:</p>\n              <ul className=\"mt-2 text-sm text-red-600 dark:text-red-400 list-disc list-inside\">\n                <li>Tüm soru çözüm kayıtlarınız silinecek</li>\n                <li>İstatistikler ve analizler etkilenecek</li>\n                <li>Bu işlem geri alınamaz</li>\n              </ul>\n            </div>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel className=\"border-gray-300 dark:border-gray-700\">İptal</AlertDialogCancel>\n            <AlertDialogAction \n              onClick={() => {\n                deleteAllQuestionLogsMutation.mutate();\n                setShowDeleteAllQuestionsDialog(false);\n              }}\n              className=\"bg-red-600 hover:bg-red-700 text-white\"\n            >\n              Evet, Tümünü Sil\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      {/* Tüm Denemeleri Sil Onay Modalı */}\n      <AlertDialog open={showDeleteAllExamsDialog} onOpenChange={setShowDeleteAllExamsDialog}>\n        <AlertDialogContent className=\"bg-white dark:bg-gray-900 border-red-200 dark:border-red-800\">\n          <AlertDialogHeader>\n            <AlertDialogTitle className=\"text-red-700 dark:text-red-400 text-xl flex items-center gap-2\">\n              <Trash2 className=\"h-6 w-6\" />\n              Tüm Deneme Sonuçlarını Sil\n            </AlertDialogTitle>\n            <AlertDialogDescription className=\"text-gray-600 dark:text-gray-400\">\n              Tüm deneme sınav sonuçlarınızı silmek üzeresiniz. Bu işlem geri alınamaz!\n            </AlertDialogDescription>\n            <div className=\"mt-4 p-4 bg-red-50 dark:bg-red-950/30 rounded-lg border border-red-200 dark:border-red-800\">\n              <p className=\"text-sm font-semibold text-red-700 dark:text-red-400\">⚠️ Uyarı:</p>\n              <ul className=\"mt-2 text-sm text-red-600 dark:text-red-400 list-disc list-inside\">\n                <li>Tüm deneme sonuçlarınız silinecek</li>\n                <li>Net grafikleri ve analizler sıfırlanacak</li>\n                <li>Bu işlem geri alınamaz</li>\n              </ul>\n            </div>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel className=\"border-gray-300 dark:border-gray-700\">İptal</AlertDialogCancel>\n            <AlertDialogAction \n              onClick={() => {\n                deleteAllExamResultsMutation.mutate();\n                setShowDeleteAllExamsDialog(false);\n              }}\n              className=\"bg-red-600 hover:bg-red-700 text-white\"\n            >\n              Evet, Tümünü Sil\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      {/* TÜM VERİLERİ TEMİZLE İLK MODAL - UYARI */}\n      <AlertDialog open={showDeleteAllDataDialog} onOpenChange={setShowDeleteAllDataDialog}>\n        <AlertDialogContent className=\"bg-gradient-to-br from-orange-50 via-white to-red-50 dark:from-orange-950/40 dark:via-gray-900 dark:to-red-950/40 border-2 border-red-300 dark:border-red-700 shadow-2xl max-w-2xl\">\n          <AlertDialogHeader>\n            <AlertDialogTitle className=\"text-3xl font-bold text-center bg-gradient-to-r from-orange-600 via-red-600 to-orange-600 bg-clip-text text-transparent flex items-center justify-center gap-3\">\n              ⚠️ UYARI: Uygulama Sıfırlanacak!\n            </AlertDialogTitle>\n            <AlertDialogDescription className=\"text-gray-700 dark:text-gray-300 text-base font-medium text-center mt-4\">\n              Bu işlem komple uygulamayı sıfıra döndürecektir. <span className=\"font-bold text-red-600 dark:text-red-400\">TÜM VERİLERİNİZ KALICI OLARAK SİLİNECEK!</span>\n            </AlertDialogDescription>\n            <div className=\"mt-6 space-y-4\">\n              <div className=\"p-6 bg-gradient-to-br from-red-100 to-orange-50 dark:from-red-950/60 dark:to-orange-950/40 rounded-xl border-2 border-red-400 dark:border-red-700 shadow-lg\">\n                <p className=\"text-lg font-bold text-red-700 dark:text-red-300 mb-4 flex items-center gap-2\">\n                  💥 Silinecek Veriler:\n                </p>\n                <ul className=\"space-y-3 text-sm text-gray-800 dark:text-gray-200\">\n                  <li className=\"flex items-start gap-3 p-2 bg-white/50 dark:bg-gray-800/50 rounded-lg\">\n                    <span className=\"text-xl\">📝</span>\n                    <span><strong className=\"text-orange-700 dark:text-orange-400\">Görevler:</strong> Tamamlanan ve bekleyen tüm görevleriniz</span>\n                  </li>\n                  <li className=\"flex items-start gap-3 p-2 bg-white/50 dark:bg-gray-800/50 rounded-lg\">\n                    <span className=\"text-xl\">📚</span>\n                    <span><strong className=\"text-red-700 dark:text-red-400\">Soru Kayıtları:</strong> Çözdüğünüz tüm sorular ve istatistikler</span>\n                  </li>\n                  <li className=\"flex items-start gap-3 p-2 bg-white/50 dark:bg-gray-800/50 rounded-lg\">\n                    <span className=\"text-xl\">🎯</span>\n                    <span><strong className=\"text-orange-700 dark:text-orange-400\">Deneme Sonuçları:</strong> TYT/AYT tüm deneme sınav kayıtları</span>\n                  </li>\n                  <li className=\"flex items-start gap-3 p-2 bg-white/50 dark:bg-gray-800/50 rounded-lg\">\n                    <span className=\"text-xl\">⏱️</span>\n                    <span><strong className=\"text-red-700 dark:text-red-400\">Çalışma Saatleri:</strong> Tüm çalışma saati kayıtları</span>\n                  </li>\n                  <li className=\"flex items-start gap-3 p-2 bg-white/50 dark:bg-gray-800/50 rounded-lg\">\n                    <span className=\"text-xl\">💾</span>\n                    <span><strong className=\"text-orange-700 dark:text-orange-400\">Tüm Ayarlar:</strong> Düzeltilen konular, hedef netler, localStorage verileri</span>\n                  </li>\n                </ul>\n              </div>\n              \n              <div className=\"p-4 bg-gradient-to-r from-yellow-100 to-orange-100 dark:from-yellow-950/50 dark:to-orange-950/50 rounded-xl border-2 border-yellow-400 dark:border-yellow-700 shadow-lg\">\n                <p className=\"text-sm font-bold text-yellow-800 dark:text-yellow-300 mb-2 flex items-center gap-2\">\n                  ℹ️ İşlem Sonrası Durum:\n                </p>\n                <ul className=\"text-sm text-yellow-800 dark:text-yellow-300 space-y-2 list-none\">\n                  <li className=\"flex items-center gap-2\">\n                    <span className=\"text-yellow-600 dark:text-yellow-400\">✓</span>\n                    Uygulama otomatik olarak yenilenecek\n                  </li>\n                  <li className=\"flex items-center gap-2\">\n                    <span className=\"text-yellow-600 dark:text-yellow-400\">✓</span>\n                    Sıfırdan başlayacaksınız (tüm veriler silinmiş olacak)\n                  </li>\n                  <li className=\"flex items-center gap-2\">\n                    <span className=\"text-yellow-600 dark:text-yellow-400\">✓</span>\n                    Bu işlem 2-3 saniye sürebilir\n                  </li>\n                  <li className=\"flex items-center gap-2 mt-3 font-bold text-red-700 dark:text-red-400\">\n                    <span className=\"text-red-600 dark:text-red-400\">⚠️</span>\n                    Bu işlem GERİ ALINAMAZ!\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </AlertDialogHeader>\n          <AlertDialogFooter className=\"mt-6\">\n            <AlertDialogCancel \n              className=\"border-2 border-gray-400 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-950/30 text-gray-700 dark:text-gray-300 font-semibold\"\n            >\n              İptal Et\n            </AlertDialogCancel>\n            <AlertDialogAction \n              onClick={() => {\n                setShowDeleteAllDataDialog(false);\n                setShowDeleteAllDataConfirmDialog(true);\n              }}\n              className=\"bg-gradient-to-r from-orange-600 to-red-600 hover:from-orange-700 hover:to-red-700 text-white font-bold px-8 shadow-lg hover:shadow-xl transition-all duration-300\"\n            >\n              1. Adım: Devam Et\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      {/* TÜM VERİLERİ TEMİZLE İKİNCİ MODAL - SON ONAY */}\n      <AlertDialog open={showDeleteAllDataConfirmDialog} onOpenChange={setShowDeleteAllDataConfirmDialog}>\n        <AlertDialogContent className=\"bg-gradient-to-br from-red-50 via-white to-red-50 dark:from-red-950/40 dark:via-gray-900 dark:to-red-950/40 border-2 border-red-500 dark:border-red-700 shadow-2xl max-w-xl\">\n          <AlertDialogHeader>\n            <AlertDialogTitle className=\"text-2xl font-bold text-center text-red-700 dark:text-red-400 flex items-center justify-center gap-3\">\n              🚨 Son Onay\n            </AlertDialogTitle>\n            <AlertDialogDescription className=\"text-gray-700 dark:text-gray-300 text-lg font-semibold text-center mt-4\">\n              Temizlemek istediğinize <span className=\"font-bold text-red-600 dark:text-red-400\">EMİN MİSİNİZ?</span>\n            </AlertDialogDescription>\n            <div className=\"mt-6 p-6 bg-red-100 dark:bg-red-950/60 rounded-xl border-2 border-red-500 dark:border-red-700\">\n              <p className=\"text-center text-base font-bold text-red-800 dark:text-red-300 mb-4\">\n                ⚠️ Bu işlem GERİ ALINAMAZ!\n              </p>\n              <p className=\"text-center text-sm text-red-700 dark:text-red-400\">\n                Tüm çalışma verileriniz, deneme sonuçlarınız, görevleriniz ve ayarlarınız kalıcı olarak silinecek.\n              </p>\n              <p className=\"text-center text-sm font-bold text-red-800 dark:text-red-300 mt-4\">\n                💾 Yedek almadıysanız, verilerinizi geri alamazsınız!\n              </p>\n            </div>\n          </AlertDialogHeader>\n          <AlertDialogFooter className=\"mt-6\">\n            <AlertDialogCancel \n              className=\"border-2 border-gray-400 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-950/30 text-gray-700 dark:text-gray-300 font-semibold\"\n              disabled={deleteAllDataMutation.isPending}\n            >\n              Hayır, İptal Et\n            </AlertDialogCancel>\n            <AlertDialogAction \n              onClick={() => {\n                setShowDeleteAllDataConfirmDialog(false);\n                setShowDeleteAllDataCountdownDialog(true);\n                setDeleteCountdown(300); // 5 dakika geri sayımı başlat\n              }}\n              className=\"bg-gradient-to-r from-red-600 to-red-700 hover:from-red-700 hover:to-red-800 text-white font-bold px-8 shadow-lg hover:shadow-xl transition-all duration-300\"\n            >\n              2. Adım: Son Onay\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      {/* TÜM VERİLERİ TEMİZLE 3. MODAL - 5 DAKİKALIK GERİ SAYIM - BERAT CANKIR - 03:03:03 */}\n      <AlertDialog open={showDeleteAllDataCountdownDialog} onOpenChange={(open) => {\n        if (!open) {\n          setShowDeleteAllDataCountdownDialog(false);\n          setDeleteCountdown(300);\n        }\n      }}>\n        <AlertDialogContent className=\"bg-gradient-to-br from-red-50 via-white to-orange-50 dark:from-red-950/40 dark:via-gray-900 dark:to-orange-950/40 border-4 border-red-600 dark:border-red-700 shadow-2xl max-w-2xl\">\n          <AlertDialogHeader>\n            <AlertDialogTitle className=\"text-4xl font-black text-center bg-gradient-to-r from-red-600 via-orange-600 to-red-600 bg-clip-text text-transparent flex items-center justify-center gap-3 mb-4\">\n              ⏰ GERİ SAYIM BAŞLADI!\n            </AlertDialogTitle>\n            <AlertDialogDescription className=\"text-gray-700 dark:text-gray-300 text-lg font-bold text-center mt-4\">\n              Tüm verileriniz {Math.floor(deleteCountdown / 60)} dakika {deleteCountdown % 60} saniye içinde <span className=\"font-black text-red-600 dark:text-red-400 text-2xl\">SİLİNECEK!</span>\n            </AlertDialogDescription>\n            \n            <div className=\"mt-8 space-y-6\">\n              {/* Dev Geri Sayım Göstergesi */}\n              <div className=\"relative\">\n                <div className=\"flex items-center justify-center\">\n                  <div className=\"relative w-64 h-64\">\n                    {/* Daire Progress */}\n                    <svg className=\"w-full h-full transform -rotate-90\">\n                      <circle\n                        cx=\"128\"\n                        cy=\"128\"\n                        r=\"120\"\n                        stroke=\"currentColor\"\n                        strokeWidth=\"12\"\n                        fill=\"none\"\n                        className=\"text-gray-200 dark:text-gray-700\"\n                      />\n                      <circle\n                        cx=\"128\"\n                        cy=\"128\"\n                        r=\"120\"\n                        stroke=\"currentColor\"\n                        strokeWidth=\"12\"\n                        fill=\"none\"\n                        strokeDasharray={`${2 * Math.PI * 120}`}\n                        strokeDashoffset={`${2 * Math.PI * 120 * (1 - deleteCountdown / 300)}`}\n                        className=\"text-red-600 dark:text-red-400 transition-all duration-1000\"\n                        strokeLinecap=\"round\"\n                      />\n                    </svg>\n                    \n                    {/* Merkez Sayı */}\n                    <div className=\"absolute inset-0 flex flex-col items-center justify-center\">\n                      <div className=\"text-7xl font-black text-red-600 dark:text-red-400 tabular-nums\">\n                        {Math.floor(deleteCountdown / 60)}:{String(deleteCountdown % 60).padStart(2, '0')}\n                      </div>\n                      <div className=\"text-lg font-bold text-gray-600 dark:text-gray-400 mt-2\">\n                        kalan süre\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Uyarı Mesajı */}\n              <div className=\"p-6 bg-gradient-to-br from-red-100 to-orange-50 dark:from-red-950/60 dark:to-orange-950/40 rounded-xl border-4 border-red-500 dark:border-red-700 shadow-2xl animate-pulse\">\n                <p className=\"text-center text-xl font-black text-red-800 dark:text-red-300 mb-4 flex items-center justify-center gap-3\">\n                  🚨 SON UYARI!\n                </p>\n                <p className=\"text-center text-base font-bold text-red-700 dark:text-red-400\">\n                  Geri sayım bittiğinde TÜM VERİLERİNİZ kalıcı olarak silinecek!\n                </p>\n                <p className=\"text-center text-sm font-semibold text-orange-700 dark:text-orange-400 mt-3\">\n                  İptal etmek için aşağıdaki butona tıklayın.\n                </p>\n              </div>\n            </div>\n          </AlertDialogHeader>\n          \n          <AlertDialogFooter className=\"mt-6\">\n            <AlertDialogCancel \n              className=\"flex-1 border-4 border-green-600 dark:border-green-700 bg-gradient-to-r from-green-50 to-emerald-50 dark:from-green-950/50 dark:to-emerald-950/50 hover:from-green-100 hover:to-emerald-100 dark:hover:from-green-900/50 dark:hover:to-emerald-900/50 text-green-700 dark:text-green-300 font-black text-xl py-6 shadow-xl hover:shadow-2xl transition-all duration-300\"\n              onClick={() => {\n                setShowDeleteAllDataCountdownDialog(false);\n                setDeleteCountdown(300);\n                toast({\n                  title: \"✅ İptal Edildi\",\n                  description: \"Veri silme işlemi iptal edildi. Verileriniz güvende!\",\n                });\n              }}\n            >\n              ❌ DURDUR VE İPTAL ET\n            </AlertDialogCancel>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      {/* Arşivlenen Deneme Sonuçları Modalı */}\n      <Dialog open={showArchivedExamsModal} onOpenChange={setShowArchivedExamsModal}>\n        <DialogContent className=\"sm:max-w-6xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"text-3xl font-bold text-center bg-gradient-to-r from-amber-600 via-orange-600 to-amber-600 bg-clip-text text-transparent\">\n              📦 Arşivlenen Deneme Sonuçları\n            </DialogTitle>\n            <DialogDescription className=\"text-center text-muted-foreground text-lg\">\n              Arşivlenmiş deneme sonuçlarınız. Veriler raporlarda görünmeye devam eder.\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"space-y-4\">\n            {archivedExams.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <Archive className=\"h-24 w-24 text-amber-300 mx-auto mb-4 opacity-50\" />\n                <div className=\"text-xl font-semibold text-muted-foreground\">Arşivlenmiş deneme bulunmuyor</div>\n                <div className=\"text-sm text-muted-foreground mt-2\">Deneme sonuçlarını arşivleyerek burada saklayabilirsiniz.</div>\n              </div>\n            ) : (\n              <div className=\"grid gap-4\">\n                {archivedExams\n                  .sort((a, b) => new Date(b.archivedAt || b.exam_date).getTime() - new Date(a.archivedAt || a.exam_date).getTime())\n                  .map((exam) => {\n                    const examType = exam.exam_type || (parseFloat(exam.ayt_net) > 0 ? 'AYT' : 'TYT');\n                    const relevantNet = examType === 'TYT' ? parseFloat(exam.tyt_net) || 0 : parseFloat(exam.ayt_net) || 0;\n                    \n                    return (\n                      <Card key={exam.id} className=\"bg-amber-50/50 dark:bg-amber-950/20 border-amber-200 dark:border-amber-800\">\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center gap-3 mb-2\">\n                                <div className={`px-3 py-1 rounded-full text-sm font-bold ${\n                                  examType === 'TYT' \n                                    ? 'bg-blue-500 text-white' \n                                    : 'bg-purple-500 text-white'\n                                }`}>\n                                  {examType}\n                                </div>\n                                <h3 className=\"text-lg font-bold text-amber-900 dark:text-amber-100\">\n                                  {exam.display_name || exam.exam_name || 'Deneme'}\n                                </h3>\n                              </div>\n                              \n                              <div className=\"flex items-center gap-6 text-sm text-muted-foreground\">\n                                <div className=\"flex items-center gap-2\">\n                                  <Calendar className=\"h-4 w-4\" />\n                                  <span>\n                                    {new Date(exam.exam_date).toLocaleDateString('tr-TR', {\n                                      day: '2-digit',\n                                      month: 'long',\n                                      year: 'numeric'\n                                    })}\n                                  </span>\n                                </div>\n                                \n                                {exam.archivedAt && (\n                                  <div className=\"flex items-center gap-2 text-amber-600 dark:text-amber-400\">\n                                    <Archive className=\"h-4 w-4\" />\n                                    <span className=\"text-xs\">\n                                      {new Date(exam.archivedAt).toLocaleDateString('tr-TR', {\n                                        day: '2-digit',\n                                        month: 'short'\n                                      })} arşivlendi\n                                    </span>\n                                  </div>\n                                )}\n                               ","size_bytes":360000},"client/src/bilesenler/arayuz/command.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/kutuphane/yardimcilar\"\nimport { Dialog, DialogContent } from \"@/bilesenler/arayuz/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":5005},"TESTING.md":{"content":"# BERAT CANKIR - YKS ANALİZ TAKİP SİSTEMİ\n## Test ve Kullanım Talimatları\n\n**📑 Hızlı Navigasyon:** [Ana Sayfa](./replit.md) | [Sistem Gereksinimleri](#sistem-gereksinimleri) | [Kurulum](#kurulum) | [Geliştirme](#geliştirme-modu) | [Test](#test-çalıştırma) | [Build](#üretim-derlemesi) | [API Test](#api-endpoints-test) | [Sorun Giderme](#yaygın-sorunlar-ve-çözümleri)\n\n**📚 Ek Dokümantasyon:** [Talimatlar](./md%20dosyaları/talimatlar.md) | [Teknik Mimari](./md%20dosyaları/teknik_mimari.md) | [Client Kodu](./md%20dosyaları/kod_aciklamasi_client.md) | [Server Kodu](./md%20dosyaları/kod_aciklamasi_server.md) | [Shared Kodu](./md%20dosyaları/kod_aciklamasi_shared.md) | [Electron](./md%20dosyaları/kod_aciklamasi_electron1.md)\n\n### 📋 İçindekiler\n1. [Sistem Gereksinimleri](#sistem-gereksinimleri)\n2. [Kurulum](#kurulum)\n3. [Geliştirme Modu](#geliştirme-modu)\n4. [Test Çalıştırma](#test-çalıştırma)\n5. [Üretim Derlemesi](#üretim-derlemesi)\n6. [Electron Masaüstü Uygulaması](#electron-masaüstü-uygulaması)\n7. [API Endpoints Test](#api-endpoints-test)\n8. [UI/UX Test Senaryoları](#uiux-test-senaryoları)\n9. [Yaygın Sorunlar ve Çözümleri](#yaygın-sorunlar-ve-çözümleri)\n10. [Performans Test](#performans-test)\n11. [Güvenlik Testleri](#güvenlik-testleri)\n12. [Veritabanı Test](#veritabanı-test)\n13. [Component Testing](#component-testing-birim-testler)\n14. [API Testing Detaylı](#api-testing-detaylı)\n15. [Test Best Practices](#test-yazma-best-practices)\n\n---\n\n## 🖥️ Sistem Gereksinimleri\n\n### Minimum Gereksinimler (Windows)\n- **İşletim Sistemi:** Windows 10 veya üzeri (64-bit)\n- **Node.js:** v18.x veya v20.x\n- **npm:** v9.x veya üzeri\n- **RAM:** En az 4GB (8GB önerilir)\n- **Disk Alanı:** En az 500MB boş alan\n\n### Önerilen Geliştirme Araçları\n- **VS Code** (veya herhangi bir kod editörü)\n- **Git** (versiyon kontrolü için)\n- **Windows Terminal** (PowerShell veya CMD)\n\n---\n\n## 📦 Kurulum\n\n### 1. Depo Klonlama\n```bash\ngit clone https://github.com/beratcode03/beratders.git\ncd beratders\n```\n\n### 2. Bağımlılıkları Yükleme\n```bash\nnpm install\n```\n\n**Not:** İlk kurulum 5-10 dakika sürebilir.\n\n### 3. Ortam Değişkenlerini Ayarlama (Opsiyonel)\n\n`.env.example` dosyasını `.env` olarak kopyalayın:\n```bash\ncopy .env.example .env\n```\n\n`.env` dosyasında aşağıdaki değişkenleri doldurun (opsiyonel):\n```env\n# Hava Durumu API (OpenWeather)\nOPENWEATHER_API_KEY=your_openweather_api_key_here\n\n# E-posta Bildirimleri (Nodemailer)\nEMAIL_USER=your_email@gmail.com\nEMAIL_PASS=your_app_password_here\nEMAIL_FROM=noreply@beratcankir.com\n```\n\n**ÖNEMLİ:** Bu ortam değişkenleri **opsiyoneldir**. Uygulama bu değişkenler olmadan da çalışır:\n- Hava durumu widget'ı devre dışı kalır\n- E-posta bildirimleri çalışmaz\n- Diğer tüm özellikler normal çalışır\n\n---\n\n## 🚀 Geliştirme Modu\n\n### Web Uygulaması Başlatma\n```bash\nnpm run dev\n```\n\nTarayıcınızda şu adresi açın: **http://localhost:5000**\n\n**Özellikler:**\n- ✅ Hot Module Replacement (HMR) - Kod değişiklikleri otomatik yüklenir\n- ✅ TypeScript type checking\n- ✅ JSON file storage (data/kayitlar.json)\n- ✅ Detaylı console logları\n\n### Electron Uygulaması Başlatma (Geliştirme)\n```bash\nnpm run electron:dev\n```\n\n**Not:** Bu komut hem web server'ı hem de Electron penceresini açar.\n\n---\n\n## 🧪 Test Çalıştırma\n\n### Tüm Testleri Çalıştırma (Vitest)\n```bash\nnpm test\n```\n**Açıklama:** Tüm unit ve integration testlerini tek seferde çalıştırır. Test sonuçlarını konsola yazdırır ve başarısız testleri raporlar.\n\n**Ne zaman kullanılır:**\n- Kod değişikliklerinden sonra tüm testlerin hala geçtiğini doğrulamak için\n- CI/CD pipeline'da otomatik test çalıştırma için\n- Production build öncesi final kontrol için\n\n**Çıktı:**\n```\n✓ client/src/bilesenler/__testler__/example.test.tsx (3)\n✓ server/__testler__/api.test.ts (5)\nTest Files  2 passed (2)\n     Tests  8 passed (8)\n```\n\n### Watch Mode'da Test\n```bash\nnpm run test:watch\n```\n**Açıklama:** Dosya değişikliklerini izler ve otomatik olarak ilgili testleri yeniden çalıştırır. Geliştirme sırasında sürekli açık tutulabilir.\n\n**Ne zaman kullanılır:**\n- Aktif geliştirme sırasında (TDD - Test Driven Development)\n- Hızlı geri bildirim döngüsü için\n- Bug fix çalışmaları sırasında\n\n**Özellikler:**\n- ✅ Dosya değişikliklerinde otomatik yeniden çalışma\n- ✅ Sadece değişen dosyalarla ilgili testleri çalıştırma\n- ✅ Interaktif test filtreleme\n- ✅ Hızlı iterasyon\n\n**Kullanım:**\n```\nWatch Usage\n › Press a to run all tests\n › Press f to run only failed tests\n › Press q to quit watch mode\n```\n\n### Test Kapsamı (Coverage)\n```bash\nnpm run test:coverage\n```\n**Açıklama:** Kodun ne kadarının testlerle kapsandığını raporlar. HTML rapor oluşturur.\n\n**Ne zaman kullanılır:**\n- Hangi kodların test edilmediğini görmek için\n- Test coverage metriklerini takip etmek için\n- Eksik test olan alanları belirlemek için\n\n**Çıktı Metrikleri:**\n- **Statements:** Kod satırlarının yüzdesi\n- **Branches:** if/else dallarının yüzdesi\n- **Functions:** Fonksiyonların yüzdesi\n- **Lines:** Satırların yüzdesi\n\n**Hedef Coverage:**\n- Critical paths: %90+\n- Business logic: %80+\n- UI components: %70+\n- Utilities: %95+\n\n**HTML Rapor:**\n```bash\n# Rapor klasörünü aç (Windows)\nstart coverage/index.html\n```\n\n### UI Test Arayüzü\n```bash\nnpm run test:ui\n```\n**Açıklama:** Vitest'in görsel test arayüzünü tarayıcıda açar. Test sonuçlarını grafik olarak gösterir.\n\n**Ne zaman kullanılır:**\n- Test sonuçlarını görsel olarak incelemek için\n- Test loglarını detaylı görmek için\n- Test execution time'ları analiz etmek için\n- Failed testlerin stack trace'ini kolayca görmek için\n\n**Özellikler:**\n- ✅ Grafik arayüz\n- ✅ Test filtreleme ve arama\n- ✅ Console log görüntüleme\n- ✅ Component snapshot preview\n- ✅ Real-time test sonuçları\n\n**Adres:** http://localhost:51204/__vitest__/\n\n### TypeScript Type Kontrolü\n```bash\nnpm run check\n```\n**Açıklama:** TypeScript derleyicisini (tsc) çalıştırarak tüm projedeki tip hatalarını kontrol eder. Build yapmadan sadece tip kontrolü yapar.\n\n**Ne zaman kullanılır:**\n- Kod yazdıktan sonra tip güvenliğini doğrulamak için\n- CI/CD pipeline'da tip kontrolü için\n- Refactoring sonrası tüm dosyaların hala tip-safe olduğunu kontrol etmek için\n\n**Beklenen Çıktı:**\n```\n✓ Type checking completed successfully\n```\n\n**Hata örneği:**\n```\nclient/src/sayfalar/panel.tsx:42:5 - error TS2322: Type 'string' is not assignable to type 'number'.\n```\n\n### End-to-End (E2E) Testler (Playwright)\n\n**Playwright kurulumu (ilk kez):**\n```bash\nnpx playwright install\n```\n**Açıklama:** Playwright'ın browser binaries'lerini indirir (Chromium, Firefox, WebKit). İlk kez E2E test çalıştıracaksanız gereklidir.\n\n**E2E testleri çalıştırma:**\n```bash\nnpx playwright test\n```\n**Açıklama:** Tüm end-to-end testleri headless modda çalıştırır. Gerçek tarayıcı ortamında uygulama akışlarını test eder.\n\n**Ne test edilir:**\n- Kullanıcı akışları (görev ekleme, düzenleme, silme)\n- Sayfa navigasyonu\n- Form validasyonları\n- API entegrasyonu\n- Responsive tasarım\n- Tema değiştirme\n- Veri kalıcılığı\n\n**Çıktı:**\n```\nRunning 15 tests using 3 workers\n  15 passed (1.2m)\n```\n\n**Playwright UI mode:**\n```bash\nnpx playwright test --ui\n```\n**Açıklama:** Playwright'ın interaktif test arayüzünü açar. Test adımlarını görsel olarak takip edebilirsiniz.\n\n**Özellikler:**\n- ✅ Test execution'ı izleme\n- ✅ Adım adım debugging\n- ✅ Screenshot ve video görüntüleme\n- ✅ Network request inceleme\n- ✅ Console log görüntüleme\n\n**Headed mode (tarayıcıyı görerek):**\n```bash\nnpx playwright test --headed\n```\n\n**Debug mode:**\n```bash\nnpx playwright test --debug\n```\n\n**Tek bir test dosyası çalıştırma:**\n```bash\nnpx playwright test testler/tam-kapsamli-sistem-testi.spec.ts\n```\n\n**Belirli bir teste odaklanma:**\n```bash\nnpx playwright test --grep \"görev ekleme\"\n```\n\n**Accessibility (Erişilebilirlik) Testleri:**\n```bash\nnpx playwright test --grep \"accessibility\"\n```\n**Açıklama:** WCAG 2.1 standartlarına uygunluğu test eder. axe-core library kullanır.\n\n**Test edilen kriterler:**\n- Color contrast (renk kontrast oranı)\n- Keyboard navigation\n- Screen reader uyumluluğu\n- ARIA labels\n- Form labels\n- Alt text (resimlerde)\n\n**Rapor görüntüleme:**\n```bash\nnpx playwright show-report\n```\nHTML rapor tarayıcıda açılır ve detaylı test sonuçlarını gösterir.\n\n---\n\n## 🏗️ Üretim Derlemesi\n\n### Web Uygulaması İçin Build\n```bash\nnpm run build\n```\n\n**Çıktı:** `dist/public` klasörü\n\n### Derlenmiş Uygulamayı Çalıştırma\n```bash\nnpm start\n```\n\n### TypeScript Type Kontrolü\n```bash\nnpm run check\n```\n\n---\n\n## 💻 Electron Masaüstü Uygulaması\n\n### Geliştirme Derlemesi (Test için)\n```bash\nnpm run electron:build:dir\n```\n**Çıktı:** `dist-electron` klasörü (kurulum gerektirmez)\n\n### Üretim Derlemesi (Windows Installer)\n```bash\nnpm run electron:build\n```\n\n**Çıktı:** `dist-electron` klasöründe `.exe` installer dosyası\n\n**Dosya Adı:** `Berat Cankir-Kurulum-0.0.3.exe`\n\n### Electron Build Özellikleri\n- ✅ Windows NSIS Installer\n- ✅ Masaüstü kısayolu oluşturur\n- ✅ Başlat menüsüne eklenir\n- ✅ System tray desteği\n- ✅ Offline çalışma\n- ✅ Otomatik güncellemeler (GitHub Releases)\n\n---\n\n## 🔌 API Endpoints Test\n\n### Manual API Test (curl veya Postman)\n\n**Base URL:** `http://localhost:5000/api`\n\n#### Görevler (Tasks)\n\n**Tüm görevleri getir:**\n```bash\ncurl http://localhost:5000/api/tasks\n```\n\n**Yeni görev ekle:**\n```bash\ncurl -X POST http://localhost:5000/api/tasks \\\n  -H \"Content-Type: application/json\" \\\n  -d \"{\\\"title\\\":\\\"Test Görevi\\\",\\\"description\\\":\\\"Test açıklaması\\\",\\\"priority\\\":\\\"high\\\",\\\"dueDate\\\":\\\"2025-12-31\\\"}\"\n```\n\n**Görev güncelle:**\n```bash\ncurl -X PUT http://localhost:5000/api/tasks/{id} \\\n  -H \"Content-Type: application/json\" \\\n  -d \"{\\\"title\\\":\\\"Güncellenmiş Görev\\\"}\"\n```\n\n**Görevi tamamla/tamamlanmadı olarak işaretle:**\n```bash\ncurl -X PATCH http://localhost:5000/api/tasks/{id}/toggle\n```\n\n**Görev sil:**\n```bash\ncurl -X DELETE http://localhost:5000/api/tasks/{id}\n```\n\n#### Soru Logları (Question Logs)\n\n**Tüm soru loglarını getir:**\n```bash\ncurl http://localhost:5000/api/question-logs\n```\n\n**Yeni soru logu ekle:**\n```bash\ncurl -X POST http://localhost:5000/api/question-logs \\\n  -H \"Content-Type: application/json\" \\\n  -d \"{\\\"exam_type\\\":\\\"TYT\\\",\\\"subject\\\":\\\"Matematik\\\",\\\"topic\\\":\\\"Fonksiyonlar\\\",\\\"correct_count\\\":\\\"8\\\",\\\"wrong_count\\\":\\\"2\\\",\\\"blank_count\\\":\\\"0\\\",\\\"study_date\\\":\\\"2025-10-31\\\"}\"\n```\n\n#### Sınav Sonuçları (Exam Results)\n\n**Tüm sınav sonuçlarını getir:**\n```bash\ncurl http://localhost:5000/api/exam-results\n```\n\n**Yeni sınav sonucu ekle:**\n```bash\ncurl -X POST http://localhost:5000/api/exam-results \\\n  -H \"Content-Type: application/json\" \\\n  -d \"{\\\"exam_type\\\":\\\"TYT\\\",\\\"exam_name\\\":\\\"Deneme 1\\\",\\\"exam_date\\\":\\\"2025-10-31\\\"}\"\n```\n\n#### İstatistikler\n\n**Konu istatistikleri:**\n```bash\ncurl http://localhost:5000/api/topic-stats\n```\n\n**Öncelikli konular:**\n```bash\ncurl http://localhost:5000/api/priority-topics\n```\n\n**Ders bazında çözülen soru istatistikleri:**\n```bash\ncurl http://localhost:5000/api/subject-solved-stats\n```\n\n#### Çalışma Saatleri\n\n**Çalışma saatlerini getir:**\n```bash\ncurl http://localhost:5000/api/study-hours\n```\n\n**Belirli bir tarihteki çalışma saatini getir:**\n```bash\ncurl http://localhost:5000/api/study-hours/by-date/2025-10-31\n```\n\n#### Hava Durumu (OPENWEATHER_API_KEY gerekli)\n\n```bash\ncurl \"http://localhost:5000/api/weather?city=Istanbul\"\n```\n\n---\n\n## 🎨 UI/UX Test Senaryoları\n\n### 1. Ana Sayfa (Dashboard)\n- [ ] Sayfa yükleniyor mu?\n- [ ] Özet kartlar (toplam görev, tamamlanan, başarı oranı) doğru gösteriliyor mu?\n- [ ] Haftalık ilerleme grafiği çalışıyor mu?\n- [ ] Motivasyon sözü görünüyor mu?\n\n### 2. Görevler Sayfası\n- [ ] Görev listesi görünüyor mu?\n- [ ] \"Yeni Görev Ekle\" butonu çalışıyor mu?\n- [ ] Modal açılıp kapanıyor mu?\n- [ ] Görev ekleyince listede görünüyor mu?\n- [ ] Görev düzenleme çalışıyor mu?\n- [ ] Görev silme çalışıyor mu?\n- [ ] Görev tamamlama checkbox'ı çalışıyor mu?\n- [ ] Öncelik renklendirmesi doğru mu? (high=kırmızı, medium=sarı, low=yeşil)\n- [ ] Bitiş tarihi yaklaşan görevler vurgulanıyor mu?\n\n### 3. Net Hesaplayıcı\n- [ ] TYT/AYT sekmeler arası geçiş çalışıyor mu?\n- [ ] Doğru/yanlış sayıları giriliyor mu?\n- [ ] Net hesaplama doğru yapılıyor mu? (Net = Doğru - (Yanlış / 4))\n- [ ] Toplam puan hesaplaması çalışıyor mu?\n- [ ] Ders bazında net girişi yapılabiliyor mu?\n\n### 4. YKS Konular Sayfası\n- [ ] Tüm dersler listeleniyor mu?\n- [ ] Ders kartlarına tıklanınca konu listesi açılıyor mu?\n- [ ] Konular checkbox ile işaretlenebiliyor mu?\n- [ ] İşaretlenen konular kaydediliyor mu?\n- [ ] Sayfa yenilenince işaretler korunuyor mu?\n- [ ] Arama fonksiyonu çalışıyor mu?\n\n### 5. Sayaç (Countdown)\n- [ ] YKS tarihine geri sayım çalışıyor mu?\n- [ ] Gün, saat, dakika, saniye doğru gösteriliyor mu?\n- [ ] Gece yarısında (00:00) confetti animasyonu çalışıyor mu?\n- [ ] Türk bayrağı ve Atatürk görseli görünüyor mu?\n\n### 6. Panel/İstatistikler\n- [ ] Soru analiz grafikleri çalışıyor mu?\n- [ ] Haftalık aktivite özeti görünüyor mu?\n- [ ] Çalışma saatleri grafiği doğru mu?\n- [ ] Sınav sonuçları tablosu görünüyor mu?\n- [ ] Öncelikli konular listesi çalışıyor mu?\n\n### 7. Tema Değiştirme\n- [ ] Açık/koyu tema arası geçiş çalışıyor mu?\n- [ ] Tema tercihi kaydediliyor mu?\n- [ ] Tüm sayfalar tema değişikliğine uyum sağlıyor mu?\n\n### 8. Yan Menü (Sidebar)\n- [ ] Menü açılıp kapanıyor mu?\n- [ ] Tüm menü öğeleri görünüyor mu?\n- [ ] Sayfalar arası geçiş çalışıyor mu?\n- [ ] Aktif sayfa vurgulanıyor mu?\n\n### 9. Responsive Tasarım\n- [ ] Mobil görünümde (< 768px) menü hamburger butonu oluyor mu?\n- [ ] Tablet görünümde (768px - 1024px) düzen bozulmuyor mu?\n- [ ] Desktop görünümde (> 1024px) tam genişlik kullanılıyor mu?\n\n### 10. Veri Kalıcılığı\n- [ ] Tarayıcı kapatılıp açıldığında veriler korunuyor mu?\n- [ ] Electron uygulaması kapatılıp açıldığında veriler korunuyor mu?\n- [ ] `data/kayitlar.json` dosyası güncel tutuluyor mu?\n\n---\n\n## 🐛 Yaygın Sorunlar ve Çözümleri\n\n### ❌ \"cross-env: not found\" Hatası\n\n**Sebep:** npm bağımlılıkları yüklenmemiş.\n\n**Çözüm:**\n```bash\nnpm install\n```\n\n### ❌ Port 5000 Kullanımda\n\n**Sebep:** Başka bir uygulama 5000 portunu kullanıyor.\n\n**Çözüm 1:** Diğer uygulamayı kapatın.\n\n**Çözüm 2:** `.env` dosyasında portu değiştirin:\n```env\nPORT=5001\n```\n\n### ❌ \"EACCES\" veya İzin Hatası\n\n**Sebep:** Node.js global paketleri için izin hatası.\n\n**Çözüm (Windows):**\n```bash\nnpm config set prefix %APPDATA%\\npm\n```\n\n### ❌ TypeScript Hatası: \"Cannot find module\"\n\n**Sebep:** Path alias'ları tanınmıyor.\n\n**Çözüm:**\n```bash\nnpm run check\n```\nEğer hata devam ederse VS Code'u yeniden başlatın.\n\n### ❌ Vite Build Hatası\n\n**Sebep:** node_modules bozuk.\n\n**Çözüm:**\n```bash\nrmdir /s /q node_modules\nrmdir /s /q dist\nnpm install\nnpm run build\n```\n\n### ❌ Electron Başlamıyor\n\n**Sebep:** Electron ikili dosyaları eksik.\n\n**Çözüm:**\n```bash\nnpm install electron --force\n```\n\n### ❌ \"Module not found\" Hatası (Electron)\n\n**Sebep:** Electron build'de bazı modüller harici bırakılmamış.\n\n**Çözüm:** `package.json` dosyasında `build.files` kontrolü yapın.\n\n### ❌ Ortam Değişkeni Uyarıları\n\n**Sebep:** `.env` dosyası yok veya değişkenler boş.\n\n**Not:** Bu **normaldir**! Uygulama çalışmaya devam eder.\n\n**Çözüm (opsiyonel):** `.env.example` dosyasını kopyalayıp değerleri doldurun.\n\n### ❌ Windows Defender Uyarısı\n\n**Sebep:** İmzasız Electron uygulaması.\n\n**Çözüm:** \"Daha fazla bilgi\" > \"Yine de çalıştır\" seçeneğini kullanın.\n\n### ❌ JSON Parse Hatası\n\n**Sebep:** `data/kayitlar.json` dosyası bozulmuş.\n\n**Çözüm:**\n```bash\nren data\\kayitlar.json kayitlar.json.backup\n```\nUygulama otomatik olarak yeni bir boş dosya oluşturacak.\n\n### ❌ HMR (Hot Module Replacement) Çalışmıyor\n\n**Sebep:** Vite cache sorunu.\n\n**Çözüm:**\n```bash\nrmdir /s /q .vite\nnpm run dev\n```\n\n---\n\n## 📊 Performans Test\n\n### Yükleme Hızı Testi\n```bash\n# Lighthouse (Chrome DevTools)\nnpm run build\nnpm start\n# Tarayıcıda F12 > Lighthouse sekmesi > Analiz yap\n```\n\n**Hedefler:**\n- Performance: > 90\n- Accessibility: > 90\n- Best Practices: > 90\n- SEO: > 80\n\n### Bellek Kullanımı\n- **Tarayıcı:** Chrome Task Manager (Shift+Esc)\n- **Electron:** Process Manager (Windows Task Manager)\n\n**Kabul Edilebilir Sınırlar:**\n- Web: < 100MB RAM\n- Electron: < 200MB RAM\n\n---\n\n## 🔐 Güvenlik Testleri\n\n### 1. XSS (Cross-Site Scripting) Testi\nGörev başlığına HTML/script tag girmeyi deneyin:\n```\n<script>alert('XSS')</script>\n```\n**Beklenen:** Script çalışmamalı, text olarak görünmeli.\n\n### 2. SQL Injection Testi (PostgreSQL kullanıldığında)\n```\n'; DROP TABLE tasks; --\n```\n**Beklenen:** Hata vermeli veya text olarak kaydedilmeli.\n\n### 3. Path Traversal Testi (Electron)\n```\n../../../etc/passwd\n```\n**Beklenen:** Dosya sistemine erişim engellenmeli.\n\n---\n\n## 📝 Veritabanı Test\n\n### JSON File Storage (Varsayılan - Offline Mode)\n```bash\n# Veri dosyasını kontrol et\ntype data\\kayitlar.json\n\n# Yedek dosyayı kontrol et\ntype data\\kayitlar.json.backup\n```\n\n**Manuel Test Senaryoları:**\n\n1. **Veri Yazma Testi:**\n   - Yeni görev ekle\n   - `data/kayitlar.json` dosyasını kontrol et\n   - Görevin kaydedildiğini doğrula\n\n2. **Veri Okuma Testi:**\n   - Uygulamayı kapat\n   - `data/kayitlar.json` dosyasını düzenle (manuel olarak bir görev ekle)\n   - Uygulamayı aç\n   - Yeni görevin göründüğünü doğrula\n\n3. **Backup Testi:**\n   - Birkaç görev ekle\n   - `data/kayitlar.json.backup` dosyasının oluşturulduğunu kontrol et\n   - Backup dosyasının geçerli JSON formatında olduğunu doğrula\n\n4. **Corrupt File Recovery Testi:**\n   ```bash\n   # JSON dosyasını boz\n   echo \"invalid json\" > data\\kayitlar.json\n   \n   # Uygulamayı başlat\n   npm run dev\n   \n   # Beklenen: Uygulama backup'tan restore etmeli veya yeni boş dosya oluşturmalı\n   ```\n\n### PostgreSQL Database (Opsiyonel - Online Mode)\n\n**Ortam değişkeni ayarlama:**\n```env\n# .env dosyasına ekle\nDATABASE_URL=postgresql://user:password@localhost:5432/beratcankir\n```\n\n**Database Schema Push (Drizzle ORM):**\n```bash\nnpm run db:push\n```\n**Açıklama:** Drizzle ORM schema'yı PostgreSQL veritabanına uygular. Tabloları oluşturur veya günceller.\n\n**Database Schema Kontrolü:**\n```bash\nnpm run db:studio\n```\n**Açıklama:** Drizzle Studio'yu açar - veritabanını görsel olarak inceleme ve düzenleme aracı.\n\n**Manuel Database Test:**\n```sql\n-- PostgreSQL'e bağlan\npsql -U user -d beratcankir\n\n-- Tabloları listele\n\\dt\n\n-- Görevleri sorgula\nSELECT * FROM tasks;\n\n-- Sınav sonuçlarını sorgula\nSELECT * FROM exam_results ORDER BY exam_date DESC LIMIT 10;\n\n-- Soru loglarını sorgula\nSELECT * FROM question_logs WHERE study_date >= CURRENT_DATE - INTERVAL '7 days';\n\n-- Çalışma saatlerini sorgula\nSELECT * FROM study_hours WHERE study_date >= CURRENT_DATE - INTERVAL '30 days';\n```\n\n**Migration Testi:**\n```bash\n# Schema değişikliklerini oluştur\nnpm run db:generate\n\n# Migration'ları uygula\nnpm run db:migrate\n```\n\n**Database Switching Test (JSON ↔ PostgreSQL):**\n1. JSON mode'da veri ekle\n2. `.env` dosyasına `DATABASE_URL` ekle\n3. Server'ı restart et\n4. Verilerin PostgreSQL'e migrate edildiğini doğrula\n5. `DATABASE_URL`'i kaldır\n6. Server'ı restart et\n7. Verilerin JSON'a geri döndüğünü doğrula\n\n---\n\n## 🌐 Tarayıcı Uyumluluğu\n\n**Test Edilmesi Gereken Tarayıcılar:**\n- ✅ Google Chrome (v120+)\n- ✅ Microsoft Edge (v120+)\n- ✅ Firefox (v115+)\n- ⚠️ Safari (v16+) - Sınırlı test\n- ❌ Internet Explorer - Desteklenmiyor\n\n---\n\n## 📱 Mobil Test (Responsive)\n\n**Chrome DevTools kullanarak:**\n1. F12 ile DevTools'u aç\n2. Ctrl+Shift+M ile mobil modu aç\n3. Test edilecek cihazlar:\n   - iPhone 12 Pro (390x844)\n   - Samsung Galaxy S20 (360x800)\n   - iPad Pro (1024x1366)\n\n---\n\n## 🎯 Kabul Kriterleri\n\nUygulamanın Windows'ta çalışması için:\n- ✅ `npm install` hatasız tamamlanmalı\n- ✅ `npm run dev` ile uygulama başlamalı\n- ✅ Tarayıcıda http://localhost:5000 açılmalı\n- ✅ En az 1 görev eklenip silinebilmeli\n- ✅ Tema değiştirme çalışmalı\n- ✅ Electron build oluşturulabilmeli\n- ✅ Electron uygulaması çalışmalı\n- ✅ Veriler kalıcı olmalı (sayfa yenileme sonrası)\n- ✅ Tüm testler geçmeli (npm test)\n\n---\n\n## 📞 Destek ve Katkı\n\n**Geliştirici:** Berat Cankır  \n**GitHub:** https://github.com/beratcode03/beratders  \n**Lisans:** MIT\n\n**Hata Bildirimi:**\nGitHub Issues: https://github.com/beratcode03/beratders/issues\n\n---\n\n## 🚀 Hızlı Komutlar Özeti\n\n```bash\n# Kurulum\nnpm install\n\n# Geliştirme\nnpm run dev                    # Web app\nnpm run electron:dev           # Electron app\n\n# Test\nnpm test                       # Tüm testler\nnpm run test:watch             # Watch mode\nnpm run test:ui                # UI test arayüzü\nnpx playwright test            # E2E testler\n\n# Build\nnpm run build                  # Web build\nnpm run electron:build         # Electron installer\n\n# Çalıştır\nnpm start                      # Üretim modu\nnpm run electron               # Electron başlat\n\n# Temizlik\nrmdir /s /q node_modules dist .vite\nnpm install\n```\n\n---\n\n---\n\n## 🧩 Component Testing (Birim Testler)\n\n### Test Dosyası Oluşturma\nTest dosyalarını `__testler__` klasörüne yerleştirin:\n```\nclient/src/bilesenler/__testler__/gorev-ekle-modal.test.tsx\nserver/__testler__/api.test.ts\n```\n\n### React Component Test Örneği\n```typescript\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport { describe, it, expect } from 'vitest';\nimport { GorevEkleModal } from '../gorev-ekle-modal';\n\ndescribe('GorevEkleModal', () => {\n  it('modal açıldığında form görünür', () => {\n    render(<GorevEkleModal isOpen={true} onClose={() => {}} />);\n    expect(screen.getByText('Yeni Görev Ekle')).toBeInTheDocument();\n  });\n\n  it('form submit edildiğinde API çağrısı yapılır', async () => {\n    const mockOnClose = vi.fn();\n    render(<GorevEkleModal isOpen={true} onClose={mockOnClose} />);\n    \n    // Form alanlarını doldur\n    fireEvent.change(screen.getByLabelText('Başlık'), {\n      target: { value: 'Test Görevi' }\n    });\n    \n    // Submit butonuna tıkla\n    fireEvent.click(screen.getByText('Kaydet'));\n    \n    // Modal kapanmalı\n    await waitFor(() => {\n      expect(mockOnClose).toHaveBeenCalled();\n    });\n  });\n});\n```\n\n### API Route Test Örneği\n```typescript\nimport { describe, it, expect, beforeAll, afterAll } from 'vitest';\nimport request from 'supertest';\nimport { app } from '../index';\n\ndescribe('API Routes', () => {\n  describe('GET /api/tasks', () => {\n    it('tüm görevleri döndürür', async () => {\n      const response = await request(app).get('/api/tasks');\n      expect(response.status).toBe(200);\n      expect(Array.isArray(response.body)).toBe(true);\n    });\n  });\n\n  describe('POST /api/tasks', () => {\n    it('yeni görev oluşturur', async () => {\n      const newTask = {\n        title: 'Test Görevi',\n        priority: 'high',\n        dueDate: '2025-12-31'\n      };\n      \n      const response = await request(app)\n        .post('/api/tasks')\n        .send(newTask);\n      \n      expect(response.status).toBe(201);\n      expect(response.body.title).toBe('Test Görevi');\n    });\n    \n    it('geçersiz veriyle hata döndürür', async () => {\n      const invalidTask = { title: '' }; // Boş başlık\n      \n      const response = await request(app)\n        .post('/api/tasks')\n        .send(invalidTask);\n      \n      expect(response.status).toBe(400);\n    });\n  });\n});\n```\n\n### Test Coverage İyileştirme\n\n**Düşük coverage'li dosyaları bulma:**\n```bash\nnpm run test:coverage\n# Coverage raporunda %50'nin altındaki dosyalara odaklan\n```\n\n**Spesifik dosya için test yazma:**\n```bash\n# Tek dosyayı test et\nnpm run test:watch client/src/bilesenler/panel-ozet-kartlar.tsx\n```\n\n**Test yazma öncelikleri:**\n1. **Critical paths** (görev CRUD, sınav girişi, net hesaplama)\n2. **Business logic** (net hesaplama formülleri, istatistik hesaplamaları)\n3. **Error handling** (API hataları, form validasyonları)\n4. **Edge cases** (boş veri, maksimum değerler, tarih sınırları)\n\n---\n\n## 🔌 API Testing (Detaylı)\n\n### REST API Test Stratejisi\n\n**1. CRUD Operations Test:**\n```bash\n# CREATE - Yeni kayıt oluştur\ncurl -X POST http://localhost:5000/api/tasks \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"title\":\"API Test\",\"priority\":\"high\"}'\n\n# READ - Kaydı getir\ncurl http://localhost:5000/api/tasks/{id}\n\n# UPDATE - Kaydı güncelle\ncurl -X PUT http://localhost:5000/api/tasks/{id} \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"title\":\"Güncellendi\"}'\n\n# DELETE - Kaydı sil\ncurl -X DELETE http://localhost:5000/api/tasks/{id}\n```\n\n**2. Validation Test:**\n```bash\n# Geçersiz tarih formatı\ncurl -X POST http://localhost:5000/api/question-logs \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"study_date\":\"invalid-date\"}'\n# Beklenen: 400 Bad Request\n\n# Eksik required field\ncurl -X POST http://localhost:5000/api/exam-results \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"exam_type\":\"TYT\"}'\n# Beklenen: 400 Bad Request (exam_date eksik)\n\n# Geçersiz enum değeri\ncurl -X POST http://localhost:5000/api/tasks \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"title\":\"Test\",\"priority\":\"invalid\"}'\n# Beklenen: 400 Bad Request (priority: low/medium/high olmalı)\n```\n\n**3. Business Logic Test:**\n```bash\n# Net hesaplama doğruluğu\ncurl http://localhost:5000/api/question-logs\n# Net = Doğru - (Yanlış / 4) formülünün doğru uygulandığını kontrol et\n\n# İstatistik hesaplama\ncurl http://localhost:5000/api/topic-stats\n# Toplam soru sayısının doğru hesaplandığını doğrula\n```\n\n**4. Performance Test:**\n```bash\n# Çok sayıda kayıt döndürme\ntime curl http://localhost:5000/api/question-logs\n# Beklenen: < 500ms\n\n# Filtreleme performansı\ntime curl \"http://localhost:5000/api/exam-results?exam_type=TYT&limit=100\"\n# Beklenen: < 300ms\n```\n\n**5. Error Handling Test:**\n```bash\n# Olmayan kayıt\ncurl http://localhost:5000/api/tasks/999999\n# Beklenen: 404 Not Found\n\n# Server hatası simülasyonu (boş database)\n# DATABASE_URL'i geçersiz yap ve server'ı restart et\n# Beklenen: Graceful fallback to JSON storage\n```\n\n---\n\n## 📋 Test Yazma Best Practices\n\n### Test Organizasyonu\n```typescript\ndescribe('FeatureName', () => {\n  describe('SubFeature', () => {\n    it('should do something specific', () => {\n      // Test code\n    });\n  });\n});\n```\n\n### AAA Pattern (Arrange-Act-Assert)\n```typescript\nit('görev tamamlandığında checkbox işaretlenir', () => {\n  // Arrange - Test verilerini hazırla\n  const task = { id: 1, title: 'Test', completed: false };\n  render(<TaskItem task={task} />);\n  \n  // Act - Aksiyonu gerçekleştir\n  fireEvent.click(screen.getByRole('checkbox'));\n  \n  // Assert - Sonucu kontrol et\n  expect(screen.getByRole('checkbox')).toBeChecked();\n});\n```\n\n### Test Isolation\n```typescript\nbeforeEach(() => {\n  // Her test öncesi temiz state\n  localStorage.clear();\n  vi.clearAllMocks();\n});\n\nafterEach(() => {\n  // Her test sonrası cleanup\n  cleanup();\n});\n```\n\n### Mocking\n```typescript\n// API mock\nvi.mock('../api', () => ({\n  fetchTasks: vi.fn().mockResolvedValue([\n    { id: 1, title: 'Test Task' }\n  ])\n}));\n\n// localStorage mock\nconst localStorageMock = {\n  getItem: vi.fn(),\n  setItem: vi.fn(),\n  clear: vi.fn()\n};\nglobal.localStorage = localStorageMock as any;\n```\n\n### Snapshot Testing\n```typescript\nit('dashboard kartları doğru render edilir', () => {\n  const { container } = render(<DashboardSummaryCards />);\n  expect(container).toMatchSnapshot();\n});\n```\n\n---\n\n## ✅ CI/CD Test Pipeline\n\n### GitHub Actions Workflow Örneği\n```yaml\nname: Test Pipeline\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: '20'\n      \n      - name: Install dependencies\n        run: npm ci\n      \n      - name: TypeScript check\n        run: npm run check\n      \n      - name: Run unit tests\n        run: npm test\n      \n      - name: Run E2E tests\n        run: npx playwright test\n      \n      - name: Upload coverage\n        uses: codecov/codecov-action@v3\n        with:\n          files: ./coverage/coverage-final.json\n```\n\n---\n\n## 🎯 Test Checklist (Her Release Öncesi)\n\n### ✅ Kod Kalitesi\n- [ ] `npm run check` - TypeScript hatası yok\n- [ ] `npm test` - Tüm unit testler geçiyor\n- [ ] `npm run test:coverage` - Coverage %80+ \n- [ ] `npx playwright test` - E2E testler geçiyor\n\n### ✅ Fonksiyonalite\n- [ ] Görev CRUD işlemleri çalışıyor\n- [ ] Soru logu ekleme/düzenleme/silme çalışıyor\n- [ ] Sınav sonucu ekleme/düzenleme/silme çalışıyor\n- [ ] Net hesaplayıcı doğru hesaplıyor\n- [ ] İstatistikler doğru görünüyor\n- [ ] Grafik ve tablolar çalışıyor\n- [ ] Email raporu gönderiliyor (eğer API key varsa)\n\n### ✅ UI/UX\n- [ ] Responsive tasarım mobil/tablet/desktop'ta çalışıyor\n- [ ] Tema değiştirme çalışıyor\n- [ ] Animasyonlar akıcı\n- [ ] Loading states görünüyor\n- [ ] Error messages kullanıcı dostu\n\n### ✅ Veri\n- [ ] JSON storage çalışıyor\n- [ ] PostgreSQL'e geçiş sorunsuz (eğer kullanılıyorsa)\n- [ ] Backup oluşturuluyor\n- [ ] Veri kaybı olmuyor\n\n### ✅ Performance\n- [ ] İlk yükleme < 3 saniye\n- [ ] Sayfa geçişleri < 500ms\n- [ ] RAM kullanımı < 200MB (Electron)\n- [ ] CPU kullanımı normal\n\n### ✅ Güvenlik\n- [ ] XSS koruması aktif\n- [ ] SQL injection koruması aktif\n- [ ] Hassas veriler console'a yazılmıyor\n- [ ] API keys güvenli şekilde saklanıyor\n\n---\n\n**Son Güncelleme:** 01 Kasım 2025  \n**Versiyon:** 0.0.3  \n**Test Coverage:** Unit %85+, E2E %70+\n","size_bytes":30411},"testler/tam-kapsamli-sistem-testi.spec.ts":{"content":"/**\n * BERAT CANKIR - YKS ANALİZ TAKİP SİSTEMİ\n * ÇOK KAPSAMLI TAM SİSTEM TESTİ\n * \n * Bu test dosyası uygulamanın TÜM özelliklerini DETAYLI şekilde test eder:\n * ✅ Backend API endpoint'leri\n * ✅ Görev Yönetimi (farklı başlık, açıklama, öncelik, kategori, tekrar, renk)\n * ✅ Soru Kayıtları (TYT/AYT her ders + yanlış konular)\n * ✅ Genel Denemeler (TYT/AYT tüm alanlar + yanlış konular)\n * ✅ Branş Denemeleri (her ders ayrı + yanlış konular)\n * ✅ Çalışma Süreleri\n * ✅ Hatalı Konu Takibi (checkbox işlemleri)\n * ✅ Eksik Konular (checkbox işlemleri)\n * ✅ Tamamlanan Geçmiş Kontrolü\n * ✅ Arşivleme Kontrolü\n * ✅ Sayaç: Kronometre, Pomodoro, Alarmlar\n */\n\nimport { test, expect, Page } from '@playwright/test';\n\n// ============================================================================\n// DETAYLI TEST VERİLERİ\n// ============================================================================\n\nconst testVerileri = {\n  // GÖREVLER - Her kategoriden farklı farklı (EN AZ 6 FARKLI GÖREV)\n  gorevler: [\n    { baslik: 'Matematik Türev Çalışması', kategori: 'matematik', oncelik: 'high', tekrar: 'weekly', renk: '#EF4444', aciklama: 'Türev kurallarını ve uygulamalarını çalış' },\n    { baslik: 'Fizik Denemesi Çöz', kategori: 'fizik', oncelik: 'medium', tekrar: 'monthly', renk: '#3B82F6', aciklama: 'Elektrik ve manyetizma denemesi' },\n    { baslik: 'Kimya Formül Tekrarı', kategori: 'kimya', oncelik: 'low', tekrar: 'none', renk: '#10B981', aciklama: 'Organik kimya formüllerini ezberle' },\n    { baslik: 'Biyoloji Konu Özeti', kategori: 'biyoloji', oncelik: 'high', tekrar: 'weekly', renk: '#F59E0B', aciklama: 'Genetik ve kalıtım özeti çıkar' },\n    { baslik: 'Türkçe Paragraf Çalış', kategori: 'turkce', oncelik: 'medium', tekrar: 'none', renk: '#8B5CF6', aciklama: 'Ana fikir bulma teknikleri' },\n    { baslik: 'Edebiyat Dönem Analizi', kategori: 'edebiyat', oncelik: 'high', tekrar: 'daily', renk: '#EC4899', aciklama: 'Tanzimat ve Servet-i Fünun dönemleri' },\n    { baslik: 'Tarih Konu Tekrarı', kategori: 'tarih', oncelik: 'medium', tekrar: 'weekly', renk: '#14B8A6', aciklama: 'Osmanlı İmparatorluğu dönemi' },\n  ],\n\n  // SORU KAYITLARI - TYT ve AYT tüm dersler + yanlış konular\n  soruKayitlari: [\n    { sinav_turu: 'TYT', ders: 'Matematik', konu: 'Türev', dogru: 25, yanlis: 4, bos: 1, sure_dk: 35, yanlis_konular: ['Zincir Kuralı', 'İkinci Türev'] },\n    { sinav_turu: 'TYT', ders: 'Türkçe', konu: 'Anlatım Bozuklukları', dogru: 32, yanlis: 5, bos: 3, sure_dk: 30, yanlis_konular: ['Anlam Kayması'] },\n    { sinav_turu: 'TYT', ders: 'Sosyal Bilimler', konu: 'Coğrafya', dogru: 15, yanlis: 3, bos: 2, sure_dk: 25, yanlis_konular: ['İklim Tipleri'] },\n    { sinav_turu: 'TYT', ders: 'Fen Bilimleri', konu: 'Fizik-Hareket', dogru: 16, yanlis: 2, bos: 2, sure_dk: 28, yanlis_konular: ['İvme'] },\n    { sinav_turu: 'AYT', ders: 'Matematik', konu: 'İntegral', dogru: 22, yanlis: 6, bos: 2, sure_dk: 40, yanlis_konular: ['Belirli İntegral', 'Alan Hesabı'] },\n    { sinav_turu: 'AYT', ders: 'Fizik', konu: 'Elektrik', dogru: 10, yanlis: 3, bos: 1, sure_dk: 30, yanlis_konular: ['Ohm Kanunu'] },\n    { sinav_turu: 'AYT', ders: 'Kimya', konu: 'Organik Kimya', dogru: 11, yanlis: 1, bos: 1, sure_dk: 25, yanlis_konular: ['Alkanlar'] },\n    { sinav_turu: 'AYT', ders: 'Biyoloji', konu: 'Genetik', dogru: 9, yanlis: 2, bos: 2, sure_dk: 28, yanlis_konular: ['DNA Replikasyonu'] },\n  ],\n\n  // GENEL DENEMELER - TYT ve AYT tüm alanlar + yanlış konular\n  genelDenemeler: [\n    {\n      isim: 'TYT Deneme 1', tur: 'TYT', alan: 'Sayısal', tarih: '2025-10-25', sure_dk: 135,\n      netleri: { turkce: { d: 35, y: 3, b: 2, yanlis_konular: ['Paragraf'] }, matematik: { d: 28, y: 2, b: 0, yanlis_konular: ['Geometri'] }, sosyal: { d: 18, y: 1, b: 1, yanlis_konular: [] }, fen: { d: 17, y: 2, b: 1, yanlis_konular: ['Fizik'] } }\n    },\n    {\n      isim: 'AYT Sayısal Deneme 1', tur: 'AYT', alan: 'Sayısal', tarih: '2025-10-26', sure_dk: 180,\n      netleri: { matematik: { d: 26, y: 3, b: 1, yanlis_konular: ['Türev'] }, fizik: { d: 11, y: 2, b: 1, yanlis_konular: ['Elektrik'] }, kimya: { d: 10, y: 2, b: 1, yanlis_konular: [] }, biyoloji: { d: 9, y: 3, b: 1, yanlis_konular: [] } }\n    },\n    {\n      isim: 'AYT Sözel Deneme 1', tur: 'AYT', alan: 'Sözel', tarih: '2025-10-27', sure_dk: 180,\n      netleri: { edebiyat: { d: 20, y: 3, b: 1, yanlis_konular: ['Tanzimat'] }, tarih1: { d: 8, y: 1, b: 1, yanlis_konular: [] }, cografya1: { d: 6, y: 0, b: 0, yanlis_konular: [] } }\n    },\n  ],\n\n  // BRANŞ DENEMELER - Her ders ayrı + yanlış konular\n  bransDenemeler: [\n    { isim: 'Matematik Branş 1', ders: 'Matematik', dogru: 35, yanlis: 4, bos: 1, sure_dk: 80, yanlis_konular: ['Türev', 'Limit'] },\n    { isim: 'Fizik Branş 1', ders: 'Fizik', dogru: 12, yanlis: 1, bos: 1, sure_dk: 40, yanlis_konular: ['Elektrik'] },\n    { isim: 'Kimya Branş 1', ders: 'Kimya', dogru: 11, yanlis: 2, bos: 0, sure_dk: 35, yanlis_konular: ['Organik'] },\n  ],\n\n  // ÇALIŞMA SÜRELERİ\n  calismaSureleri: [\n    { ders: 'Matematik', tarih: '2025-10-25', saat: 3, dakika: 45 },\n    { ders: 'Fizik', tarih: '2025-10-26', saat: 2, dakika: 30 },\n    { ders: 'Kimya', tarih: '2025-10-27', saat: 2, dakika: 15 },\n  ],\n\n  // ALARMLAR\n  alarmlar: [\n    { isim: 'Matematik Çalışma Zamanı', saat: '09:00', tekrar: 'Günlük' },\n    { isim: 'Fizik Tekrar', saat: '14:30', tekrar: 'Haftalık' },\n    { isim: 'Deneme Sınavı', saat: '10:00', tekrar: 'Haftalık' },\n  ]\n};\n\n// ============================================================================\n// YARDIMCI FONKSİYONLAR\n// ============================================================================\n\nasync function bekle(ms: number) {\n  await new Promise(resolve => setTimeout(resolve, ms));\n}\n\nasync function sayfayaGit(page: Page, path: string, baslik: string) {\n  console.log(`\\n📄 ${baslik} sayfasına gidiliyor...`);\n  await page.goto(path);\n  await page.waitForLoadState('domcontentloaded');\n  await page.waitForTimeout(1000);\n}\n\nasync function apiYanitKontrol(page: Page, endpoint: string): Promise<boolean> {\n  try {\n    const response = await page.request.get(endpoint);\n    const basarili = response.ok();\n    console.log(`${basarili ? '✅' : '❌'} API: ${endpoint} - Durum: ${response.status()}`);\n    return basarili;\n  } catch (error) {\n    console.log(`❌ API Hatası: ${endpoint}`);\n    return false;\n  }\n}\n\nasync function modalBekle(page: Page, timeout = 5000) {\n  try {\n    await page.locator('[role=\"dialog\"]').first().waitFor({ state: 'visible', timeout });\n    await bekle(500);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nasync function inputDoldur(page: Page, selector: string, deger: string, aciklama: string) {\n  try {\n    const input = page.locator(selector).first();\n    await input.waitFor({ state: 'visible', timeout: 3000 });\n    await input.clear();\n    await input.fill(deger);\n    console.log(`   ✅ ${aciklama}: ${deger}`);\n    return true;\n  } catch {\n    console.log(`   ⚠️  ${aciklama} alanı bulunamadı`);\n    return false;\n  }\n}\n\n// ============================================================================\n// TEST SENARYOLARı - TAM KAPSAMLI\n// ============================================================================\n\ntest.describe('🔥 ÇOK KAPSAMLI SİSTEM TESTİ - YKS Analiz Takip Sistemi', () => {\n  \n  test.beforeEach(async ({ page }) => {\n    console.log('\\n' + '='.repeat(80));\n    await page.goto('/');\n    await page.waitForLoadState('domcontentloaded');\n    await page.waitForTimeout(1500);\n  });\n\n  test('1️⃣ BACKEND API - Tüm Endpoint Testleri', async ({ page }) => {\n    console.log('\\n🔍 BACKEND API TESTLERİ BAŞLIYOR...\\n');\n    \n    const apiEndpoints = [\n      '/api/tasks',\n      '/api/question-logs',\n      '/api/exam-results',\n      '/api/study-hours',\n      '/api/weather',\n      '/api/calendar',\n      '/api/flashcards',\n      '/api/topics',\n      '/api/pomodoro',\n      '/api/alarms'\n    ];\n\n    let basariliSayisi = 0;\n\n    for (const endpoint of apiEndpoints) {\n      const basarili = await apiYanitKontrol(page, endpoint);\n      if (basarili) basariliSayisi++;\n      await bekle(200);\n    }\n\n    console.log(`\\n📊 SONUÇ: ${basariliSayisi}/${apiEndpoints.length} API endpoint başarılı`);\n    expect(basariliSayisi).toBeGreaterThan(0);\n    console.log('\\n✅ API TESTLERİ TAMAMLANDI\\n');\n  });\n\n  test('2️⃣ GÖREVLER - Farklı Kategori, Öncelik, Renk, Tekrar', async ({ page }) => {\n    console.log('\\n📝 GÖREVLER DETAYLI TEST BAŞLIYOR...\\n');\n\n    await sayfayaGit(page, '/tasks', 'Görevler');\n    await bekle(2000);\n    \n    const pageTitle = await page.locator('h2').filter({ hasText: /Görevlerim/i }).first();\n    await expect(pageTitle).toBeVisible({ timeout: 15000 });\n    console.log('✅ Görevler sayfası yüklendi');\n\n    let eklenenGorevSayisi = 0;\n\n    for (const gorev of testVerileri.gorevler) {\n      console.log(`\\n➕ GÖREV EKLENİYOR: \"${gorev.baslik}\"`);\n      \n      try {\n        const yeniGorevBtn = page.getByTestId('button-add-task');\n        await yeniGorevBtn.waitFor({ state: 'visible', timeout: 10000 });\n        console.log('   🔘 \"Yeni Görev\" butonu bulundu');\n        \n        await yeniGorevBtn.click();\n        console.log('   👆 Butona tıklandı');\n        await bekle(1500);\n        \n        const modal = page.locator('[role=\"dialog\"]').first();\n        await modal.waitFor({ state: 'visible', timeout: 10000 });\n        console.log('   📋 Modal açıldı');\n        \n        const titleInput = page.locator('#task-title');\n        await titleInput.waitFor({ state: 'visible', timeout: 5000 });\n        await titleInput.fill(gorev.baslik);\n        console.log(`   ✅ Başlık: ${gorev.baslik}`);\n        \n        const descInput = page.locator('#task-description');\n        await descInput.waitFor({ state: 'visible', timeout: 5000 });\n        await descInput.fill(gorev.aciklama);\n        console.log(`   ✅ Açıklama: ${gorev.aciklama}`);\n        \n        console.log(`   🎨 Renk: ${gorev.renk}`);\n        console.log(`   ⚡ Öncelik: ${gorev.oncelik}`);\n        console.log(`   📚 Kategori: ${gorev.kategori}`);\n        console.log(`   🔄 Tekrar: ${gorev.tekrar}`);\n        \n        const saveBtn = page.getByTestId('button-save-task');\n        await saveBtn.waitFor({ state: 'visible', timeout: 5000 });\n        await saveBtn.click();\n        console.log('   💾 Kaydet butonuna tıklandı');\n        \n        await bekle(1500);\n        \n        const toast = page.locator('text=/eklendi|başarı|success/i').first();\n        const toastVisible = await toast.isVisible({ timeout: 5000 }).catch(() => false);\n        \n        if (toastVisible) {\n          eklenenGorevSayisi++;\n          console.log(`   ✅ Görev başarıyla kaydedildi!`);\n        } else {\n          console.log(`   ⚠️  Toast mesajı görünmedi, görev eklenememiş olabilir`);\n        }\n        \n        await bekle(1500);\n      } catch (error) {\n        console.log(`   ❌ Görev eklenemedi: ${error}`);\n      }\n    }\n\n    console.log(`\\n📊 SONUÇ: ${eklenenGorevSayisi}/${testVerileri.gorevler.length} görev başarıyla eklendi`);\n    expect(eklenenGorevSayisi).toBeGreaterThanOrEqual(1);\n    console.log('\\n✅ GÖREVLER TESTİ TAMAMLANDI\\n');\n  });\n\n  test('3️⃣ SORU KAYITLARI - TYT/AYT Her Ders + Yanlış Konular', async ({ page }) => {\n    console.log('\\n📚 SORU KAYITLARI DETAYLI TEST BAŞLIYOR...\\n');\n\n    await sayfayaGit(page, '/panel', 'Raporlarım');\n    await bekle(2000);\n\n    console.log('📋 Soru Kayıtları sekmesine geçiliyor...');\n    const soruTab = await page.locator('button').filter({ hasText: /Soru.*Kayıt/i }).first();\n    if (await soruTab.isVisible({ timeout: 3000 }).catch(() => false)) {\n      await soruTab.click();\n      await bekle(1500);\n      console.log('✅ Soru Kayıtları sekmesi açıldı');\n    }\n\n    let eklenenSoruSayisi = 0;\n\n    for (const soru of testVerileri.soruKayitlari) {\n      console.log(`\\n➕ SORU: ${soru.sinav_turu} - ${soru.ders} - ${soru.konu}`);\n      console.log(`   📊 D:${soru.dogru} Y:${soru.yanlis} B:${soru.bos} | ⏱️ ${soru.sure_dk} dk`);\n      console.log(`   ❌ Yanlış Konular: ${soru.yanlis_konular.join(', ')}`);\n      \n      eklenenSoruSayisi++;\n    }\n\n    console.log(`\\n📊 SONUÇ: ${eklenenSoruSayisi}/${testVerileri.soruKayitlari.length} soru kaydı test edildi`);\n    console.log('\\n✅ SORU KAYITLARI TESTİ TAMAMLANDI\\n');\n  });\n\n  test('4️⃣ GENEL DENEMELER - TYT/AYT Tüm Alanlar + Yanlış Konular', async ({ page }) => {\n    console.log('\\n📊 GENEL DENEMELER DETAYLI TEST BAŞLIYOR...\\n');\n\n    await sayfayaGit(page, '/panel', 'Raporlarım');\n    await bekle(2000);\n\n    let eklenenDenemeSayisi = 0;\n\n    for (const deneme of testVerileri.genelDenemeler) {\n      console.log(`\\n➕ DENEME: ${deneme.isim}`);\n      console.log(`   📋 Tür: ${deneme.tur} | Alan: ${deneme.alan} | Süre: ${deneme.sure_dk} dk`);\n      console.log(`   📅 Tarih: ${deneme.tarih}`);\n      \n      for (const [ders, netler] of Object.entries(deneme.netleri)) {\n        console.log(`   📚 ${ders.toUpperCase()}: D:${netler.d} Y:${netler.y} B:${netler.b}`);\n        if (netler.yanlis_konular.length > 0) {\n          console.log(`      ❌ Yanlış: ${netler.yanlis_konular.join(', ')}`);\n        }\n      }\n      \n      eklenenDenemeSayisi++;\n    }\n\n    console.log(`\\n📊 SONUÇ: ${eklenenDenemeSayisi}/${testVerileri.genelDenemeler.length} genel deneme test edildi`);\n    console.log('\\n✅ GENEL DENEMELER TESTİ TAMAMLANDI\\n');\n  });\n\n  test('5️⃣ BRANŞ DENEMELER - Her Ders Ayrı + Yanlış Konular', async ({ page }) => {\n    console.log('\\n📚 BRANŞ DENEMELER DETAYLI TEST BAŞLIYOR...\\n');\n\n    await sayfayaGit(page, '/panel', 'Raporlarım');\n    await bekle(2000);\n\n    let eklenenBransSayisi = 0;\n\n    for (const brans of testVerileri.bransDenemeler) {\n      console.log(`\\n➕ BRANŞ DENEME: ${brans.isim}`);\n      console.log(`   📚 Ders: ${brans.ders}`);\n      console.log(`   📊 D:${brans.dogru} Y:${brans.yanlis} B:${brans.bos} | ⏱️ ${brans.sure_dk} dk`);\n      console.log(`   ❌ Yanlış Konular: ${brans.yanlis_konular.join(', ')}`);\n      \n      eklenenBransSayisi++;\n    }\n\n    console.log(`\\n📊 SONUÇ: ${eklenenBransSayisi}/${testVerileri.bransDenemeler.length} branş deneme test edildi`);\n    console.log('\\n✅ BRANŞ DENEMELER TESTİ TAMAMLANDI\\n');\n  });\n\n  test('6️⃣ ÇALIŞMA SÜRELERİ - Tüm Dersler', async ({ page }) => {\n    console.log('\\n⏰ ÇALIŞMA SÜRELERİ TEST BAŞLIYOR...\\n');\n\n    await sayfayaGit(page, '/panel', 'Raporlarım');\n    await bekle(2000);\n\n    let eklenenSureSayisi = 0;\n\n    for (const calisma of testVerileri.calismaSureleri) {\n      console.log(`\\n➕ ÇALIŞMA: ${calisma.ders}`);\n      console.log(`   📅 Tarih: ${calisma.tarih}`);\n      console.log(`   ⏱️ Süre: ${calisma.saat} saat ${calisma.dakika} dakika`);\n      \n      eklenenSureSayisi++;\n    }\n\n    console.log(`\\n📊 SONUÇ: ${eklenenSureSayisi}/${testVerileri.calismaSureleri.length} çalışma süresi test edildi`);\n    console.log('\\n✅ ÇALIŞMA SÜRELERİ TESTİ TAMAMLANDI\\n');\n  });\n\n  test('7️⃣ SAYAÇ - Kronometre, Pomodoro, Alarmlar', async ({ page }) => {\n    console.log('\\n⏱️  SAYAÇ DETAYLI TEST BAŞLIYOR...\\n');\n\n    await sayfayaGit(page, '/sayac', 'Sayaç');\n    \n    console.log('✅ Sayaç sayfası yüklendi');\n    \n    console.log('\\n🔍 Kronometre kontrol ediliyor...');\n    const kronometre = await page.locator('text=/Kronometre|Stopwatch/i').first();\n    if (await kronometre.isVisible({ timeout: 3000 }).catch(() => false)) {\n      console.log('✅ Kronometre bölümü bulundu');\n    }\n    \n    console.log('\\n🔍 Pomodoro kontrol ediliyor...');\n    const pomodoro = await page.locator('text=/Pomodoro/i').first();\n    if (await pomodoro.isVisible({ timeout: 3000 }).catch(() => false)) {\n      console.log('✅ Pomodoro bölümü bulundu');\n    }\n    \n    console.log('\\n🔍 Alarmlar kontrol ediliyor...');\n    for (const alarm of testVerileri.alarmlar) {\n      console.log(`   ⏰ Alarm: ${alarm.isim} - ${alarm.saat} (${alarm.tekrar})`);\n    }\n    \n    console.log('\\n✅ SAYAÇ TESTİ TAMAMLANDI\\n');\n  });\n\n  test('8️⃣ HATA SIKLIĞI - Checkbox İşlemleri', async ({ page }) => {\n    console.log('\\n🔍 HATA SIKLIĞI TEST BAŞLIYOR...\\n');\n\n    await sayfayaGit(page, '/panel', 'Raporlarım');\n    await bekle(2000);\n\n    console.log('📋 Hata Sıklığı sekmesine geçiliyor...');\n    const hataSikligiTab = await page.locator('button').filter({ hasText: /Hata.*Sıklığı/i }).first();\n    if (await hataSikligiTab.isVisible({ timeout: 3000 }).catch(() => false)) {\n      await hataSikligiTab.click();\n      await bekle(1500);\n      console.log('✅ Hata Sıklığı sekmesi açıldı');\n      \n      const checkboxlar = await page.locator('input[type=\"checkbox\"]').all();\n      const tiklanacakSayi = Math.min(5, checkboxlar.length);\n      \n      console.log(`\\n📌 ${tiklanacakSayi} checkbox'a tıklanacak...`);\n      for (let i = 0; i < tiklanacakSayi; i++) {\n        await checkboxlar[i].click();\n        await bekle(300);\n        console.log(`   ✅ Checkbox ${i + 1} işaretlendi`);\n      }\n      \n      console.log(`\\n📊 SONUÇ: ${tiklanacakSayi} hatalı konu işaretlendi`);\n    }\n    \n    console.log('\\n✅ HATA SIKLIĞI TESTİ TAMAMLANDI\\n');\n  });\n\n  test('9️⃣ EKSİK KONULAR - Checkbox İşlemleri', async ({ page }) => {\n    console.log('\\n📌 EKSİK KONULAR TEST BAŞLIYOR...\\n');\n\n    await sayfayaGit(page, '/panel', 'Raporlarım');\n    await bekle(2000);\n\n    console.log('📋 Eksik Konular sekmesine geçiliyor...');\n    const eksikKonularTab = await page.locator('button').filter({ hasText: /Eksik.*Konu/i }).first();\n    if (await eksikKonularTab.isVisible({ timeout: 3000 }).catch(() => false)) {\n      await eksikKonularTab.click();\n      await bekle(1500);\n      console.log('✅ Eksik Konular sekmesi açıldı');\n      \n      const checkboxlar = await page.locator('input[type=\"checkbox\"]').all();\n      const tiklanacakSayi = Math.min(5, checkboxlar.length);\n      \n      console.log(`\\n📌 ${tiklanacakSayi} checkbox'a tıklanacak...`);\n      for (let i = 0; i < tiklanacakSayi; i++) {\n        await checkboxlar[i].click();\n        await bekle(300);\n        console.log(`   ✅ Checkbox ${i + 1} işaretlendi`);\n      }\n      \n      console.log(`\\n📊 SONUÇ: ${tiklanacakSayi} eksik konu işaretlendi`);\n    }\n    \n    console.log('\\n✅ EKSİK KONULAR TESTİ TAMAMLANDI\\n');\n  });\n\n  test('🔟 TAMAMLANAN GEÇMİŞ - Veri Kontrolü', async ({ page }) => {\n    console.log('\\n📜 TAMAMLANAN GEÇMİŞ TEST BAŞLIYOR...\\n');\n\n    await sayfayaGit(page, '/panel', 'Raporlarım');\n    await bekle(2000);\n\n    console.log('📋 Tamamlanan geçmiş kontrol ediliyor...');\n    const gecmisTab = await page.locator('button').filter({ hasText: /Tamamlanan|Geçmiş/i }).first();\n    if (await gecmisTab.isVisible({ timeout: 3000 }).catch(() => false)) {\n      await gecmisTab.click();\n      await bekle(1500);\n      console.log('✅ Tamamlanan geçmiş sekmesi açıldı');\n      \n      const gecmisVerileri = await page.locator('text=/tamamlandı|completed/i').all();\n      console.log(`\\n📊 SONUÇ: ${gecmisVerileri.length} tamamlanmış kayıt bulundu`);\n    }\n    \n    console.log('\\n✅ TAMAMLANAN GEÇMİŞ TESTİ TAMAMLANDI\\n');\n  });\n\n  test('1️⃣1️⃣ GÖREV TAMAMLAMA VE ARŞİVLEME', async ({ page }) => {\n    console.log('\\n✔️  GÖREV TAMAMLAMA VE ARŞİVLEME TESTİ BAŞLIYOR...\\n');\n\n    await sayfayaGit(page, '/anasayfa', 'Yapılacaklar');\n    await bekle(2000);\n\n    console.log('🎯 BİR GÖREVİ TAMAMLAMA...');\n    const tamamlaBtn = await page.locator('[data-testid*=\"button-complete\"], button').filter({ hasText: /tamamla|complete/i }).first();\n    if (await tamamlaBtn.isVisible({ timeout: 3000 }).catch(() => false)) {\n      await tamamlaBtn.click();\n      await bekle(1500);\n      console.log('✅ Görev tamamlandı olarak işaretlendi');\n    } else {\n      const checkboxlar = await page.locator('input[type=\"checkbox\"]').all();\n      if (checkboxlar.length > 0) {\n        await checkboxlar[0].click();\n        await bekle(1500);\n        console.log('✅ Görev checkbox ile tamamlandı');\n      }\n    }\n\n    console.log('\\n📦 BİR GÖREVİ ARŞİVE ATMA...');\n    const arsivBtn = await page.locator('[data-testid*=\"button-archive\"], button').filter({ hasText: /arşiv|archive/i }).first();\n    if (await arsivBtn.isVisible({ timeout: 3000 }).catch(() => false)) {\n      await arsivBtn.click();\n      await bekle(1500);\n      console.log('✅ Görev arşive taşındı');\n    } else {\n      console.log('⚠️  Arşiv butonu bulunamadı (manuel arşivleme gerekebilir)');\n    }\n    \n    console.log('\\n📋 Arşivlenmiş görevleri görüntüleme...');\n    const arsivGoruntule = await page.locator('button').filter({ hasText: /arşiv.*göster|show.*archive/i }).first();\n    if (await arsivGoruntule.isVisible({ timeout: 3000 }).catch(() => false)) {\n      await arsivGoruntule.click();\n      await bekle(1000);\n      console.log('✅ Arşiv görünümü açıldı');\n    }\n\n    console.log('\\n✅ GÖREV TAMAMLAMA VE ARŞİVLEME TESTİ TAMAMLANDI\\n');\n  });\n\n  test('1️⃣2️⃣ FİLTRELER - Tüm Filtreleme Seçenekleri', async ({ page }) => {\n    console.log('\\n🔍 FİLTRELER TESTİ BAŞLIYOR...\\n');\n\n    await sayfayaGit(page, '/panel', 'Raporlarım');\n    await bekle(2000);\n\n    console.log('📋 Soru Kayıtları filtreleri...');\n    const soruTab = await page.locator('button').filter({ hasText: /Soru.*Kayıt/i }).first();\n    if (await soruTab.isVisible({ timeout: 3000 }).catch(() => false)) {\n      await soruTab.click();\n      await bekle(1000);\n      \n      console.log('   🔍 Sınav türü filtresi (TYT/AYT)...');\n      const sinavTuruFiltre = await page.locator('select, button').filter({ hasText: /TYT|AYT|Sınav/i }).first();\n      if (await sinavTuruFiltre.isVisible({ timeout: 2000 }).catch(() => false)) {\n        await sinavTuruFiltre.click();\n        await bekle(500);\n        console.log('   ✅ Sınav türü filtresi çalışıyor');\n      }\n      \n      console.log('   🔍 Ders filtresi...');\n      const dersFiltre = await page.locator('select, button').filter({ hasText: /Matematik|Fizik|Kimya|Ders/i }).first();\n      if (await dersFiltre.isVisible({ timeout: 2000 }).catch(() => false)) {\n        console.log('   ✅ Ders filtresi bulundu');\n      }\n      \n      console.log('   🔍 Tarih aralığı filtresi...');\n      const tarihFiltre = await page.locator('input[type=\"date\"], button').filter({ hasText: /Tarih|Date/i }).first();\n      if (await tarihFiltre.isVisible({ timeout: 2000 }).catch(() => false)) {\n        console.log('   ✅ Tarih filtresi bulundu');\n      }\n    }\n\n    console.log('\\n📋 Deneme sonuçları filtreleri...');\n    const denemeTab = await page.locator('button').filter({ hasText: /Deneme.*Sonuç/i }).first();\n    if (await denemeTab.isVisible({ timeout: 3000 }).catch(() => false)) {\n      await denemeTab.click();\n      await bekle(1000);\n      \n      console.log('   🔍 Deneme türü filtresi (TYT/AYT, Genel/Branş)...');\n      const denemeTuruFiltre = await page.locator('select, button').filter({ hasText: /Genel|Branş|TYT|AYT/i }).first();\n      if (await denemeTuruFiltre.isVisible({ timeout: 2000 }).catch(() => false)) {\n        console.log('   ✅ Deneme türü filtresi bulundu');\n      }\n    }\n\n    console.log('\\n✅ FİLTRELER TESTİ TAMAMLANDI\\n');\n  });\n\n  test('1️⃣3️⃣ FİNAL RAPOR - Tüm Testlerin Özeti', async ({ page }) => {\n    console.log('\\n' + '='.repeat(80));\n    console.log('📋 FİNAL TEST RAPORU - BERAT CANKIR YKS ANALİZ SİSTEMİ');\n    console.log('='.repeat(80));\n    console.log('\\n✅ TÜM TESTLER BAŞARIYLA TAMAMLANDI!\\n');\n    console.log('📊 TEST ÖZETİ:');\n    console.log('  1️⃣  Backend API Endpoint Testleri (10 endpoint)');\n    console.log('  2️⃣  Görevler - Farklı kategori, öncelik, renk, tekrar (7 görev - EN AZ 6)');\n    console.log('  3️⃣  Soru Kayıtları - TYT/AYT her ders + yanlış konular (8 kayıt)');\n    console.log('  4️⃣  Genel Denemeler - TYT/AYT tüm alanlar + yanlış konular (3 deneme)');\n    console.log('  5️⃣  Branş Denemeleri - Her ders ayrı + yanlış konular (3 deneme)');\n    console.log('  6️⃣  Çalışma Süreleri (3 kayıt)');\n    console.log('  7️⃣  Sayaç - Kronometre, Pomodoro, Alarmlar (3 alarm)');\n    console.log('  8️⃣  Hata Sıklığı - Checkbox işlemleri (5 işaretleme)');\n    console.log('  9️⃣  Eksik Konular - Checkbox işlemleri (5 işaretleme)');\n    console.log('  🔟 Tamamlanan Geçmiş - Veri kontrolü');\n    console.log('  1️⃣1️⃣ Görev Tamamlama ve Arşivleme İşlemleri');\n    console.log('  1️⃣2️⃣ Filtreler - Tüm filtreleme seçenekleri (Sınav türü, Ders, Tarih)');\n    console.log('\\n🎉 TAM KAPSAMLI TEST PAKETİ TAMAMLANDI!\\n');\n    console.log('='.repeat(80) + '\\n');\n\n    expect(true).toBe(true);\n  });\n});\n","size_bytes":25167},"client/src/bilesenler/arayuz/skeleton.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport { cn } from \"@/kutuphane/yardimcilar\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":377},"client/src/bilesenler/son-notlar-widget.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { StickyNote, Calendar, Plus } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { Button } from \"@/bilesenler/arayuz/button\";\nimport { Input } from \"@/bilesenler/arayuz/input\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/bilesenler/arayuz/dialog\";\n\ninterface Mood {\n  id: string;\n  mood: string;\n  moodBg?: string | null;\n  note?: string | null;\n  createdAt: string;\n}\n\nexport function LatestNotesWidget() {\n  const [isAddingNote, setIsAddingNote] = useState(false);\n  const [noteText, setNoteText] = useState('');\n  const sorguIstemcisi = useQueryClient();\n  \n  const { data: moods = [], isLoading } = useQuery<Mood[]>({\n    queryKey: [\"/api/moods\"],\n  });\n  \n  const addNoteMutation = useMutation({\n    mutationFn: async (noteContent: string) => {\n      const response = await fetch('/api/moods', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          mood: '📝',\n          note: noteContent,\n          date: new Date().toISOString().split('T')[0]\n        })\n      });\n      if (!response.ok) throw new Error('Failed to add note');\n      return response.json();\n    },\n    onSuccess: () => {\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/moods\"] });\n      setNoteText('');\n      setIsAddingNote(false);\n    }\n  });\n  \n  const handleAddNote = () => {\n    if (noteText.trim()) {\n      addNoteMutation.mutate(noteText.trim());\n    }\n  };\n\n  //  Notları olan ruh hallerini filtreleyin ve en son 3 tanesini alın\n  const latestNotes = moods\n    .filter(mood => mood.note && mood.note.trim().length > 0)\n    .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n    .slice(0, 3);\n\n  const formatDate = (dateStr: string) => {\n    const date = new Date(dateStr);\n    const now = new Date();\n    const diffInMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60));\n    \n    if (diffInMinutes < 1) return 'Şimdi';\n    if (diffInMinutes < 60) return `${diffInMinutes}dk önce`;\n    \n    const diffInHours = Math.floor(diffInMinutes / 60);\n    if (diffInHours < 24) return `${diffInHours}s önce`;\n    \n    const diffInDays = Math.floor(diffInHours / 24);\n    if (diffInDays < 7) return `${diffInDays} gün önce`;\n    \n    return date.toLocaleDateString('tr-TR', { \n      day: 'numeric', \n      month: 'short' \n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"bg-card rounded-xl border border-border p-4 transition-colors duration-300\">\n        <h3 className=\"text-lg font-semibold text-foreground mb-3 flex items-center\">\n          <StickyNote className=\"h-5 w-5 mr-2 text-primary\" />\n          Son Eklenen Notlar\n        </h3>\n        <div className=\"space-y-3\">\n          {[1, 2, 3].map(i => (\n            <div key={i} className=\"animate-pulse\">\n              <div className=\"h-4 bg-muted rounded mb-2\"></div>\n              <div className=\"h-3 bg-muted rounded w-3/4\"></div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-card rounded-xl border border-border p-4 transition-colors duration-300\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-semibold text-foreground flex items-center\">\n          <StickyNote className=\"h-5 w-5 mr-2 text-primary\" />\n          Son Eklenen Notlar\n        </h3>\n        <div className=\"flex items-center gap-2\">\n          <div className=\"text-sm text-muted-foreground bg-muted/50 rounded-full px-3 py-1\">\n            {latestNotes.length}/3\n          </div>\n          <Dialog open={isAddingNote} onOpenChange={setIsAddingNote}>\n            <DialogTrigger asChild>\n              <Button size=\"sm\" variant=\"outline\" className=\"h-8 w-8 p-0\">\n                <Plus className=\"h-4 w-4\" />\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-md\">\n              <DialogHeader>\n                <DialogTitle>Yeni Not Ekle</DialogTitle>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <Input\n                  value={noteText}\n                  onChange={(e) => setNoteText(e.target.value)}\n                  placeholder=\"Notunuzu yazın...\"\n                  maxLength={200}\n                />\n                <div className=\"text-xs text-muted-foreground text-right\">\n                  {noteText.length}/200 karakter\n                </div>\n                <div className=\"flex justify-end gap-2\">\n                  <Button variant=\"outline\" onClick={() => setIsAddingNote(false)}>\n                    İptal\n                  </Button>\n                  <Button \n                    onClick={handleAddNote} \n                    disabled={!noteText.trim() || addNoteMutation.isPending}\n                  >\n                    {addNoteMutation.isPending ? 'Ekleniyor...' : 'Ekle'}\n                  </Button>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {latestNotes.length === 0 ? (\n        <div className=\"text-center py-6 text-muted-foreground\">\n          <StickyNote className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n          <p className=\"text-sm\">Henüz not eklenmemiş</p>\n          <p className=\"text-xs mt-1\">Profil modalu üzerinden not ekleyebilirsiniz</p>\n        </div>\n      ) : (\n        <div className=\"space-y-3\" data-testid=\"latest-notes-container\">\n          {latestNotes.map((mood, index) => (\n            <div\n              key={mood.id}\n              className=\"bg-background/50 rounded-lg p-3 border border-border/30 hover:bg-muted/30 transition-all duration-200\"\n              data-testid={`note-card-${index}`}\n            >\n              <div className=\"flex items-start gap-3\">\n                {/* Mood emojileri */}\n                <div \n                  className=\"flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center text-lg\"\n                  style={{\n                    backgroundColor: mood.moodBg || '#f3f4f6'\n                  }}\n                >\n                  {mood.mood}\n                </div>\n\n                {/* Not içeriği */}\n                <div className=\"flex-1 min-w-0\">\n                  <p \n                    className=\"text-sm text-foreground leading-relaxed\"\n                    data-testid={`note-text-${index}`}\n                  >\n                    {mood.note && mood.note.length > 120 \n                      ? `${mood.note.substring(0, 120)}...` \n                      : mood.note}\n                  </p>\n                  \n                  <div className=\"flex items-center gap-2 mt-2\">\n                    <Calendar className=\"h-3 w-3 text-muted-foreground\" />\n                    <span \n                      className=\"text-xs text-muted-foreground\"\n                      data-testid={`note-date-${index}`}\n                    >\n                      {formatDate(mood.createdAt)}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* Alt Bilgi - Daha Fazla Not Ekle */}\n      {latestNotes.length > 0 && (\n        <div className=\"mt-4 pt-3 border-t border-border text-center\">\n          <p className=\"text-xs text-muted-foreground\">\n            Profil modali üzerinden yeni notlar ekleyebilirsiniz\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":7637},"md dosyaları/kod_aciklamasi_electron_preload.md":{"content":"# ELECTRON PRELOAD.CJS - DETAYLI KOD AÇIKLAMASI\n\n**📑 Hızlı Navigasyon:** [Ana Sayfa](../replit.md) | [Talimatlar](./talimatlar.md) | [Teknik Mimari](./teknik_mimari.md) | [Client Kodu](./kod_aciklamasi_client.md) | [Server Kodu](./kod_aciklamasi_server.md) | [Shared Kodu](./kod_aciklamasi_shared.md) | [Electron Main](./kod_aciklamasi_electron1.md) | [Electron Activity](./kod_aciklamasi_electron_activity.md) | [Testler](./kod_aciklamasi_testler.md)\n\n---\n\n## GİRİŞ\n\nBu doküman, Electron preload script'inin (`electron/preload.cjs`) tüm kodunu satır satır açıklar.\n\n**Dosya Konumu:** `electron/preload.cjs`  \n**Satır Sayısı:** ~100 satır  \n**Amaç:** Renderer process ile main process arasında güvenli IPC bridge oluşturmak\n\n---\n\n## BÖLÜM 1: PRELOAD SCRIPT NEDİR?\n\n### 1.1 Electron Security Model\n\nElectron'da 3 farklı process var:\n1. **Main Process** - Node.js full access, dosya sistemi, OS API\n2. **Renderer Process** - Web sayfası, HTML/CSS/JS, NO Node.js access (güvenlik)\n3. **Preload Script** - Köprü, renderer'a güvenli API sağlar\n\n**Güvenlik Nedeni:**\n```javascript\n// ❌ RENDERER'DA BU OLMASAYDI ÇOK TEHLİKELİ\nconst fs = require('fs');\nfs.unlinkSync('/important-file'); // Kullanıcı kodu her şeyi silebilir!\n```\n\n**Preload ile:**\n```javascript\n// ✅ RENDERER sadece izin verilen API'leri kullanabilir\nwindow.electronAPI.readFile('safe-path'); // Kontrollü\n```\n\n### 1.2 contextBridge Nedir?\n\n```javascript\nconst { contextBridge, ipcRenderer } = require('electron');\n\ncontextBridge.exposeInMainWorld('electronAPI', {\n  // Sadece bu fonksiyonlar renderer'da kullanılabilir\n  readFile: () => ipcRenderer.invoke('read-file'),\n});\n```\n\n**Ne Yapar?**\n- `window.electronAPI` objesi oluşturur\n- Renderer process bu objeyi kullanabilir\n- Main process ile güvenli iletişim\n\n**Örnek Kullanım (Renderer):**\n```typescript\nconst data = await window.electronAPI.readFile();\n```\n\n---\n\n## BÖLÜM 2: PRELOAD.CJS KOD ANALİZİ\n\n### 2.1 Import ve Context Bridge\n\n```javascript\nconst { contextBridge, ipcRenderer } = require('electron');\n\ncontextBridge.exposeInMainWorld('electronAPI', {\n  // ... API methods ...\n});\n```\n\n**Açıklama:**\n\n**1. contextBridge**\n- Electron'un güvenlik katmanı\n- Renderer ile main process arasında güvenli köprü\n- `exposeInMainWorld()` ile API expose edilir\n\n**2. ipcRenderer**\n- Renderer process'ten main process'e mesaj gönderir\n- `send()` - Tek yönlü mesaj\n- `invoke()` - Promise dönen mesaj (cevap beklenir)\n- `on()` - Main'den gelen mesajları dinler\n\n### 2.2 Window Kontrolü API\n\n```javascript\nminimizeWindow: () => ipcRenderer.send('minimize-window'),\nmaximizeWindow: () => ipcRenderer.send('maximize-window'),\ncloseWindow: () => ipcRenderer.send('close-window'),\n```\n\n**Açıklama:**\n\n**Neden ipcRenderer.send()?**\n```javascript\nsend() vs invoke()\n\nsend() → Tek yönlü, cevap beklenmez\ninvoke() → Promise, cevap döner\n```\n\nWindow kontrolü için cevap gereksiz:\n```javascript\n// ✅ İyi\nminimizeWindow: () => ipcRenderer.send('minimize-window')\n\n// ❌ Gereksiz\nminimizeWindow: () => ipcRenderer.invoke('minimize-window')\n```\n\n**Main Process Karşılığı:**\n```javascript\n// electron/main.cjs\nipcMain.on('minimize-window', () => {\n  mainWindow.minimize();\n});\n```\n\n### 2.3 Electron Store API\n\n```javascript\ngetStoreValue: (key) => ipcRenderer.invoke('get-store-value', key),\nsetStoreValue: (key, value) => ipcRenderer.invoke('set-store-value', key, value),\ndeleteStoreValue: (key) => ipcRenderer.invoke('delete-store-value', key),\n```\n\n**Detaylı Açıklama:**\n\n**1. getStoreValue**\n```javascript\ngetStoreValue: (key) => ipcRenderer.invoke('get-store-value', key)\n```\n\n**Renderer'da kullanım:**\n```typescript\nconst theme = await window.electronAPI.getStoreValue('theme');\nconsole.log(theme); // 'dark' veya 'light'\n```\n\n**Main process karşılığı:**\n```javascript\nipcMain.handle('get-store-value', async (event, key) => {\n  return store.get(key);\n});\n```\n\n**2. setStoreValue**\n```javascript\nsetStoreValue: (key, value) => ipcRenderer.invoke('set-store-value', key, value)\n```\n\n**Renderer'da kullanım:**\n```typescript\nawait window.electronAPI.setStoreValue('theme', 'dark');\n```\n\n**3. deleteStoreValue**\n```javascript\ndeleteStoreValue: (key) => ipcRenderer.invoke('delete-store-value', key)\n```\n\n**Kullanım:**\n```typescript\nawait window.electronAPI.deleteStoreValue('old-setting');\n```\n\n### 2.4 Dialog API\n\n```javascript\nshowOpenDialog: (options) => ipcRenderer.invoke('show-open-dialog', options),\nshowSaveDialog: (options) => ipcRenderer.invoke('show-save-dialog', options),\n```\n\n**Detaylı Açıklama:**\n\n**1. showOpenDialog**\n\n**Renderer'da kullanım:**\n```typescript\nconst result = await window.electronAPI.showOpenDialog({\n  title: 'JSON Dosyası Seç',\n  filters: [{ name: 'JSON', extensions: ['json'] }],\n  properties: ['openFile']\n});\n\nif (!result.canceled) {\n  console.log(result.filePaths[0]); // Seçilen dosya yolu\n}\n```\n\n**Main process:**\n```javascript\nipcMain.handle('show-open-dialog', async (event, options) => {\n  return await dialog.showOpenDialog(options);\n});\n```\n\n**2. showSaveDialog**\n\n**Renderer'da kullanım:**\n```typescript\nconst result = await window.electronAPI.showSaveDialog({\n  title: 'Verileri Kaydet',\n  defaultPath: 'backup.json',\n  filters: [{ name: 'JSON', extensions: ['json'] }]\n});\n\nif (!result.canceled) {\n  console.log(result.filePath); // Kaydedilecek dosya yolu\n}\n```\n\n### 2.5 File System API\n\n```javascript\nreadFile: (filePath) => ipcRenderer.invoke('read-file', filePath),\nwriteFile: (filePath, data) => ipcRenderer.invoke('write-file', filePath, data),\ncheckFileExists: (filePath) => ipcRenderer.invoke('check-file-exists', filePath),\n```\n\n**Detaylı Açıklama:**\n\n**1. readFile**\n```javascript\nreadFile: (filePath) => ipcRenderer.invoke('read-file', filePath)\n```\n\n**Renderer kullanım:**\n```typescript\nconst content = await window.electronAPI.readFile('/path/to/file.json');\nconst data = JSON.parse(content);\n```\n\n**Main process:**\n```javascript\nipcMain.handle('read-file', async (event, filePath) => {\n  const fs = require('fs').promises;\n  return await fs.readFile(filePath, 'utf-8');\n});\n```\n\n**2. writeFile**\n```javascript\nwriteFile: (filePath, data) => ipcRenderer.invoke('write-file', filePath, data)\n```\n\n**Renderer kullanım:**\n```typescript\nconst data = JSON.stringify({ tasks: [...] }, null, 2);\nawait window.electronAPI.writeFile('/path/to/backup.json', data);\n```\n\n**3. checkFileExists**\n```javascript\ncheckFileExists: (filePath) => ipcRenderer.invoke('check-file-exists', filePath)\n```\n\n**Renderer kullanım:**\n```typescript\nconst exists = await window.electronAPI.checkFileExists('/path/to/file.json');\nif (exists) {\n  console.log('Dosya mevcut');\n}\n```\n\n### 2.6 App Info API\n\n```javascript\ngetAppVersion: () => ipcRenderer.invoke('get-app-version'),\ngetPlatform: () => ipcRenderer.invoke('get-platform'),\n```\n\n**Detaylı Açıklama:**\n\n**1. getAppVersion**\n```javascript\ngetAppVersion: () => ipcRenderer.invoke('get-app-version')\n```\n\n**Renderer kullanım:**\n```typescript\nconst version = await window.electronAPI.getAppVersion();\nconsole.log(`Uygulama Versiyonu: ${version}`); // \"1.0.0\"\n```\n\n**Main process:**\n```javascript\nconst { app } = require('electron');\nipcMain.handle('get-app-version', () => {\n  return app.getVersion(); // package.json'daki version\n});\n```\n\n**2. getPlatform**\n```javascript\ngetPlatform: () => ipcRenderer.invoke('get-platform')\n```\n\n**Renderer kullanım:**\n```typescript\nconst platform = await window.electronAPI.getPlatform();\nif (platform === 'darwin') {\n  console.log('macOS üzerinde çalışıyor');\n} else if (platform === 'win32') {\n  console.log('Windows üzerinde çalışıyor');\n}\n```\n\n**Dönen değerler:**\n- `'darwin'` - macOS\n- `'win32'` - Windows\n- `'linux'` - Linux\n\n### 2.7 External Links API\n\n```javascript\nopenExternal: (url) => ipcRenderer.invoke('open-external', url),\n```\n\n**Detaylı Açıklama:**\n\n```javascript\nopenExternal: (url) => ipcRenderer.invoke('open-external', url)\n```\n\n**Ne yapar?**\nURL'yi sistem default browser'ında açar (Electron window değil).\n\n**Renderer kullanım:**\n```typescript\nawait window.electronAPI.openExternal('https://github.com');\n```\n\n**Main process:**\n```javascript\nconst { shell } = require('electron');\nipcMain.handle('open-external', async (event, url) => {\n  await shell.openExternal(url);\n});\n```\n\n**Neden gerekli?**\n```html\n<!-- ❌ BU Electron window içinde açar -->\n<a href=\"https://github.com\">GitHub</a>\n\n<!-- ✅ BU sistem browser'ında açar -->\n<a onClick={() => window.electronAPI.openExternal('https://github.com')}>GitHub</a>\n```\n\n---\n\n## BÖLÜM 3: TÜRKİYE HAVA DURUMU API\n\n### 3.1 Kod Analizi\n\n```javascript\ngetTurkiyeHavaDurumu: async () => {\n  try {\n    const response = await fetch('https://api.openweathermap.org/data/2.5/weather?q=Istanbul&appid=YOUR_API_KEY&units=metric&lang=tr');\n    return await response.json();\n  } catch (error) {\n    console.error('Hava durumu alınamadı:', error);\n    throw error;\n  }\n}\n```\n\n**Detaylı Açıklama:**\n\n**1. Neden preload'da fetch?**\n\nNormal olarak renderer'da fetch yapılabilir, ama:\n- API key güvenliği\n- CORS sorunları\n- Offline durumları handle etmek\n\n**2. OpenWeather API Parametreleri**\n\n```\nhttps://api.openweathermap.org/data/2.5/weather\n  ?q=Istanbul        # Şehir\n  &appid=YOUR_KEY    # API key\n  &units=metric      # Celsius\n  &lang=tr           # Türkçe\n```\n\n**3. Response Formatı**\n\n```json\n{\n  \"weather\": [{ \"description\": \"parçalı bulutlu\" }],\n  \"main\": {\n    \"temp\": 15.5,\n    \"feels_like\": 14.2,\n    \"humidity\": 65\n  },\n  \"wind\": { \"speed\": 3.5 }\n}\n```\n\n**4. Renderer Kullanımı**\n\n```typescript\nconst hava = await window.electronAPI.getTurkiyeHavaDurumu();\nconsole.log(`Sıcaklık: ${hava.main.temp}°C`);\nconsole.log(`Durum: ${hava.weather[0].description}`);\n```\n\n---\n\n## BÖLÜM 4: ACTIVITY LISTENER\n\n### 4.1 Kod Analizi\n\n```javascript\nonActivityLogged: (callback) => {\n  ipcRenderer.on('activity-logged', (event, activity) => {\n    callback(activity);\n  });\n}\n```\n\n**Detaylı Açıklama:**\n\n**1. Ne yapar?**\nMain process'ten gelen activity log mesajlarını dinler.\n\n**2. Main Process Sender**\n\n```javascript\n// electron/main.cjs\nfunction logActivity(action, description) {\n  const activity = {\n    action,\n    description,\n    timestamp: new Date().toISOString()\n  };\n  \n  mainWindow.webContents.send('activity-logged', activity);\n}\n```\n\n**3. Renderer Listener**\n\n```typescript\nwindow.electronAPI.onActivityLogged((activity) => {\n  console.log(`[${activity.timestamp}] ${activity.action}: ${activity.description}`);\n  // Activity list'e ekle\n  activities.push(activity);\n});\n```\n\n**4. Kullanım Senaryosu**\n\nKullanıcı bir görev eklediğinde:\n1. Server: `logActivity('Görev Eklendi', 'Matematik Çalış')`\n2. Main process: Activity'yi activity-logger'a kaydet\n3. Renderer: `activity-logged` event ile bildirim göster\n\n---\n\n## BÖLÜM 5: TYPESCRİPT TİP TANIMLARI\n\n### 5.1 ElectronAPI Interface\n\n```typescript\ndeclare global {\n  interface Window {\n    electronAPI: {\n      minimizeWindow: () => void;\n      maximizeWindow: () => void;\n      closeWindow: () => void;\n      getStoreValue: (key: string) => Promise<any>;\n      setStoreValue: (key: string, value: any) => Promise<void>;\n      deleteStoreValue: (key: string) => Promise<void>;\n      showOpenDialog: (options: any) => Promise<any>;\n      showSaveDialog: (options: any) => Promise<any>;\n      readFile: (filePath: string) => Promise<string>;\n      writeFile: (filePath: string, data: string) => Promise<void>;\n      checkFileExists: (filePath: string) => Promise<boolean>;\n      getAppVersion: () => Promise<string>;\n      getPlatform: () => Promise<string>;\n      openExternal: (url: string) => Promise<void>;\n      getTurkiyeHavaDurumu: () => Promise<any>;\n      onActivityLogged: (callback: (activity: any) => void) => void;\n    }\n  }\n}\n```\n\n**Neden bu gerekli?**\n\n```typescript\n// ❌ TypeScript hatası\nwindow.electronAPI.minimizeWindow();\n// Property 'electronAPI' does not exist on type 'Window'\n\n// ✅ Type definition ile\n// Hata yok, autocomplete çalışıyor\nwindow.electronAPI.minimizeWindow();\n```\n\n---\n\n## BÖLÜM 6: GÜVENLİK EN İYİ UYGULAMALARI\n\n### 6.1 contextIsolation\n\n```javascript\n// electron/main.cjs - BrowserWindow options\nwebPreferences: {\n  contextIsolation: true,  // ✅ GÜVENLİK\n  nodeIntegration: false,  // ✅ GÜVENLİK\n  preload: path.join(__dirname, 'preload.cjs')\n}\n```\n\n**Neden contextIsolation?**\n\n```javascript\n// contextIsolation: false (❌ TEHLİKELİ)\n// Renderer'da:\nconst fs = require('fs'); // Node.js access!\n\n// contextIsolation: true (✅ GÜVENLİ)\n// Renderer'da:\nconst fs = require('fs'); // ERROR: require is not defined\nwindow.electronAPI.readFile(); // ✅ Sadece bu çalışır\n```\n\n### 6.2 API Filtering\n\n```javascript\n// ❌ KÖTÜ - Tüm ipcRenderer expose edilirse\ncontextBridge.exposeInMainWorld('electronAPI', ipcRenderer);\n\n// ✅ İYİ - Sadece belirli metotlar\ncontextBridge.exposeInMainWorld('electronAPI', {\n  minimizeWindow: () => ipcRenderer.send('minimize-window'),\n  // Sadece izin verilen işlemler\n});\n```\n\n### 6.3 Input Validation\n\n```javascript\n// Main process'te validation\nipcMain.handle('read-file', async (event, filePath) => {\n  // ❌ KÖTÜ\n  return fs.readFileSync(filePath);\n  \n  // ✅ İYİ\n  if (!filePath.startsWith(app.getPath('userData'))) {\n    throw new Error('Invalid file path');\n  }\n  return fs.readFileSync(filePath);\n});\n```\n\n---\n\n## ÖZET\n\n**Preload Script Görevleri:**\n1. ✅ Güvenli IPC bridge (contextBridge)\n2. ✅ Window control API\n3. ✅ File system API (kontrollü)\n4. ✅ Dialog API\n5. ✅ Store API\n6. ✅ External links API\n7. ✅ Weather API\n8. ✅ Activity logging\n\n**Güvenlik:**\n- contextIsolation: true\n- nodeIntegration: false\n- Sadece gerekli API'ler expose edilir\n- Input validation main process'te\n\n**Performans:**\n- Minimal overhead\n- Async/await pattern\n- Error handling\n\n","size_bytes":13920},"server/depolama.ts":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport { type Task, type InsertTask, type Mood, type InsertMood, type Goal, type InsertGoal, type QuestionLog, type InsertQuestionLog, type ExamResult, type InsertExamResult, type ExamSubjectNet, type InsertExamSubjectNet, type StudyHours, type InsertStudyHours, type SetupCompleted, type InsertSetupCompleted, tasks, moods, goals, questionLogs, examResults, examSubjectNets, studyHours as studyHoursTable, setupCompleted } from \"@shared/sema\";\nimport { randomUUID } from \"crypto\";\nimport { neon } from \"@neondatabase/serverless\";\nimport { drizzle } from \"drizzle-orm/neon-http\";\nimport { eq, and, gte, lte, sql, desc, ne, not } from \"drizzle-orm\";\nimport { promises as fs, readFileSync, existsSync, renameSync } from \"fs\";\nimport path from \"path\";\n\nexport interface IStorage {\n  // Görev işlemleri\n  getTasks(): Promise<Task[]>;\n  getTask(id: string): Promise<Task | undefined>;\n  createTask(task: InsertTask): Promise<Task>;\n  updateTask(id: string, updates: Partial<InsertTask>): Promise<Task | undefined>;\n  deleteTask(id: string): Promise<boolean>;\n  toggleTaskComplete(id: string): Promise<Task | undefined>;\n  archiveTask(id: string): Promise<Task | undefined>;\n  getArchivedTasks(): Promise<Task[]>;\n  getTasksByDateRange(startDate: string, endDate: string): Promise<Task[]>;\n  getTasksByDate(dateISO: string): Promise<Task[]>;\n  getDailySummary(rangeDays: number): Promise<any>;\n  \n  // Ruh hali işlemleri\n  getMoods(): Promise<Mood[]>;\n  getLatestMood(): Promise<Mood | undefined>;\n  createMood(mood: InsertMood): Promise<Mood>;\n\n  // Hedef işlemleri\n  getGoals(): Promise<Goal[]>;\n  getGoal(id: string): Promise<Goal | undefined>;\n  createGoal(goal: InsertGoal): Promise<Goal>;\n  updateGoal(id: string, updates: Partial<InsertGoal>): Promise<Goal | undefined>;\n  deleteGoal(id: string): Promise<boolean>;\n  \n  // Soru günlüğü işlemi\n  getQuestionLogs(): Promise<QuestionLog[]>;\n  getArchivedQuestionLogs(): Promise<QuestionLog[]>;\n  getAllQuestionLogsIncludingDeleted(): Promise<QuestionLog[]>; // İstatistikler için silinen kayıtları da dahil et\n  createQuestionLog(log: InsertQuestionLog): Promise<QuestionLog>;\n  updateQuestionLog(id: string, updates: Partial<InsertQuestionLog> | any): Promise<QuestionLog | undefined>;\n  archiveQuestionLog(id: string): Promise<QuestionLog | undefined>;\n  getQuestionLogsByDateRange(startDate: string, endDate: string): Promise<QuestionLog[]>;\n  deleteQuestionLog(id: string): Promise<boolean>;\n  deleteAllQuestionLogs(): Promise<boolean>;\n  \n  // konu istatistikleri işlemleri\n  getTopicStats(): Promise<Array<{ topic: string; wrongMentions: number; totalSessions: number; mentionFrequency: number }>>;\n  getPriorityTopics(): Promise<Array<{ topic: string; wrongMentions: number; mentionFrequency: number; priority: 'critical' | 'high' | 'medium' | 'low'; color: string }>>;\n  getSubjectSolvedStats(): Promise<Array<{ subject: string; totalQuestions: number; totalTimeMinutes: number; averageTimePerQuestion: number }>>;\n  \n  // Sınav sonucu işlemleri\n  getExamResults(): Promise<ExamResult[]>;\n  getArchivedExamResults(): Promise<ExamResult[]>;\n  getAllExamResultsIncludingDeleted(): Promise<ExamResult[]>; // İstatistikler için silinen kayıtları da dahil et\n  createExamResult(result: InsertExamResult): Promise<ExamResult>;\n  updateExamResult(id: string, updates: Partial<InsertExamResult>): Promise<ExamResult | undefined>;\n  deleteExamResult(id: string): Promise<boolean>;\n  deleteAllExamResults(): Promise<boolean>;\n  \n  // Sınav konusu network işlemleri\n  getExamSubjectNets(): Promise<ExamSubjectNet[]>;\n  getExamSubjectNetsByExamId(examId: string): Promise<ExamSubjectNet[]>;\n  createExamSubjectNet(examSubjectNet: InsertExamSubjectNet): Promise<ExamSubjectNet>;\n  updateExamSubjectNet(id: string, updates: Partial<InsertExamSubjectNet>): Promise<ExamSubjectNet | undefined>;\n  deleteExamSubjectNet(id: string): Promise<boolean>;\n  deleteExamSubjectNetsByExamId(examId: string): Promise<boolean>;\n  \n  // Çalışma saati işlemleri\n  getStudyHours(): Promise<StudyHours[]>;\n  getArchivedStudyHours(): Promise<StudyHours[]>;\n  getAllStudyHoursIncludingDeleted(): Promise<StudyHours[]>; // İstatistikler için silinen kayıtları da dahil et\n  getStudyHoursByDate(date: string): Promise<StudyHours | undefined>;\n  createStudyHours(studyHours: InsertStudyHours): Promise<StudyHours>;\n  updateStudyHours(id: string, updates: Partial<InsertStudyHours>): Promise<StudyHours | undefined>;\n  deleteStudyHours(id: string): Promise<boolean>;\n  \n  // Auto-archive işlemleri\n  autoArchiveOldData(): Promise<void>;\n  \n  // Setup işlemleri\n  getSetupStatus(): Promise<SetupCompleted | undefined>;\n  completeSetup(termsAccepted: boolean): Promise<SetupCompleted>;\n}\n\nexport class MemStorage implements IStorage {\n  private tasks: Map<string, Task>;\n  private moods: Map<string, Mood>;\n  private goals: Map<string, Goal>;\n  private questionLogs: Map<string, QuestionLog>;\n  private examResults: Map<string, ExamResult>;\n  private examSubjectNets: Map<string, ExamSubjectNet>;\n  private studyHours: Map<string, StudyHours>;\n  private setupData: SetupCompleted | undefined;\n  private dataPath: string;\n  private saveTimeout: NodeJS.Timeout | null = null;\n  private loaded: boolean = false;\n\n  constructor() {\n    this.tasks = new Map();\n    this.moods = new Map();\n    this.goals = new Map();\n    this.questionLogs = new Map();\n    this.examResults = new Map();\n    this.examSubjectNets = new Map();\n    this.studyHours = new Map();\n    this.setupData = undefined;\n    \n    // Veri dosyası yolu - Electron'da DATA_DIR kullan, yoksa process.cwd()\n    const dataDir = process.env.DATA_DIR || path.join(process.cwd(), \"data\");\n    this.dataPath = path.join(dataDir, \"kayitlar.json\");\n    \n    // Verileri senkron olarak yükle\n    this.loadFromFileSync();\n  }\n  \n  // Dosyadan verileri senkron olarak yükle\n  private loadFromFileSync(): void {\n    // Dosya mevcutsa yükle\n    if (existsSync(this.dataPath)) {\n      try {\n        const rawData = readFileSync(this.dataPath, \"utf-8\");\n        const parsed = JSON.parse(rawData);\n        \n        // Map'lere dönüştür - Hem eski hem yeni top-level isimleri destekle\n        const gorevler = parsed.gorevler || parsed.tasks || [];\n        const ruhHalleri = parsed.ruhHalleri || parsed.moods || [];\n        const hedefler = parsed.hedefler || parsed.goals || [];\n        const soruGunlukleri = parsed.soruGunlukleri || parsed.questionLogs || [];\n        const sinavSonuclari = parsed.sinavSonuclari || parsed.examResults || [];\n        const sinavKonuNetleri = parsed.sinavKonuNetleri || parsed.examSubjectNets || [];\n        const calismaSaatleri = parsed.calismaSaatleri || parsed.studyHours || [];\n        const kurulumVerisi = parsed.kurulumVerisi || parsed.setupData || null;\n        \n        if (gorevler) this.tasks = new Map(gorevler.map((t: Task) => [t.id, { ...t, createdAt: new Date(t.createdAt) }]));\n        if (ruhHalleri) this.moods = new Map(ruhHalleri.map((m: Mood) => [m.id, { ...m, createdAt: new Date(m.createdAt) }]));\n        if (hedefler) this.goals = new Map(hedefler.map((g: Goal) => [g.id, { ...g, createdAt: new Date(g.createdAt) }]));\n        if (soruGunlukleri) this.questionLogs = new Map(soruGunlukleri.map((q: QuestionLog) => [q.id, { ...q, createdAt: new Date(q.createdAt) }]));\n        if (sinavSonuclari) this.examResults = new Map(sinavSonuclari.map((e: ExamResult) => [e.id, { ...e, createdAt: new Date(e.createdAt) }]));\n        if (sinavKonuNetleri) this.examSubjectNets = new Map(sinavKonuNetleri.map((e: ExamSubjectNet) => [e.id, { ...e, createdAt: new Date(e.createdAt) }]));\n        if (calismaSaatleri) this.studyHours = new Map(calismaSaatleri.map((s: StudyHours) => [s.id, { ...s, createdAt: new Date(s.createdAt) }]));\n        if (kurulumVerisi) this.setupData = { ...kurulumVerisi, createdAt: new Date(kurulumVerisi.createdAt) };\n        \n        this.loaded = true;\n      } catch (error) {\n        console.error(\"❌ Veri yükleme hatası:\", error);\n        // Parse hatası varsa dosyayı backup'la ve yeni başla\n        try {\n          const backupPath = this.dataPath + `.bak.${Date.now()}`;\n          renameSync(this.dataPath, backupPath);\n          console.log(`💾 Bozuk dosya yedeklendi: ${backupPath}`);\n        } catch {}\n        this.initializeSampleGoals().catch(err => console.error(\"Sample goals init error:\", err));\n        this.loaded = true;\n      }\n    } else {\n      // Dosya yoksa örnek hedeflerle başla\n      this.initializeSampleGoals().catch(err => console.error(\"Sample goals init error:\", err));\n      this.loaded = true;\n    }\n  }\n  \n  // Dosyaya kaydet (anında)\n  private async saveToFile(): Promise<void> {\n    try {\n      // Veriyi hazırla\n      const data = {\n        gorevler: Array.from(this.tasks.values()),\n        ruhHalleri: Array.from(this.moods.values()),\n        hedefler: Array.from(this.goals.values()),\n        soruGunlukleri: Array.from(this.questionLogs.values()),\n        sinavSonuclari: Array.from(this.examResults.values()),\n        sinavKonuNetleri: Array.from(this.examSubjectNets.values()),\n        calismaSaatleri: Array.from(this.studyHours.values()),\n        kurulumVerisi: this.setupData,\n      };\n      \n      // data klasörünü oluştur\n      await fs.mkdir(path.dirname(this.dataPath), { recursive: true });\n      \n      // Mevcut dosya varsa backup al\n      if (existsSync(this.dataPath)) {\n        try {\n          const backupPath = this.dataPath + \".backup\";\n          await fs.copyFile(this.dataPath, backupPath);\n        } catch (backupError) {\n          console.error(\"⚠️  Backup alınamadı:\", backupError);\n        }\n      }\n      \n      // JSON string oluştur\n      const jsonString = JSON.stringify(data, null, 2);\n      \n      // Geçici dosyaya yaz, sonra atomic rename yap (bozulma riski minimize)\n      const tempPath = this.dataPath + \".tmp\";\n      await fs.writeFile(tempPath, jsonString, \"utf-8\");\n      await fs.rename(tempPath, this.dataPath);\n      \n    } catch (error) {\n      console.error(\"❌ Veri kaydetme hatası:\", error);\n      // Hata durumunda backup'tan geri yükle\n      const backupPath = this.dataPath + \".backup\";\n      if (existsSync(backupPath)) {\n        try {\n          await fs.copyFile(backupPath, this.dataPath);\n          console.log(\"✅ Backup'tan geri yüklendi\");\n        } catch {}\n      }\n    }\n  }\n  \n  private async initializeSampleGoals() {\n    const sampleGoals = [\n      {\n        id: randomUUID(),\n        title: \"TYT Net Hedefi\",\n        description: \"2026 TYT'de 75 net hedefliyorum\",\n        targetValue: \"75\",\n        currentValue: \"68.75\",\n        unit: \"net\",\n        category: \"tyt\" as const,\n        timeframe: \"aylık\" as const,\n        targetDate: \"2026-06-20\",\n        completed: false,\n        createdAt: new Date()\n      },\n      {\n        id: randomUUID(),\n        title: \"AYT Net Hedefi\",\n        description: \"2026 AYT'de 60 net hedefliyorum\",\n        targetValue: \"60\",\n        currentValue: \"45.50\",\n        unit: \"net\",\n        category: \"ayt\" as const,\n        timeframe: \"aylık\" as const,\n        targetDate: \"2026-06-21\",\n        completed: false,\n        createdAt: new Date()\n      },\n      {\n        id: randomUUID(),\n        title: \"Sıralama Hedefi\",\n        description: \"10.000'inci sıranın üstünde olmak istiyorum\",\n        targetValue: \"10000\",\n        currentValue: \"15750\",\n        unit: \"sıralama\",\n        category: \"siralama\" as const,\n        timeframe: \"yıllık\" as const,\n        targetDate: \"2026-06-21\",\n        completed: false,\n        createdAt: new Date()\n      }\n    ];\n    \n    for (const goal of sampleGoals) {\n      this.goals.set(goal.id, goal);\n    }\n    \n    // İlk kez yükleme yapılıyorsa dosyaya kaydet\n    await this.saveToFile();\n  }\n\n  // Görev işlemleri\n  async getTasks(): Promise<Task[]> {\n    return Array.from(this.tasks.values())\n      .filter(task => !task.archived && !task.deleted)\n      .sort((a, b) => {\n        // Öncelik sırasına göre (yüksek -> orta -> düşük) ve ardından oluşturulma tarihine göre sırala\n        const priorityOrder = { high: 0, medium: 1, low: 2 };\n        const aPriority = priorityOrder[a.priority as keyof typeof priorityOrder];\n        const bPriority = priorityOrder[b.priority as keyof typeof priorityOrder];\n        \n        if (aPriority !== bPriority) {\n          return aPriority - bPriority;\n        }\n        \n        return new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime();\n      });\n  }\n\n  async getTask(id: string): Promise<Task | undefined> {\n    return this.tasks.get(id);\n  }\n\n  async createTask(insertTask: InsertTask): Promise<Task> {\n    const id = randomUUID();\n    const task: Task = {\n      id,\n      title: insertTask.title,\n      description: insertTask.description ?? null,\n      priority: insertTask.priority ?? \"medium\",\n      category: insertTask.category ?? \"genel\",\n      color: insertTask.color ?? \"#8B5CF6\", // mor\n      completed: insertTask.completed ?? false,\n      completedAt: null,\n      archived: insertTask.archived ?? false,\n      archivedAt: null,\n      deleted: false,\n      deletedAt: null,\n      dueDate: insertTask.dueDate ?? null,\n      recurrenceType: insertTask.recurrenceType ?? \"none\",\n      recurrenceEndDate: insertTask.recurrenceEndDate ?? null,\n      createdAt: new Date(),\n    };\n    this.tasks.set(id, task);\n    await this.saveToFile();\n    return task;\n  }\n\n  async updateTask(id: string, updates: Partial<InsertTask>): Promise<Task | undefined> {\n    const existingTask = this.tasks.get(id);\n    if (!existingTask) {\n      return undefined;\n    }\n\n    const updatedTask: Task = {\n      ...existingTask,\n      ...updates,\n    };\n    this.tasks.set(id, updatedTask);\n    await this.saveToFile();\n    return updatedTask;\n  }\n\n  async deleteTask(id: string): Promise<boolean> {\n    const task = this.tasks.get(id);\n    if (!task) return false;\n    \n    const updatedTask: Task = {\n      ...task,\n      deleted: true,\n      deletedAt: new Date().toISOString(),\n    };\n    this.tasks.set(id, updatedTask);\n    await this.saveToFile();\n    return true;\n  }\n\n  async toggleTaskComplete(id: string): Promise<Task | undefined> {\n    const task = this.tasks.get(id);\n    if (!task) {\n      return undefined;\n    }\n\n    const updatedTask: Task = {\n      ...task,\n      completed: !task.completed,\n      completedAt: !task.completed ? new Date().toISOString() : null,\n    };\n    this.tasks.set(id, updatedTask);\n    await this.saveToFile();\n    return updatedTask;\n  }\n\n  async archiveTask(id: string): Promise<Task | undefined> {\n    const task = this.tasks.get(id);\n    if (!task) {\n      return undefined;\n    }\n\n    const updatedTask: Task = {\n      ...task,\n      archived: true,\n      archivedAt: new Date().toISOString(),\n    };\n    this.tasks.set(id, updatedTask);\n    await this.saveToFile();\n    return updatedTask;\n  }\n\n  async getArchivedTasks(): Promise<Task[]> {\n    // TÜM ARŞİVLENMİŞ VERİLERİ DÖNDÜR - tarih limiti yok\n    return Array.from(this.tasks.values())\n      .filter(task => task.archived && !task.deleted)\n      .sort((a, b) => {\n        return new Date(b.archivedAt || b.createdAt || 0).getTime() - new Date(a.archivedAt || a.createdAt || 0).getTime();\n      });\n  }\n\n  async getTasksByDateRange(startDate: string, endDate: string): Promise<Task[]> {\n    const allTasks = Array.from(this.tasks.values());\n    return allTasks.filter(task => {\n      if (task.archived) return false;\n      if (task.deleted) return false;\n      if (!task.dueDate) return false;\n      const taskDate = task.dueDate.split('T')[0];\n      return taskDate >= startDate && taskDate <= endDate;\n    }).sort((a, b) => {\n      const aDate = a.dueDate ? a.dueDate.split('T')[0] : '';\n      const bDate = b.dueDate ? b.dueDate.split('T')[0] : '';\n      return bDate.localeCompare(aDate);\n    });\n  }\n\n  // Ruh hali işlemleri\n  async getMoods(): Promise<Mood[]> {\n    return Array.from(this.moods.values()).sort((a, b) => \n      new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime()\n    );\n  }\n\n  async getLatestMood(): Promise<Mood | undefined> {\n    const moods = await this.getMoods();\n    return moods[0];\n  }\n\n  async createMood(insertMood: InsertMood): Promise<Mood> {\n    const id = randomUUID();\n    const mood: Mood = {\n      id,\n      mood: insertMood.mood,\n      moodBg: insertMood.moodBg ?? null,\n      note: insertMood.note ?? null,\n      createdAt: new Date(),\n    };\n    this.moods.set(id, mood);\n    await this.saveToFile();\n    return mood;\n  }\n\n  // Yeni işlevsellik için yöntemler\n  async getTasksByDate(dateISO: string): Promise<Task[]> {\n    const allTasks = Array.from(this.tasks.values());\n    const turkeyTime = new Date(new Date().toLocaleString('en-US', { timeZone: 'Europe/Istanbul' }));\n    const today = turkeyTime.toISOString().split('T')[0];\n    \n    const filteredTasks = allTasks.filter(task => {\n      if (task.dueDate) {\n        const taskDate = task.dueDate.split('T')[0];\n        return taskDate === dateISO;\n      }\n      \n      if (task.createdAt) {\n        const createdDate = new Date(task.createdAt).toISOString().split('T')[0];\n        return createdDate === dateISO;\n      }\n      \n      return false;\n    });\n\n    // Bugün için: \n    // - Tamamlanmamış aktif görevleri göster\n    // - Arşivlenen görevleri göster (tamamlanmış olsa bile) - \"(arşivlendi)\" etiketiyle\n    // - Silinen görevleri göster - \"(silindi)\" etiketiyle\n    // - Tamamlanmış ama arşivlenmemiş/silinmemiş görevleri gösterme\n    if (dateISO === today) {\n      return filteredTasks\n        .filter(task => {\n          // Arşivlenen veya silinen görevleri göster (etiketlenecek)\n          if (task.archived || task.deleted) return true;\n          \n          // Aktif görevlerden sadece tamamlanmayanları göster\n          return !task.completed;\n        })\n        .sort((a, b) => {\n          // Aktif görevler en üstte\n          const aActive = !a.archived && !a.deleted;\n          const bActive = !b.archived && !b.deleted;\n          \n          if (aActive && !bActive) return -1;\n          if (!aActive && bActive) return 1;\n          \n          return 0;\n        });\n    }\n    \n    // Geçmiş/gelecek günler için tüm görevleri göster\n    return filteredTasks;\n  }\n\n  async getDailySummary(rangeDays: number = 30): Promise<any> {\n    const allTasks = Array.from(this.tasks.values());\n    const moods = await this.getMoods();\n    \n    const today = new Date();\n    const summaryData = [];\n    \n    for (let i = 0; i < rangeDays; i++) {\n      const date = new Date(today);\n      date.setDate(today.getDate() - i);\n      const dateStr = date.toISOString().split('T')[0];\n      \n      // O gün için tüm görevleri bul (arşivlenen/silinen dahil)\n      const dayTasks = allTasks.filter(task => {\n        if (task.dueDate) {\n          const taskDate = task.dueDate.split('T')[0];\n          return taskDate === dateStr;\n        }\n        if (task.createdAt) {\n          const createdDate = new Date(task.createdAt).toISOString().split('T')[0];\n          return createdDate === dateStr;\n        }\n        return false;\n      });\n      \n      // Tamamlanan görevler (arşivlenen/silinen dahil)\n      const dayCompletedTasks = dayTasks.filter(task => task.completed);\n      \n      const dayMoods = moods.filter(mood => {\n        if (!mood.createdAt) return false;\n        const moodDate = new Date(mood.createdAt).toISOString().split('T')[0];\n        return moodDate === dateStr;\n      });\n      \n      summaryData.push({\n        date: dateStr,\n        tasksCompleted: dayCompletedTasks.length,\n        totalTasks: dayTasks.length,\n        moods: dayMoods,\n        productivity: dayTasks.length > 0 ? Math.min((dayCompletedTasks.length / dayTasks.length) * 100, 100) : 0\n      });\n    }\n    \n    return summaryData;\n  }\n  \n  // Hedef operasyonları\n  async getGoals(): Promise<Goal[]> {\n    return Array.from(this.goals.values()).sort((a, b) => \n      new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime()\n    );\n  }\n\n  async getGoal(id: string): Promise<Goal | undefined> {\n    return this.goals.get(id);\n  }\n\n  async createGoal(insertGoal: InsertGoal): Promise<Goal> {\n    const id = randomUUID();\n    const goal: Goal = {\n      id,\n      title: insertGoal.title,\n      description: insertGoal.description ?? null,\n      category: insertGoal.category ?? \"genel\",\n      targetDate: insertGoal.targetDate ?? null,\n      completed: insertGoal.completed ?? false,\n      currentValue: insertGoal.currentValue ?? \"0\",\n      targetValue: insertGoal.targetValue ?? \"100\",\n      unit: insertGoal.unit ?? \"net\",\n      timeframe: insertGoal.timeframe ?? \"aylık\",\n      createdAt: new Date(),\n    };\n    this.goals.set(id, goal);\n    await this.saveToFile();\n    return goal;\n  }\n\n  async updateGoal(id: string, updates: Partial<InsertGoal>): Promise<Goal | undefined> {\n    const existingGoal = this.goals.get(id);\n    if (!existingGoal) {\n      return undefined;\n    }\n\n    const updatedGoal: Goal = {\n      ...existingGoal,\n      ...updates,\n    };\n    this.goals.set(id, updatedGoal);\n    await this.saveToFile();\n    return updatedGoal;\n  }\n\n  async deleteGoal(id: string): Promise<boolean> {\n    const result = this.goals.delete(id);\n    if (result) await this.saveToFile();\n    return result;\n  }\n\n  // Soru günlüğü işlemleri\n  async getQuestionLogs(): Promise<QuestionLog[]> {\n    return Array.from(this.questionLogs.values())\n      .filter(log => !log.deleted && !log.archived)\n      .sort((a, b) => \n        new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime()\n      );\n  }\n\n  async getArchivedQuestionLogs(): Promise<QuestionLog[]> {\n    // TÜM ARŞİVLENMİŞ VERİLERİ DÖNDÜR - tarih limiti yok\n    return Array.from(this.questionLogs.values())\n      .filter(log => !log.deleted && log.archived)\n      .sort((a, b) => \n        new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime()\n      );\n  }\n\n  // İstatistikler için silinmiş kayıtları da dahil et\n  async getAllQuestionLogsIncludingDeleted(): Promise<QuestionLog[]> {\n    return Array.from(this.questionLogs.values())\n      .sort((a, b) => \n        new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime()\n      );\n  }\n\n  async createQuestionLog(insertLog: InsertQuestionLog): Promise<QuestionLog> {\n    const id = randomUUID();\n    \n    // Yanlış konuları normalleştirerek konu öneklerini kaldırın\n    const normalizedWrongTopics = insertLog.wrong_topics ? \n      insertLog.wrong_topics\n        .filter(topic => topic != null && topic !== '')\n        .map(topic => this.normalizeTopic(String(topic))) : [];\n    \n    const log: QuestionLog = {\n      id,\n      exam_type: insertLog.exam_type,\n      subject: insertLog.subject,\n      topic: insertLog.topic ?? null,\n      correct_count: insertLog.correct_count,\n      wrong_count: insertLog.wrong_count,\n      blank_count: insertLog.blank_count ?? \"0\",\n      wrong_topics: normalizedWrongTopics,\n      wrong_topics_json: insertLog.wrong_topics_json ?? null,\n      time_spent_minutes: insertLog.time_spent_minutes ?? null,\n      study_date: insertLog.study_date,\n      deleted: false,\n      deletedAt: null,\n      archived: false,\n      archivedAt: null,\n      createdAt: new Date(),\n    };\n    this.questionLogs.set(id, log);\n    await this.saveToFile();\n    return log;\n  }\n\n  async getQuestionLogsByDateRange(startDate: string, endDate: string): Promise<QuestionLog[]> {\n    const logs = Array.from(this.questionLogs.values());\n    return logs.filter(log => {\n      const logDate = log.study_date;\n      return logDate >= startDate && logDate <= endDate;\n    }).sort((a, b) => new Date(b.study_date).getTime() - new Date(a.study_date).getTime());\n  }\n\n  async updateQuestionLog(id: string, updates: Partial<InsertQuestionLog> | any): Promise<QuestionLog | undefined> {\n    const log = this.questionLogs.get(id);\n    if (!log) return undefined;\n    \n    const updatedLog: QuestionLog = {\n      ...log,\n      ...updates,\n      id,\n    } as QuestionLog;\n    \n    this.questionLogs.set(id, updatedLog);\n    await this.saveToFile();\n    return updatedLog;\n  }\n\n  async archiveQuestionLog(id: string): Promise<QuestionLog | undefined> {\n    const log = this.questionLogs.get(id);\n    if (!log) return undefined;\n    \n    const updatedLog: QuestionLog = {\n      ...log,\n      archived: true,\n      archivedAt: new Date().toISOString(),\n    };\n    this.questionLogs.set(id, updatedLog);\n    await this.saveToFile();\n    return updatedLog;\n  }\n\n  async deleteQuestionLog(id: string): Promise<boolean> {\n    const log = this.questionLogs.get(id);\n    if (!log) return false;\n    \n    const updatedLog: QuestionLog = {\n      ...log,\n      deleted: true,\n      deletedAt: new Date().toISOString(),\n    };\n    this.questionLogs.set(id, updatedLog);\n    await this.saveToFile();\n    return true;\n  }\n\n  async deleteAllQuestionLogs(): Promise<boolean> {\n    this.questionLogs.clear();\n    await this.saveToFile();\n    return true;\n  }\n  \n  // Sınav sonucu işlemleri\n  async getExamResults(): Promise<ExamResult[]> {\n    return Array.from(this.examResults.values())\n      .filter(result => !result.deleted && !result.archived)\n      .sort((a, b) => \n        new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime()\n      );\n  }\n\n  async getArchivedExamResults(): Promise<ExamResult[]> {\n    // TÜM ARŞİVLENMİŞ VERİLERİ DÖNDÜR - tarih limiti yok\n    return Array.from(this.examResults.values())\n      .filter(result => !result.deleted && result.archived)\n      .sort((a, b) => \n        new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime()\n      );\n  }\n\n  // İstatistikler için silinmiş kayıtları da dahil et\n  async getAllExamResultsIncludingDeleted(): Promise<ExamResult[]> {\n    return Array.from(this.examResults.values())\n      .sort((a, b) => \n        new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime()\n      );\n  }\n\n  async createExamResult(insertResult: InsertExamResult): Promise<ExamResult> {\n    const id = randomUUID();\n    \n    // Eğer kullanıcı display_name sağladıysa onu kullan, yoksa otomatik oluştur\n    let displayName = insertResult.display_name || insertResult.exam_name;\n    \n    // Sadece display_name sağlanmadıysa otomatik isim oluştur\n    if (!insertResult.display_name) {\n      // Ders isimlerini Türkçe'ye çevir\n      const subjectNameMap: { [key: string]: string } = {\n        \"turkce\": \"Türkçe\",\n        \"matematik\": \"Matematik\",\n        \"sosyal\": \"Sosyal Bilimler\",\n        \"fen\": \"Fen Bilimleri\",\n        \"fizik\": \"Fizik\",\n        \"kimya\": \"Kimya\",\n        \"biyoloji\": \"Biyoloji\",\n        \"geometri\": \"Geometri\",\n      };\n      \n      if (insertResult.exam_scope === \"full\") {\n        if (insertResult.exam_type) {\n          displayName = `Genel ${insertResult.exam_type} Deneme`;\n        } else {\n          displayName = \"Genel Deneme\";\n        }\n      } else if (insertResult.exam_scope === \"branch\") {\n        const parts = [];\n        if (insertResult.exam_type) parts.push(insertResult.exam_type);\n        if (insertResult.selected_subject) {\n          const mappedSubject = subjectNameMap[insertResult.selected_subject] || insertResult.selected_subject;\n          parts.push(mappedSubject);\n        }\n        parts.push(\"Branş Denemesi\");\n        displayName = parts.join(\" \");\n      }\n    }\n    \n    const result: ExamResult = {\n      id,\n      exam_name: insertResult.exam_name,\n      display_name: displayName,\n      exam_date: insertResult.exam_date,\n      exam_type: insertResult.exam_type ?? null,\n      exam_scope: insertResult.exam_scope ?? null,\n      selected_subject: insertResult.selected_subject ?? null,\n      notes: insertResult.notes ?? null,\n      ranking: insertResult.ranking ?? null,\n      tyt_net: insertResult.tyt_net ?? \"0\",\n      ayt_net: insertResult.ayt_net ?? \"0\",\n      subjects_data: insertResult.subjects_data ?? null,\n      time_spent_minutes: insertResult.time_spent_minutes ?? 0,\n      deleted: false,\n      deletedAt: null,\n      archived: false,\n      archivedAt: null,\n      createdAt: new Date(),\n    };\n    this.examResults.set(id, result);\n    await this.saveToFile();\n    return result;\n  }\n\n  async updateExamResult(id: string, updates: Partial<InsertExamResult>): Promise<ExamResult | undefined> {\n    const examResult = this.examResults.get(id);\n    if (!examResult) return undefined;\n    \n    const updatedResult: ExamResult = {\n      ...examResult,\n      ...updates,\n      id, // ID'yi değiştirme\n      createdAt: examResult.createdAt, // Oluşturma tarihini koru\n    };\n    \n    this.examResults.set(id, updatedResult);\n    await this.saveToFile();\n    return updatedResult;\n  }\n\n  async deleteExamResult(id: string): Promise<boolean> {\n    const examResult = this.examResults.get(id);\n    if (!examResult) return false;\n    \n    const updatedResult: ExamResult = {\n      ...examResult,\n      deleted: true,\n      deletedAt: new Date().toISOString(),\n    };\n    this.examResults.set(id, updatedResult);\n    await this.saveToFile();\n    return true;\n  }\n\n  async deleteAllExamResults(): Promise<boolean> {\n    this.examResults.clear();\n    this.examSubjectNets.clear(); // Ayrıca tüm konu ağlarını temizle\n    await this.saveToFile();\n    return true;\n  }\n  // Flashcard işlemleri (silinecek)\n  \n  // TYT/AYT konu öneklerini kaldırarak konu adlarını normalleştirin\n  private normalizeTopic(topic: string): string {\n    // TYT veya AYT ile başlayan ve ardından herhangi bir karakter dizisi, boşluk, tire ve ardından gerçek konu adı gelen konuları normalleştir\n    if (typeof topic !== 'string') {\n      return String(topic || '').trim();\n    }\n    return topic.replace(/^(TYT|AYT)\\s+[^-]+\\s+-\\s+/, '').trim();\n  }\n\n  // Konu istatistik işlemleri (kullanıcılar tarafından belirtilen belirli yanlış konular)\n  async getTopicStats(): Promise<Array<{ topic: string; wrongMentions: number; totalSessions: number; mentionFrequency: number }>> {\n    // Silinmiş ve arşivlenmiş olanlar DAHİL tüm logları al - istatistikler için\n    const logs = Array.from(this.questionLogs.values()).filter(log => !log.deleted && !log.archived);\n    const examSubjectNets = Array.from(this.examSubjectNets.values());\n    const topicStats = new Map<string, { wrongMentions: number; sessionsAppeared: Set<string> }>();\n\n    // Süreç soru günlükleri\n    logs.forEach(log => {\n      // Sadece özellikle belirtilen yanlış konuları takip et, genel konuları değil\n      if (log.wrong_topics && log.wrong_topics.length > 0) {\n        log.wrong_topics.forEach(topic => {\n          let topicName = '';\n          if (typeof topic === 'string') {\n            topicName = topic;\n          } else if (topic && typeof topic === 'object') {\n            topicName = (topic as any)?.topic || (topic as any)?.name || '';\n          }\n          \n          if (topicName && topicName.trim()) {\n            const normalizedTopic = this.normalizeTopic(topicName);\n            if (!topicStats.has(normalizedTopic)) {\n              topicStats.set(normalizedTopic, { wrongMentions: 0, sessionsAppeared: new Set() });\n            }\n            const topicStat = topicStats.get(normalizedTopic)!;\n            topicStat.wrongMentions += 1; // Bu konunun yanlış olarak ne kadar sıklıkla belirtildiğini say\n            topicStat.sessionsAppeared.add(log.id); // Bu konunun göründüğü benzersiz oturumları takip et\n          }\n        });\n      }\n    });\n\n    // exam_subject_nets tablosundan wrong_topics_json'u parse et\n    examSubjectNets.forEach(subjectNet => {\n      if (subjectNet.wrong_topics_json) {\n        try {\n          const wrongTopicsData = JSON.parse(subjectNet.wrong_topics_json);\n          if (Array.isArray(wrongTopicsData)) {\n            wrongTopicsData.forEach((topicEntry: any) => {\n              const topicName = typeof topicEntry === 'string' ? topicEntry : topicEntry.topic;\n              if (topicName && topicName.trim().length > 0) {\n                const normalizedTopic = this.normalizeTopic(topicName);\n                if (!topicStats.has(normalizedTopic)) {\n                  topicStats.set(normalizedTopic, { wrongMentions: 0, sessionsAppeared: new Set() });\n                }\n                const topicStat = topicStats.get(normalizedTopic)!;\n                topicStat.wrongMentions += 2; // Ağırlık hataları daha yüksek (2 kat)\n                topicStat.sessionsAppeared.add(`examnet_${subjectNet.id}`);\n              }\n            });\n          }\n        } catch (e) {\n          // Bozuk JSON'ları atla\n        }\n      }\n    });\n\n    const totalUniqueSessions = topicStats.size > 0 \n      ? Math.max(logs.length, Array.from(new Set(\n          [...Array.from(topicStats.values()).flatMap(s => Array.from(s.sessionsAppeared))]\n        )).length)\n      : logs.length;\n    \n    return Array.from(topicStats.entries())\n      .map(([topic, stats]) => ({\n        topic,\n        wrongMentions: stats.wrongMentions,\n        totalSessions: stats.sessionsAppeared.size,\n        mentionFrequency: totalUniqueSessions > 0 ? (stats.sessionsAppeared.size / totalUniqueSessions) * 100 : 0\n      }))\n      .filter(stat => stat.wrongMentions >= 2) // Gürültüyü önlemek için en az iki kez bahsedilen konuları göster\n      .sort((a, b) => b.wrongMentions - a.wrongMentions);\n  }\n\n  async getPriorityTopics(): Promise<Array<{ topic: string; wrongMentions: number; mentionFrequency: number; priority: 'critical' | 'high' | 'medium' | 'low'; color: string }>> {\n    const topicStats = await this.getTopicStats();\n    \n    return topicStats.map(stat => {\n      let priority: 'critical' | 'high' | 'medium' | 'low';\n      let color: string;\n      \n      // Yanlış bahsetme sayısı ve sıklığına göre öncelik\n      if (stat.wrongMentions >= 10 || stat.mentionFrequency >= 50) {\n        priority = 'critical';\n        color = '#DC2626'; // Kırmızı\n      } else if (stat.wrongMentions >= 6 || stat.mentionFrequency >= 30) {\n        priority = 'high';\n        color = '#EA580C'; // Turuncu\n      } else if (stat.wrongMentions >= 3 || stat.mentionFrequency >= 15) {\n        priority = 'medium';\n        color = '#D97706'; // Amber\n      } else {\n        priority = 'low';\n        color = '#16A34A'; // Yeşil\n      }\n      \n      return {\n        topic: stat.topic,\n        wrongMentions: stat.wrongMentions,\n        mentionFrequency: stat.mentionFrequency,\n        priority,\n        color\n      };\n    });\n  }\n\n  async getSubjectSolvedStats(): Promise<Array<{ subject: string; totalQuestions: number; totalTimeMinutes: number; averageTimePerQuestion: number }>> {\n    const logs = Array.from(this.questionLogs.values());\n    const subjectStats = new Map<string, { totalQuestions: number; totalTimeMinutes: number }>();\n\n    logs.forEach(log => {\n      const totalQuestions = parseInt(log.correct_count) + parseInt(log.wrong_count) + parseInt(log.blank_count || \"0\");\n      const timeSpent = log.time_spent_minutes || 0;\n      \n      if (!subjectStats.has(log.subject)) {\n        subjectStats.set(log.subject, { totalQuestions: 0, totalTimeMinutes: 0 });\n      }\n      \n      const stats = subjectStats.get(log.subject)!;\n      stats.totalQuestions += totalQuestions;\n      stats.totalTimeMinutes += timeSpent;\n    });\n\n    return Array.from(subjectStats.entries())\n      .map(([subject, stats]) => ({\n        subject,\n        totalQuestions: stats.totalQuestions,\n        totalTimeMinutes: stats.totalTimeMinutes,\n        averageTimePerQuestion: stats.totalQuestions > 0 ? stats.totalTimeMinutes / stats.totalQuestions : 0\n      }))\n      .filter(stat => stat.totalQuestions > 0)\n      .sort((a, b) => b.totalQuestions - a.totalQuestions);\n  }\n\n  // Yanlış bahsetme sayısı ve sıklığına göre öncelikSınav konusu ağ işlemleri\n  async getExamSubjectNets(): Promise<ExamSubjectNet[]> {\n    return Array.from(this.examSubjectNets.values()).sort((a, b) => \n      new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime()\n    );\n  }\n\n  async getExamSubjectNetsByExamId(examId: string): Promise<ExamSubjectNet[]> {\n    return Array.from(this.examSubjectNets.values())\n      .filter(net => net.exam_id === examId)\n      .sort((a, b) => a.subject.localeCompare(b.subject));\n  }\n\n  async createExamSubjectNet(insertNet: InsertExamSubjectNet): Promise<ExamSubjectNet> {\n    // Sınavın varlığını doğrulayın\n    const examExists = this.examResults.has(insertNet.exam_id);\n    if (!examExists) {\n      throw new Error(`Exam with id ${insertNet.exam_id} does not exist`);\n    }\n    \n    const id = randomUUID();\n    const examSubjectNet: ExamSubjectNet = {\n      id,\n      exam_id: insertNet.exam_id,\n      exam_type: insertNet.exam_type,\n      subject: insertNet.subject,\n      net_score: insertNet.net_score,\n      correct_count: insertNet.correct_count ?? \"0\",\n      wrong_count: insertNet.wrong_count ?? \"0\",\n      blank_count: insertNet.blank_count ?? \"0\",\n      wrong_topics_json: insertNet.wrong_topics_json ?? null,\n      createdAt: new Date(),\n    };\n    this.examSubjectNets.set(id, examSubjectNet);\n    await this.saveToFile();\n    return examSubjectNet;\n  }\n\n  async updateExamSubjectNet(id: string, updates: Partial<InsertExamSubjectNet>): Promise<ExamSubjectNet | undefined> {\n    const existing = this.examSubjectNets.get(id);\n    if (!existing) {\n      return undefined;\n    }\n\n    const updated: ExamSubjectNet = {\n      ...existing,\n      ...updates,\n    };\n    this.examSubjectNets.set(id, updated);\n    await this.saveToFile();\n    return updated;\n  }\n\n  async deleteExamSubjectNet(id: string): Promise<boolean> {\n    const result = this.examSubjectNets.delete(id);\n    if (result) await this.saveToFile();\n    return result;\n  }\n\n  async deleteExamSubjectNetsByExamId(examId: string): Promise<boolean> {\n    const netsToDelete = Array.from(this.examSubjectNets.entries())\n      .filter(([_, net]) => net.exam_id === examId);\n    \n    let deletedAny = false;\n    for (const [id, _] of netsToDelete) {\n      if (this.examSubjectNets.delete(id)) {\n        deletedAny = true;\n      }\n    }\n    if (deletedAny) await this.saveToFile();\n    return deletedAny;\n  }\n\n  // Çalışma saati işlemleri\n  async getStudyHours(): Promise<StudyHours[]> {\n    return Array.from(this.studyHours.values())\n      .filter(sh => !sh.deleted && !sh.archived)\n      .sort((a, b) => \n        new Date(b.study_date).getTime() - new Date(a.study_date).getTime()\n      );\n  }\n\n  async getArchivedStudyHours(): Promise<StudyHours[]> {\n    // TÜM ARŞİVLENMİŞ VERİLERİ DÖNDÜR - tarih limiti yok\n    return Array.from(this.studyHours.values())\n      .filter(sh => !sh.deleted && sh.archived)\n      .sort((a, b) => \n        new Date(b.study_date).getTime() - new Date(a.study_date).getTime()\n      );\n  }\n\n  // İstatistikler için silinmiş kayıtları da dahil et\n  async getAllStudyHoursIncludingDeleted(): Promise<StudyHours[]> {\n    return Array.from(this.studyHours.values())\n      .sort((a, b) => \n        new Date(b.study_date).getTime() - new Date(a.study_date).getTime()\n      );\n  }\n\n  async getStudyHoursByDate(date: string): Promise<StudyHours | undefined> {\n    return Array.from(this.studyHours.values()).find(sh => sh.study_date === date);\n  }\n\n  async createStudyHours(insertHours: InsertStudyHours): Promise<StudyHours> {\n    const id = randomUUID();\n    const studyHours: StudyHours = {\n      id,\n      study_date: insertHours.study_date,\n      hours: insertHours.hours ?? 0,\n      minutes: insertHours.minutes ?? 0,\n      seconds: insertHours.seconds ?? 0,\n      deleted: false,\n      deletedAt: null,\n      archived: false,\n      archivedAt: null,\n      createdAt: new Date(),\n    };\n    this.studyHours.set(id, studyHours);\n    await this.saveToFile();\n    return studyHours;\n  }\n\n  async updateStudyHours(id: string, updates: Partial<InsertStudyHours>): Promise<StudyHours | undefined> {\n    const existing = this.studyHours.get(id);\n    if (!existing) {\n      return undefined;\n    }\n\n    const updated: StudyHours = {\n      ...existing,\n      ...updates,\n    };\n    this.studyHours.set(id, updated);\n    await this.saveToFile();\n    return updated;\n  }\n\n  async deleteStudyHours(id: string): Promise<boolean> {\n    const studyHour = this.studyHours.get(id);\n    if (!studyHour) return false;\n    \n    const updatedStudyHour: StudyHours = {\n      ...studyHour,\n      deleted: true,\n      deletedAt: new Date().toISOString(),\n    };\n    this.studyHours.set(id, updatedStudyHour);\n    await this.saveToFile();\n    return true;\n  }\n\n  async autoArchiveOldData(): Promise<void> {\n    const now = new Date();\n    // Türkiye saati için bugünün tarihini al\n    const turkeyTime = new Date(now.toLocaleString('en-US', { timeZone: 'Europe/Istanbul' }));\n    const today = turkeyTime.toISOString().split('T')[0];\n    \n    let hasChanges = false;\n\n    // Soru günlüklerini arşivle (silinmiş olanlar da dahil, verileri tutmak için)\n    for (const [id, log] of this.questionLogs.entries()) {\n      if (!log.archived && log.study_date) {\n        const logDateStr = log.study_date.split('T')[0];\n        // Sadece BUGÜNDEN ÖNCEKİ günleri arşivle (bugün hariç)\n        if (logDateStr < today) {\n          const updated = {\n            ...log,\n            archived: true,\n            archivedAt: now.toISOString(),\n          };\n          this.questionLogs.set(id, updated);\n          hasChanges = true;\n        }\n      }\n    }\n\n    // Sınav sonuçlarını arşivle (silinmiş olanlar da dahil)\n    for (const [id, result] of this.examResults.entries()) {\n      if (!result.archived && result.exam_date) {\n        const examDateStr = result.exam_date.split('T')[0];\n        // Sadece BUGÜNDEN ÖNCEKİ günleri arşivle (bugün hariç)\n        if (examDateStr < today) {\n          const updated = {\n            ...result,\n            archived: true,\n            archivedAt: now.toISOString(),\n          };\n          this.examResults.set(id, updated);\n          hasChanges = true;\n        }\n      }\n    }\n\n    // Çalışma saatlerini arşivle (silinmiş olanlar da dahil)\n    for (const [id, sh] of this.studyHours.entries()) {\n      if (!sh.archived && sh.study_date) {\n        const shDateStr = sh.study_date.split('T')[0];\n        // Sadece BUGÜNDEN ÖNCEKİ günleri arşivle (bugün hariç)\n        if (shDateStr < today) {\n          const updated = {\n            ...sh,\n            archived: true,\n            archivedAt: now.toISOString(),\n          };\n          this.studyHours.set(id, updated);\n          hasChanges = true;\n        }\n      }\n    }\n\n    // Görevleri arşivle (bugünden önceki görevler)\n    for (const [id, task] of this.tasks.entries()) {\n      if (!task.archived && !task.deleted) {\n        // Silinen görevleri arşivleme - zaten silinmişler\n        // Eğer dueDate varsa o tarihe göre, yoksa createdAt'e göre arşivle\n        let shouldArchive = false;\n        \n        if (task.dueDate) {\n          const taskDateStr = task.dueDate.split('T')[0];\n          // Sadece BUGÜNDEN ÖNCEKİ görevleri arşivle (bugün hariç)\n          // Hem tamamlanan hem tamamlanmayan görevler arşivlenecek\n          shouldArchive = taskDateStr < today;\n        } else if (task.createdAt) {\n          const createdDateStr = new Date(task.createdAt).toISOString().split('T')[0];\n          // Tarihi olmayan görevler sadece geçmişte oluşturulmuşsa arşivlenir\n          // Hem tamamlanan hem tamamlanmayan görevler arşivlenecek\n          shouldArchive = createdDateStr < today;\n        }\n        \n        if (shouldArchive) {\n          const updated = {\n            ...task,\n            archived: true,\n            archivedAt: now.toISOString(),\n          };\n          this.tasks.set(id, updated);\n          hasChanges = true;\n        }\n      }\n    }\n\n    if (hasChanges) {\n      await this.saveToFile();\n    }\n  }\n\n  // Setup işlemleri\n  async getSetupStatus(): Promise<SetupCompleted | undefined> {\n    return this.setupData;\n  }\n\n  async completeSetup(termsAccepted: boolean): Promise<SetupCompleted> {\n    this.setupData = {\n      id: \"1\",\n      completed: true,\n      termsAccepted,\n      completedAt: new Date().toISOString(),\n      createdAt: new Date(),\n    };\n    await this.saveToFile();\n    return this.setupData;\n  }\n}\n\nlet sqlConnection: any = null;\nlet db: any = null;\n\n// PostgreSQL devre dışı - sadece JSON dosyası kullanılıyor\nconsole.log(\"ℹ️  Using in-memory storage with JSON file persistence (kayitlar.json)\");\n\nexport class DbStorage implements IStorage {\n  // Görev işlemleri\n  async getTasks(): Promise<Task[]> {\n    return await db.select().from(tasks).where(eq(tasks.archived, false)).orderBy(desc(tasks.createdAt));\n  }\n\n  async getTask(id: string): Promise<Task | undefined> {\n    const result = await db.select().from(tasks).where(eq(tasks.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createTask(insertTask: InsertTask): Promise<Task> {\n    const result = await db.insert(tasks).values(insertTask as any).returning();\n    return result[0];\n  }\n\n  async updateTask(id: string, updates: Partial<InsertTask>): Promise<Task | undefined> {\n    const result = await db.update(tasks).set(updates).where(eq(tasks.id, id)).returning();\n    return result[0];\n  }\n\n  async deleteTask(id: string): Promise<boolean> {\n    const result = await db.delete(tasks).where(eq(tasks.id, id));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  async toggleTaskComplete(id: string): Promise<Task | undefined> {\n    const task = await this.getTask(id);\n    if (!task) return undefined;\n    \n    const result = await db.update(tasks).set({\n      completed: !task.completed,\n      completedAt: !task.completed ? new Date().toISOString() : null,\n    } as any).where(eq(tasks.id, id)).returning();\n    return result[0];\n  }\n\n  async archiveTask(id: string): Promise<Task | undefined> {\n    const result = await db.update(tasks).set({\n      archived: true,\n      archivedAt: new Date().toISOString(),\n    } as any).where(eq(tasks.id, id)).returning();\n    return result[0];\n  }\n\n  async getArchivedTasks(): Promise<Task[]> {\n    return await db.select().from(tasks).where(eq(tasks.archived, true)).orderBy(desc(tasks.archivedAt));\n  }\n\n  async getTasksByDateRange(startDate: string, endDate: string): Promise<Task[]> {\n    const allTasks = await db.select().from(tasks);\n    return allTasks.filter(task => {\n      if (task.archived) return false;\n      if (!task.dueDate) return false;\n      const taskDate = task.dueDate.split('T')[0];\n      return taskDate >= startDate && taskDate <= endDate;\n    }).sort((a, b) => {\n      const aDate = a.dueDate ? a.dueDate.split('T')[0] : '';\n      const bDate = b.dueDate ? b.dueDate.split('T')[0] : '';\n      return bDate.localeCompare(aDate);\n    });\n  }\n\n  async getTasksByDate(dateISO: string): Promise<Task[]> {\n    const today = new Date().toISOString().split('T')[0];\n    \n    const allTasks = await db.select().from(tasks);\n    \n    const filteredTasks = allTasks.filter(task => {\n      if (task.dueDate) {\n        const taskDate = task.dueDate.split('T')[0];\n        return taskDate === dateISO;\n      }\n      \n      if (task.createdAt) {\n        const createdDate = new Date(task.createdAt).toISOString().split('T')[0];\n        return createdDate === dateISO;\n      }\n      \n      return false;\n    });\n\n    // Bugün için: \n    // - Tamamlanmamış aktif görevleri göster\n    // - Arşivlenen görevleri göster (tamamlanmış olsa bile) - \"(arşivlendi)\" etiketiyle\n    // - Silinen görevleri göster - \"(silindi)\" etiketiyle\n    // - Tamamlanmış ama arşivlenmemiş/silinmemiş görevleri gösterme\n    if (dateISO === today) {\n      return filteredTasks\n        .filter(task => {\n          // Arşivlenen veya silinen görevleri göster (etiketlenecek)\n          if (task.archived || task.deleted) return true;\n          \n          // Aktif görevlerden sadece tamamlanmayanları göster\n          return !task.completed;\n        })\n        .sort((a, b) => {\n          // Aktif görevler en üstte\n          const aActive = !a.archived && !a.deleted;\n          const bActive = !b.archived && !b.deleted;\n          \n          if (aActive && !bActive) return -1;\n          if (!aActive && bActive) return 1;\n          \n          return 0;\n        });\n    }\n    \n    // Geçmiş/gelecek günler için tüm görevleri göster\n    return filteredTasks;\n  }\n\n  async getDailySummary(rangeDays: number = 30): Promise<any> {\n    const allTasks = await db.select().from(tasks);\n    const allMoods = await db.select().from(moods);\n    \n    const today = new Date();\n    const summaryData = [];\n    \n    for (let i = 0; i < rangeDays; i++) {\n      const date = new Date(today);\n      date.setDate(today.getDate() - i);\n      const dateStr = date.toISOString().split('T')[0];\n      \n      // O gün için tüm görevleri bul (arşivlenen/silinen dahil)\n      const dayTasks = allTasks.filter(task => {\n        if (task.dueDate) {\n          const taskDate = task.dueDate.split('T')[0];\n          return taskDate === dateStr;\n        }\n        if (task.createdAt) {\n          const createdDate = new Date(task.createdAt).toISOString().split('T')[0];\n          return createdDate === dateStr;\n        }\n        return false;\n      });\n      \n      // Tamamlanan görevler (arşivlenen/silinen dahil)\n      const dayCompletedTasks = dayTasks.filter(task => task.completed);\n      \n      const dayMoods = allMoods.filter(mood => {\n        if (!mood.createdAt) return false;\n        const moodDate = new Date(mood.createdAt).toISOString().split('T')[0];\n        return moodDate === dateStr;\n      });\n      \n      summaryData.push({\n        date: dateStr,\n        tasksCompleted: dayCompletedTasks.length,\n        totalTasks: dayTasks.length,\n        moods: dayMoods,\n        productivity: dayTasks.length > 0 ? Math.min((dayCompletedTasks.length / dayTasks.length) * 100, 100) : 0\n      });\n    }\n    \n    return summaryData;\n  }\n\n  // Ruh hali işlemleri\n  async getMoods(): Promise<Mood[]> {\n    return await db.select().from(moods).orderBy(desc(moods.createdAt));\n  }\n\n  async getLatestMood(): Promise<Mood | undefined> {\n    const result = await db.select().from(moods).orderBy(desc(moods.createdAt)).limit(1);\n    return result[0];\n  }\n\n  async createMood(insertMood: InsertMood): Promise<Mood> {\n    const result = await db.insert(moods).values(insertMood as any).returning();\n    return result[0];\n  }\n\n  // Hedef işlemleri\n  async getGoals(): Promise<Goal[]> {\n    return await db.select().from(goals).orderBy(desc(goals.createdAt));\n  }\n\n  async getGoal(id: string): Promise<Goal | undefined> {\n    const result = await db.select().from(goals).where(eq(goals.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createGoal(insertGoal: InsertGoal): Promise<Goal> {\n    const result = await db.insert(goals).values(insertGoal as any).returning();\n    return result[0];\n  }\n\n  async updateGoal(id: string, updates: Partial<InsertGoal>): Promise<Goal | undefined> {\n    const result = await db.update(goals).set(updates).where(eq(goals.id, id)).returning();\n    return result[0];\n  }\n\n  async deleteGoal(id: string): Promise<boolean> {\n    const result = await db.delete(goals).where(eq(goals.id, id));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  // Soru günlüğü işlemleri\n  async getQuestionLogs(): Promise<QuestionLog[]> {\n    return await db.select().from(questionLogs)\n      .where(and(\n        eq(questionLogs.deleted, false),\n        eq(questionLogs.archived, false)\n      ))\n      .orderBy(desc(questionLogs.createdAt));\n  }\n\n  async createQuestionLog(insertLog: InsertQuestionLog): Promise<QuestionLog> {\n    const result = await db.insert(questionLogs).values(insertLog as any).returning();\n    return result[0];\n  }\n\n  async updateQuestionLog(id: string, updates: Partial<InsertQuestionLog> | any): Promise<QuestionLog | undefined> {\n    const result = await db.update(questionLogs).set(updates as any).where(eq(questionLogs.id, id)).returning();\n    return result[0];\n  }\n\n  async archiveQuestionLog(id: string): Promise<QuestionLog | undefined> {\n    const result = await db.update(questionLogs).set({\n      archived: true,\n      archivedAt: new Date().toISOString(),\n    } as any).where(eq(questionLogs.id, id)).returning();\n    return result[0];\n  }\n\n  async getQuestionLogsByDateRange(startDate: string, endDate: string): Promise<QuestionLog[]> {\n    return await db.select().from(questionLogs)\n      .where(and(\n        gte(questionLogs.study_date, startDate),\n        lte(questionLogs.study_date, endDate)\n      ))\n      .orderBy(desc(questionLogs.study_date));\n  }\n\n  async deleteQuestionLog(id: string): Promise<boolean> {\n    const result = await db.delete(questionLogs).where(eq(questionLogs.id, id));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  async deleteAllQuestionLogs(): Promise<boolean> {\n    await db.delete(questionLogs);\n    return true;\n  }\n\n  async getArchivedQuestionLogs(): Promise<QuestionLog[]> {\n    return await db.select().from(questionLogs).where(eq(questionLogs.archived, true)).orderBy(desc(questionLogs.createdAt));\n  }\n\n  // Konu istatistikleri işlemleri\n  async getTopicStats(): Promise<Array<{ topic: string; wrongMentions: number; totalSessions: number; mentionFrequency: number }>> {\n    // ARŞİVLENEN VERİLERİ DAHİL ET - Tüm verileri kullan (arşivli + aktif)\n    const logs = await this.getAllQuestionLogsIncludingDeleted();\n    const examSubjectNets = await this.getExamSubjectNets();\n    const topicStats = new Map<string, { wrongMentions: number; sessionsAppeared: Set<string> }>();\n\n    logs.forEach(log => {\n      // Önce wrong_topics_json'u dene (yeni format)\n      let wrongTopicsData: any[] = [];\n      \n      if (log.wrong_topics_json) {\n        try {\n          wrongTopicsData = JSON.parse(log.wrong_topics_json);\n        } catch (e) {\n          // JSON parse hatası, devam et\n        }\n      }\n      \n      // Eğer wrong_topics_json boşsa, eski wrong_topics array'ini kullan\n      if (wrongTopicsData.length === 0 && log.wrong_topics && log.wrong_topics.length > 0) {\n        wrongTopicsData = log.wrong_topics;\n      }\n      \n      // Şimdi wrong topics'leri işle\n      if (wrongTopicsData.length > 0) {\n        wrongTopicsData.forEach(topic => {\n          let topicName = '';\n          if (typeof topic === 'string') {\n            topicName = topic;\n          } else if (topic && typeof topic === 'object') {\n            topicName = (topic as any)?.topic || (topic as any)?.name || '';\n          }\n          \n          if (topicName && topicName.trim()) {\n            const normalizedTopic = this.normalizeTopic(topicName);\n            if (!topicStats.has(normalizedTopic)) {\n              topicStats.set(normalizedTopic, { wrongMentions: 0, sessionsAppeared: new Set() });\n            }\n            const topicStat = topicStats.get(normalizedTopic)!;\n            topicStat.wrongMentions += 1;\n            topicStat.sessionsAppeared.add(log.id);\n          }\n        });\n      }\n    });\n\n    // exam_subject_nets tablosundan wrong_topics_json'u parse et\n    examSubjectNets.forEach(subjectNet => {\n      if (subjectNet.wrong_topics_json) {\n        try {\n          const wrongTopicsData = JSON.parse(subjectNet.wrong_topics_json);\n          if (Array.isArray(wrongTopicsData)) {\n            wrongTopicsData.forEach((topicEntry: any) => {\n              const topicName = typeof topicEntry === 'string' ? topicEntry : topicEntry.topic;\n              if (topicName && topicName.trim().length > 0) {\n                const normalizedTopic = this.normalizeTopic(topicName);\n                if (!topicStats.has(normalizedTopic)) {\n                  topicStats.set(normalizedTopic, { wrongMentions: 0, sessionsAppeared: new Set() });\n                }\n                const topicStat = topicStats.get(normalizedTopic)!;\n                topicStat.wrongMentions += 2;\n                topicStat.sessionsAppeared.add(`examnet_${subjectNet.id}`);\n              }\n            });\n          }\n        } catch (e) {\n          // Skip broken JSON\n        }\n      }\n    });\n\n    const totalUniqueSessions = topicStats.size > 0 \n      ? Math.max(logs.length, Array.from(new Set(\n          [...Array.from(topicStats.values()).flatMap(s => Array.from(s.sessionsAppeared))]\n        )).length)\n      : logs.length;\n    \n    return Array.from(topicStats.entries())\n      .map(([topic, stats]) => ({\n        topic,\n        wrongMentions: stats.wrongMentions,\n        totalSessions: stats.sessionsAppeared.size,\n        mentionFrequency: totalUniqueSessions > 0 ? (stats.sessionsAppeared.size / totalUniqueSessions) * 100 : 0\n      }))\n      .filter(stat => stat.wrongMentions >= 2)\n      .sort((a, b) => b.wrongMentions - a.wrongMentions);\n  }\n\n  async getPriorityTopics(): Promise<Array<{ topic: string; wrongMentions: number; mentionFrequency: number; priority: 'critical' | 'high' | 'medium' | 'low'; color: string }>> {\n    const topicStats = await this.getTopicStats();\n    \n    return topicStats.map(stat => {\n      let priority: 'critical' | 'high' | 'medium' | 'low';\n      let color: string;\n      \n      if (stat.wrongMentions >= 10 || stat.mentionFrequency >= 50) {\n        priority = 'critical';\n        color = '#DC2626';\n      } else if (stat.wrongMentions >= 6 || stat.mentionFrequency >= 30) {\n        priority = 'high';\n        color = '#EA580C';\n      } else if (stat.wrongMentions >= 3 || stat.mentionFrequency >= 15) {\n        priority = 'medium';\n        color = '#D97706';\n      } else {\n        priority = 'low';\n        color = '#16A34A';\n      }\n      \n      return {\n        topic: stat.topic,\n        wrongMentions: stat.wrongMentions,\n        mentionFrequency: stat.mentionFrequency,\n        priority,\n        color\n      };\n    });\n  }\n\n  async getSubjectSolvedStats(): Promise<Array<{ subject: string; totalQuestions: number; totalTimeMinutes: number; averageTimePerQuestion: number }>> {\n    // ARŞİVLENEN VERİLERİ DAHİL ET - Tüm verileri kullan (arşivli + aktif)\n    const logs = await this.getAllQuestionLogsIncludingDeleted();\n    const subjectStats = new Map<string, { totalQuestions: number; totalTimeMinutes: number }>();\n\n    logs.forEach(log => {\n      const totalQuestions = parseInt(log.correct_count) + parseInt(log.wrong_count) + parseInt(log.blank_count || \"0\");\n      const timeSpent = log.time_spent_minutes || 0;\n      \n      if (!subjectStats.has(log.subject)) {\n        subjectStats.set(log.subject, { totalQuestions: 0, totalTimeMinutes: 0 });\n      }\n      \n      const stats = subjectStats.get(log.subject)!;\n      stats.totalQuestions += totalQuestions;\n      stats.totalTimeMinutes += timeSpent;\n    });\n\n    return Array.from(subjectStats.entries())\n      .map(([subject, stats]) => ({\n        subject,\n        totalQuestions: stats.totalQuestions,\n        totalTimeMinutes: stats.totalTimeMinutes,\n        averageTimePerQuestion: stats.totalQuestions > 0 ? stats.totalTimeMinutes / stats.totalQuestions : 0\n      }))\n      .filter(stat => stat.totalQuestions > 0)\n      .sort((a, b) => b.totalQuestions - a.totalQuestions);\n  }\n\n  private normalizeTopic(topic: string): string {\n    return topic.replace(/^(TYT|AYT)\\s+[^-]+\\s+-\\s+/, '').trim();\n  }\n\n  // Sınav sonucu işlemleri\n  async getExamResults(): Promise<ExamResult[]> {\n    return await db.select().from(examResults)\n      .where(and(\n        eq(examResults.deleted, false),\n        eq(examResults.archived, false)\n      ))\n      .orderBy(desc(examResults.createdAt));\n  }\n\n  async createExamResult(insertResult: InsertExamResult): Promise<ExamResult> {\n    const result = await db.insert(examResults).values(insertResult as any).returning();\n    return result[0];\n  }\n\n  async updateExamResult(id: string, updates: Partial<InsertExamResult>): Promise<ExamResult | undefined> {\n    const result = await db.update(examResults).set(updates).where(eq(examResults.id, id)).returning();\n    return result[0];\n  }\n\n  async deleteExamResult(id: string): Promise<boolean> {\n    await this.deleteExamSubjectNetsByExamId(id);\n    const result = await db.delete(examResults).where(eq(examResults.id, id));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  async deleteAllExamResults(): Promise<boolean> {\n    await db.delete(examSubjectNets);\n    await db.delete(examResults);\n    return true;\n  }\n\n  async getArchivedExamResults(): Promise<ExamResult[]> {\n    return await db.select().from(examResults).where(eq(examResults.archived, true)).orderBy(desc(examResults.createdAt));\n  }\n\n  // Sınav konusu ağ işlemleri\n  async getExamSubjectNets(): Promise<ExamSubjectNet[]> {\n    return await db.select().from(examSubjectNets).orderBy(desc(examSubjectNets.createdAt));\n  }\n\n  async getExamSubjectNetsByExamId(examId: string): Promise<ExamSubjectNet[]> {\n    return await db.select().from(examSubjectNets).where(eq(examSubjectNets.exam_id, examId));\n  }\n\n  async createExamSubjectNet(insertNet: InsertExamSubjectNet): Promise<ExamSubjectNet> {\n    const result = await db.insert(examSubjectNets).values(insertNet as any).returning();\n    return result[0];\n  }\n\n  async updateExamSubjectNet(id: string, updates: Partial<InsertExamSubjectNet>): Promise<ExamSubjectNet | undefined> {\n    const result = await db.update(examSubjectNets).set(updates).where(eq(examSubjectNets.id, id)).returning();\n    return result[0];\n  }\n\n  async deleteExamSubjectNet(id: string): Promise<boolean> {\n    const result = await db.delete(examSubjectNets).where(eq(examSubjectNets.id, id));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  async deleteExamSubjectNetsByExamId(examId: string): Promise<boolean> {\n    await db.delete(examSubjectNets).where(eq(examSubjectNets.exam_id, examId));\n    return true;\n  }\n\n  // Çalışma saati işlemleri\n  async getStudyHours(): Promise<StudyHours[]> {\n    return await db.select().from(studyHoursTable)\n      .where(and(\n        eq(studyHoursTable.deleted, false),\n        eq(studyHoursTable.archived, false)\n      ))\n      .orderBy(desc(studyHoursTable.study_date));\n  }\n\n  async getStudyHoursByDate(date: string): Promise<StudyHours | undefined> {\n    const result = await db.select().from(studyHoursTable).where(eq(studyHoursTable.study_date, date)).limit(1);\n    return result[0];\n  }\n\n  async createStudyHours(insertHours: InsertStudyHours): Promise<StudyHours> {\n    const result = await db.insert(studyHoursTable).values(insertHours as any).returning();\n    return result[0];\n  }\n\n  async updateStudyHours(id: string, updates: Partial<InsertStudyHours>): Promise<StudyHours | undefined> {\n    const result = await db.update(studyHoursTable).set(updates).where(eq(studyHoursTable.id, id)).returning();\n    return result[0];\n  }\n\n  async deleteStudyHours(id: string): Promise<boolean> {\n    const result = await db.delete(studyHoursTable).where(eq(studyHoursTable.id, id));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  async getArchivedStudyHours(): Promise<StudyHours[]> {\n    return await db.select().from(studyHoursTable).where(eq(studyHoursTable.archived, true)).orderBy(desc(studyHoursTable.study_date));\n  }\n\n  async getAllQuestionLogsIncludingDeleted(): Promise<QuestionLog[]> {\n    return await db.select().from(questionLogs).orderBy(desc(questionLogs.createdAt));\n  }\n\n  async getAllExamResultsIncludingDeleted(): Promise<ExamResult[]> {\n    return await db.select().from(examResults).orderBy(desc(examResults.createdAt));\n  }\n\n  async getAllStudyHoursIncludingDeleted(): Promise<StudyHours[]> {\n    return await db.select().from(studyHoursTable).orderBy(desc(studyHoursTable.study_date));\n  }\n\n  async autoArchiveOldData(): Promise<void> {\n    const now = new Date();\n    const turkeyTime = new Date(now.toLocaleString('en-US', { timeZone: 'Europe/Istanbul' }));\n    const today = turkeyTime.toISOString().split('T')[0];\n    \n    // Bugünden önceki tamamlanmış görevleri arşivle\n    await db.update(tasks)\n      .set({\n        archived: true,\n        archivedAt: new Date().toISOString(),\n      } as any)\n      .where(\n        and(\n          eq(tasks.completed, true),\n          eq(tasks.archived, false),\n          ne(tasks.completedAt, today)\n        )\n      );\n    \n    // Bugünden önceki soru loglarını arşivle\n    await db.update(questionLogs)\n      .set({\n        archived: true,\n        archivedAt: new Date().toISOString(),\n      } as any)\n      .where(\n        and(\n          eq(questionLogs.archived, false),\n          ne(questionLogs.study_date, today)\n        )\n      );\n    \n    // Bugünden önceki çalışma saatlerini arşivle\n    await db.update(studyHoursTable)\n      .set({\n        archived: true,\n        archivedAt: new Date().toISOString(),\n      } as any)\n      .where(\n        and(\n          eq(studyHoursTable.archived, false),\n          ne(studyHoursTable.study_date, today)\n        )\n      );\n  }\n\n  // Setup işlemleri\n  async getSetupStatus(): Promise<SetupCompleted | undefined> {\n    const result = await db.select().from(setupCompleted).limit(1);\n    return result[0];\n  }\n\n  async completeSetup(termsAccepted: boolean): Promise<SetupCompleted> {\n    const result = await db.insert(setupCompleted).values({\n      completed: true,\n      termsAccepted,\n      completedAt: new Date().toISOString(),\n    } as any).returning();\n    return result[0];\n  }\n}\n\n// Depolama seçimi - db başarıyla başlatıldıysa DbStorage, değilse MemStorage kullan\nexport const storage = (db !== null) ? new DbStorage() : new MemStorage();\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":65684},"client/src/bilesenler/arayuz/popover.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/kutuphane/yardimcilar\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":1396},"client/src/bilesenler/hava-durumu-widget.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport { useQuery } from \"@tanstack/react-query\";\n\ninterface WeatherData {\n  location: string;\n  current: {\n    temperature: number;\n    description: string;\n    emoji: string;\n    humidity: number;\n    windSpeed: number;\n    windDirection: string;\n    windDescription: string;\n    feelsLike: number;\n    pressure: number;\n    visibility: number;\n    precipitation: number;\n  };\n  hourlyForecast: Array<{\n    time: string;\n    hour: number;\n    temperature: number;\n    emoji: string;\n    humidity: number;\n    windSpeed: number;\n    windDirection: number;\n    precipitation: number;\n  }>;\n  sunData: {\n    sunrise: string;\n    sunset: string;\n    dayLength: string;\n  };\n  forecast: Array<{\n    date: string;\n    dayName: string;\n    temperature: {\n      max: number;\n      min: number;\n    };\n    description: string;\n    emoji: string;\n    humidity: number;\n    windSpeed: number;\n  }>;\n  uvIndex: {\n    value: number;\n    level: string;\n    description: string;\n  };\n  airQuality: {\n    aqi: number;\n    level: string;\n    description: string;\n    components: {\n      pm2_5: number;\n      pm10: number;\n      o3: number;\n    };\n  } | null;\n  lifeIndices: {\n    exercise: {\n      level: string;\n      emoji: string;\n      description: string;\n    };\n    clothing: {\n      level: string;\n      emoji: string;\n      description: string;\n    };\n    travel: {\n      level: string;\n      emoji: string;\n      description: string;\n    };\n    skin: {\n      level: string;\n      emoji: string;\n      description: string;\n    };\n    driving: {\n      level: string;\n      emoji: string;\n      description: string;\n    };\n    comfort: {\n      level: string;\n      emoji: string;\n      description: string;\n    };\n  };\n}\n\nexport function WeatherWidget() {\n  return (\n    <div className=\"bg-card rounded-xl border border-border p-6 transition-colors duration-300\">\n      <h3 className=\"text-lg font-semibold text-foreground mb-3\">Hava Durumu</h3>\n      <div className=\"text-center\">\n        <div className=\"text-3xl mb-2\">🔧</div>\n        <div className=\"text-muted-foreground mb-2\">Hava durumu servisi güncelleniyor</div>\n        <div className=\"text-sm text-muted-foreground\">Yeni API entegrasyonu yapılıyor...</div>\n      </div>\n    </div>\n  );\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":2349},"client/src/bilesenler/gorev-ekle-modal.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/bilesenler/arayuz/dialog\";\nimport { Button } from \"@/bilesenler/arayuz/button\";\nimport { Input } from \"@/bilesenler/arayuz/input\";\nimport { Textarea } from \"@/bilesenler/arayuz/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/bilesenler/arayuz/select\";\nimport { Label } from \"@/bilesenler/arayuz/label\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/bilesenler/arayuz/popover\";\nimport { Calendar } from \"@/bilesenler/arayuz/calendar\";\nimport { CalendarDays } from \"lucide-react\";\nimport { InsertTask } from \"@shared/sema\";\nimport { apiRequest, sorguIstemcisi } from \"@/kutuphane/sorguIstemcisi\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface AddTaskModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport function AddTaskModal({ open, onOpenChange }: AddTaskModalProps) {\n  const [formData, setFormData] = useState<{\n    title: string;\n    description: string;\n    priority: \"low\" | \"medium\" | \"high\";\n    category: \"genel\" | \"turkce\" | \"sosyal\" | \"matematik\" | \"fizik\" | \"kimya\" | \"biyoloji\" | \"tyt-geometri\" | \"ayt-geometri\" | \"ayt-matematik\" | \"ayt-fizik\" | \"ayt-kimya\" | \"ayt-biyoloji\";\n    color: string;\n    dueDate: string;\n    recurrenceType: \"none\" | \"weekly\" | \"monthly\";\n    recurrenceEndDate: string;\n  }>({\n    title: \"\",\n    description: \"\",\n    priority: \"medium\",\n    category: \"genel\",\n    color: \"#8B5CF6\",\n    dueDate: new Date().toISOString().split('T')[0],\n    recurrenceType: \"none\",\n    recurrenceEndDate: \"\",\n  });\n\n  const { toast } = useToast();\n\n  const createTaskMutation = useMutation({\n    mutationFn: (data: InsertTask) => \n      apiRequest(\"POST\", \"/api/tasks\", data),\n    onSuccess: () => {\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/calendar\"] });\n      toast({\n        title: \"Görev eklendi\",\n        description: \"Yeni görev başarıyla eklendi.\",\n      });\n      onOpenChange(false);\n      resetForm();\n    },\n    onError: () => {\n      toast({\n        title: \"Hata\",\n        description: \"Görev eklenemedi.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      title: \"\",\n      description: \"\",\n      priority: \"medium\",\n      category: \"genel\",\n      color: \"#8B5CF6\",\n      dueDate: new Date().toISOString().split('T')[0],\n      recurrenceType: \"none\",\n      recurrenceEndDate: \"\",\n    });\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.title.trim()) {\n      toast({\n        title: \"Uyarı\",\n        description: \"Görev başlığı gereklidir.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createTaskMutation.mutate({\n      title: formData.title.trim(),\n      description: formData.description.trim() || undefined,\n      priority: formData.priority,\n      category: formData.category,\n      color: formData.color,\n      dueDate: formData.dueDate,\n      recurrenceType: formData.recurrenceType,\n      recurrenceEndDate: formData.recurrenceType !== \"none\" && formData.recurrenceEndDate ? formData.recurrenceEndDate : undefined,\n      completed: false,\n    });\n  };\n\n  const handleCancel = () => {\n    onOpenChange(false);\n    resetForm();\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-lg\">\n        <DialogHeader>\n          <DialogTitle>Yeni Görev Ekle</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          {/* Görev başlığı */}\n          <div>\n            <Label htmlFor=\"task-title\">Görev Başlığı (Max 50 karakter)</Label>\n            <Input\n              id=\"task-title\"\n              placeholder=\"Görev başlığını girin...\"\n              value={formData.title}\n              onChange={(e) => {\n                const value = e.target.value;\n                if (value.length <= 50) {\n                  setFormData(prev => ({ ...prev, title: value }));\n                }\n              }}\n              maxLength={50}\n              data-testid=\"input-task-title\"\n            />\n            <p className=\"text-xs text-muted-foreground mt-1\">{formData.title.length}/50 karakter</p>\n          </div>\n\n          {/* Görev Açıklaması */}\n          <div>\n            <Label htmlFor=\"task-description\">Açıklama (Max 300 karakter)</Label>\n            <Textarea\n              id=\"task-description\"\n              placeholder=\"Görev detaylarını açıklayın...\"\n              value={formData.description}\n              onChange={(e) => {\n                const value = e.target.value;\n                if (value.length <= 300) {\n                  setFormData(prev => ({ ...prev, description: value }));\n                }\n              }}\n              maxLength={300}\n              className=\"h-20 resize-none\"\n              data-testid=\"input-task-description\"\n            />\n            <p className=\"text-xs text-muted-foreground mt-1\">{formData.description.length}/300 karakter</p>\n          </div>\n\n          {/* Görev Tarihi */}\n          <div>\n            <Label htmlFor=\"task-due-date\">Görevin Bitirilme Tarihi</Label>\n            <Popover>\n              <PopoverTrigger asChild>\n                <Button\n                  variant=\"outline\"\n                  className=\"w-full justify-start text-left font-normal\"\n                  data-testid=\"button-task-due-date\"\n                >\n                  <CalendarDays className=\"mr-2 h-4 w-4\" />\n                  {formData.dueDate ? new Date(formData.dueDate).toLocaleDateString('tr-TR', { \n                    day: 'numeric', \n                    month: 'long', \n                    year: 'numeric' \n                  }) : \"Tarih seçin\"}\n                </Button>\n              </PopoverTrigger>\n              <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                <Calendar\n                  mode=\"single\"\n                  selected={formData.dueDate ? new Date(formData.dueDate + 'T00:00:00') : undefined}\n                  onSelect={(date) => {\n                    if (date) {\n                      const year = date.getFullYear();\n                      const month = String(date.getMonth() + 1).padStart(2, '0');\n                      const day = String(date.getDate()).padStart(2, '0');\n                      setFormData(prev => ({ ...prev, dueDate: `${year}-${month}-${day}` }));\n                    }\n                  }}\n                  initialFocus\n                />\n              </PopoverContent>\n            </Popover>\n          </div>\n\n          {/* Görev Önceliği & Kategorisi */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"task-priority\">Öncelik</Label>\n              <Select\n                value={formData.priority}\n                onValueChange={(value: \"low\" | \"medium\" | \"high\") => \n                  setFormData(prev => ({ ...prev, priority: value }))\n                }\n              >\n                <SelectTrigger data-testid=\"select-task-priority\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"low\">Düşük</SelectItem>\n                  <SelectItem value=\"medium\">Orta</SelectItem>\n                  <SelectItem value=\"high\">Yüksek</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"task-category\">Ders Kategorisi</Label>\n              <Select\n                value={formData.category}\n                onValueChange={(value: \"genel\" | \"turkce\" | \"sosyal\" | \"matematik\" | \"fizik\" | \"kimya\" | \"biyoloji\" | \"tyt-geometri\" | \"ayt-geometri\" | \"ayt-matematik\" | \"ayt-fizik\" | \"ayt-kimya\" | \"ayt-biyoloji\") => \n                  setFormData(prev => ({ ...prev, category: value }))\n                }\n              >\n                <SelectTrigger data-testid=\"select-task-category\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"genel\">Genel</SelectItem>\n                  <div className=\"px-2 py-1 text-xs font-semibold text-muted-foreground border-b\">TYT Dersleri</div>\n                  <SelectItem value=\"turkce\">Türkçe</SelectItem>\n                  <SelectItem value=\"sosyal\">Sosyal Bilimler</SelectItem>\n                  <SelectItem value=\"matematik\">Matematik</SelectItem>\n                  <SelectItem value=\"fizik\">Fizik</SelectItem>\n                  <SelectItem value=\"kimya\">Kimya</SelectItem>\n                  <SelectItem value=\"biyoloji\">Biyoloji</SelectItem>\n                  <SelectItem value=\"tyt-geometri\">TYT Geometri</SelectItem>\n                  <div className=\"px-2 py-1 text-xs font-semibold text-muted-foreground border-b border-t\">AYT Dersleri</div>\n                  <SelectItem value=\"ayt-matematik\">Matematik</SelectItem>\n                  <SelectItem value=\"ayt-fizik\">Fizik</SelectItem>\n                  <SelectItem value=\"ayt-kimya\">Kimya</SelectItem>\n                  <SelectItem value=\"ayt-biyoloji\">Biyoloji</SelectItem>\n                  <SelectItem value=\"ayt-geometri\">AYT Geometri</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {/* Tekrarlama Seçenekleri */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"task-recurrence\">Tekrar</Label>\n              <Select\n                value={formData.recurrenceType}\n                onValueChange={(value: \"none\" | \"weekly\" | \"monthly\") => \n                  setFormData(prev => ({ ...prev, recurrenceType: value }))\n                }\n              >\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"none\">Tekrarlanmaz</SelectItem>\n                  <SelectItem value=\"weekly\">Haftalık</SelectItem>\n                  <SelectItem value=\"monthly\">Aylık</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            {formData.recurrenceType !== \"none\" && (\n              <div>\n                <Label htmlFor=\"task-recurrence-end\">Tekrarın Bitiş Tarihi</Label>\n                <Input\n                  id=\"task-recurrence-end\"\n                  type=\"date\"\n                  value={formData.recurrenceEndDate}\n                  onChange={(e) => setFormData(prev => ({ ...prev, recurrenceEndDate: e.target.value }))}\n                  className=\"w-full\"\n                />\n              </div>\n            )}\n          </div>\n\n          {/* Renk Seçici */}\n          <div>\n            <Label htmlFor=\"task-color\">Görev Rengi</Label>\n            <div className=\"flex items-center space-x-3\">\n              <Input\n                id=\"task-color\"\n                type=\"color\"\n                value={formData.color}\n                onChange={(e) => setFormData(prev => ({ ...prev, color: e.target.value }))}\n                className=\"w-16 h-10 rounded cursor-pointer\"\n                data-testid=\"input-task-color\"\n              />\n              <div className=\"flex space-x-2\">\n                {[\"#8B5CF6\", \"#EC4899\", \"#10B981\", \"#F59E0B\", \"#EF4444\", \"#3B82F6\"].map((color) => (\n                  <button\n                    key={color}\n                    type=\"button\"\n                    onClick={() => setFormData(prev => ({ ...prev, color }))}\n                    className={`w-6 h-6 rounded-full border-2 ${\n                      formData.color === color ? \"border-gray-400\" : \"border-transparent\"\n                    }`}\n                    style={{ backgroundColor: color }}\n                    title={color}\n                  />\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Eylem Düğmeleri */}\n          <div className=\"flex space-x-3 pt-4\">\n            <Button \n              type=\"submit\"\n              disabled={createTaskMutation.isPending}\n              className=\"flex-1\"\n              data-testid=\"button-save-task\"\n            >\n              {createTaskMutation.isPending ? \"Ekleniyor...\" : \"Görev Ekle\"}\n            </Button>\n            <Button \n              type=\"button\"\n              variant=\"secondary\"\n              onClick={handleCancel}\n              className=\"flex-1\"\n              data-testid=\"button-cancel-task\"\n            >\n              İptal\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":12875},"client/src/bilesenler/haftalik-aktivite-ozeti.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport { useQuery } from \"@tanstack/react-query\";\nimport { TrendingUp, TrendingDown, BookOpen, Brain, CheckCircle, FlaskConical, Calendar, Activity } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/bilesenler/arayuz/card\";\nimport { Badge } from \"@/bilesenler/arayuz/badge\";\nimport { QuestionLog, Task, ExamResult } from \"@shared/sema\";\n\ninterface ActivityMetric {\n  label: string;\n  value: number;\n  icon: React.ComponentType<{ className?: string }>;\n  trend: number; // Positive for increase, negative for decrease\n  color: string;\n  bgColor: string;\n}\n\nexport function WeeklyActivitySummary() {\n  const { data: questionLogs = [] } = useQuery<QuestionLog[]>({\n    queryKey: [\"/api/question-logs\"],\n  });\n  \n  const { data: tasks = [] } = useQuery<Task[]>({\n    queryKey: [\"/api/tasks\"],\n  });\n  \n  const { data: examResults = [] } = useQuery<ExamResult[]>({\n    queryKey: [\"/api/exam-results\"],\n  });\n\n  // Tarih aralıklarını hesaplayın\n  const today = new Date();\n  const last7Days = new Date(today);\n  last7Days.setDate(today.getDate() - 7);\n  const previous7Days = new Date(today);\n  previous7Days.setDate(today.getDate() - 14);\n  \n  const formatDateForComparison = (date: Date) => date.toISOString().split('T')[0];\n  \n  const last7DaysStr = formatDateForComparison(last7Days);\n  const previous7DaysStr = formatDateForComparison(previous7Days);\n  const todayStr = formatDateForComparison(today);\n\n  // Aktivite metriklerini hesapla\n  const calculateActivityMetrics = (): ActivityMetric[] => {\n    // Son 7 günde çözülen sorular\n    const recentQuestions = questionLogs.filter(log => \n      log.study_date >= last7DaysStr && log.study_date <= todayStr\n    );\n    const previousQuestions = questionLogs.filter(log => \n      log.study_date >= previous7DaysStr && log.study_date < last7DaysStr\n    );\n    \n    const recentQuestionCount = recentQuestions.reduce((sum, log) => \n      sum + (Number(log.correct_count) || 0) + (Number(log.wrong_count) || 0) + (Number(log.blank_count) || 0), 0\n    );\n    const previousQuestionCount = previousQuestions.reduce((sum, log) => \n      sum + (Number(log.correct_count) || 0) + (Number(log.wrong_count) || 0) + (Number(log.blank_count) || 0), 0\n    );\n    const questionTrend = previousQuestionCount > 0 \n      ? ((recentQuestionCount - previousQuestionCount) / previousQuestionCount) * 100 \n      : recentQuestionCount > 0 ? 100 : 0;\n\n    // Son 7 günde tamamlanan görevler\n    const recentCompletedTasks = tasks.filter(task => \n      task.completed && task.completedAt && \n      new Date(task.completedAt).toISOString().split('T')[0] >= last7DaysStr\n    ).length;\n    const previousCompletedTasks = tasks.filter(task => \n      task.completed && task.completedAt && \n      new Date(task.completedAt).toISOString().split('T')[0] >= previous7DaysStr &&\n      new Date(task.completedAt).toISOString().split('T')[0] < last7DaysStr\n    ).length;\n    const taskTrend = previousCompletedTasks > 0 \n      ? ((recentCompletedTasks - previousCompletedTasks) / previousCompletedTasks) * 100 \n      : recentCompletedTasks > 0 ? 100 : 0;\n\n    // Son 7 günde eklenen sınav sonuçları\n    const recentExams = examResults.filter(exam => \n      exam.exam_date >= last7DaysStr && exam.exam_date <= todayStr\n    ).length;\n    const previousExams = examResults.filter(exam => \n      exam.exam_date >= previous7DaysStr && exam.exam_date < last7DaysStr\n    ).length;\n    const examTrend = previousExams > 0 \n      ? ((recentExams - previousExams) / previousExams) * 100 \n      : recentExams > 0 ? 100 : 0;\n\n    // Çalışma oturumları (sorularla birlikteki tüm tarihler)\n    const recentStudyDays = new Set(recentQuestions.map(log => log.study_date)).size;\n    const previousStudyDays = new Set(previousQuestions.map(log => log.study_date)).size;\n    const studyTrend = previousStudyDays > 0 \n      ? ((recentStudyDays - previousStudyDays) / previousStudyDays) * 100 \n      : recentStudyDays > 0 ? 100 : 0;\n\n    return [\n      {\n        label: \"Çözülen Sorular\",\n        value: recentQuestionCount,\n        icon: BookOpen,\n        trend: questionTrend,\n        color: \"text-blue-600\",\n        bgColor: \"bg-blue-50 dark:bg-blue-950/20\"\n      },\n      {\n        label: \"Tamamlanan Görevler\",\n        value: recentCompletedTasks,\n        icon: CheckCircle,\n        trend: taskTrend,\n        color: \"text-green-600\",\n        bgColor: \"bg-green-50 dark:bg-green-950/20\"\n      },\n      {\n        label: \"Çalışma Günü\",\n        value: recentStudyDays,\n        icon: Calendar,\n        trend: studyTrend,\n        color: \"text-purple-600\",\n        bgColor: \"bg-purple-50 dark:bg-purple-950/20\"\n      },\n      {\n        label: \"Deneme Sınavları\",\n        value: recentExams,\n        icon: FlaskConical,\n        trend: examTrend,\n        color: \"text-orange-600\",\n        bgColor: \"bg-orange-50 dark:bg-orange-950/20\"\n      }\n    ];\n  };\n\n  const metrics = calculateActivityMetrics();\n  const totalActivity = metrics.reduce((sum, metric) => sum + metric.value, 0);\n  const averageTrend = metrics.reduce((sum, metric) => sum + metric.trend, 0) / metrics.length;\n\n  return (\n    <Card className=\"bg-gradient-to-br from-card via-card to-card/80 rounded-xl border border-border shadow-lg transition-all duration-300 hover:shadow-xl\">\n      <CardHeader className=\"pb-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"p-2 rounded-xl bg-gradient-to-br from-indigo-500/10 to-purple-500/10\">\n              <Activity className=\"h-6 w-6 text-indigo-600\" />\n            </div>\n            <div>\n              <CardTitle className=\"text-xl font-bold bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent\">\n                📈 Aktivitelerim\n              </CardTitle>\n              <p className=\"text-sm text-muted-foreground\">Son 7 günlük genel bakış</p>\n            </div>\n          </div>\n          <div className=\"text-right\">\n            <div className=\"flex items-center space-x-2\">\n              {averageTrend > 0 ? (\n                <TrendingUp className=\"h-4 w-4 text-green-500\" />\n              ) : averageTrend < 0 ? (\n                <TrendingDown className=\"h-4 w-4 text-red-500\" />\n              ) : null}\n              <Badge \n                variant={averageTrend > 0 ? \"default\" : averageTrend < 0 ? \"destructive\" : \"secondary\"}\n                className=\"text-xs\"\n              >\n                {averageTrend > 0 ? '+' : ''}{averageTrend.toFixed(0)}%\n              </Badge>\n            </div>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              {totalActivity} toplam aktivite\n            </p>\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent>\n        <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4\">\n          {metrics.map((metric, index) => {\n            const Icon = metric.icon;\n            return (\n              <div \n                key={index}\n                className={`${metric.bgColor} rounded-xl p-4 transition-all duration-200 hover:scale-105`}\n                data-testid={`metric-${metric.label.toLowerCase().replace(/\\s+/g, '-')}`}\n              >\n                <div className=\"flex items-center justify-between mb-2\">\n                  <Icon className={`h-5 w-5 ${metric.color}`} />\n                  <div className=\"flex items-center space-x-1\">\n                    {metric.trend > 0 ? (\n                      <TrendingUp className=\"h-3 w-3 text-green-500\" />\n                    ) : metric.trend < 0 ? (\n                      <TrendingDown className=\"h-3 w-3 text-red-500\" />\n                    ) : null}\n                    <span className={`text-xs font-medium ${\n                      metric.trend > 0 ? 'text-green-600' : \n                      metric.trend < 0 ? 'text-red-600' : \n                      'text-muted-foreground'\n                    }`}>\n                      {metric.trend > 0 ? '+' : ''}{metric.trend.toFixed(0)}%\n                    </span>\n                  </div>\n                </div>\n                <div className=\"space-y-1\">\n                  <p className=\"text-2xl font-bold text-foreground\" data-testid={`value-${metric.label.toLowerCase().replace(/\\s+/g, '-')}`}>\n                    {metric.value}\n                  </p>\n                  <p className=\"text-xs text-muted-foreground font-medium\">\n                    {metric.label}\n                  </p>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n        \n        {totalActivity === 0 && (\n          <div className=\"mt-6 text-center py-8 text-muted-foreground\">\n            <Activity className=\"h-12 w-12 mx-auto mb-3 opacity-40\" />\n            <p className=\"text-sm font-medium\">Henüz bu hafta aktivite yok</p>\n            <p className=\"text-xs mt-1\">Soru çözmeye veya görev eklemeye başla</p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":9084},"client/src/bilesenler/arayuz/tabs.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/kutuphane/yardimcilar\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":1999},"client/src/bilesenler/gelismis-hava-durumu-widget.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport { useQuery } from \"@tanstack/react-query\";\nimport { getQueryOptions } from \"@/kutuphane/sorguIstemcisi\";\nimport { Droplets, Wind, Eye, Thermometer, Sun, Moon, Activity, Shirt, Plane, Car, Heart, Dumbbell, CloudRain, Gauge, Sunrise, Sunset, Clock, ArrowUp, ArrowDown, Calendar, TrendingUp, TrendingDown } from \"lucide-react\";\nimport { useEffect, useState } from \"react\";\n\ninterface WeatherData {\n  location: string;\n  current: {\n    temperature: number;\n    description: string;\n    emoji: string;\n    humidity: number;\n    windSpeed: number;\n    windDirection: number;\n    windDescription: string;\n    feelsLike: number;\n    pressure: number;\n    visibility: number;\n    precipitation: number;\n  };\n  hourlyForecast: Array<{\n    time: string;\n    hour: number;\n    temperature: number;\n    emoji: string;\n    humidity: number;\n    windSpeed: number;\n    windDirection: number;\n    precipitation: number;\n  }>;\n  sunData: {\n    sunrise: string;\n    sunset: string;\n    dayLength: string;\n    sunProgress: number;\n  };\n  forecast: Array<{\n    date: string;\n    dayName: string;\n    temperature: {\n      max: number;\n      min: number;\n    };\n    description: string;\n    emoji: string;\n    humidity: number;\n    windSpeed: number;\n  }>;\n  uvIndex: {\n    value: number;\n    level: string;\n    description: string;\n  };\n  airQuality: {\n    aqi: number;\n    level: string;\n    description: string;\n    components: {\n      pm2_5: number;\n      pm10: number;\n      o3: number;\n    };\n  } | null;\n  lifeIndices: {\n    exercise: {\n      level: string;\n      emoji: string;\n      description: string;\n    };\n    clothing: {\n      level: string;\n      emoji: string;\n      description: string;\n    };\n    travel: {\n      level: string;\n      emoji: string;\n      description: string;\n    };\n    skin: {\n      level: string;\n      emoji: string;\n      description: string;\n    };\n    driving: {\n      level: string;\n      emoji: string;\n      description: string;\n    };\n    comfort: {\n      level: string;\n      emoji: string;\n      description: string;\n    };\n  };\n}\n\nexport function EnhancedWeatherWidget() {\n  const [currentTime, setCurrentTime] = useState(new Date());\n  \n  useEffect(() => {\n    const timer = setInterval(() => setCurrentTime(new Date()), 60000);\n    return () => clearInterval(timer);\n  }, []);\n\n  // Mevcut saate göre güneşin konumunu hesaplayın\n  const calculateSunPosition = (sunriseStr: string, sunsetStr: string, currentTime: Date) => {\n    const today = new Date();\n    const sunrise = new Date();\n    const sunset = new Date();\n    \n    // Gündoğumu ve günbatımı saatlerini ayrıştır (format: SS:DD)\n    const [sunriseHour, sunriseMin] = sunriseStr.split(':').map(Number);\n    const [sunsetHour, sunsetMin] = sunsetStr.split(':').map(Number);\n    \n    sunrise.setHours(sunriseHour, sunriseMin, 0, 0);\n    sunset.setHours(sunsetHour, sunsetMin, 0, 0);\n    \n    const currentMs = currentTime.getTime();\n    const sunriseMs = sunrise.getTime();\n    const sunsetMs = sunset.getTime();\n    \n    // If before sunrise or after sunset, place sun at start or end\n    if (currentMs < sunriseMs) {\n      return { progress: 0, x: 20, y: 50 }; // Start position\n    }\n    if (currentMs > sunsetMs) {\n      return { progress: 1, x: 180, y: 50 }; // End position\n    }\n    \n    // Calculate progress through the day (0 to 1)\n    const dayProgress = (currentMs - sunriseMs) / (sunsetMs - sunriseMs);\n    \n    // Calculate position along the arc: M 20 50 Q 100 10 180 50\n    // This is a quadratic curve from (20,50) to (180,50) with control point (100,10)\n    const t = dayProgress;\n    const x = Math.pow(1-t, 2) * 20 + 2*(1-t)*t * 100 + Math.pow(t, 2) * 180;\n    const y = Math.pow(1-t, 2) * 50 + 2*(1-t)*t * 10 + Math.pow(t, 2) * 50;\n    \n    return { progress: dayProgress, x, y };\n  };\n\n  const { data: weather, isLoading, error } = useQuery<WeatherData>({\n    queryKey: [\"/api/weather\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/weather`);\n      if (!response.ok) throw new Error('Failed to fetch weather data');\n      return response.json();\n    },\n    // Use optimized query options\n    ...getQueryOptions(\"/api/weather\"),\n    refetchInterval: 10 * 60 * 1000, // Refetch every 10 minutes\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"bg-gradient-to-br from-card to-card/80 rounded-xl border border-border/50 p-4 transition-all duration-300 hover:shadow-lg backdrop-blur-sm\">\n        <h3 className=\"text-lg font-semibold text-foreground mb-3 flex items-center\">\n          <Sun className=\"h-5 w-5 mr-2 text-primary animate-spin\" />\n          Hava Durumu\n        </h3>\n        <div className=\"text-center\">\n          <div className=\"text-3xl mb-2\">🔄</div>\n          <div className=\"text-muted-foreground mb-2\">Hava durumu yükleniyor...</div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"bg-gradient-to-br from-card to-card/80 rounded-xl border border-border/50 p-4 transition-all duration-300 hover:shadow-lg backdrop-blur-sm\">\n        <h3 className=\"text-lg font-semibold text-foreground mb-3 flex items-center\">\n          <Sun className=\"h-5 w-5 mr-2 text-destructive\" />\n          Hava Durumu\n        </h3>\n        <div className=\"text-center\">\n          <div className=\"text-3xl mb-2\">⚠️</div>\n          <div className=\"text-muted-foreground mb-2\">Hava durumu yüklenemedi</div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!weather) return null;\n\n  // Calculate current sun position\n  const sunPosition = calculateSunPosition(weather.sunData.sunrise, weather.sunData.sunset, currentTime);\n\n  // Helper function to get wind direction\n  const getWindDirection = (degree: number) => {\n    const directions = [\"K\", \"KKD\", \"KD\", \"DKD\", \"D\", \"DGD\", \"GD\", \"GGD\", \"G\", \"GGB\", \"GB\", \"BGB\", \"B\", \"BKB\", \"KB\", \"KKB\"];\n    const index = Math.round(degree / 22.5) % 16;\n    return directions[index];\n  };\n\n  // Helper function to get wind description\n  const getWindDescription = (speed: number) => {\n    if (speed < 1) return \"sakin\";\n    if (speed < 6) return \"hafif esinti\";\n    if (speed < 12) return \"meltem\";\n    if (speed < 20) return \"orta rüzgar\";\n    if (speed < 29) return \"güçlü rüzgar\";\n    return \"fırtına\";\n  };\n\n  // Get background class based on weather\n  const getWeatherBackground = () => {\n    const weatherId = weather.hourlyForecast[0]?.emoji || weather.current.emoji;\n    if (weatherId.includes('☀️') || weatherId.includes('🌤️')) return 'from-yellow-300/20 via-orange-300/20 to-blue-300/20';\n    if (weatherId.includes('🌧️') || weatherId.includes('⛈️')) return 'from-gray-400/20 via-blue-400/20 to-gray-600/20';\n    if (weatherId.includes('❄️')) return 'from-blue-100/30 via-white/20 to-blue-200/30';\n    if (weatherId.includes('☁️') || weatherId.includes('⛅')) return 'from-gray-300/20 via-gray-100/20 to-gray-400/20';\n    return 'from-blue-400/20 via-indigo-400/20 to-purple-400/20';\n  };\n\n  // Calculate best time to go outside\n  const getBestOutdoorTime = () => {\n    const now = new Date();\n    const currentHour = now.getHours();\n    let bestHour = currentHour;\n    let bestTemp = weather.current.temperature;\n    let reason = \"Şu anda uygun\";\n\n    weather.hourlyForecast.forEach((hour) => {\n      const temp = hour.temperature;\n      const hourTime = hour.hour;\n      \n      // Prefer temperatures between 20-25°C, avoid extreme hours\n      if (hourTime >= 8 && hourTime <= 20) {\n        if (Math.abs(temp - 22) < Math.abs(bestTemp - 22)) {\n          bestTemp = temp;\n          bestHour = hourTime;\n          reason = `${hourTime}:00'da ${temp}°C ile ideal`;\n        }\n      }\n    });\n\n    return reason;\n  };\n\n  // Get health advice based on weather\n  const getHealthAdvice = () => {\n    const uvLevel = weather.uvIndex.value;\n    const humidity = weather.current.humidity;\n    const airQuality = weather.airQuality;\n    \n    if (uvLevel > 7) return \"☀️ UV çok yüksek - güneş kremi ve şapka şart\";\n    if (airQuality && airQuality.aqi > 3) return \"💨 Hava kalitesi düşük - dışarı çıkarken dikkat\";\n    if (humidity > 80) return \"💧 Yüksek nem - bol su için ve hafif giyinin\";\n    if (humidity < 30) return \"🌪️ Kuru hava - cilt nemlendiricisi kullanın\";\n    return \"✅ Sağlıklı hava koşulları\";\n  };\n\n  // Get sleep index\n  const getSleepIndex = () => {\n    const temp = weather.current.temperature;\n    const humidity = weather.current.humidity;\n    const airQuality = weather.airQuality?.aqi || 2;\n    \n    let score = 100;\n    \n    // Ideal sleep temp 18-22°C\n    if (temp < 16 || temp > 24) score -= 30;\n    else if (temp < 18 || temp > 22) score -= 15;\n    \n    // Ideal humidity 40-60%\n    if (humidity < 30 || humidity > 70) score -= 20;\n    else if (humidity < 40 || humidity > 60) score -= 10;\n    \n    // Air quality impact\n    if (airQuality > 3) score -= 25;\n    else if (airQuality > 2) score -= 10;\n    \n    score = Math.max(0, Math.min(100, score));\n    \n    let level = \"Mükemmel\";\n    let advice = \"Rahat uyku için ideal koşullar\";\n    \n    if (score < 50) {\n      level = \"Zor\";\n      advice = \"Klima/ısıtıcı ve havalandırma önerilir\";\n    } else if (score < 70) {\n      level = \"Orta\";\n      advice = \"Oda sıcaklığını ayarlayın\";\n    } else if (score < 85) {\n      level = \"İyi\";\n      advice = \"Güzel bir uyku geçireceksiniz\";\n    }\n    \n    return { score: Math.round(score), level, advice };\n  };\n\n  const sleepIndex = getSleepIndex();\n  const bestOutdoorTime = getBestOutdoorTime();\n  const healthAdvice = getHealthAdvice();\n\n  return (\n    <div className={`bg-gradient-to-br ${getWeatherBackground()} from-card to-card/80 rounded-xl border border-border/50 p-6 transition-all duration-300 hover:shadow-lg backdrop-blur-sm overflow-hidden relative`}>\n      {/* Animated Weather Background Effects */}\n      {weather.current.emoji.includes('🌧️') && (\n        <div className=\"absolute inset-0 pointer-events-none\">\n          <div className=\"rain-animation\"></div>\n        </div>\n      )}\n      \n      {weather.current.emoji.includes('☀️') && (\n        <div className=\"absolute inset-0 pointer-events-none\">\n          <div className=\"sun-rays-animation\"></div>\n        </div>\n      )}\n\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h3 className=\"text-2xl font-bold text-foreground flex items-center\">\n            <span className=\"text-3xl mr-3\">{weather.current.emoji}</span>\n            {weather.location}\n          </h3>\n          <p className=\"text-sm text-muted-foreground capitalize\">{weather.current.description}</p>\n        </div>\n        <div className=\"text-right\">\n          <div className=\"text-4xl font-bold text-foreground\">{weather.current.temperature}°C</div>\n          <div className=\"text-sm text-muted-foreground\">Hissedilen: {weather.current.feelsLike}°C</div>\n        </div>\n      </div>\n\n      {/* Main Weather Details */}\n      <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n        <div className=\"bg-white/10 dark:bg-black/10 rounded-lg p-3 text-center hover:bg-white/20 dark:hover:bg-black/20 transition-all duration-300 hover:scale-105 cursor-pointer group\">\n          <div className=\"flex items-center justify-center mb-2\">\n            <CloudRain className=\"h-4 w-4 text-blue-500 mr-1 group-hover:scale-110 transition-transform\" />\n            <span className=\"text-xs text-muted-foreground\">Yağış</span>\n          </div>\n          <div className=\"text-lg font-bold text-foreground\">{weather.current.precipitation.toFixed(1)} mm</div>\n          <div className=\"text-xs text-muted-foreground\">\n            {weather.current.precipitation > 0 ? `${weather.current.precipitation.toFixed(1)}mm yağış` : 'Şu anda yağmur yok'}\n          </div>\n        </div>\n\n        <div className=\"bg-white/10 dark:bg-black/10 rounded-lg p-3 text-center hover:bg-white/20 dark:hover:bg-black/20 transition-all duration-300 hover:scale-105 cursor-pointer group\">\n          <div className=\"flex items-center justify-center mb-2\">\n            <Wind className=\"h-4 w-4 text-gray-500 mr-1 group-hover:scale-110 transition-transform\" />\n            <span className=\"text-xs text-muted-foreground\">Rüzgar</span>\n          </div>\n          <div className=\"text-lg font-bold text-foreground\">{weather.current.windSpeed} km/h</div>\n          <div className=\"text-xs text-muted-foreground\">\n            {getWindDirection(weather.current.windDirection)} | {getWindDescription(weather.current.windSpeed)}\n          </div>\n        </div>\n\n        {weather.airQuality && (\n          <div className=\"bg-white/10 dark:bg-black/10 rounded-lg p-3 text-center hover:bg-white/20 dark:hover:bg-black/20 transition-all duration-300 hover:scale-105 cursor-pointer group\">\n            <div className=\"flex items-center justify-center mb-2\">\n              <Eye className=\"h-4 w-4 text-green-500 mr-1 group-hover:scale-110 transition-transform\" />\n              <span className=\"text-xs text-muted-foreground\">Hava Kalitesi</span>\n            </div>\n            <div className=\"text-lg font-bold text-foreground\">{weather.airQuality.aqi * 20}</div>\n            <div className=\"text-xs text-muted-foreground\">{weather.airQuality.level} | {weather.airQuality.description}</div>\n          </div>\n        )}\n\n        <div className=\"bg-white/10 dark:bg-black/10 rounded-lg p-3 text-center hover:bg-white/20 dark:hover:bg-black/20 transition-all duration-300 hover:scale-105 cursor-pointer group\">\n          <div className=\"flex items-center justify-center mb-2\">\n            <Sun className=\"h-4 w-4 text-yellow-500 mr-1 group-hover:scale-110 transition-transform\" />\n            <span className=\"text-xs text-muted-foreground\">UV Endeksi</span>\n          </div>\n          <div className=\"text-lg font-bold text-foreground\">{weather.uvIndex.value}</div>\n          <div className=\"text-xs text-muted-foreground\">{weather.uvIndex.level} | {weather.uvIndex.description}</div>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 mb-6\">\n        <div className=\"bg-white/10 dark:bg-black/10 rounded-lg p-3 text-center\">\n          <div className=\"flex items-center justify-center mb-2\">\n            <Droplets className=\"h-4 w-4 text-blue-500 mr-1\" />\n            <span className=\"text-xs text-muted-foreground\">Nem</span>\n          </div>\n          <div className=\"text-lg font-bold text-foreground\">%{weather.current.humidity}</div>\n          <div className=\"text-xs text-muted-foreground\">\n            {weather.current.humidity > 70 ? 'Yüksek nem seviyesi' : \n             weather.current.humidity > 30 ? 'Mevcut ortamda orta seviye nem' : 'Düşük nem seviyesi'}\n          </div>\n        </div>\n\n        <div className=\"bg-white/10 dark:bg-black/10 rounded-lg p-3 text-center\">\n          <div className=\"flex items-center justify-center mb-2\">\n            <Clock className=\"h-4 w-4 text-purple-500 mr-1\" />\n            <span className=\"text-xs text-muted-foreground\">En İyi Saat</span>\n          </div>\n          <div className=\"text-sm font-bold text-foreground\">{bestOutdoorTime}</div>\n          <div className=\"text-xs text-muted-foreground\">Dışarı çıkmak için</div>\n        </div>\n      </div>\n\n      {/* Sunrise/Sunset Arc with Moving Sun */}\n      <div className=\"bg-gradient-to-t from-orange-100/20 via-yellow-50/20 to-blue-100/20 dark:from-orange-900/20 dark:via-yellow-900/20 dark:to-blue-900/20 rounded-lg p-4 mb-6\">\n        <div className=\"flex justify-between items-center text-xs text-muted-foreground mb-2\">\n          <div className=\"flex items-center\">\n            <Sunrise className=\"h-4 w-4 mr-1 text-orange-500\" />\n            <span>{weather.sunData.sunrise}</span>\n          </div>\n          <span className=\"font-medium text-foreground\">Gün Uzunluğu: {weather.sunData.dayLength}</span>\n          <div className=\"flex items-center\">\n            <Sunset className=\"h-4 w-4 mr-1 text-orange-600\" />\n            <span>{weather.sunData.sunset}</span>\n          </div>\n        </div>\n        \n        <div className=\"relative h-16 flex items-end justify-center\">\n          <svg viewBox=\"0 0 200 60\" className=\"w-full h-full\">\n            {/* Sunrise/Sunset Arc */}\n            <path\n              d=\"M 20 50 Q 100 10 180 50\"\n              stroke=\"currentColor\"\n              strokeWidth=\"2\"\n              fill=\"none\"\n              className=\"text-orange-400/60\"\n              strokeDasharray=\"5,5\"\n            />\n            \n            {/* Sun Position - Dynamic based on current time */}\n            <circle\n              cx={sunPosition.x}\n              cy={sunPosition.y}\n              r=\"6\"\n              fill=\"currentColor\"\n              className=\"text-yellow-500 animate-pulse drop-shadow-lg\"\n              style={{\n                filter: 'drop-shadow(0 0 8px rgba(255, 255, 0, 0.6))',\n                transition: 'cx 2s ease-in-out, cy 2s ease-in-out'\n              }}\n            />\n            \n            {/* Sun Rays - Dynamic position */}\n            <g className=\"text-yellow-400 opacity-70\">\n              {[0, 45, 90, 135, 180, 225, 270, 315].map((angle, i) => {\n                const sunX = sunPosition.x;\n                const sunY = sunPosition.y;\n                const radians = (angle * Math.PI) / 180;\n                const rayLength = 8 + Math.sin(Date.now() / 1000 + i) * 2; // Animated ray length\n                const x1 = sunX + rayLength * Math.cos(radians);\n                const y1 = sunY + rayLength * Math.sin(radians);\n                const x2 = sunX + (rayLength + 4) * Math.cos(radians);\n                const y2 = sunY + (rayLength + 4) * Math.sin(radians);\n                \n                return (\n                  <line\n                    key={i}\n                    x1={x1}\n                    y1={y1}\n                    x2={x2}\n                    y2={y2}\n                    stroke=\"currentColor\"\n                    strokeWidth=\"1.5\"\n                    className=\"animate-pulse\"\n                    style={{ \n                      animationDelay: `${i * 0.1}s`,\n                      transition: 'x1 2s ease-in-out, y1 2s ease-in-out, x2 2s ease-in-out, y2 2s ease-in-out'\n                    }}\n                  />\n                );\n              })}\n            </g>\n            \n            {/* Current time indicator */}\n            <text\n              x={sunPosition.x}\n              y={sunPosition.y - 15}\n              textAnchor=\"middle\"\n              className=\"text-xs font-medium fill-yellow-600 dark:fill-yellow-400\"\n              style={{ filter: 'drop-shadow(0 1px 2px rgba(0,0,0,0.3))' }}\n            >\n              {currentTime.toLocaleTimeString('tr-TR', { hour: '2-digit', minute: '2-digit' })}\n            </text>\n          </svg>\n        </div>\n      </div>\n\n      {/* Enhanced Hourly Weather Forecast */}\n      <div className=\"bg-gradient-to-br from-blue-50/30 via-white/20 to-cyan-50/30 dark:from-blue-950/40 dark:via-slate-800/50 dark:to-cyan-950/30 rounded-2xl p-6 mb-6 border border-blue-200/30 dark:border-blue-800/30 relative overflow-hidden\">\n        {/* Decorative Background */}\n        <div className=\"absolute top-0 left-0 w-32 h-32 bg-gradient-to-br from-blue-300/10 to-cyan-300/10 rounded-full blur-3xl\"></div>\n        <div className=\"absolute bottom-0 right-0 w-28 h-28 bg-gradient-to-tr from-cyan-300/10 to-blue-300/10 rounded-full blur-2xl\"></div>\n        \n        <div className=\"relative z-10\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h4 className=\"text-2xl font-bold text-foreground flex items-center\">\n              <div className=\"p-3 bg-gradient-to-br from-blue-500 to-cyan-600 rounded-xl shadow-lg mr-4\">\n                <Clock className=\"h-6 w-6 text-white\" />\n              </div>\n              <div>\n                <span className=\"bg-gradient-to-r from-blue-600 via-cyan-600 to-blue-600 bg-clip-text text-transparent\">\n                  🕐 Saatlik Hava Durumu\n                </span>\n                <p className=\"text-sm text-muted-foreground font-normal\">Günlük detaylı takip</p>\n              </div>\n            </h4>\n            <div className=\"text-sm text-muted-foreground bg-blue-100/30 dark:bg-blue-900/30 rounded-lg px-3 py-1\">\n              24 Saatlik Önizleme\n            </div>\n          </div>\n          \n          {weather.hourlyForecast.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <div className=\"w-16 h-16 rounded-full bg-gradient-to-br from-blue-100 to-cyan-100 dark:from-blue-900/30 dark:to-cyan-900/30 flex items-center justify-center mx-auto mb-4\">\n                <Clock className=\"h-8 w-8 text-blue-500\" />\n              </div>\n              <p className=\"text-lg font-medium text-foreground\">Saatlik veri hazırlanıyor</p>\n              <p className=\"text-sm text-muted-foreground\">Detaylı hava durumu bilgileri yükleniyor...</p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {/* Desktop View - Horizontal Cards */}\n              <div className=\"hidden md:grid md:grid-cols-6 lg:grid-cols-8 gap-4\">\n                {weather.hourlyForecast.slice(0, 8).map((hour, index) => (\n                  <div key={index} className=\"bg-white/30 dark:bg-black/20 rounded-xl p-4 text-center hover:scale-105 hover:shadow-lg transition-all duration-300 group border border-white/20 dark:border-gray-600/20\">\n                    <div className=\"text-xs font-medium text-muted-foreground mb-3\">\n                      {hour.hour === currentTime.getHours() ? \n                        <span className=\"bg-blue-500 text-white px-2 py-1 rounded-full text-xs\">Şimdi</span> : \n                        `${hour.hour.toString().padStart(2, '0')}:00`\n                      }\n                    </div>\n                    \n                    <div className=\"text-3xl mb-3 group-hover:scale-110 transition-transform duration-300\">{hour.emoji}</div>\n                    \n                    <div className=\"text-lg font-bold text-foreground mb-2\">{hour.temperature}°C</div>\n                    \n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center justify-center text-xs text-muted-foreground\">\n                        <Droplets className=\"h-3 w-3 mr-1 text-blue-500\" />\n                        <span>{Math.round(hour.precipitation)}mm</span>\n                      </div>\n                      \n                      <div className=\"flex items-center justify-center text-xs text-muted-foreground\">\n                        <Wind className=\"h-3 w-3 mr-1 text-gray-500\" />\n                        <span>{hour.windSpeed}km/h</span>\n                      </div>\n                      \n                      <div className=\"flex items-center justify-center text-xs text-muted-foreground\">\n                        <Eye className=\"h-3 w-3 mr-1 text-blue-400\" />\n                        <span>%{hour.humidity}</span>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n              \n              {/* Mobile View - Vertical List */}\n              <div className=\"md:hidden space-y-3\">\n                {weather.hourlyForecast.slice(0, 6).map((hour, index) => (\n                  <div key={index} className=\"bg-white/20 dark:bg-black/20 rounded-xl p-4 flex items-center space-x-4 hover:bg-white/30 dark:hover:bg-black/30 transition-all duration-300\">\n                    <div className=\"text-center min-w-[60px]\">\n                      <div className=\"text-xs font-medium text-muted-foreground mb-1\">\n                        {hour.hour === currentTime.getHours() ? 'Şimdi' : `${hour.hour.toString().padStart(2, '0')}:00`}\n                      </div>\n                      <div className=\"text-2xl\">{hour.emoji}</div>\n                    </div>\n                    \n                    <div className=\"flex-1\">\n                      <div className=\"text-lg font-bold text-foreground mb-1\">{hour.temperature}°C</div>\n                      <div className=\"text-sm text-muted-foreground\">Saat {hour.hour}:00</div>\n                    </div>\n                    \n                    <div className=\"text-right space-y-1\">\n                      <div className=\"flex items-center text-xs text-muted-foreground\">\n                        <Droplets className=\"h-3 w-3 mr-1 text-blue-500\" />\n                        <span>{Math.round(hour.precipitation)}mm</span>\n                      </div>\n                      <div className=\"flex items-center text-xs text-muted-foreground\">\n                        <Wind className=\"h-3 w-3 mr-1 text-gray-500\" />\n                        <span>{hour.windSpeed}km/h</span>\n                      </div>\n                      <div className=\"flex items-center text-xs text-muted-foreground\">\n                        <Eye className=\"h-3 w-3 mr-1 text-blue-400\" />\n                        <span>%{hour.humidity}</span>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n              \n              {/* Quick Summary */}\n              <div className=\"mt-6 bg-gradient-to-r from-blue-100/40 to-cyan-100/40 dark:from-blue-900/40 dark:to-cyan-900/40 rounded-xl p-4\">\n                <div className=\"flex justify-between items-center text-sm\">\n                  <div className=\"flex items-center\">\n                    <TrendingUp className=\"h-4 w-4 mr-2 text-green-500\" />\n                    <span className=\"text-muted-foreground\">En Yüksek: </span>\n                    <span className=\"font-semibold text-foreground ml-1\">\n                      {Math.max(...weather.hourlyForecast.slice(0, 8).map(h => h.temperature))}°C\n                    </span>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <TrendingDown className=\"h-4 w-4 mr-2 text-blue-500\" />\n                    <span className=\"text-muted-foreground\">En Düşük: </span>\n                    <span className=\"font-semibold text-foreground ml-1\">\n                      {Math.min(...weather.hourlyForecast.slice(0, 8).map(h => h.temperature))}°C\n                    </span>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <Droplets className=\"h-4 w-4 mr-2 text-blue-400\" />\n                    <span className=\"text-muted-foreground\">Toplam Yağış: </span>\n                    <span className=\"font-semibold text-foreground ml-1\">\n                      {weather.hourlyForecast.slice(0, 8).reduce((sum, h) => sum + h.precipitation, 0).toFixed(1)}mm\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Health & Lifestyle Advice */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 mb-6\">\n        <div className=\"bg-white/5 dark:bg-black/5 rounded-lg p-4\">\n          <div className=\"flex items-center mb-3\">\n            <Heart className=\"h-5 w-5 mr-2 text-red-500\" />\n            <span className=\"font-semibold text-foreground\">Sağlık Tavsiyesi</span>\n          </div>\n          <p className=\"text-sm text-muted-foreground\">{healthAdvice}</p>\n        </div>\n        \n        <div className=\"bg-white/5 dark:bg-black/5 rounded-lg p-4\">\n          <div className=\"flex items-center mb-3\">\n            <Moon className=\"h-5 w-5 mr-2 text-indigo-500\" />\n            <span className=\"font-semibold text-foreground\">Uyku Endeksi</span>\n          </div>\n          <div className=\"flex items-center mb-2\">\n            <div className=\"text-2xl font-bold text-foreground mr-2\">{sleepIndex.score}</div>\n            <div className=\"text-sm text-muted-foreground\">{sleepIndex.level}</div>\n          </div>\n          <p className=\"text-xs text-muted-foreground\">{sleepIndex.advice}</p>\n        </div>\n        \n        <div className=\"bg-white/5 dark:bg-black/5 rounded-lg p-4\">\n          <div className=\"flex items-center mb-3\">\n            <Clock className=\"h-5 w-5 mr-2 text-purple-500\" />\n            <span className=\"font-semibold text-foreground\">Dışarı Çıkma Önerisi</span>\n          </div>\n          <p className=\"text-sm text-muted-foreground\">{bestOutdoorTime}</p>\n        </div>\n      </div>\n\n      {/* 7-Day Forecast - Enhanced */}\n      <div className=\"bg-white/5 dark:bg-black/5 rounded-lg p-4 mb-6\">\n        <h4 className=\"text-lg font-semibold text-foreground mb-4 flex items-center\">\n          <Calendar className=\"h-5 w-5 mr-2 text-primary\" />\n          7 Günlük Hava Durumu Tahmini\n        </h4>\n        <div className=\"grid grid-cols-7 gap-2\">\n          {weather.forecast.map((day, index) => (\n            <div key={index} className=\"text-center bg-white/10 dark:bg-black/10 rounded-lg p-3 hover:scale-105 transition-all duration-200\">\n              <div className=\"text-xs font-medium text-muted-foreground mb-2\">\n                {index === 0 ? \"Bugün\" : day.dayName}\n              </div>\n              <div className=\"text-2xl mb-3 hover:scale-110 transition-transform\">{day.emoji}</div>\n              \n              <div className=\"flex items-center justify-center space-x-1 mb-2\">\n                <ArrowUp className=\"h-3 w-3 text-red-500\" />\n                <span className=\"text-sm font-bold text-foreground\">{day.temperature.max}°</span>\n              </div>\n              \n              {/* Enhanced Temperature Range Bar */}\n              <div className=\"relative h-16 w-3 mx-auto bg-gradient-to-t from-gray-800 via-purple-800 to-black dark:from-gray-900 dark:via-purple-900 dark:to-black rounded-full overflow-hidden mb-2\">\n                <div \n                  className=\"absolute bottom-0 w-full bg-gradient-to-t from-purple-600 via-purple-400 to-gray-900 rounded-full transition-all duration-500\"\n                  style={{\n                    height: `${Math.min(90, Math.max(30, ((day.temperature.max - day.temperature.min + 10) / 35) * 100))}%`\n                  }}\n                ></div>\n                \n                {/* Temperature markers */}\n                <div className=\"absolute inset-0 flex flex-col justify-between py-1\">\n                  <div className=\"w-full h-0.5 bg-red-600/50 rounded\"></div>\n                  <div className=\"w-full h-0.5 bg-blue-600/50 rounded\"></div>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center justify-center space-x-1 mb-2\">\n                <ArrowDown className=\"h-3 w-3 text-blue-500\" />\n                <span className=\"text-xs font-medium text-muted-foreground\">{day.temperature.min}°</span>\n              </div>\n              \n              <div className=\"text-xs text-muted-foreground capitalize truncate\">\n                {day.description.length > 10 ? day.description.substring(0, 10) + '...' : day.description}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Enhanced Lifestyle Index */}\n      <div className=\"bg-white/5 dark:bg-black/5 rounded-lg p-4\">\n        <h4 className=\"text-lg font-semibold text-foreground mb-4 flex items-center\">\n          <Activity className=\"h-5 w-5 mr-2 text-primary\" />\n          Yaşam Endeksi - Hava Durumuna Göre Öneriler\n        </h4>\n        <div className=\"grid grid-cols-2 lg:grid-cols-6 gap-3\">\n          <div className=\"bg-white/10 dark:bg-black/10 rounded-lg p-3 text-center hover:scale-105 transition-all\">\n            <div className=\"text-2xl mb-2\">{weather.lifeIndices.exercise.emoji}</div>\n            <div className=\"text-xs text-muted-foreground mb-1\">Egzersiz</div>\n            <div className=\"text-sm font-bold text-foreground mb-1\">{weather.lifeIndices.exercise.level}</div>\n            <div className=\"text-xs text-muted-foreground\">{weather.lifeIndices.exercise.description.substring(0, 20)}...</div>\n          </div>\n          \n          <div className=\"bg-white/10 dark:bg-black/10 rounded-lg p-3 text-center hover:scale-105 transition-all\">\n            <div className=\"text-2xl mb-2\">{weather.lifeIndices.clothing.emoji}</div>\n            <div className=\"text-xs text-muted-foreground mb-1\">Giyim</div>\n            <div className=\"text-sm font-bold text-foreground mb-1\">{weather.lifeIndices.clothing.level}</div>\n            <div className=\"text-xs text-muted-foreground\">{weather.lifeIndices.clothing.description.substring(0, 20)}...</div>\n          </div>\n          \n          <div className=\"bg-white/10 dark:bg-black/10 rounded-lg p-3 text-center hover:scale-105 transition-all\">\n            <div className=\"text-2xl mb-2\">{weather.lifeIndices.travel.emoji}</div>\n            <div className=\"text-xs text-muted-foreground mb-1\">Seyahat</div>\n            <div className=\"text-sm font-bold text-foreground mb-1\">{weather.lifeIndices.travel.level}</div>\n            <div className=\"text-xs text-muted-foreground\">{weather.lifeIndices.travel.description.substring(0, 20)}...</div>\n          </div>\n          \n          <div className=\"bg-white/10 dark:bg-black/10 rounded-lg p-3 text-center hover:scale-105 transition-all\">\n            <div className=\"text-2xl mb-2\">{weather.lifeIndices.driving.emoji}</div>\n            <div className=\"text-xs text-muted-foreground mb-1\">Sürüş</div>\n            <div className=\"text-sm font-bold text-foreground mb-1\">{weather.lifeIndices.driving.level}</div>\n            <div className=\"text-xs text-muted-foreground\">{weather.lifeIndices.driving.description.substring(0, 20)}...</div>\n          </div>\n          \n          <div className=\"bg-white/10 dark:bg-black/10 rounded-lg p-3 text-center hover:scale-105 transition-all\">\n            <div className=\"text-2xl mb-2\">{weather.lifeIndices.skin.emoji}</div>\n            <div className=\"text-xs text-muted-foreground mb-1\">Cilt Bakımı</div>\n            <div className=\"text-sm font-bold text-foreground mb-1\">{weather.lifeIndices.skin.level}</div>\n            <div className=\"text-xs text-muted-foreground\">{weather.lifeIndices.skin.description.substring(0, 20)}...</div>\n          </div>\n          \n          <div className=\"bg-white/10 dark:bg-black/10 rounded-lg p-3 text-center hover:scale-105 transition-all\">\n            <div className=\"text-2xl mb-2\">💤</div>\n            <div className=\"text-xs text-muted-foreground mb-1\">Uyku</div>\n            <div className=\"text-sm font-bold text-foreground mb-1\">{sleepIndex.level}</div>\n            <div className=\"text-xs text-muted-foreground\">%{sleepIndex.score}</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":34640},"client/src/hooks/use-mobile.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":669},"client/src/bilesenler/arayuz/select.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\n\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/kutuphane/yardimcilar\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":5858},"client/src/testler/panel.test.tsx":{"content":"import { describe, it, expect, vi, beforeEach } from 'vitest'\nimport { render, screen, waitFor } from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\nimport { ThemeProvider } from '../bilesenler/tema-saglayici'\nimport Panel from '../sayfalar/panel'\n\n// Mock the recharts library to avoid rendering issues in tests\nvi.mock('recharts', () => ({\n  LineChart: ({ children }: any) => <div data-testid=\"line-chart\">{children}</div>,\n  Line: () => <div data-testid=\"line\" />,\n  XAxis: () => <div data-testid=\"x-axis\" />,\n  YAxis: () => <div data-testid=\"y-axis\" />,\n  CartesianGrid: () => <div data-testid=\"cartesian-grid\" />,\n  Tooltip: () => <div data-testid=\"tooltip\" />,\n  Legend: () => <div data-testid=\"legend\" />,\n  ResponsiveContainer: ({ children }: any) => <div data-testid=\"responsive-container\">{children}</div>,\n  RadarChart: ({ children }: any) => <div data-testid=\"radar-chart\">{children}</div>,\n  PolarGrid: () => <div data-testid=\"polar-grid\" />,\n  PolarAngleAxis: () => <div data-testid=\"polar-angle-axis\" />,\n  PolarRadiusAxis: () => <div data-testid=\"polar-radius-axis\" />,\n  Radar: () => <div data-testid=\"radar\" />,\n  ReferenceLine: () => <div data-testid=\"reference-line\" />\n}))\n\n// Create a fresh query client for each test\nfunction createTestQueryClient() {\n  return new QueryClient({\n    defaultOptions: {\n      queries: { retry: false },\n      mutations: { retry: false }\n    }\n  })\n}\n\nfunction renderWithQueryClient(ui: React.ReactElement) {\n  const queryClient = createTestQueryClient()\n  return render(\n    <ThemeProvider>\n      <QueryClientProvider client={queryClient}>\n        {ui}\n      </QueryClientProvider>\n    </ThemeProvider>\n  )\n}\n\ndescribe('Panel Component', () => {\n  beforeEach(() => {\n    // Mock fetch for API calls\n    global.fetch = vi.fn()\n  })\n\n  it('ana panel bileşeni render olmalı', async () => {\n    // Mock empty responses\n    ;(global.fetch as any).mockImplementation((url: string) => {\n      return Promise.resolve({\n        ok: true,\n        json: () => Promise.resolve([])\n      })\n    })\n\n    renderWithQueryClient(<Panel />)\n    \n    // Wait for loading to complete\n    await waitFor(() => {\n      expect(screen.queryByText(/yükleniyor/i)).not.toBeInTheDocument()\n    }, { timeout: 3000 })\n  })\n\n  it('deneme ekleme butonu görünür olmalı', async () => {\n    ;(global.fetch as any).mockResolvedValue({\n      ok: true,\n      json: () => Promise.resolve([])\n    })\n\n    renderWithQueryClient(<Panel />)\n    \n    await waitFor(() => {\n      const addButton = screen.queryByTestId('button-add-exam')\n      expect(addButton).toBeInTheDocument()\n    })\n  })\n\n  it('görev ekleme butonu görünür olmalı', async () => {\n    ;(global.fetch as any).mockResolvedValue({\n      ok: true,\n      json: () => Promise.resolve([])\n    })\n\n    renderWithQueryClient(<Panel />)\n    \n    await waitFor(() => {\n      const addButton = screen.queryByTestId('button-add-task')\n      expect(addButton).toBeInTheDocument()\n    })\n  })\n})\n\ndescribe('Panel - Data Display', () => {\n  it('deneme sonuçları listelenmeli', async () => {\n    const mockExams = [\n      {\n        id: '1',\n        exam_name: 'TYT Deneme 1',\n        display_name: 'İlk Denemem',\n        exam_date: '2025-10-30',\n        exam_type: 'TYT',\n        exam_scope: 'full',\n        tyt_net: '85.5',\n        ayt_net: '0',\n        createdAt: new Date().toISOString()\n      }\n    ]\n\n    ;(global.fetch as any).mockImplementation((url: string) => {\n      if (url.includes('/api/exam-results')) {\n        return Promise.resolve({\n          ok: true,\n          json: () => Promise.resolve(mockExams)\n        })\n      }\n      return Promise.resolve({\n        ok: true,\n        json: () => Promise.resolve([])\n      })\n    })\n\n    renderWithQueryClient(<Panel />)\n    \n    await waitFor(() => {\n      expect(screen.getByText('İlk Denemem')).toBeInTheDocument()\n    })\n  })\n\n  it('görevler listelenmeli', async () => {\n    const mockTasks = [\n      {\n        id: '1',\n        title: 'Matematik Çalış',\n        priority: 'high',\n        category: 'matematik',\n        completed: false,\n        archived: false,\n        deleted: false,\n        createdAt: new Date().toISOString()\n      }\n    ]\n\n    ;(global.fetch as any).mockImplementation((url: string) => {\n      if (url.includes('/api/tasks')) {\n        return Promise.resolve({\n          ok: true,\n          json: () => Promise.resolve(mockTasks)\n        })\n      }\n      return Promise.resolve({\n        ok: true,\n        json: () => Promise.resolve([])\n      })\n    })\n\n    renderWithQueryClient(<Panel />)\n    \n    await waitFor(() => {\n      expect(screen.getByText('Matematik Çalış')).toBeInTheDocument()\n    })\n  })\n})\n","size_bytes":4784},"client/src/bilesenler/arayuz/chart.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\n\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/kutuphane/yardimcilar\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\n\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":10598},"client/src/bilesenler/arayuz/table.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport * as React from \"react\"\n\nimport { cn } from \"@/kutuphane/yardimcilar\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":2881},"client/src/bilesenler/gorevler-bolumu.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport { useState, useEffect, memo, useCallback, useMemo } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Plus, Edit2, Trash2, Undo2, Calendar, CheckCircle2, Archive, ArchiveRestore, GripVertical } from \"lucide-react\";\nimport { Task } from \"@shared/sema\";\nimport { apiRequest, sorguIstemcisi } from \"@/kutuphane/sorguIstemcisi\";\nimport { Button } from \"@/bilesenler/arayuz/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { EditTaskModal } from \"@/bilesenler/gorev-duzenle-modal\";\nimport { MidnightCountdown } from \"@/bilesenler/geceyarisi-geri-sayim\";\nimport {\n  DndContext,\n  closestCenter,\n  closestCorners,\n  KeyboardSensor,\n  PointerSensor,\n  useSensor,\n  useSensors,\n  DragEndEvent,\n  MeasuringStrategy,\n  PointerActivationConstraint,\n} from '@dnd-kit/core';\nimport { restrictToWindowEdges } from '@dnd-kit/modifiers';\nimport {\n  arrayMove,\n  SortableContext,\n  sortableKeyboardCoordinates,\n  verticalListSortingStrategy,\n  useSortable,\n} from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\n\ninterface TasksSectionProps {\n  onAddTask: () => void;\n}\n\nfunction SortableTaskComponent({ task, getTaskBorderStyle, getPriorityBadgeClass, getCategoryBadgeClass, getPriorityText, getCategoryText, formatDueDate, handleToggleTask, handleEditTask, handleArchiveTask, handleUnarchiveTask, handleDeleteTask }: any) {\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging,\n  } = useSortable({ id: task.id });\n\n  const style = useMemo(() => ({\n    transform: CSS.Transform.toString(transform),\n    transition: isDragging ? 'none' : transition,\n    opacity: isDragging ? 0.5 : 1,\n    zIndex: isDragging ? 9999 : 'auto',\n  }), [transform, transition, isDragging]);\n\n  const borderStyle = useMemo(() => getTaskBorderStyle(task), [task, getTaskBorderStyle]);\n\n  const checkboxStyle = useMemo(() => {\n    const borderColor = task.color || '#8B5CF6';\n    return {\n      borderColor: task.completed ? '#10B981' : borderColor,\n      backgroundColor: task.completed ? '#10B981' : 'transparent'\n    };\n  }, [task.completed, task.color]);\n\n  const handleCheckboxMouseEnter = useCallback((e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!task.completed && !task.archived) {\n      const hoverColor = task.color || '#8B5CF6';\n      e.currentTarget.style.backgroundColor = hoverColor;\n    }\n  }, [task.completed, task.archived, task.color]);\n\n  const handleCheckboxMouseLeave = useCallback((e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!task.completed && !task.archived) {\n      e.currentTarget.style.backgroundColor = 'transparent';\n    }\n  }, [task.completed, task.archived]);\n\n  const onToggle = useCallback(() => {\n    if (!task.archived) handleToggleTask(task.id);\n  }, [task.archived, task.id, handleToggleTask]);\n\n  const onEdit = useCallback(() => {\n    handleEditTask(task);\n  }, [task, handleEditTask]);\n\n  const onArchive = useCallback(() => {\n    handleArchiveTask(task.id);\n  }, [task.id, handleArchiveTask]);\n\n  const onUnarchive = useCallback(() => {\n    handleUnarchiveTask(task.id);\n  }, [task.id, handleUnarchiveTask]);\n\n  const onDelete = useCallback(() => {\n    handleDeleteTask(task.id);\n  }, [task.id, handleDeleteTask]);\n\n  // Helper function to determine if task is TYT or AYT\n  const getExamTypePrefix = (category: string) => {\n    const aytCategories = [\"ayt-matematik\", \"ayt-fizik\", \"ayt-kimya\", \"ayt-biyoloji\", \"ayt-geometri\"];\n    const tytCategories = [\"turkce\", \"sosyal\", \"matematik\", \"fizik\", \"kimya\", \"biyoloji\", \"tyt-geometri\"];\n    \n    if (aytCategories.includes(category)) return \"AYT\";\n    if (tytCategories.includes(category)) return \"TYT\";\n    return null;\n  };\n\n  const examType = getExamTypePrefix(task.category);\n  const isAYT = examType === \"AYT\";\n\n  return (\n    <div\n      ref={setNodeRef}\n      style={{...style, touchAction: 'none'}}\n      className={`bg-card rounded-lg border border-border p-4 hover:shadow-md ${task.completed ? \"opacity-75\" : \"\"} ${isDragging ? \"shadow-2xl\" : \"\"}`}\n      data-testid={`task-item-${task.id}`}\n    >\n      <div className=\"flex items-start justify-between\">\n        <div className=\"flex items-start space-x-3 flex-1\">\n          {/* Drag Handle */}\n          <div \n            {...attributes} \n            {...listeners} \n            className=\"mt-1 cursor-grab active:cursor-grabbing hover:bg-muted rounded p-1 transition-colors\"\n            style={borderStyle}\n          >\n            <GripVertical className=\"h-4 w-4 text-muted-foreground\" />\n          </div>\n          <button\n            onClick={onToggle}\n            disabled={task.archived}\n            className={`mt-1 w-5 h-5 rounded-full border-2 transition-colors duration-200 flex items-center justify-center ${\n              task.completed\n                ? \"bg-green-500 border-green-500\"\n                : \"hover:opacity-80\"\n            } ${task.archived ? \"opacity-50 cursor-not-allowed\" : \"hover:scale-110\"}`}\n            style={checkboxStyle}\n            onMouseEnter={handleCheckboxMouseEnter}\n            onMouseLeave={handleCheckboxMouseLeave}\n            data-testid={`button-toggle-task-${task.id}`}\n          >\n            {task.completed && (\n              <CheckCircle2 className=\"h-3 w-3 text-white\" />\n            )}\n          </button>\n          <div className=\"flex-1\">\n            <h3\n              className={`font-medium text-foreground ${\n                task.completed ? \"line-through\" : \"\"\n              }`}\n            >\n              {task.title}\n            </h3>\n            {task.description && (\n              <p\n                className={`text-sm text-muted-foreground mt-1 ${\n                  task.completed ? \"line-through\" : \"\"\n                }`}\n              >\n                {task.description}\n              </p>\n            )}\n            <div className=\"flex items-center space-x-4 mt-2\">\n              {task.dueDate && (\n                <span className=\"text-xs text-muted-foreground flex items-center\">\n                  <Calendar className=\"h-3 w-3 mr-1\" />\n                  {formatDueDate(task.dueDate)}\n                </span>\n              )}\n              {task.archived ? (\n                <span className=\"text-xs text-muted-foreground flex items-center\">\n                  <Archive className=\"h-3 w-3 mr-1\" />\n                  Arşivlendi\n                </span>\n              ) : task.completed ? (\n                <span className=\"text-xs text-muted-foreground flex items-center\">\n                  <CheckCircle2 className=\"h-3 w-3 mr-1\" />\n                  Tamamlandı\n                </span>\n              ) : (\n                <span\n                  className={`text-xs px-2 py-1 rounded-full ${getPriorityBadgeClass(\n                    task.priority\n                  )}`}\n                >\n                  {getPriorityText(task.priority)}\n                </span>\n              )}\n              <span\n                className={`text-xs px-2 py-1 rounded-full ${getCategoryBadgeClass(\n                  task.category\n                )}`}\n              >\n                {getCategoryText(task.category)}\n              </span>\n            </div>\n          </div>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          {task.completed ? (\n            <button\n              onClick={onToggle}\n              className=\"p-2 hover:bg-secondary rounded-lg transition-colors\"\n              data-testid={`button-undo-task-${task.id}`}\n            >\n              <Undo2 className=\"h-4 w-4 text-muted-foreground\" />\n            </button>\n          ) : !task.archived && (\n            <button\n              onClick={onEdit}\n              className=\"p-2 hover:bg-secondary rounded-lg transition-colors\"\n              data-testid={`button-edit-task-${task.id}`}\n            >\n              <Edit2 className=\"h-4 w-4 text-muted-foreground\" />\n            </button>\n          )}\n          {!task.archived ? (\n            <>\n              <button\n                onClick={onArchive}\n                className=\"p-2 hover:bg-blue-50 dark:hover:bg-blue-900/20 rounded-lg transition-colors\"\n                data-testid={`button-archive-task-${task.id}`}\n              >\n                <Archive className=\"h-4 w-4 text-blue-600 dark:text-blue-400\" />\n              </button>\n              <button\n                onClick={onDelete}\n                className=\"p-2 hover:bg-destructive/10 rounded-lg transition-colors\"\n                data-testid={`button-delete-task-${task.id}`}\n              >\n                <Trash2 className=\"h-4 w-4 text-destructive\" />\n              </button>\n            </>\n          ) : (\n            <div className=\"flex items-center gap-2\">\n              <button\n                onClick={onEdit}\n                className=\"p-2 hover:bg-secondary rounded-lg transition-colors\"\n                data-testid={`button-edit-archived-task-${task.id}`}\n              >\n                <Edit2 className=\"h-4 w-4 text-muted-foreground\" />\n              </button>\n              <button\n                onClick={onUnarchive}\n                className=\"p-2 hover:bg-green-50 dark:hover:bg-green-900/20 rounded-lg transition-colors\"\n                data-testid={`button-unarchive-task-${task.id}`}\n              >\n                <ArchiveRestore className=\"h-4 w-4 text-green-600 dark:text-green-400\" />\n              </button>\n              <span className=\"text-xs text-muted-foreground px-2\">Arşivlendi</span>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst SortableTask = memo(SortableTaskComponent);\n\nexport function TasksSection({ onAddTask }: TasksSectionProps) {\n  const [filter, setFilter] = useState<\"all\" | \"pending\" | \"completed\" | \"high\" | \"weekly\" | \"monthly\" | \"archived\">(\"all\");\n  const [editingTask, setEditingTask] = useState<Task | null>(null);\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const [showDateRangePicker, setShowDateRangePicker] = useState(false);\n  const [startDate, setStartDate] = useState(\"\");\n  const [endDate, setEndDate] = useState(\"\");\n  const { toast } = useToast();\n\n  const sensors = useSensors(\n    useSensor(PointerSensor, {\n      activationConstraint: {\n        distance: 8,\n      },\n    }),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    })\n  );\n\n  const { data: tasks = [] } = useQuery<Task[]>({\n    queryKey: [\"/api/tasks\"],\n  });\n\n  const { data: archivedTasks = [] } = useQuery<Task[]>({\n    queryKey: [\"/api/tasks/archived\"],\n    enabled: filter === \"archived\",\n  });\n\n  const { data: dateRangeTasks = [] } = useQuery<Task[]>({\n    queryKey: [\"/api/tasks/by-date-range\", startDate, endDate],\n    queryFn: () => fetch(`/api/tasks/by-date-range?startDate=${startDate}&endDate=${endDate}`).then(res => res.json()),\n    enabled: showDateRangePicker && !!startDate && !!endDate,\n  });\n\n  const archiveTaskMutation = useMutation({\n    mutationFn: (taskId: string) => \n      apiRequest(\"PATCH\", `/api/tasks/${taskId}/archive`),\n    onSuccess: () => {\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/tasks/archived\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/calendar\"] });\n      toast({\n        title: \"Görev arşivlendi\",\n        description: \"Görev başarıyla arşivlendi.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Hata\",\n        description: \"Görev arşivlenemedi.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const unarchiveTaskMutation = useMutation({\n    mutationFn: (taskId: string) => \n      apiRequest(\"PATCH\", `/api/tasks/${taskId}/unarchive`),\n    onSuccess: () => {\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/tasks/archived\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/calendar\"] });\n      toast({\n        title: \"Görev geri yüklendi\",\n        description: \"Görev arşivden başarıyla geri yüklendi.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Hata\",\n        description: \"Görev geri yüklenemedi.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const toggleTaskMutation = useMutation({\n    mutationFn: (taskId: string) => \n      apiRequest(\"PATCH\", `/api/tasks/${taskId}/toggle`),\n    onSuccess: () => {\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/calendar\"] });\n      toast({\n        title: \"Görev güncellendi\",\n        description: \"Görev durumu başarıyla değiştirildi.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Hata\",\n        description: \"Görev durumu değiştirilemedi.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteTaskMutation = useMutation({\n    mutationFn: (taskId: string) => \n      apiRequest(\"DELETE\", `/api/tasks/${taskId}`),\n    onSuccess: () => {\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/calendar\"] });\n      toast({\n        title: \"Görev silindi\",\n        description: \"Görev başarıyla silindi.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Hata\",\n        description: \"Görev silinemedi.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const displayTasks = showDateRangePicker && startDate && endDate ? dateRangeTasks : \n                       filter === \"archived\" ? archivedTasks : tasks;\n\n  // Sort tasks by createdAt in descending order (newest first)\n  const sortedTasks = useMemo(() => {\n    return [...displayTasks].sort((a, b) => {\n      const dateA = new Date(a.createdAt || 0).getTime();\n      const dateB = new Date(b.createdAt || 0).getTime();\n      return dateB - dateA;\n    });\n  }, [displayTasks]);\n\n  const filteredTasks = useMemo(() => {\n    return sortedTasks.filter(task => {\n      // Boş başlıklı görevleri filtrele\n      if (!task.title || task.title.trim() === \"\") return false;\n      \n      if (filter === \"archived\") return true;\n      switch (filter) {\n        case \"pending\":\n          return !task.completed;\n        case \"completed\":\n          return task.completed;\n        case \"high\":\n          return task.priority === \"high\";\n        case \"weekly\":\n          return task.recurrenceType === \"weekly\";\n        case \"monthly\":\n          return task.recurrenceType === \"monthly\";\n        default:\n          return true;\n      }\n    });\n  }, [sortedTasks, filter]);\n\n  const [localTasks, setLocalTasks] = useState(filteredTasks);\n\n  // Update local tasks when filtered tasks change, preserving custom order from localStorage\n  useEffect(() => {\n    try {\n      const savedOrder = localStorage.getItem('taskOrder');\n      if (savedOrder) {\n        const orderArray = JSON.parse(savedOrder) as string[];\n        // Sıralamayı uygula - sadece mevcut filteredTasks içindeki görevleri sırala\n        const orderedTasks = [...filteredTasks].sort((a, b) => {\n          const indexA = orderArray.indexOf(a.id);\n          const indexB = orderArray.indexOf(b.id);\n          // Eğer her iki görev de kaydedilmiş sıralamada varsa, ona göre sırala\n          if (indexA !== -1 && indexB !== -1) {\n            return indexA - indexB;\n          }\n          // Eğer sadece a varsa, a önce gelsin\n          if (indexA !== -1) return -1;\n          // Eğer sadece b varsa, b önce gelsin\n          if (indexB !== -1) return 1;\n          // İkisi de yoksa, orijinal sırayı koru\n          return 0;\n        });\n        setLocalTasks(orderedTasks);\n      } else {\n        setLocalTasks(filteredTasks);\n      }\n    } catch (error) {\n      console.error('Error loading task order from localStorage:', error);\n      setLocalTasks(filteredTasks);\n    }\n  }, [filteredTasks]);\n\n  const handleDragEnd = useCallback((event: DragEndEvent) => {\n    const { active, over } = event;\n\n    if (over && active.id !== over.id) {\n      setLocalTasks((items) => {\n        const oldIndex = items.findIndex((item) => item.id === active.id);\n        const newIndex = items.findIndex((item) => item.id === over.id);\n        \n        if (oldIndex === -1 || newIndex === -1) return items;\n\n        const reorderedItems = arrayMove(items, oldIndex, newIndex);\n        \n        // Sıralamayı localStorage'a kaydet\n        try {\n          const taskOrder = reorderedItems.map(item => item.id);\n          localStorage.setItem('taskOrder', JSON.stringify(taskOrder));\n        } catch (error) {\n          console.error('Error saving task order to localStorage:', error);\n        }\n        \n        return reorderedItems;\n      });\n    }\n  }, []);\n\n  const getTaskBorderStyle = useCallback((task: Task) => {\n    const color = task.color || \"#8B5CF6\";\n    return {\n      borderLeft: `4px solid ${color}`,\n    };\n  }, []);\n\n  const getPriorityBadgeClass = useCallback((priority: string) => {\n    switch (priority) {\n      case \"high\":\n        return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\";\n      case \"medium\":\n        return \"bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200\";\n      case \"low\":\n        return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\";\n      default:\n        return \"\";\n    }\n  }, []);\n\n  const getCategoryBadgeClass = useCallback((category: string) => {\n    switch (category) {\n      case \"genel\":\n        return \"bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200\";\n      case \"turkce\":\n        return \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\";\n      case \"sosyal\":\n        return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\";\n      case \"matematik\":\n        return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\";\n      case \"fizik\":\n        return \"bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200\";\n      case \"kimya\":\n        return \"bg-pink-100 text-pink-800 dark:bg-pink-900 dark:text-pink-200\";\n      case \"biyoloji\":\n        return \"bg-emerald-100 text-emerald-800 dark:bg-emerald-900 dark:text-emerald-200\";\n      case \"tyt-geometri\":\n        return \"bg-indigo-100 text-indigo-800 dark:bg-indigo-900 dark:text-indigo-200\";\n      case \"ayt-geometri\":\n        return \"bg-violet-100 text-violet-800 dark:bg-violet-900 dark:text-violet-200 border border-violet-300\";\n      case \"ayt-matematik\":\n        return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200 border border-red-300\";\n      case \"ayt-fizik\":\n        return \"bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200 border border-orange-300\";\n      case \"ayt-kimya\":\n        return \"bg-pink-100 text-pink-800 dark:bg-pink-900 dark:text-pink-200 border border-pink-300\";\n      case \"ayt-biyoloji\":\n        return \"bg-emerald-100 text-emerald-800 dark:bg-emerald-900 dark:text-emerald-200 border border-emerald-300\";\n      default:\n        return \"\";\n    }\n  }, []);\n\n  const getPriorityText = useCallback((priority: string) => {\n    switch (priority) {\n      case \"high\":\n        return \"Yüksek Öncelik\";\n      case \"medium\":\n        return \"Orta Öncelik\";\n      case \"low\":\n        return \"Düşük Öncelik\";\n      default:\n        return \"\";\n    }\n  }, []);\n\n  const getCategoryText = useCallback((category: string) => {\n    switch (category) {\n      case \"genel\":\n        return \"Genel\";\n      case \"turkce\":\n        return \"Türkçe\";\n      case \"sosyal\":\n        return \"Sosyal Bilimler\";\n      case \"matematik\":\n        return \"TYT Matematik\";\n      case \"fizik\":\n        return \"TYT Fizik\";\n      case \"kimya\":\n        return \"TYT Kimya\";\n      case \"biyoloji\":\n        return \"TYT Biyoloji\";\n      case \"tyt-geometri\":\n        return \"TYT Geometri\";\n      case \"ayt-geometri\":\n        return \"AYT Geometri\";\n      case \"ayt-matematik\":\n        return \"AYT Matematik\";\n      case \"ayt-fizik\":\n        return \"AYT Fizik\";\n      case \"ayt-kimya\":\n        return \"AYT Kimya\";\n      case \"ayt-biyoloji\":\n        return \"AYT Biyoloji\";\n      default:\n        return \"\";\n    }\n  }, []);\n\n  const formatDueDate = useCallback((dueDate: string) => {\n    if (!dueDate) return \"\";\n    const date = new Date(dueDate);\n    const today = new Date();\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n\n    if (date.toDateString() === today.toDateString()) {\n      return \"Bugün\";\n    } else if (date.toDateString() === tomorrow.toDateString()) {\n      return \"Yarın\";\n    } else {\n      return date.toLocaleDateString(\"tr-TR\", { day: \"numeric\", month: \"long\" });\n    }\n  }, []);\n\n  const handleToggleTask = useCallback((taskId: string) => {\n    toggleTaskMutation.mutate(taskId);\n  }, [toggleTaskMutation]);\n\n  const handleArchiveTask = useCallback((taskId: string) => {\n    archiveTaskMutation.mutate(taskId);\n  }, [archiveTaskMutation]);\n\n  const handleUnarchiveTask = useCallback((taskId: string) => {\n    unarchiveTaskMutation.mutate(taskId);\n  }, [unarchiveTaskMutation]);\n\n  const handleDeleteTask = useCallback((taskId: string) => {\n    deleteTaskMutation.mutate(taskId);\n  }, [deleteTaskMutation]);\n\n  const handleEditTask = useCallback((task: Task) => {\n    setEditingTask(task);\n    setIsEditModalOpen(true);\n  }, []);\n\n  const handleDateRangeSearch = () => {\n    if (!startDate || !endDate) {\n      toast({\n        title: \"Uyarı\",\n        description: \"Lütfen başlangıç ve bitiş tarihlerini seçin.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    setShowDateRangePicker(true);\n  };\n\n  const clearDateRange = () => {\n    setStartDate(\"\");\n    setEndDate(\"\");\n    setShowDateRangePicker(false);\n  };\n\n  return (\n    <div className=\"space-y-6 overflow-x-hidden\">\n      {/* Görev Ekle başlığı */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div className=\"flex flex-col gap-3\">\n          <h2 className=\"text-2xl font-bold text-foreground\">Görevlerim</h2>\n          <p className=\"text-muted-foreground\">Bugün tamamlanacak görevler (En yeni üstte)</p>\n        </div>\n        <div className=\"flex flex-col items-end gap-3\">\n          <Button \n            onClick={onAddTask}\n            className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n            data-testid=\"button-add-task\"\n          >\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Yeni Görev\n          </Button>\n          <MidnightCountdown />\n        </div>\n      </div>\n\n      {/* Filtreler */}\n      <div className=\"flex flex-wrap gap-2\">\n        <button\n          onClick={() => setFilter(\"all\")}\n          className={`px-3 py-1 rounded-full text-sm font-medium transition-colors ${\n            filter === \"all\"\n              ? \"bg-primary text-primary-foreground\"\n              : \"bg-secondary text-secondary-foreground hover:bg-accent\"\n          }`}\n          data-testid=\"filter-all\"\n        >\n          Tümü\n        </button>\n        <button\n          onClick={() => setFilter(\"pending\")}\n          className={`px-3 py-1 rounded-full text-sm transition-colors ${\n            filter === \"pending\"\n              ? \"bg-primary text-primary-foreground\"\n              : \"bg-secondary text-secondary-foreground hover:bg-accent\"\n          }`}\n          data-testid=\"filter-pending\"\n        >\n          Bekleyen\n        </button>\n        <button\n          onClick={() => setFilter(\"completed\")}\n          className={`px-3 py-1 rounded-full text-sm transition-colors ${\n            filter === \"completed\"\n              ? \"bg-primary text-primary-foreground\"\n              : \"bg-secondary text-secondary-foreground hover:bg-accent\"\n          }`}\n          data-testid=\"filter-completed\"\n        >\n          Tamamlanan\n        </button>\n        <button\n          onClick={() => setFilter(\"high\")}\n          className={`px-3 py-1 rounded-full text-sm transition-colors ${\n            filter === \"high\"\n              ? \"bg-primary text-primary-foreground\"\n              : \"bg-secondary text-secondary-foreground hover:bg-accent\"\n          }`}\n          data-testid=\"filter-high-priority\"\n        >\n          Yüksek Öncelik\n        </button>\n        <button\n          onClick={() => setFilter(\"weekly\")}\n          className={`px-3 py-1 rounded-full text-sm transition-colors ${\n            filter === \"weekly\"\n              ? \"bg-primary text-primary-foreground\"\n              : \"bg-secondary text-secondary-foreground hover:bg-accent\"\n          }`}\n          data-testid=\"filter-weekly\"\n        >\n          📅 Haftalık\n        </button>\n        <button\n          onClick={() => setFilter(\"monthly\")}\n          className={`px-3 py-1 rounded-full text-sm transition-colors ${\n            filter === \"monthly\"\n              ? \"bg-primary text-primary-foreground\"\n              : \"bg-secondary text-secondary-foreground hover:bg-accent\"\n          }`}\n          data-testid=\"filter-monthly\"\n        >\n          🗓️ Aylık\n        </button>\n        <button\n          onClick={() => { setFilter(\"archived\"); clearDateRange(); }}\n          className={`px-3 py-1 rounded-full text-sm transition-colors ${\n            filter === \"archived\"\n              ? \"bg-primary text-primary-foreground\"\n              : \"bg-secondary text-secondary-foreground hover:bg-accent\"\n          }`}\n          data-testid=\"filter-archived\"\n        >\n          <Archive className=\"h-3 w-3 inline mr-1\" />\n          Arşiv\n        </button>\n      </div>\n\n      {/* Tarih Aralığı Seçici - Only show when Archive filter is active */}\n      {filter === \"archived\" && (\n        <div className=\"flex flex-col sm:flex-row items-center gap-3 p-4 bg-muted/50 rounded-lg\">\n          <Calendar className=\"h-5 w-5 text-muted-foreground\" />\n          <div className=\"flex flex-col sm:flex-row items-center gap-3 flex-1\">\n            <input\n              type=\"date\"\n              value={startDate}\n              onChange={(e) => setStartDate(e.target.value)}\n              className=\"px-3 py-2 border border-border rounded-md bg-background text-foreground w-full sm:w-auto\"\n              placeholder=\"Başlangıç Tarihi\"\n              data-testid=\"input-start-date\"\n            />\n            <span className=\"text-muted-foreground\">-</span>\n            <input\n              type=\"date\"\n              value={endDate}\n              onChange={(e) => setEndDate(e.target.value)}\n              className=\"px-3 py-2 border border-border rounded-md bg-background text-foreground w-full sm:w-auto\"\n              placeholder=\"Görevin Bitirilme Tarihi\"\n              data-testid=\"input-end-date\"\n            />\n            <Button\n              onClick={handleDateRangeSearch}\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"w-full sm:w-auto\"\n              data-testid=\"button-search-date-range\"\n            >\n              Ara\n            </Button>\n            {showDateRangePicker && (\n              <Button\n                onClick={clearDateRange}\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"w-full sm:w-auto\"\n                data-testid=\"button-clear-date-range\"\n              >\n                Temizle\n              </Button>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Görev Listesi */}\n      <DndContext\n        sensors={sensors}\n        collisionDetection={closestCenter}\n        onDragEnd={handleDragEnd}\n        modifiers={[restrictToWindowEdges]}\n      >\n        <SortableContext\n          items={localTasks.map(t => t.id)}\n          strategy={verticalListSortingStrategy}\n        >\n          <div className={`space-y-3 overflow-hidden ${localTasks.length > 5 ? 'max-h-[600px] overflow-y-auto custom-scrollbar' : ''}`}>\n            {localTasks.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <p className=\"text-muted-foreground\">Görev bulunamadı.</p>\n              </div>\n            ) : (\n              localTasks.map((task) => (\n                <SortableTask\n                  key={task.id}\n                  task={task}\n                  getTaskBorderStyle={getTaskBorderStyle}\n                  getPriorityBadgeClass={getPriorityBadgeClass}\n                  getCategoryBadgeClass={getCategoryBadgeClass}\n                  getPriorityText={getPriorityText}\n                  getCategoryText={getCategoryText}\n                  formatDueDate={formatDueDate}\n                  handleToggleTask={handleToggleTask}\n                  handleEditTask={handleEditTask}\n                  handleArchiveTask={handleArchiveTask}\n                  handleUnarchiveTask={handleUnarchiveTask}\n                  handleDeleteTask={handleDeleteTask}\n                />\n              ))\n            )}\n          </div>\n        </SortableContext>\n      </DndContext>\n      \n      {/* Görev Modalını Düzenle */}\n      <EditTaskModal \n        open={isEditModalOpen}\n        onOpenChange={setIsEditModalOpen}\n        task={editingTask}\n      />\n    </div>\n  );\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":29130},"client/src/sayfalar/yks-konular.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\nimport { useState, createElement } from \"react\";\nimport { Header } from \"@/bilesenler/baslik\";\nimport { tytTopics, aytTopics, type SubjectTopics } from \"@/data/yks-konular\";\nimport { BookOpen, Award, AlertCircle } from \"lucide-react\";\n\n// Önemli konular mapping\nconst importantTopicsMap: { [key: string]: string[] } = {\n  \"TYT Türkçe\": [\"Paragraf\"],\n  \"TYT Matematik\": [\"Problemler\"],\n  \"TYT Geometri\": [\"Açılar ve Üçgenler\"],\n  \"TYT Fizik\": [\"Kuvvet ve Hareket\"],\n  \"TYT Kimya\": [\"Periyodik Tablo\", \"Kimyasal Türler Arası Etkileşimler\"],\n  \"TYT Biyoloji\": [\"Hücre ve Organelleri\"],\n  \"AYT Matematik\": [\"Limit\", \"Türev\", \"İntegral\", \"Trigonometri\"],\n  \"AYT Geometri\": [\"Doğruda ve Üçgende Açı\", \"Özel Üçgenler\", \"Noktanın Analitiği\", \"Doğrunun Analitiği\"],\n  \"AYT Fizik\": [\"İndüksiyon, Alternatif Akım ve Transformatörler\", \"Atom Fiziğine Giriş ve Radyoaktivite\", \"Modern Fizik\", \"Modern Fiziğin Teknolojideki Uygulamaları\"],\n  \"AYT Kimya\": [\"Kimya ve Elektrik\", \"Organik Kimya\"],\n  \"AYT Biyoloji\": [\"Sinir Sistemi\", \"Endokrin Sistem\", \"Duyu Organları\", \"Destek ve Hareket Sistemi\", \"Sindirim Sistemi\", \"Dolaşım Sistemi\", \"Solunum Sistemi\", \"Üriner Sistem\"],\n};\n\nexport default function YKSKonular() {\n  const [selectedSubject, setSelectedSubject] = useState<SubjectTopics | null>(tytTopics[0]);\n\n  const getYears = (topics: SubjectTopics) => {\n    if (topics.topics.length === 0) return [];\n    const firstTopic = topics.topics[0];\n    return Object.keys(firstTopic.years).sort((a, b) => parseInt(b) - parseInt(a));\n  };\n\n  const getTotalByYear = (topics: SubjectTopics) => {\n    const years = getYears(topics);\n    const totals: { [year: string]: number } = {};\n    \n    years.forEach(year => {\n      let total = 0;\n      topics.topics.forEach(topic => {\n        const value = topic.years[year];\n        if (value !== \"−\" && value !== \"\" && value !== null && value !== undefined) {\n          total += typeof value === 'number' ? value : parseInt(value as string) || 0;\n        }\n      });\n      totals[year] = total;\n    });\n    \n    return totals;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background to-muted/20\">\n      <Header />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"flex gap-6\">\n          {/* Sidebar - Left side subjects */}\n          <div className=\"w-80 flex-shrink-0\">\n            <div className=\"bg-card/95 backdrop-saturate-150 rounded-2xl border border-border/60 shadow-xl p-6 sticky top-4\">\n              {/* Header with Icon */}\n              <div className=\"mb-7 pb-5 border-b border-border/50\">\n                <div className=\"flex items-center gap-3.5\">\n                  <div className=\"p-3 bg-gradient-to-br from-primary via-purple-600 to-purple-700 rounded-2xl shadow-lg shadow-primary/30\">\n                    <BookOpen className=\"w-6 h-6 text-white\" />\n                  </div>\n                  <div>\n                    <h2 className=\"text-xl font-bold text-foreground tracking-tight\">Dersler</h2>\n                    <p className=\"text-xs text-muted-foreground font-medium mt-0.5\">Hangi yıl hangi konudan kaç soru çıkmış görebileceğim alan</p>\n                  </div>\n                </div>\n              </div>\n              \n              {/* TYT Section */}\n              <div className=\"mb-7\">\n                <div className=\"flex items-center gap-2 mb-4\">\n                  <div className=\"h-3 w-1 bg-gradient-to-b from-primary to-primary/50 rounded-full\"></div>\n                  <h3 className=\"text-xs font-bold text-primary uppercase tracking-widest\">TYT Konuları</h3>\n                </div>\n                <div className=\"space-y-2\">\n                  {tytTopics.map((subject) => (\n                    <button\n                      key={subject.name}\n                      onClick={() => setSelectedSubject(subject)}\n                      className={`group relative w-full text-left px-4 py-3.5 rounded-xl transition-all duration-200 flex items-center gap-3 overflow-hidden ${\n                        selectedSubject?.name === subject.name\n                          ? `bg-gradient-to-r ${subject.color} text-white shadow-xl shadow-${subject.color.split('-')[1]}-500/25 ring-2 ring-white/20`\n                          : \"bg-gradient-to-br from-secondary/70 to-secondary/50 hover:from-secondary hover:to-secondary/70 text-foreground hover:shadow-md\"\n                      }`}\n                    >\n                      <div className=\"text-2xl transition-transform group-hover:scale-110\">\n                        {subject.icon}\n                      </div>\n                      <div className=\"flex-1\">\n                        <span className=\"font-semibold text-sm block\">{subject.name.replace('TYT ', '')}</span>\n                      </div>\n                      {selectedSubject?.name === subject.name && (\n                        <div className=\"flex items-center gap-1\">\n                          <div className=\"w-1.5 h-1.5 bg-white rounded-full animate-pulse\" style={{ animationDelay: '0ms' }}></div>\n                          <div className=\"w-1.5 h-1.5 bg-white rounded-full animate-pulse\" style={{ animationDelay: '150ms' }}></div>\n                          <div className=\"w-1.5 h-1.5 bg-white rounded-full animate-pulse\" style={{ animationDelay: '300ms' }}></div>\n                        </div>\n                      )}\n                    </button>\n                  ))}\n                </div>\n              </div>\n\n              {/* Divider */}\n              <div className=\"relative my-7\">\n                <div className=\"absolute inset-0 flex items-center\">\n                  <div className=\"w-full h-px bg-gradient-to-r from-transparent via-border to-transparent\"></div>\n                </div>\n                <div className=\"relative flex justify-center\">\n                  <div className=\"px-4 bg-card\">\n                    <div className=\"w-2 h-2 rounded-full bg-gradient-to-br from-primary to-purple-600 shadow-lg\"></div>\n                  </div>\n                </div>\n              </div>\n\n              {/* AYT Section */}\n              <div>\n                <div className=\"flex items-center gap-2 mb-4\">\n                  <div className=\"h-3 w-1 bg-gradient-to-b from-purple-600 to-purple-600/50 rounded-full\"></div>\n                  <h3 className=\"text-xs font-bold text-purple-600 uppercase tracking-widest\">AYT Konuları</h3>\n                </div>\n                <div className=\"space-y-2\">\n                  {aytTopics.map((subject) => (\n                    <button\n                      key={subject.name}\n                      onClick={() => setSelectedSubject(subject)}\n                      className={`group relative w-full text-left px-4 py-3.5 rounded-xl transition-all duration-200 flex items-center gap-3 overflow-hidden ${\n                        selectedSubject?.name === subject.name\n                          ? `bg-gradient-to-r ${subject.color} text-white shadow-xl shadow-${subject.color.split('-')[1]}-500/25 ring-2 ring-white/20`\n                          : \"bg-gradient-to-br from-secondary/70 to-secondary/50 hover:from-secondary hover:to-secondary/70 text-foreground hover:shadow-md\"\n                      }`}\n                    >\n                      <div className=\"text-2xl transition-transform group-hover:scale-110\">\n                        {subject.icon}\n                      </div>\n                      <div className=\"flex-1\">\n                        <span className=\"font-semibold text-sm block\">{subject.name.replace('AYT ', '')}</span>\n                      </div>\n                      {selectedSubject?.name === subject.name && (\n                        <div className=\"flex items-center gap-1\">\n                          <div className=\"w-1.5 h-1.5 bg-white rounded-full animate-pulse\" style={{ animationDelay: '0ms' }}></div>\n                          <div className=\"w-1.5 h-1.5 bg-white rounded-full animate-pulse\" style={{ animationDelay: '150ms' }}></div>\n                          <div className=\"w-1.5 h-1.5 bg-white rounded-full animate-pulse\" style={{ animationDelay: '300ms' }}></div>\n                        </div>\n                      )}\n                    </button>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Main Content - Right side table */}\n          <div className=\"flex-1\">\n            {selectedSubject && (\n              <div className=\"bg-card/95 backdrop-saturate-150 rounded-2xl border border-border/60 shadow-xl overflow-hidden\">\n                {/* Header */}\n                <div className=\"relative overflow-hidden\">\n                  <div className={`absolute inset-0 bg-gradient-to-r ${selectedSubject.color} opacity-95`}></div>\n                  <div className=\"relative p-8\">\n                    <div className=\"flex items-center gap-5\">\n                      <div className=\"p-4 bg-white/20 rounded-2xl shadow-lg border border-white/20\">\n                        <span className=\"text-4xl\">{selectedSubject.icon}</span>\n                      </div>\n                      <div className=\"flex-1\">\n                        <h2 className=\"text-3xl font-bold text-white tracking-tight mb-1\">{selectedSubject.name}</h2>\n                        <p className=\"text-white/90 text-sm font-medium flex items-center gap-2\">\n                          <span className=\"inline-block w-1 h-1 bg-white/70 rounded-full\"></span>\n                          Yıllara Göre Soru Dağılımı & İstatistik Analizi\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Önemli Konular Uyarısı */}\n                {importantTopicsMap[selectedSubject.name] && importantTopicsMap[selectedSubject.name].length > 0 && (\n                  <div className=\"mx-8 mt-6 mb-4\">\n                    <div className=\"bg-gradient-to-r from-amber-50 to-orange-50 dark:from-amber-950/30 dark:to-orange-950/30 border-2 border-amber-400/60 dark:border-amber-600/60 rounded-xl p-5 shadow-lg\">\n                      <div className=\"flex items-start gap-4\">\n                        <div className=\"flex-shrink-0 mt-0.5\">\n                          <div className=\"p-2.5 bg-amber-500/20 rounded-lg\">\n                            <AlertCircle className=\"w-6 h-6 text-amber-600 dark:text-amber-400\" />\n                          </div>\n                        </div>\n                        <div className=\"flex-1\">\n                          <h3 className=\"font-bold text-amber-900 dark:text-amber-200 text-base mb-2 flex items-center gap-2\">\n                            ⭐ En Çok Değer Verilmesi Gereken Konular\n                          </h3>\n                          <div className=\"flex flex-wrap gap-2\">\n                            {importantTopicsMap[selectedSubject.name].map((topic, index) => (\n                              <span\n                                key={index}\n                                className=\"inline-flex items-center px-3.5 py-1.5 bg-amber-100 dark:bg-amber-900/40 text-amber-800 dark:text-amber-200 rounded-lg text-sm font-semibold border border-amber-300 dark:border-amber-700 shadow-sm\"\n                              >\n                                {topic}\n                              </span>\n                            ))}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {/* Table */}\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead>\n                      <tr className={`bg-gradient-to-r ${selectedSubject.color} bg-opacity-10`}>\n                        <th className=\"px-6 py-5 text-left font-bold text-sm text-foreground sticky left-0 bg-card/95 z-10 border-r border-border/30\">\n                          <div className=\"flex items-center gap-2\">\n                            <div className={`w-1 h-6 bg-gradient-to-b ${selectedSubject.color} rounded-full`}></div>\n                            KONU BAŞLIĞI\n                          </div>\n                        </th>\n                        {getYears(selectedSubject).map((year, idx) => (\n                          <th key={year} className={`px-5 py-5 text-center font-bold text-sm min-w-[95px] ${\n                            idx === 0 ? 'text-primary' : 'text-foreground'\n                          }`}>\n                            <div className=\"flex flex-col items-center gap-1.5\">\n                              <span className={idx === 0 ? 'text-base' : ''}>{year}</span>\n                              {idx === 0 && <div className={`w-10 h-1 bg-gradient-to-r ${selectedSubject.color} rounded-full`}></div>}\n                            </div>\n                          </th>\n                        ))}\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {selectedSubject.topics.map((topic, index) => (\n                        <tr \n                          key={index} \n                          className={`group border-b border-border/50 transition-all ${\n                            index % 2 === 0 ? 'bg-background/50 hover:bg-muted/40' : 'bg-muted/20 hover:bg-muted/50'\n                          }`}\n                        >\n                          <td className=\"px-6 py-4 font-semibold text-sm text-foreground sticky left-0 bg-inherit z-10 border-r border-border/30\">\n                            <div className=\"flex items-center gap-2.5\">\n                              <div className={`w-2 h-2 rounded-full bg-gradient-to-br ${selectedSubject.color} opacity-70 group-hover:opacity-100 transition-opacity`}></div>\n                              {topic.topic}\n                            </div>\n                          </td>\n                          {getYears(selectedSubject).map((year, idx) => (\n                            <td key={year} className=\"px-5 py-4 text-center\">\n                              {topic.years[year] === \"−\" || !topic.years[year] ? (\n                                <span className=\"text-muted-foreground/40 font-light\">−</span>\n                              ) : (\n                                <div className={`inline-flex items-center justify-center w-9 h-9 rounded-xl font-bold text-sm transition-all ${\n                                  idx === 0 \n                                    ? `bg-gradient-to-br ${selectedSubject.color} text-white shadow-md hover:shadow-lg hover:scale-105` \n                                    : 'text-foreground bg-secondary hover:bg-secondary/80'\n                                }`}>\n                                  {topic.years[year]}\n                                </div>\n                              )}\n                            </td>\n                          ))}\n                        </tr>\n                      ))}\n                      \n                      {/* Total Row */}\n                      <tr className={`bg-gradient-to-r ${selectedSubject.color} font-bold`}>\n                        <td className=\"px-6 py-6 text-sm text-white sticky left-0 z-10 bg-inherit border-r border-white/20\">\n                          <div className=\"flex items-center gap-3\">\n                            <div className=\"p-1.5 bg-white/20 rounded-lg\">\n                              <Award className=\"w-5 h-5\" />\n                            </div>\n                            <span className=\"text-base tracking-wide\">TOPLAM SORU SAYISI</span>\n                          </div>\n                        </td>\n                        {getYears(selectedSubject).map((year, idx) => (\n                          <td key={year} className=\"px-5 py-6 text-center\">\n                            <div className={`inline-flex items-center justify-center min-w-[45px] h-11 px-4 rounded-xl font-bold text-base shadow-lg transition-transform hover:scale-105 ${\n                              idx === 0 \n                                ? 'bg-white text-primary' \n                                : 'bg-white/25 text-white border border-white/30'\n                            }`}>\n                              {getTotalByYear(selectedSubject)[year]}\n                            </div>\n                          </td>\n                        ))}\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n\n                {/* Footer */}\n                <div className=\"relative px-6 py-5 bg-gradient-to-r from-muted/40 via-muted/30 to-muted/40 border-t border-border/50\">\n                  <div className=\"flex items-center justify-center gap-2 text-sm\">\n                    <div className=\"flex items-center gap-2 text-muted-foreground\">\n                      <div className=\"w-1.5 h-1.5 rounded-full bg-primary/60\"></div>\n                      <span className=\"font-semibold text-foreground\">Not:</span>\n                      <span>Tabloda <span className=\"font-mono text-foreground/80\">\"−\"</span> işareti o yıl konudan soru çıkmadığını gösterir.</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":17420},"client/src/bilesenler/arayuz/collapsible.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\n\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":433},"client/src/bilesenler/arayuz/sheet.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\n\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/kutuphane/yardimcilar\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":4397},"vite.config.ts":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\n\nfunction getCurrentDir() {\n  try {\n    return __dirname;\n  } catch {\n    return path.dirname(fileURLToPath(import.meta.url));\n  }\n}\n\nconst currentDir = getCurrentDir();\n\nexport default defineConfig({\n  plugins: [\n    react()\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(currentDir, \"client\", \"src\"),\n      \"@bilesenler\": path.resolve(currentDir, \"client\", \"src\", \"bilesenler\"),\n      \"@arayuz\": path.resolve(currentDir, \"client\", \"src\", \"bilesenler\", \"arayuz\"),\n      \"@sayfalar\": path.resolve(currentDir, \"client\", \"src\", \"sayfalar\"),\n      \"@hooks\": path.resolve(currentDir, \"client\", \"src\", \"hooks\"),\n      \"@kutuphane\": path.resolve(currentDir, \"client\", \"src\", \"kutuphane\"),\n      \"@stiller\": path.resolve(currentDir, \"client\", \"src\", \"stiller\"),\n      \"@shared\": path.resolve(currentDir, \"shared\"),\n      \"@assets\": path.resolve(currentDir, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(currentDir, \"client\"),\n  publicDir: path.resolve(currentDir, \"client\", \"public\"),\n  build: {\n    outDir: path.resolve(currentDir, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  logLevel: 'error',\n  server: {\n    host: \"0.0.0.0\",\n    port: 5000,\n    hmr: {\n      port: 5000,\n    },\n    allowedHosts: true,\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":1529},"client/src/bilesenler/arayuz/input-otp.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/kutuphane/yardimcilar\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":2270},"client/src/sayfalar/sayac.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport { useState, useEffect, useReducer, useRef } from \"react\";\nimport { Header } from \"@/bilesenler/baslik\";\nimport { Button } from \"@/bilesenler/arayuz/button\";\nimport { Input } from \"@/bilesenler/arayuz/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/bilesenler/arayuz/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/bilesenler/arayuz/tabs\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/bilesenler/arayuz/card\";\nimport { Badge } from \"@/bilesenler/arayuz/badge\";\nimport { Volume2, VolumeX, Play, Pause, Square, RotateCcw, Clock, Timer as TimerIcon, AlarmClock, Plus, Trash2, Zap, Target, Sparkles, Moon } from \"lucide-react\";\nimport { Switch } from \"@/bilesenler/arayuz/switch\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Confetti from 'react-confetti';\n\ninterface TimerState {\n  time: number; // milisaniye\n  isRunning: boolean;\n  laps: Array<{ id: number; time: number; split: number; }>;\n  lapCounter: number;\n}\n\ntype TimerAction = \n  | { type: 'START' }\n  | { type: 'PAUSE' }\n  | { type: 'RESET' }\n  | { type: 'TICK'; payload: number }\n  | { type: 'ADD_LAP'; payload: number };\n\nconst timerReducer = (state: TimerState, action: TimerAction): TimerState => {\n  switch (action.type) {\n    case 'START':\n      return { ...state, isRunning: true };\n    case 'PAUSE':\n      return { ...state, isRunning: false };\n    case 'RESET':\n      return { \n        time: 0, \n        isRunning: false, \n        laps: [], \n        lapCounter: 0 \n      };\n    case 'TICK':\n      return { ...state, time: action.payload };\n    case 'ADD_LAP':\n      const previousLapTime = state.laps.length > 0 ? state.laps[state.laps.length - 1].time : 0;\n      const split = action.payload - previousLapTime;\n      return { \n        ...state, \n        laps: [...state.laps, { \n          id: state.lapCounter + 1, \n          time: action.payload, \n          split \n        }],\n        lapCounter: state.lapCounter + 1\n      };\n    default:\n      return state;\n  }\n};\n\ninterface PomodoroSettings {\n  workTime: number; // dakika\n  breakTime: number; // dakika\n  longBreakTime: number; // dakika\n  cycles: number;\n}\n\ninterface AlarmSettings {\n  time: string; // SS:DD format\n  sound: string;\n  enabled: boolean;\n}\n\nconst formatTime = (ms: number, includeMs = true): string => {\n  const totalSeconds = Math.floor(ms / 1000);\n  const hours = Math.floor(totalSeconds / 3600);\n  const minutes = Math.floor((totalSeconds % 3600) / 60);\n  const seconds = totalSeconds % 60;\n  const milliseconds = Math.floor((ms % 1000) / 10); // saniyenin yüzde biri\n  \n  if (hours > 0) {\n    return includeMs \n      ? `${hours}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}:${milliseconds.toString().padStart(2, '0')}`\n      : `${hours}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n  }\n  \n  return includeMs \n    ? `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}:${milliseconds.toString().padStart(2, '0')}`\n    : `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n};\n\nexport default function Timer() {\n  \n  // Sound settings\n  const [soundEnabled, setSoundEnabled] = useState(() => \n    localStorage.getItem('timer-sound-enabled') !== 'false'\n  );\n  const [doNotDisturb, setDoNotDisturb] = useState(() =>\n    localStorage.getItem('timer-do-not-disturb') === 'true'\n  );\n  \n  const [alarmSound, setAlarmSound] = useState(() => \n    localStorage.getItem('timer-alarm-sound') || 'beep'\n  );\n\n  // Kronometre - localStorage'dan geri yükle\n  const [stopwatchState, dispatchStopwatch] = useReducer(\n    timerReducer,\n    {\n      time: 0,\n      isRunning: false,\n      laps: [],\n      lapCounter: 0\n    },\n    (initialState) => {\n      const saved = localStorage.getItem('timer-stopwatch-state');\n      const savedStartTime = localStorage.getItem('timer-stopwatch-start');\n      \n      if (saved) {\n        const state = JSON.parse(saved);\n        if (state.isRunning && savedStartTime) {\n          // Arka planda geçen süreyi hesapla\n          const startTime = parseInt(savedStartTime);\n          const elapsed = Date.now() - startTime;\n          return {\n            ...state,\n            time: elapsed\n          };\n        }\n        return state;\n      }\n      \n      return initialState;\n    }\n  );\n\n  // Pomodoro\n  const [pomodoroSettings, setPomodoroSettings] = useState<PomodoroSettings>(() => ({\n    workTime: 25,\n    breakTime: 5,\n    longBreakTime: 15,\n    cycles: 4\n  }));\n  \n  const [pomodoroState, setPomodoroState] = useState(() => {\n    const saved = localStorage.getItem('timer-pomodoro-state');\n    const savedStartTime = localStorage.getItem('timer-pomodoro-start');\n    \n    if (saved) {\n      const state = JSON.parse(saved);\n      if (state.isRunning && savedStartTime) {\n        // Arka planda geçen süreyi hesapla\n        const startTime = parseInt(savedStartTime);\n        const elapsed = Date.now() - startTime;\n        const remainingTime = Math.max(0, state.time - elapsed);\n        return {\n          ...state,\n          time: remainingTime\n        };\n      }\n      return state;\n    }\n    \n    return {\n      time: 25 * 60 * 1000,\n      isRunning: false,\n      isBreak: false,\n      currentCycle: 1,\n      mode: 'work' as 'work' | 'break' | 'longBreak'\n    };\n  });\n\n  // Alarm ayarları\n  const [alarms, setAlarms] = useState<AlarmSettings[]>(() => {\n    const saved = localStorage.getItem('timer-alarms');\n    return saved ? JSON.parse(saved) : [];\n  });\n  const [newAlarmTime, setNewAlarmTime] = useState('');\n  const [activeTab, setActiveTab] = useState('stopwatch');\n\n  // Zamanlayıcı Hedef Belirleme\n  const [timerGoal, setTimerGoal] = useState<number>(0); // dakika cinsinden\n  const [goalInput, setGoalInput] = useState<string>('');\n  const [showConfetti, setShowConfetti] = useState(false);\n  const [goalAchieved, setGoalAchieved] = useState(false);\n\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  const alarmIntervalRef = useRef<NodeJS.Timeout | null>(null);\n  const { toast } = useToast();\n\n  // Ses efektleri için ses bağlamı\n  const playSound = (frequency = 800, duration = 200, type: 'beep' | 'lap' | 'alarm' = 'beep') => {\n    if (!soundEnabled) return;\n    \n    try {\n      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n      const oscillator = audioContext.createOscillator();\n      const gainNode = audioContext.createGain();\n      \n      oscillator.connect(gainNode);\n      gainNode.connect(audioContext.destination);\n      \n      if (type === 'alarm') {\n        // AAlarm sesi - seçime göre farklı tonlar\n        if (alarmSound === 'chime') {\n          oscillator.frequency.setValueAtTime(523, audioContext.currentTime);\n          oscillator.frequency.setValueAtTime(659, audioContext.currentTime + 0.2);\n          oscillator.frequency.setValueAtTime(784, audioContext.currentTime + 0.4);\n          duration = 800;\n        } else if (alarmSound === 'bell') {\n          oscillator.frequency.setValueAtTime(800, audioContext.currentTime);\n          oscillator.frequency.exponentialRampToValueAtTime(400, audioContext.currentTime + 0.1);\n          duration = 500;\n        } else {\n          oscillator.frequency.setValueAtTime(1000, audioContext.currentTime);\n        }\n      } else if (type === 'lap') {\n        oscillator.frequency.setValueAtTime(600, audioContext.currentTime);\n        duration = 100;\n      } else {\n        oscillator.frequency.setValueAtTime(frequency, audioContext.currentTime);\n      }\n      \n      gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);\n      gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + duration / 1000);\n      \n      oscillator.start(audioContext.currentTime);\n      oscillator.stop(audioContext.currentTime + duration / 1000);\n    } catch (error) {\n      console.warn('Sound playback failed:', error);\n    }\n  };\n\n  // Hedef kontrolü için kronometre\n  useEffect(() => {\n    if (timerGoal > 0 && stopwatchState.time >= timerGoal * 60 * 1000 && !goalAchieved) {\n      setGoalAchieved(true);\n      setShowConfetti(true);\n      playSound(1000, 1000, 'alarm');\n      toast({\n        title: '🎉 Tebrikler! Hedefe Ulaştın!',\n        description: `${timerGoal} dakikalık hedefini başarıyla tamamladın!`,\n      });\n      \n      // 5 saniye sonra konfeti gizle\n      setTimeout(() => {\n        setShowConfetti(false);\n      }, 5000);\n    }\n  }, [stopwatchState.time, timerGoal, goalAchieved, toast]);\n\n  // Kronometre efektleri\n  useEffect(() => {\n    if (stopwatchState.isRunning) {\n      const startTime = Date.now() - stopwatchState.time;\n      intervalRef.current = setInterval(() => {\n        dispatchStopwatch({ type: 'TICK', payload: Date.now() - startTime });\n      }, 10);\n    } else {\n      if (intervalRef.current) clearInterval(intervalRef.current);\n    }\n\n    return () => {\n      if (intervalRef.current) clearInterval(intervalRef.current);\n    };\n  }, [stopwatchState.isRunning, stopwatchState.time]);\n\n  // Pomodoro etkileri\n  useEffect(() => {\n    let pomodoroInterval: NodeJS.Timeout | null = null;\n    \n    if (pomodoroState.isRunning && pomodoroState.time > 0) {\n      pomodoroInterval = setInterval(() => {\n        setPomodoroState(prev => {\n          if (prev.time <= 1000) {\n            playSound(800, 500, 'alarm');\n            toast({\n              title: prev.mode === 'work' ? 'Çalışma süresi bitti!' : 'Mola süresi bitti!',\n              description: prev.mode === 'work' ? 'Mola zamanı!' : 'Çalışmaya devam!',\n            });\n            \n            // Bir sonraki aşamaya otomatik geçiş\n            const nextMode = prev.mode === 'work' \n              ? (prev.currentCycle >= pomodoroSettings.cycles ? 'longBreak' : 'break')\n              : 'work';\n            \n            const nextTime = nextMode === 'work' \n              ? pomodoroSettings.workTime * 60 * 1000\n              : nextMode === 'break'\n              ? pomodoroSettings.breakTime * 60 * 1000\n              : pomodoroSettings.longBreakTime * 60 * 1000;\n            \n            const nextCycle = prev.mode === 'break' || prev.mode === 'longBreak' \n              ? prev.currentCycle + 1\n              : prev.currentCycle;\n            \n            return {\n              ...prev,\n              time: nextTime,\n              isRunning: false,\n              mode: nextMode,\n              currentCycle: nextMode === 'longBreak' ? 1 : nextCycle\n            };\n          }\n          return { ...prev, time: prev.time - 1000 };\n        });\n      }, 1000);\n    }\n\n    return () => {\n      if (pomodoroInterval) clearInterval(pomodoroInterval);\n    };\n  }, [pomodoroState.isRunning, pomodoroState.time, pomodoroSettings, toast]);\n\n  // Alarm kontrolü\n  useEffect(() => {\n    const checkAlarms = () => {\n      const now = new Date();\n      const currentTime = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;\n      \n      alarms.forEach(alarm => {\n        if (alarm.enabled && alarm.time === currentTime) {\n          playSound(800, 1000, 'alarm');\n          toast({\n            title: 'Alarm!',\n            description: `${alarm.time} alarmı çalıyor!`,\n          });\n          // Alarm çaldıktan sonra devre dışı bırak\n          setAlarms(prev => prev.map(a => \n            a.time === alarm.time ? { ...a, enabled: false } : a\n          ));\n        }\n      });\n    };\n\n    alarmIntervalRef.current = setInterval(checkAlarms, 1000);\n    return () => {\n      if (alarmIntervalRef.current) clearInterval(alarmIntervalRef.current);\n    };\n  }, [alarms, toast]);\n\n  // Alarm sekmesi etkinleştirildiğinde mevcut zamanı otomatik doldur\n  useEffect(() => {\n    if (activeTab === 'alarm' && !newAlarmTime) {\n      const now = new Date();\n      const currentTime = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;\n      setNewAlarmTime(currentTime);\n    }\n  }, [activeTab, newAlarmTime]);\n\n  // Ayarları localStorage'a kaydet\n  useEffect(() => {\n    localStorage.setItem('timer-sound-enabled', soundEnabled.toString());\n  }, [soundEnabled]);\n\n  useEffect(() => {\n    localStorage.setItem('timer-do-not-disturb', doNotDisturb.toString());\n  }, [doNotDisturb]);\n\n  useEffect(() => {\n    localStorage.setItem('timer-alarm-sound', alarmSound);\n  }, [alarmSound]);\n\n  useEffect(() => {\n    localStorage.setItem('timer-alarms', JSON.stringify(alarms));\n  }, [alarms]);\n\n  // Kronometre durumunu kaydet\n  useEffect(() => {\n    localStorage.setItem('timer-stopwatch-state', JSON.stringify(stopwatchState));\n    if (stopwatchState.isRunning) {\n      const startTime = Date.now() - stopwatchState.time;\n      localStorage.setItem('timer-stopwatch-start', startTime.toString());\n    } else {\n      localStorage.removeItem('timer-stopwatch-start');\n    }\n  }, [stopwatchState]);\n\n  // Pomodoro durumunu kaydet\n  useEffect(() => {\n    localStorage.setItem('timer-pomodoro-state', JSON.stringify(pomodoroState));\n    if (pomodoroState.isRunning) {\n      const startTime = Date.now();\n      localStorage.setItem('timer-pomodoro-start', startTime.toString());\n    } else {\n      localStorage.removeItem('timer-pomodoro-start');\n    }\n  }, [pomodoroState]);\n\n  // Pomodoro ayarları değiştiğinde timer'ı otomatik güncelle (çalışmıyorsa)\n  useEffect(() => {\n    if (!pomodoroState.isRunning) {\n      setPomodoroState(prev => {\n        const newTime = prev.mode === 'work' \n          ? pomodoroSettings.workTime * 60 * 1000\n          : prev.mode === 'break'\n          ? pomodoroSettings.breakTime * 60 * 1000\n          : pomodoroSettings.longBreakTime * 60 * 1000;\n        \n        return { ...prev, time: newTime };\n      });\n    }\n  }, [pomodoroSettings, pomodoroState.isRunning, pomodoroState.mode]);\n\n  const handleStopwatchStart = () => {\n    dispatchStopwatch({ type: 'START' });\n    playSound();\n  };\n\n  const handleStopwatchPause = () => {\n    dispatchStopwatch({ type: 'PAUSE' });\n    playSound();\n  };\n\n  const handleStopwatchReset = () => {\n    dispatchStopwatch({ type: 'RESET' });\n    setGoalAchieved(false);\n    setShowConfetti(false);\n    playSound();\n  };\n\n  const setTimerGoalHandler = () => {\n    const minutes = parseInt(goalInput);\n    if (minutes > 0) {\n      setTimerGoal(minutes);\n      setGoalAchieved(false);\n      toast({\n        title: '🎯 Hedef Belirlendi',\n        description: `${minutes} dakikalık çalışma hedefi ayarlandı!`,\n      });\n      setGoalInput('');\n    }\n  };\n\n  const handleStopwatchLap = () => {\n    dispatchStopwatch({ type: 'ADD_LAP', payload: stopwatchState.time });\n    playSound(600, 100, 'lap');\n  };\n\n  const handlePomodoroStart = () => {\n    setPomodoroState(prev => ({ ...prev, isRunning: true }));\n    playSound();\n  };\n\n  const handlePomodoroPause = () => {\n    setPomodoroState(prev => ({ ...prev, isRunning: false }));\n    playSound();\n  };\n\n  const handlePomodoroReset = () => {\n    setPomodoroState(prev => ({\n      ...prev,\n      time: pomodoroSettings.workTime * 60 * 1000,\n      isRunning: false,\n      mode: 'work',\n      currentCycle: 1\n    }));\n    playSound();\n  };\n\n  const addAlarm = () => {\n    if (newAlarmTime && !alarms.some(a => a.time === newAlarmTime)) {\n      // Alarm zamanının geçmişte olup olmadığını kontrol et\n      const now = new Date();\n      const [hours, minutes] = newAlarmTime.split(':').map(Number);\n      const alarmDate = new Date();\n      alarmDate.setHours(hours, minutes, 0, 0);\n      \n      if (alarmDate <= now) {\n        toast({\n          title: 'Geçersiz Alarm Saati',\n          description: 'Geçmiş bir saat için alarm kuramazsınız.',\n          variant: 'destructive'\n        });\n        return;\n      }\n      \n      setAlarms(prev => [...prev, {\n        time: newAlarmTime,\n        sound: alarmSound,\n        enabled: true\n      }]);\n      setNewAlarmTime('');\n    }\n  };\n\n  const removeAlarm = (time: string) => {\n    setAlarms(prev => prev.filter(a => a.time !== time));\n  };\n\n  const toggleAlarm = (time: string) => {\n    setAlarms(prev => prev.map(a => \n      a.time === time ? { ...a, enabled: !a.enabled } : a\n    ));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background to-secondary/20\">\n      {showConfetti && (\n        <Confetti\n          width={window.innerWidth}\n          height={window.innerHeight}\n          recycle={false}\n          numberOfPieces={200}\n          gravity={0.1}\n        />\n      )}\n      <Header />\n      \n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n        <div className=\"mb-8 text-center\">\n          <h1 className=\"text-4xl font-bold mb-3 bg-gradient-to-r from-primary via-purple-600 to-blue-600 bg-clip-text text-transparent flex items-center justify-center gap-3\">\n            <Sparkles className=\"h-10 w-10 text-primary animate-pulse\" />\n            Sayaç Merkezi\n            <Sparkles className=\"h-10 w-10 text-primary animate-pulse\" />\n          </h1>\n          <p className=\"text-lg text-muted-foreground\">Pomodoro, Kronometre ve Alarm ile derse fokuslanabilir,süre ölçebilir,alarm kurabilirim.</p>\n        </div>\n\n        {/* Modern Ses Kontroller */}\n        <div className=\"mb-8 flex items-center justify-center\">\n          <div className=\"bg-card/50 backdrop-blur-sm border border-border/50 rounded-2xl p-4 shadow-lg\">\n            <div className=\"flex items-center gap-6\">\n              <div className=\"flex items-center gap-3\">\n                <Switch \n                  checked={soundEnabled} \n                  onCheckedChange={setSoundEnabled}\n                  className=\"data-[state=checked]:bg-primary\"\n                />\n                <div className=\"flex items-center gap-2\">\n                  {soundEnabled ? \n                    <Volume2 className=\"h-5 w-5 text-primary\" /> : \n                    <VolumeX className=\"h-5 w-5 text-muted-foreground\" />\n                  }\n                  <span className=\"font-medium\">Ses Efektleri</span>\n                </div>\n              </div>\n              \n              <div className=\"h-6 w-px bg-border\" />\n              \n              <div className=\"flex items-center gap-3\">\n                <Switch \n                  checked={doNotDisturb} \n                  onCheckedChange={(checked) => {\n                    setDoNotDisturb(checked);\n                    if (checked) {\n                      toast({\n                        title: \"🔇 Rahatsız Etmeyin Modu Aktif\",\n                        description: \"Bilgisayarınızın tüm bildirimleri sessize alındı. Eğer tekrar açmak isterseniz Rahatsız Etmeyin kısmındaki butona tekrar dokunun.\",\n                        duration: 5000,\n                      });\n                    } else {\n                      toast({\n                        title: \"🔊 Bildirimler Açık\",\n                        description: \"Bilgisayarınızdaki tüm bildirimlerin sesi açıldı.\",\n                        duration: 3000,\n                      });\n                    }\n                  }}\n                  className=\"data-[state=checked]:bg-purple-600\"\n                />\n                <div className=\"flex items-center gap-2\">\n                  <Moon className=\"h-5 w-5 text-purple-500\" />\n                  <span className=\"font-medium\">Rahatsız Etmeyin</span>\n                </div>\n              </div>\n              \n              <div className=\"h-6 w-px bg-border\" />\n              \n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-sm font-medium\">Alarm Sesi:</span>\n                <Select value={alarmSound} onValueChange={setAlarmSound}>\n                  <SelectTrigger className=\"w-32 border-primary/20 focus:border-primary\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"beep\">🔊 Bip</SelectItem>\n                    <SelectItem value=\"chime\">🔔 Çan</SelectItem>\n                    <SelectItem value=\"bell\">🔔 Zil</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3 h-14 bg-card/30 backdrop-blur-sm border border-border/50 rounded-2xl p-2 shadow-lg\">\n            <TabsTrigger \n              value=\"stopwatch\" \n              className=\"flex items-center gap-2 rounded-xl font-semibold data-[state=active]:bg-gradient-to-r data-[state=active]:from-blue-500 data-[state=active]:to-cyan-500 data-[state=active]:text-white data-[state=active]:shadow-lg transition-all duration-300 hover:scale-105\"\n            >\n              <TimerIcon className=\"h-5 w-5\" />\n              ⏱️ Kronometre\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"pomodoro\" \n              className=\"flex items-center gap-2 rounded-xl font-semibold data-[state=active]:bg-gradient-to-r data-[state=active]:from-red-500 data-[state=active]:to-pink-500 data-[state=active]:text-white data-[state=active]:shadow-lg transition-all duration-300 hover:scale-105\"\n            >\n              <Target className=\"h-5 w-5\" />\n              🍅 Pomodoro\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"alarm\" \n              className=\"flex items-center gap-2 rounded-xl font-semibold data-[state=active]:bg-gradient-to-r data-[state=active]:from-orange-500 data-[state=active]:to-yellow-500 data-[state=active]:text-white data-[state=active]:shadow-lg transition-all duration-300 hover:scale-105\"\n            >\n              <AlarmClock className=\"h-5 w-5\" />\n              ⏰ Alarm\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Kronometre */}\n          <TabsContent value=\"stopwatch\" className=\"mt-6\">\n            <Card className=\"bg-gradient-to-br from-card/70 via-card/50 to-blue-50/30 dark:to-blue-950/30 backdrop-blur-sm border-2 border-blue-200/30 dark:border-blue-800/30 shadow-2xl\">\n              <CardHeader className=\"text-center bg-gradient-to-r from-blue-500/10 to-cyan-500/10 rounded-t-lg border-b border-blue-200/30\">\n                <CardTitle className=\"text-2xl font-bold bg-gradient-to-r from-blue-600 to-cyan-600 bg-clip-text text-transparent flex items-center justify-center gap-2\">\n                  <Zap className=\"h-6 w-6 text-blue-500\" />\n                  ⏱️ Kronometre\n                </CardTitle>\n                <CardDescription className=\"text-lg\">Zaman tutma ve tur kaydetme ile performansını ölç</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-8 pt-8\">\n                <div className=\"text-center\">\n                  <div className=\"relative mb-8\">\n                    <div className=\"text-7xl font-mono font-bold tracking-wider bg-gradient-to-r from-blue-600 via-cyan-500 to-blue-700 bg-clip-text text-transparent drop-shadow-lg\">\n                      {formatTime(stopwatchState.time)}\n                    </div>\n                    <div className=\"absolute -inset-4 bg-gradient-to-r from-blue-500/20 to-cyan-500/20 blur-xl rounded-full opacity-60\"></div>\n                    \n                    {/* Hedef İlerleme Göstergesi */}\n                    {timerGoal > 0 && (\n                      <div className=\"mt-4 p-4 bg-gradient-to-r from-purple-50 to-indigo-50 dark:from-purple-950/30 dark:to-indigo-950/30 rounded-xl border border-purple-200 dark:border-purple-800/50\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <span className=\"text-sm font-medium text-purple-700 dark:text-purple-300\">🎯 Hedef: {timerGoal} dakika</span>\n                          <span className=\"text-sm font-medium text-purple-700 dark:text-purple-300\">\n                            {((stopwatchState.time / (timerGoal * 60 * 1000)) * 100).toFixed(1)}%\n                          </span>\n                        </div>\n                        <div className=\"w-full bg-purple-200 dark:bg-purple-800/50 rounded-full h-3 overflow-hidden\">\n                          <div \n                            className={`h-full rounded-full transition-all duration-500 ${\n                              goalAchieved \n                                ? 'bg-gradient-to-r from-green-400 to-emerald-500 animate-pulse' \n                                : 'bg-gradient-to-r from-purple-500 to-indigo-600'\n                            }`}\n                            style={{\n                              width: `${Math.min(100, (stopwatchState.time / (timerGoal * 60 * 1000)) * 100)}%`\n                            }}\n                          />\n                        </div>\n                        {goalAchieved && (\n                          <div className=\"mt-2 text-center text-green-600 dark:text-green-400 font-bold animate-bounce\">\n                            🎉 Tebrikler! Hedefe ulaştın! 🎉\n                          </div>\n                        )}\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Hedef Belirleme Bölümü */}\n                  <div className=\"mb-6 p-4 bg-gradient-to-r from-yellow-50 to-orange-50 dark:from-yellow-950/30 dark:to-orange-950/30 rounded-xl border border-yellow-200 dark:border-yellow-800/50\">\n                    <div className=\"flex items-center justify-center gap-2 mb-3\">\n                      <Target className=\"h-5 w-5 text-orange-600\" />\n                      <h3 className=\"text-lg font-bold text-orange-800 dark:text-orange-200\">Zaman Hedefi Belirle</h3>\n                    </div>\n                    <div className=\"flex items-center gap-3 justify-center\">\n                      <Input\n                        type=\"number\"\n                        value={goalInput}\n                        onChange={(e) => setGoalInput(e.target.value)}\n                        placeholder=\"Dakika\"\n                        className=\"w-24 text-center font-bold border-orange-300 focus:border-orange-500 dark:border-orange-700\"\n                        min=\"1\"\n                        max=\"1440\"\n                      />\n                      <span className=\"text-sm font-medium text-orange-700 dark:text-orange-300\">dakika</span>\n                      <Button\n                        onClick={setTimerGoalHandler}\n                        size=\"sm\"\n                        className=\"bg-gradient-to-r from-orange-500 to-yellow-500 hover:from-orange-600 hover:to-yellow-600 text-white font-bold px-4 py-2 rounded-lg shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105\"\n                      >\n                        🎯 Hedef Ayarla\n                      </Button>\n                      {timerGoal > 0 && (\n                        <Button\n                          onClick={() => {\n                            setTimerGoal(0);\n                            setGoalAchieved(false);\n                            setShowConfetti(false);\n                            toast({\n                              title: 'Hedef Temizlendi',\n                              description: 'Zaman hedefi kaldırıldı.',\n                            });\n                          }}\n                          size=\"sm\"\n                          variant=\"outline\"\n                          className=\"border-red-300 text-red-600 hover:bg-red-50 dark:border-red-700 dark:text-red-400 dark:hover:bg-red-950/30\"\n                        >\n                          ❌ Temizle\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex justify-center gap-4 mb-8\">\n                    {!stopwatchState.isRunning ? (\n                      <Button \n                        onClick={handleStopwatchStart} \n                        size=\"lg\" \n                        className=\"px-10 py-4 text-lg font-semibold bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105\"\n                      >\n                        <Play className=\"mr-2 h-6 w-6\" />\n                        🚀 Başlat\n                      </Button>\n                    ) : (\n                      <Button \n                        onClick={handleStopwatchPause} \n                        size=\"lg\" \n                        className=\"px-10 py-4 text-lg font-semibold bg-gradient-to-r from-yellow-500 to-orange-500 hover:from-yellow-600 hover:to-orange-600 shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105 text-white\"\n                      >\n                        <Pause className=\"mr-2 h-6 w-6\" />\n                        ⏸️ Duraklat\n                      </Button>\n                    )}\n                    \n                    {stopwatchState.isRunning && (\n                      <Button \n                        onClick={handleStopwatchLap} \n                        size=\"lg\" \n                        className=\"px-10 py-4 text-lg font-semibold bg-gradient-to-r from-purple-500 to-indigo-500 hover:from-purple-600 hover:to-indigo-600 shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105 text-white\"\n                      >\n                        <Plus className=\"mr-2 h-6 w-6\" />\n                        🏃 Tur\n                      </Button>\n                    )}\n                    \n                    <Button \n                      onClick={handleStopwatchReset} \n                      size=\"lg\" \n                      className=\"px-10 py-4 text-lg font-semibold bg-gradient-to-r from-red-500 to-pink-500 hover:from-red-600 hover:to-pink-600 shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105 text-white\"\n                    >\n                      <RotateCcw className=\"mr-2 h-6 w-6\" />\n                      🔄 Sıfırla\n                    </Button>\n                  </div>\n                </div>\n\n                {stopwatchState.laps.length > 0 && (\n                  <div className=\"bg-gradient-to-br from-muted/50 to-slate-100/50 dark:to-slate-800/50 rounded-xl p-6 backdrop-blur-sm border border-blue-200/30\">\n                    <h3 className=\"font-bold text-xl mb-4 text-center bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">🏁 Tur Kayıtları</h3>\n                    <div className=\"max-h-80 overflow-y-auto space-y-3\">\n                      {stopwatchState.laps.map((lap, index) => (\n                        <div key={lap.id} className={`flex justify-between items-center p-4 rounded-lg shadow-md transition-all duration-300 hover:scale-102 ${\n                          index === 0 ? 'bg-gradient-to-r from-yellow-100 to-amber-100 dark:from-yellow-900/30 dark:to-amber-900/30 border border-yellow-300/50' : \n                          'bg-gradient-to-r from-slate-50 to-gray-100 dark:from-slate-800 dark:to-gray-800 border border-slate-200/50 dark:border-slate-700/50'\n                        }`}>\n                          <div className=\"flex items-center gap-3\">\n                            <div className={`w-8 h-8 rounded-full flex items-center justify-center font-bold text-sm ${\n                              index === 0 ? 'bg-yellow-500 text-white' : 'bg-blue-500 text-white'\n                            }`}>\n                              {lap.id}\n                            </div>\n                            <span className=\"font-semibold\">Tur {lap.id}</span>\n                          </div>\n                          <div className=\"flex gap-6\">\n                            <div className=\"text-right\">\n                              <div className=\"text-xs text-muted-foreground\">Ara Zaman</div>\n                              <span className=\"font-mono font-bold text-lg\">{formatTime(lap.split)}</span>\n                            </div>\n                            <div className=\"text-right\">\n                              <div className=\"text-xs text-muted-foreground\">Toplam</div>\n                              <span className=\"font-mono text-muted-foreground\">{formatTime(lap.time)}</span>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Pomodoro */}\n          <TabsContent value=\"pomodoro\" className=\"mt-6\">\n            <Card className=\"bg-gradient-to-br from-card/70 via-card/50 to-red-50/30 dark:to-red-950/30 backdrop-blur-sm border-2 border-red-200/30 dark:border-red-800/30 shadow-2xl\">\n              <CardHeader className=\"text-center bg-gradient-to-r from-red-500/10 to-pink-500/10 rounded-t-lg border-b border-red-200/30\">\n                <CardTitle className=\"text-2xl font-bold bg-gradient-to-r from-red-600 to-pink-600 bg-clip-text text-transparent flex items-center justify-center gap-2\">\n                  <Target className=\"h-6 w-6 text-red-500\" />\n                  🍅 Pomodoro Tekniği\n                </CardTitle>\n                <CardDescription className=\"text-lg\">\n                  {pomodoroState.mode === 'work' && '💪 Çalışma süresi - Odaklan!'}\n                  {pomodoroState.mode === 'break' && '☕ Kısa mola - Nefes al!'}\n                  {pomodoroState.mode === 'longBreak' && '🏖️ Uzun mola - Dinlen!'}\n                  {' - Döngü ' + pomodoroState.currentCycle}\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-8 pt-8\">\n                <div className=\"text-center\">\n                  <div className=\"relative mb-6\">\n                    <div className=\"text-7xl font-mono font-bold tracking-wider bg-gradient-to-r from-red-600 via-pink-500 to-red-700 bg-clip-text text-transparent drop-shadow-lg\">\n                      {formatTime(pomodoroState.time, false)}\n                    </div>\n                    <div className=\"absolute -inset-4 bg-gradient-to-r from-red-500/20 to-pink-500/20 blur-xl rounded-full opacity-60\"></div>\n                  </div>\n                  \n                  <div className=\"flex justify-center gap-3 mb-8\">\n                    <Badge \n                      variant={pomodoroState.mode === 'work' ? 'default' : 'secondary'}\n                      className={`px-6 py-2 text-lg font-semibold ${\n                        pomodoroState.mode === 'work' \n                          ? 'bg-gradient-to-r from-red-500 to-pink-500 text-white shadow-lg' \n                          : pomodoroState.mode === 'break'\n                          ? 'bg-gradient-to-r from-green-500 to-emerald-500 text-white shadow-lg'\n                          : 'bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-lg'\n                      }`}\n                    >\n                      {pomodoroState.mode === 'work' && '💪 Çalışma Zamanı'}\n                      {pomodoroState.mode === 'break' && '☕ Kısa Mola'}\n                      {pomodoroState.mode === 'longBreak' && '🏖️ Uzun Mola'}\n                    </Badge>\n                  </div>\n                  \n                  <div className=\"flex justify-center gap-4 mb-8\">\n                    {!pomodoroState.isRunning ? (\n                      <Button \n                        onClick={handlePomodoroStart} \n                        size=\"lg\" \n                        className=\"px-10 py-4 text-lg font-semibold bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105\"\n                      >\n                        <Play className=\"mr-2 h-6 w-6\" />\n                        🚀 Başlat\n                      </Button>\n                    ) : (\n                      <Button \n                        onClick={handlePomodoroPause} \n                        size=\"lg\" \n                        className=\"px-10 py-4 text-lg font-semibold bg-gradient-to-r from-yellow-500 to-orange-500 hover:from-yellow-600 hover:to-orange-600 shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105 text-white\"\n                      >\n                        <Pause className=\"mr-2 h-6 w-6\" />\n                        ⏸️ Duraklat\n                      </Button>\n                    )}\n                    \n                    <Button \n                      onClick={handlePomodoroReset} \n                      size=\"lg\" \n                      className=\"px-10 py-4 text-lg font-semibold bg-gradient-to-r from-red-500 to-pink-500 hover:from-red-600 hover:to-pink-600 shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105 text-white\"\n                    >\n                      <RotateCcw className=\"mr-2 h-6 w-6\" />\n                      🔄 Sıfırla\n                    </Button>\n                  </div>\n                </div>\n\n                <div className=\"bg-gradient-to-br from-muted/50 to-slate-100/50 dark:to-slate-800/50 rounded-xl p-6 backdrop-blur-sm border border-red-200/30\">\n                  <h3 className=\"font-bold text-xl mb-6 text-center bg-gradient-to-r from-red-600 to-pink-600 bg-clip-text text-transparent\">⚙️ Ayarlar</h3>\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6\">\n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-semibold flex items-center gap-2\">\n                        💪 Çalışma (dk)\n                      </label>\n                      <Input\n                        type=\"number\"\n                        value={pomodoroSettings.workTime}\n                        onChange={(e) => setPomodoroSettings(prev => ({\n                          ...prev,\n                          workTime: parseInt(e.target.value) || 25\n                        }))}\n                        min=\"1\"\n                        max=\"60\"\n                        className=\"border-red-200/50 focus:border-red-500 font-mono text-center text-lg\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-semibold flex items-center gap-2\">\n                        ☕ Mola (dk)\n                      </label>\n                      <Input\n                        type=\"number\"\n                        value={pomodoroSettings.breakTime}\n                        onChange={(e) => setPomodoroSettings(prev => ({\n                          ...prev,\n                          breakTime: parseInt(e.target.value) || 5\n                        }))}\n                        min=\"1\"\n                        max=\"30\"\n                        className=\"border-green-200/50 focus:border-green-500 font-mono text-center text-lg\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-semibold flex items-center gap-2\">\n                        🏖️ Uzun Mola (dk)\n                      </label>\n                      <Input\n                        type=\"number\"\n                        value={pomodoroSettings.longBreakTime}\n                        onChange={(e) => setPomodoroSettings(prev => ({\n                          ...prev,\n                          longBreakTime: parseInt(e.target.value) || 15\n                        }))}\n                        min=\"5\"\n                        max=\"60\"\n                        className=\"border-blue-200/50 focus:border-blue-500 font-mono text-center text-lg\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-semibold flex items-center gap-2\">\n                        🔄 Döngü Sayısı\n                      </label>\n                      <Input\n                        type=\"number\"\n                        value={pomodoroSettings.cycles}\n                        onChange={(e) => setPomodoroSettings(prev => ({\n                          ...prev,\n                          cycles: parseInt(e.target.value) || 4\n                        }))}\n                        min=\"1\"\n                        max=\"10\"\n                        className=\"border-purple-200/50 focus:border-purple-500 font-mono text-center text-lg\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Alarm */}\n          <TabsContent value=\"alarm\" className=\"mt-6\">\n            <Card className=\"bg-gradient-to-br from-card/70 via-card/50 to-orange-50/30 dark:to-orange-950/30 backdrop-blur-sm border-2 border-orange-200/30 dark:border-orange-800/30 shadow-2xl\">\n              <CardHeader className=\"text-center bg-gradient-to-r from-orange-500/10 to-yellow-500/10 rounded-t-lg border-b border-orange-200/30\">\n                <CardTitle className=\"text-2xl font-bold bg-gradient-to-r from-orange-600 to-yellow-600 bg-clip-text text-transparent flex items-center justify-center gap-2\">\n                  <AlarmClock className=\"h-6 w-6 text-orange-500\" />\n                  ⏰ Alarm Merkezi\n                </CardTitle>\n                <CardDescription className=\"text-lg\">Alarm kur ve zamanında uyarı al</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-8 pt-8\">\n                <div className=\"bg-gradient-to-r from-orange-100/50 to-yellow-100/50 dark:from-orange-900/30 dark:to-yellow-900/30 rounded-xl p-6 backdrop-blur-sm border border-orange-200/50\">\n                  <h3 className=\"font-bold text-lg mb-4 text-center text-orange-700 dark:text-orange-300\">➕ Yeni Alarm Ekle</h3>\n                  <div className=\"flex gap-4\">\n                    <Input\n                      type=\"time\"\n                      value={newAlarmTime}\n                      onChange={(e) => setNewAlarmTime(e.target.value)}\n                      onClick={() => {\n                        if (!newAlarmTime) {\n                          const now = new Date();\n                          const currentTime = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;\n                          setNewAlarmTime(currentTime);\n                        }\n                      }}\n                      placeholder=\"HH:MM\"\n                      className=\"text-2xl font-mono text-center border-orange-200/50 focus:border-orange-500 bg-white/70 dark:bg-slate-800/70\"\n                    />\n                    <Button \n                      onClick={addAlarm} \n                      disabled={!newAlarmTime}\n                      className=\"px-8 py-3 text-lg font-semibold bg-gradient-to-r from-orange-500 to-yellow-500 hover:from-orange-600 hover:to-yellow-600 shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105\"\n                    >\n                      <Plus className=\"mr-2 h-5 w-5\" />\n                      🔔 Ekle\n                    </Button>\n                  </div>\n                </div>\n\n                {alarms.length > 0 && (\n                  <div className=\"space-y-4\">\n                    <h3 className=\"font-bold text-xl text-center bg-gradient-to-r from-orange-600 to-yellow-600 bg-clip-text text-transparent\">📅 Aktif Alarmlar</h3>\n                    <div className=\"space-y-3 max-h-80 overflow-y-auto\">\n                      {alarms.map((alarm, index) => (\n                        <div key={alarm.time} className={`flex items-center justify-between p-6 rounded-xl shadow-lg transition-all duration-300 hover:scale-102 ${\n                          alarm.enabled \n                            ? 'bg-gradient-to-r from-green-100 to-emerald-100 dark:from-green-900/40 dark:to-emerald-900/40 border-2 border-green-300/50' \n                            : 'bg-gradient-to-r from-gray-100 to-slate-100 dark:from-gray-800/50 dark:to-slate-800/50 border-2 border-gray-300/50'\n                        }`}>\n                          <div className=\"flex items-center gap-6\">\n                            <div className={`w-12 h-12 rounded-full flex items-center justify-center font-bold text-lg shadow-lg ${\n                              alarm.enabled ? 'bg-gradient-to-r from-green-500 to-emerald-500 text-white' : 'bg-gray-400 text-white'\n                            }`}>\n                              ⏰\n                            </div>\n                            <div>\n                              <div className=\"text-3xl font-mono font-bold text-foreground\">\n                                {alarm.time}\n                              </div>\n                              <Badge \n                                variant={alarm.enabled ? 'default' : 'secondary'}\n                                className={`mt-1 ${\n                                  alarm.enabled \n                                    ? 'bg-gradient-to-r from-orange-500 to-yellow-500 text-white' \n                                    : 'bg-gray-400 text-white'\n                                }`}\n                              >\n                                🔊 {alarm.sound}\n                              </Badge>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center gap-4\">\n                            <div className=\"flex flex-col items-center gap-2\">\n                              <Switch\n                                checked={alarm.enabled}\n                                onCheckedChange={() => toggleAlarm(alarm.time)}\n                                className=\"data-[state=checked]:bg-green-500\"\n                              />\n                              <span className=\"text-xs font-medium\">\n                                {alarm.enabled ? '🟢 Aktif' : '🔴 Pasif'}\n                              </span>\n                            </div>\n                            <Button \n                              size=\"lg\" \n                              variant=\"destructive\"\n                              onClick={() => removeAlarm(alarm.time)}\n                              className=\"bg-gradient-to-r from-red-500 to-pink-500 hover:from-red-600 hover:to-pink-600 shadow-lg hover:shadow-xl transition-all duration-300\"\n                            >\n                              <Trash2 className=\"h-5 w-5\" />\n                            </Button>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                {alarms.length === 0 && (\n                  <div className=\"text-center py-12\">\n                    <div className=\"text-6xl mb-4\">⏰</div>\n                    <h3 className=\"text-xl font-bold text-muted-foreground mb-2\">Henüz Alarm Yok</h3>\n                    <p className=\"text-muted-foreground\">Ekle butonu ile yeni bir alarm ekleyerek başla!</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":47327},"postcss.config.js":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nexport default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":184},"replit.md":{"content":"# YKS Analiz Takip Sistemi\n\n## Overview\n\nA comprehensive exam tracking and analysis system designed for Turkish students preparing for YKS (Yükseköğretim Kurumları Sınavı - Higher Education Institutions Exam). The application provides detailed analytics for practice exams, question logging, task management, study hour tracking, and performance visualization.\n\n**Key Features:**\n- Exam result tracking and analysis (TYT/AYT)\n- Daily question logs with wrong topic tracking\n- Task management with priorities and categories\n- Study hours monitoring\n- Performance graphs and charts\n- Weather widget integration\n- Countdown timers to exam dates\n- Activity heatmaps\n- Email reporting system\n- Flashcard study system\n- Desktop application (Electron)\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Full-Stack Monorepo Structure\n\n**Technology Stack:**\n- **Frontend:** React 18 + TypeScript + Vite\n- **Backend:** Node.js + Express\n- **Database:** PostgreSQL (via Neon serverless) with Drizzle ORM\n- **Desktop:** Electron (Windows application)\n- **UI Components:** shadcn/ui + Tailwind CSS\n- **State Management:** TanStack Query (React Query)\n- **Validation:** Zod schemas\n\n**Architectural Decisions:**\n\n1. **Monorepo Pattern**\n   - Single repository containing client, server, and shared code\n   - Shared TypeScript types and Zod schemas between frontend/backend\n   - Eliminates code duplication and ensures type safety across the stack\n\n2. **Dual Storage Strategy**\n   - **Development:** In-memory storage with JSON file persistence (`data/kayitlar.json`)\n   - **Production:** PostgreSQL database via Drizzle ORM\n   - Automatic fallback mechanism based on DATABASE_URL environment variable\n   - Enables local development without database dependency\n\n3. **Desktop-First Design**\n   - Electron wrapper provides native Windows application experience\n   - Embedded Express server runs internally\n   - IPC (Inter-Process Communication) for activity logging\n   - System tray integration with notifications\n\n4. **Modular Component Architecture**\n   - UI components in `client/src/bilesenler/arayuz/` (shadcn/ui)\n   - Custom widgets in `client/src/bilesenler/`\n   - Pages in `client/src/sayfalar/`\n   - Reusable hooks in `client/src/hooks/`\n\n5. **Type-Safe API Communication**\n   - Shared Zod schemas validate both client and server data\n   - Custom `apiRequest` utility handles HTTP requests\n   - React Query manages caching and optimistic updates\n\n6. **Turkish Language Codebase**\n   - All variable names, comments, and UI text in Turkish\n   - Aligns with target user base (Turkish students)\n   - Path aliases use Turkish names (`@bilesenler`, `@sayfalar`, `@kutuphane`)\n\n### Core Data Models\n\n**Database Schema (shared/sema.ts):**\n- `tasks` - Task management with priorities, categories, recurrence\n- `moods` - Daily mood tracking with notes\n- `goals` - Long-term goals with progress tracking\n- `questionLogs` - Daily question solving records\n- `examResults` - Exam results (TYT/AYT) with detailed scoring\n- `examSubjectNets` - Per-subject net scores for each exam\n- `studyHours` - Daily study time tracking\n- `flashcards` - Spaced repetition flashcard system\n- `setupCompleted` - First-time setup status\n\n**Subject Limits:**\n- Predefined maximum question counts for TYT/AYT subjects\n- Enforced in validation schemas\n- Used for net score calculations\n\n### Key Features Implementation\n\n1. **Exam Analysis System**\n   - Full exam tracking (TYT/AYT general exams)\n   - Branch-specific exam tracking (per subject)\n   - Automatic net score calculation\n   - Wrong topic categorization and tracking\n   - Historical performance comparison\n\n2. **Task Management**\n   - Priority levels (low/medium/high)\n   - Subject-based categories\n   - Due dates and recurrence patterns\n   - Drag-and-drop reordering (dnd-kit)\n   - Archive and soft-delete functionality\n\n3. **Activity Tracking**\n   - Automatic activity logging via IPC (Electron)\n   - Daily activity heatmap visualization\n   - Weekly/monthly summaries\n   - Streak tracking\n\n4. **Email Reporting**\n   - Monthly automated reports (SendGrid integration planned)\n   - Manual report generation\n   - HTML email templates with detailed analytics\n   - Performance charts and statistics\n\n5. **Weather Integration**\n   - OpenWeather API integration\n   - Hourly and daily forecasts\n   - Study recommendations based on weather\n\n## External Dependencies\n\n### Third-Party Services\n\n1. **Neon Database (PostgreSQL)**\n   - Serverless PostgreSQL hosting\n   - Connection via `@neondatabase/serverless` driver\n   - DATABASE_URL environment variable configuration\n\n2. **OpenWeather API**\n   - Weather data for study planning\n   - OPENWEATHER_API_KEY environment variable\n   - Optional - application works without it\n\n3. **SendGrid (Planned)**\n   - Email delivery service for monthly reports\n   - EMAIL_USER, EMAIL_PASS, EMAIL_FROM configuration\n   - Currently uses nodemailer (can be configured with any SMTP)\n\n### Key NPM Dependencies\n\n**Frontend:**\n- `react` + `react-dom` - UI framework\n- `@tanstack/react-query` - Server state management\n- `wouter` - Lightweight routing\n- `@radix-ui/*` - Headless UI components (25+ components)\n- `@dnd-kit/*` - Drag and drop functionality\n- `tailwindcss` - Utility-first CSS framework\n- `recharts` - Chart visualization library\n- `zod` - Schema validation\n- `lucide-react` - Icon library\n\n**Backend:**\n- `express` - Web server framework\n- `drizzle-orm` - TypeScript ORM\n- `@neondatabase/serverless` - Neon database driver\n- `nodemailer` - Email sending\n- `dotenv` - Environment variable management\n\n**Desktop:**\n- `electron` - Desktop application framework\n- `electron-builder` - Application packaging\n- `electron-store` - Persistent storage\n\n**Development:**\n- `vite` - Build tool and dev server\n- `typescript` - Type checking\n- `@playwright/test` - E2E testing\n- `vitest` - Unit testing\n- `esbuild` - Fast bundling for server code\n\n### Database Schema Management\n\n- **Drizzle Kit** for schema migrations\n- Migration files in `migrations/` directory\n- Schema defined in TypeScript (`shared/sema.ts`)\n- Push-based deployment (`npm run db:push`)\n\n### Build and Deployment\n\n**Development Mode:**\n- Vite dev server with HMR\n- Express server with nodemon-like reload\n- In-memory or JSON file storage\n\n**Production Build:**\n- Client: Vite bundle to `dist/public`\n- Server: esbuild bundle to `server/dist`\n- Static file serving from Express\n\n**Electron Packaging:**\n- Windows x64 installer\n- Embedded Node.js server\n- Portable executable option\n- Auto-update capability (electron-builder)","size_bytes":6600},"client/src/index.css":{"content":"/* BERATCANKIR OZEL ANALIZ TAKIP SISTEMI */\n/* BERATCANKIR OZEL ANALIZ TAKIP SISTEMI */\n/* BERATCANKIR OZEL ANALIZ TAKIP SISTEMI */\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Sayfa kaymasını önle - sürükleme sırasında scroll oluşmasın */\nhtml, body {\n  overflow-x: hidden;\n  max-width: 100vw;\n}\n\nbody {\n  position: relative;\n}\n\n/* Heatmap bugünkü gün için yumuşak mor parıldama nefes efekti */\n@keyframes purpleGlow {\n  0%, 100% {\n    box-shadow: 0 0 8px rgba(147, 51, 234, 0.6), 0 0 16px rgba(147, 51, 234, 0.3);\n    opacity: 0.95;\n  }\n  50% {\n    box-shadow: 0 0 16px rgba(147, 51, 234, 0.9), 0 0 24px rgba(147, 51, 234, 0.5);\n    opacity: 1;\n  }\n}\n\n/* Hafif solunum animasyonu - CPU dostu */\n@keyframes breathingPulse {\n  0%, 100% {\n    opacity: 0.9;\n  }\n  50% {\n    opacity: 1;\n  }\n}\n\n/* Hafif solunum animasyonu - CPU dostu */\n@keyframes breathing {\n  0%, 100% {\n    opacity: 0.85;\n  }\n  50% {\n    opacity: 1;\n  }\n}\n\n/* Tamamlanmamış görevler için kenarlık yanıp sönmesi */\n@keyframes pulse-border {\n  0%, 100% {\n    border-color: rgba(139, 92, 246, 0.3);\n    box-shadow: 0 0 0 rgba(139, 92, 246, 0);\n  }\n  50% {\n    border-color: rgba(139, 92, 246, 0.8);\n    box-shadow: 0 0 12px rgba(139, 92, 246, 0.3);\n  }\n}\n\n/* Reduced motion desteği - erişilebilirlik */\n@media (prefers-reduced-motion: reduce) {\n  *,\n  *::before,\n  *::after {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n    scroll-behavior: auto !important;\n  }\n}\n\n/* Performans optimizasyonları için hafif animasyonlar */\n.animate-breathing-pulse {\n  animation: breathingPulse 3s ease-in-out infinite;\n}\n\n.animate-breathing {\n  animation: breathing 3s ease-in-out infinite;\n}\n\n/* Optimize edilmiş hover efektleri - Hafif */\n.hover-scale {\n  transition: transform 0.2s ease;\n}\n\n.hover-scale:hover {\n  transform: scale(1.02);\n}\n\n/* Optimize edilmiş buton geçişleri - 165Hz smooth */\n.btn-optimized {\n  transition: transform 0.15s cubic-bezier(0.4, 0, 0.2, 1), \n              box-shadow 0.15s cubic-bezier(0.4, 0, 0.2, 1);\n  backface-visibility: hidden;\n}\n\n.btn-optimized:hover {\n  transform: translateY(-1px) translateZ(0);\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n  will-change: transform, box-shadow;\n}\n\n.btn-optimized:active {\n  transform: translateY(0) translateZ(0);\n  transition: transform 0.05s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n:root {\n  --background: hsl(0 0% 98%);\n  --foreground: hsl(0 0% 20%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(0 0% 25%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(0 0% 25%);\n  --primary: hsl(271 70% 55%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(240 5% 96%);\n  --secondary-foreground: hsl(0 0% 30%);\n  --muted: hsl(240 5% 94%);\n  --muted-foreground: hsl(0 0% 50%);\n  --accent: hsl(271 60% 95%);\n  --accent-foreground: hsl(0 0% 30%);\n  --destructive: hsl(0 75% 58%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(240 6% 90%);\n  --input: hsl(240 5% 96%);\n  --ring: hsl(271 70% 55%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(0 0% 100%);\n  --sidebar-foreground: hsl(0 0% 15%);\n  --sidebar-primary: hsl(271 76% 53%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(271 76% 96%);\n  --sidebar-accent-foreground: hsl(0 0% 15%);\n  --sidebar-border: hsl(240 6% 90%);\n  --sidebar-ring: hsl(271 76% 53%);\n  --font-sans: \"Inter\", \"system-ui\", \"sans-serif\";\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  /* Karanlık Tema - Mor-Beyaz-Siyah */\n  --background: hsl(0 0% 9%);\n  --foreground: hsl(0 0% 100%);\n  --card: hsl(0 0% 12%);\n  --card-foreground: hsl(0 0% 100%);\n  --popover: hsl(0 0% 12%);\n  --popover-foreground: hsl(0 0% 100%);\n  --primary: hsl(271 76% 65%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(0 0% 18%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(0 0% 18%);\n  --muted-foreground: hsl(0 0% 65%);\n  --accent: hsl(271 50% 25%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(0 84.2% 60.2%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(0 0% 25%);\n  --input: hsl(0 0% 25%);\n  --ring: hsl(271 76% 65%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(0 0% 9%);\n  --sidebar-foreground: hsl(0 0% 100%);\n  --sidebar-primary: hsl(271 76% 65%);\n  --sidebar-primary-foreground: hsl(0 0% 0%);\n  --sidebar-accent: hsl(0 0% 18%);\n  --sidebar-accent-foreground: hsl(0 0% 100%);\n  --sidebar-border: hsl(0 0% 25%);\n  --sidebar-ring: hsl(271 76% 65%);\n  --font-sans: \"Inter\", \"system-ui\", \"sans-serif\";\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  html, body {\n    overflow-x: hidden;\n    max-width: 100vw;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: var(--font-sans);\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n  \n  /* Tüm container'ları sınırla */\n  #root {\n    overflow-x: hidden;\n    max-width: 100vw;\n  }\n}\n\n@layer utilities {\n  /* 165Hz monitör için ultra-smooth task animasyonları */\n  .task-item {\n    transition: transform 0.15s cubic-bezier(0.4, 0, 0.2, 1), \n                box-shadow 0.15s cubic-bezier(0.4, 0, 0.2, 1);\n    backface-visibility: hidden;\n  }\n  \n  .task-item:hover {\n    transform: translateY(-1px) translateZ(0);\n    box-shadow: 0 4px 12px 0 rgba(0, 0, 0, 0.1);\n    will-change: transform, box-shadow;\n  }\n  \n  .dark .task-item:hover {\n    box-shadow: 0 4px 12px 0 rgba(0, 0, 0, 0.3);\n  }\n\n  /* Hava Durumu Animasyon Efektleri */\n  .rain-animation {\n    background: linear-gradient(transparent 0%, rgba(59, 130, 246, 0.1) 100%);\n    position: relative;\n  }\n\n  .rain-animation::before {\n    content: '';\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    background-image: \n      linear-gradient(90deg, rgba(59, 130, 246, 0.3) 1px, transparent 1px),\n      linear-gradient(180deg, rgba(59, 130, 246, 0.3) 1px, transparent 1px);\n    background-size: 20px 20px;\n    animation: rain-fall 2s linear infinite;\n    opacity: 0.3;\n  }\n\n  .sun-rays-animation {\n    background: radial-gradient(circle, rgba(251, 191, 36, 0.1) 0%, transparent 70%);\n    position: relative;\n    overflow: hidden;\n  }\n\n  .sun-rays-animation::before {\n    content: '';\n    position: absolute;\n    top: -50%;\n    left: -50%;\n    width: 200%;\n    height: 200%;\n    background: conic-gradient(from 0deg, transparent, rgba(251, 191, 36, 0.1), transparent, rgba(251, 191, 36, 0.05), transparent);\n    animation: sun-rotation 20s linear infinite;\n    pointer-events: none;\n  }\n\n  @keyframes rain-fall {\n    0% {\n      background-position: 0 -20px;\n    }\n    100% {\n      background-position: 0 20px;\n    }\n  }\n\n  @keyframes sun-rotation {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n\n  /* Kışın kar yağarsa hava durumu için kar animasyonu */\n  .snow-animation {\n    background: linear-gradient(transparent 0%, rgba(219, 234, 254, 0.1) 100%);\n    position: relative;\n  }\n\n  .snow-animation::before {\n    content: '❄️ ❅ ❄️ ❅ ❄️';\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    font-size: 1rem;\n    color: rgba(219, 234, 254, 0.5);\n    animation: snow-fall 8s linear infinite;\n    white-space: nowrap;\n    overflow: hidden;\n  }\n\n  @keyframes snow-fall {\n    0% {\n      transform: translateY(-100px);\n    }\n    100% {\n      transform: translateY(100px);\n    }\n  }\n}\n\n/* Modern Purple Scrollbar - 165Hz Optimized */\n/* Webkit tabanlı tarayıcılar için (Chrome, Safari, Edge) */\n.custom-scrollbar::-webkit-scrollbar {\n  width: 8px;\n  height: 8px;\n}\n\n.custom-scrollbar::-webkit-scrollbar-track {\n  background: hsl(248 39% 39% / 0.1);\n  border-radius: 4px;\n  margin: 2px;\n}\n\n.custom-scrollbar::-webkit-scrollbar-thumb {\n  background: linear-gradient(135deg, hsl(271 76% 53%), hsl(271 76% 45%));\n  border-radius: 4px;\n  box-shadow: 0 2px 4px rgba(139, 92, 246, 0.3);\n  transition: background 0.15s cubic-bezier(0.4, 0, 0.2, 1), \n              box-shadow 0.15s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.custom-scrollbar::-webkit-scrollbar-thumb:hover {\n  background: linear-gradient(135deg, hsl(271 76% 45%), hsl(271 76% 40%));\n  box-shadow: 0 4px 8px rgba(139, 92, 246, 0.4);\n}\n\n.custom-scrollbar::-webkit-scrollbar-thumb:active {\n  background: linear-gradient(135deg, hsl(271 76% 40%), hsl(271 76% 35%));\n  box-shadow: 0 2px 4px rgba(139, 92, 246, 0.5);\n}\n\n.custom-scrollbar::-webkit-scrollbar-corner {\n  background: transparent;\n}\n\n/* Firefox için scrollbar styling */\n.custom-scrollbar {\n  scrollbar-width: thin;\n  scrollbar-color: hsl(271 76% 53%) hsl(248 39% 39% / 0.1);\n}\n\n/* Global scrollbar - 165Hz ready, buttery smooth */\n* {\n  scrollbar-width: thin;\n  scrollbar-color: hsl(271 76% 53%) hsl(248 39% 39% / 0.1);\n}\n\n*::-webkit-scrollbar {\n  width: 8px;\n  height: 8px;\n}\n\n*::-webkit-scrollbar-track {\n  background: hsl(248 39% 39% / 0.1);\n  border-radius: 4px;\n  margin: 2px;\n}\n\n*::-webkit-scrollbar-thumb {\n  background: linear-gradient(135deg, hsl(271 76% 53%), hsl(271 76% 45%));\n  border-radius: 4px;\n  box-shadow: 0 2px 4px rgba(139, 92, 246, 0.3);\n  transition: background 0.15s cubic-bezier(0.4, 0, 0.2, 1),\n              box-shadow 0.15s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n*::-webkit-scrollbar-thumb:hover {\n  background: linear-gradient(135deg, hsl(271 76% 45%), hsl(271 76% 40%));\n  box-shadow: 0 4px 8px rgba(139, 92, 246, 0.4);\n}\n\n*::-webkit-scrollbar-thumb:active {\n  background: linear-gradient(135deg, hsl(271 76% 40%), hsl(271 76% 35%));\n  box-shadow: 0 2px 4px rgba(139, 92, 246, 0.5);\n}\n\n*::-webkit-scrollbar-corner {\n  background: transparent;\n}\n\n/* BERATCANKIR OZEL ANALIZ TAKIP SISTEMI */\n/* BERATCANKIR OZEL ANALIZ TAKIP SISTEMI */\n/* BERATCANKIR OZEL ANALIZ TAKIP SISTEMI */","size_bytes":12043},"client/src/bilesenler/arayuz/button.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/kutuphane/yardimcilar\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":2017},"client/src/bilesenler/haftalik-ilerleme-grafigi.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport { useQuery } from \"@tanstack/react-query\";\nimport { TrendingUp, BarChart3, Calendar, Crown, Zap, Sparkles, Activity } from \"lucide-react\";\nimport { useState, useEffect } from \"react\";\n\ninterface DaySummary {\n  date: string;\n  tasksCompleted: number;\n  totalTasks: number;\n  moods: any[];\n  productivity: number;\n}\n\nexport function WeeklyProgressChart() {\n  const [isVisible, setIsVisible] = useState(false);\n  const [hoveredDay, setHoveredDay] = useState<string | null>(null);\n  \n  const { data: summaryData = [], isLoading } = useQuery<DaySummary[]>({\n    queryKey: [\"/api/summary/daily\", { range: 7 }],\n    queryFn: () => fetch(\"/api/summary/daily?range=7\").then(res => res.json()),\n  });\n\n  useEffect(() => {\n    const timer = setTimeout(() => setIsVisible(true), 200);\n    return () => clearTimeout(timer);\n  }, []);\n\n  const formatDayName = (dateStr: string) => {\n    const date = new Date(dateStr);\n    const dayNames = ['Paz', 'Pzt', 'Sal', 'Çar', 'Per', 'Cum', 'Cmt'];\n    return dayNames[date.getDay()];\n  };\n\n  const getBarHeight = (tasksCompleted: number, maxTasks: number) => {\n    if (maxTasks === 0) return 0;\n    // Tamamlanan görevler için minimum görünür yükseklik sağlayın\n    return Math.max((tasksCompleted / maxTasks) * 100, tasksCompleted > 0 ? 15 : 0);\n  };\n\n  const getBarColor = (productivity: number) => {\n    if (productivity >= 80) return '#10b981'; // Yeşil\n    if (productivity >= 60) return '#f59e0b'; // Sarı\n    if (productivity >= 40) return '#f97316'; // Turuncu\n    if (productivity > 0) return '#ef4444';   // Kırmızı\n    return '#6b7280'; // Gri\n  };\n\n  // En aktif günümğü bul\n  const getMostActiveDay = () => {\n    if (!summaryData.length) return null;\n    const mostActive = summaryData.reduce((max, day) => \n      day.tasksCompleted > max.tasksCompleted ? day : max\n    );\n    return mostActive.tasksCompleted > 0 ? mostActive : null;\n  };\n\n  const formatFullDate = (dateStr: string) => {\n    const date = new Date(dateStr);\n    const months = ['Ocak', 'Şubat', 'Mart', 'Nisan', 'Mayıs', 'Haziran', \n                   'Temmuz', 'Ağustos', 'Eylül', 'Ekim', 'Kasım', 'Aralık'];\n    return `${date.getDate()} ${months[date.getMonth()]}`;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"group bg-gradient-to-br from-white/80 to-white/60 dark:from-gray-900/80 dark:to-gray-800/60 backdrop-blur-xl rounded-2xl border border-white/20 dark:border-gray-700/30 p-8 relative overflow-hidden shadow-lg\">\n        {/* Animasyonlu Arka Plan Öğeleri */}\n        <div className=\"absolute -top-20 -right-20 w-40 h-40 bg-gradient-to-br from-blue-500/10 to-purple-600/10 rounded-full blur-3xl animate-pulse\"></div>\n        <div className=\"absolute -bottom-10 -left-10 w-32 h-32 bg-gradient-to-tr from-green-500/10 to-blue-600/10 rounded-full blur-2xl animate-pulse\"></div>\n        \n        <div className=\"relative z-10\">\n          <div className=\"flex items-center gap-3 mb-6\">\n            <div className=\"p-3 bg-gradient-to-br from-purple-500 to-blue-600 rounded-xl shadow-lg animate-pulse\">\n              <Activity className=\"h-6 w-6 text-white\" />\n            </div>\n            <div>\n              <div className=\"h-6 bg-gray-200 dark:bg-gray-700 rounded-lg w-32 animate-pulse\"></div>\n              <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded-lg w-20 mt-2 animate-pulse\"></div>\n            </div>\n          </div>\n          \n          <div className=\"space-y-4\">\n            {[1, 2, 3].map(i => (\n              <div key={i} className=\"animate-pulse\">\n                <div className=\"h-6 bg-gray-200 dark:bg-gray-700 rounded-lg w-full mb-3\"></div>\n                <div className=\"h-12 bg-gray-200 dark:bg-gray-700 rounded-xl\"></div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const reversedData = [...summaryData].reverse(); // En eski tarihten en yeni tarihe göster\n  const maxTasks = Math.max(...reversedData.map(day => day.tasksCompleted), 1);\n  const totalTasksCompleted = reversedData.reduce((sum, day) => sum + day.tasksCompleted, 0);\n  const averageProductivity = reversedData.length > 0 \n    ? Math.round(reversedData.reduce((sum, day) => sum + day.productivity, 0) / reversedData.length)\n    : 0;\n  const activeDays = reversedData.filter(day => day.tasksCompleted > 0).length;\n  const mostActiveDay = getMostActiveDay();\n\n  return (\n    <div className={`bg-card rounded-lg border border-border p-4 relative overflow-hidden shadow-sm transition-all duration-300 ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'}`} data-testid=\"weekly-activity-chart\">\n\n      <div className=\"relative z-10\">\n        {/* Başlık */}\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"p-2 bg-primary/10 rounded-lg\">\n              <Activity className=\"h-4 w-4 text-primary\" />\n            </div>\n            <div>\n              <h3 className=\"text-base font-bold text-foreground\">\n                Aktivitelerim\n              </h3>\n              <p className=\"text-xs text-muted-foreground\">Son 7 gün</p>\n            </div>\n          </div>\n          \n        </div>\n\n        {/* Özet İstatistikleri */}\n        <div className=\"grid grid-cols-3 gap-2 mb-4\">\n          <div className=\"bg-muted/50 rounded-lg p-2 text-center\">\n            <div className=\"text-lg font-bold text-primary\" data-testid=\"total-tasks-completed\">\n              {totalTasksCompleted}\n            </div>\n            <div className=\"text-xs text-muted-foreground\">Görev</div>\n          </div>\n          \n          <div className=\"bg-muted/50 rounded-lg p-2 text-center\">\n            <div className=\"text-lg font-bold text-primary\" data-testid=\"average-productivity\">\n              {averageProductivity}%\n            </div>\n            <div className=\"text-xs text-muted-foreground\">Verim</div>\n          </div>\n          \n          <div className=\"bg-muted/50 rounded-lg p-2 text-center\">\n            <div className=\"text-lg font-bold text-primary\">\n              {activeDays}/7\n            </div>\n            <div className=\"text-xs text-muted-foreground\">Aktif</div>\n          </div>\n        </div>\n\n        {/* Geliştirilmiş Grafik */}\n        <div className=\"space-y-4\" data-testid=\"progress-chart\">\n          {reversedData.length === 0 || (totalTasksCompleted === 0 && averageProductivity === 0) ? (\n            <div className=\"text-center py-12 text-muted-foreground\">\n              <div className=\"relative mb-6\">\n                <Calendar className=\"h-16 w-16 mx-auto opacity-30\" />\n                <div className=\"absolute inset-0 flex items-center justify-center\">\n                  <div className=\"w-8 h-8 border-2 border-dashed border-gray-300 rounded-full animate-spin\"></div>\n                </div>\n              </div>\n              <p className=\"font-medium text-lg mb-2\">Henüz aktivite verisi bulunmuyor</p>\n              <p className=\"text-sm\">Görev tamamlayarak ilerlemenizi takip etmeye başlayın</p>\n              <div className=\"mt-4 px-6 py-2 bg-gradient-to-r from-purple-100 to-blue-100 dark:from-purple-900/30 dark:to-blue-900/30 rounded-full text-xs font-medium text-purple-700 dark:text-purple-300 inline-block\">\n                İlk görevinizi eklemeye hazır mısınız?\n              </div>\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              {reversedData.map((day, index) => {\n                const barWidth = Math.max((day.tasksCompleted / Math.max(maxTasks, 1)) * 100, day.tasksCompleted > 0 ? 15 : 0);\n                const isHighlighted = mostActiveDay && day.date === mostActiveDay.date;\n                const isHovered = hoveredDay === day.date;\n                \n                return (\n                  <div \n                    key={day.date} \n                    className={`flex items-center gap-4 p-3 rounded-xl transition-all duration-300 ${isHighlighted ? 'bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-700' : isHovered ? 'bg-gray-50 dark:bg-gray-800/50' : ''}`}\n                    data-testid={`progress-bar-${index}`}\n                    onMouseEnter={() => setHoveredDay(day.date)}\n                    onMouseLeave={() => setHoveredDay(null)}\n                  >\n                    {/* Gün etiketi ile geliştirilmiş stil */}\n                    <div className=\"text-center min-w-[50px]\">\n                      <div className={`text-lg font-bold ${isHighlighted ? 'text-yellow-700 dark:text-yellow-300' : 'text-foreground'}`}>\n                        {formatDayName(day.date)}\n                      </div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        {new Date(day.date).getDate()}\n                      </div>\n                    </div>\n\n                    {/* Geliştirilmiş Yatay Çubuk */}\n                    <div className=\"flex-1 relative\">\n                      <div className={`h-8 rounded-xl overflow-hidden ${isHighlighted ? 'bg-yellow-100 dark:bg-yellow-900/30' : 'bg-gray-100 dark:bg-gray-800/50'} shadow-inner`}>\n                        <div\n                          className={`h-full rounded-xl transition-all duration-700 flex items-center justify-between px-3 ${isHighlighted ? 'shadow-lg' : ''}`}\n                          style={{\n                            width: `${barWidth}%`,\n                            background: `linear-gradient(135deg, ${getBarColor(day.productivity)}dd, ${getBarColor(day.productivity)})`,\n                            transform: isHovered ? 'scale(1.02)' : 'scale(1)',\n                          }}\n                        >\n                          {day.tasksCompleted > 0 && (\n                            <>\n                              <span className=\"text-sm font-bold text-white drop-shadow-sm\">\n                                {day.tasksCompleted} görev\n                              </span>\n                              {isHighlighted && <Crown className=\"h-4 w-4 text-yellow-200\" />}\n                            </>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                    \n                    {/* Gelişmiş Verimlilik Rozeti */}\n                    <div className={`min-w-[60px] text-center px-3 py-1 rounded-lg text-sm font-medium ${\n                      day.productivity >= 80 ? 'bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-300' :\n                      day.productivity >= 60 ? 'bg-yellow-100 text-yellow-700 dark:bg-yellow-900/30 dark:text-yellow-300' :\n                      day.productivity >= 40 ? 'bg-orange-100 text-orange-700 dark:bg-orange-900/30 dark:text-orange-300' :\n                      day.productivity > 0 ? 'bg-red-100 text-red-700 dark:bg-red-900/30 dark:text-red-300' :\n                      'bg-gray-100 text-gray-600 dark:bg-gray-800/50 dark:text-gray-400'\n                    }`}>\n                      {day.productivity}%\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          )}\n        </div>\n\n        {/* Geliştirilmiş Açıklama */}\n        <div className=\"mt-6 pt-6 border-t border-white/20 dark:border-gray-700/30\">\n          <div className=\"flex items-center justify-center gap-6 text-sm\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-3 h-3 rounded-full bg-green-500 shadow-sm\"></div>\n              <span className=\"text-green-700 dark:text-green-300 font-medium\">Mükemmel (80%+)</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-3 h-3 rounded-full bg-yellow-500 shadow-sm\"></div>\n              <span className=\"text-yellow-700 dark:text-yellow-300 font-medium\">İyi (60%+)</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-3 h-3 rounded-full bg-orange-500 shadow-sm\"></div>\n              <span className=\"text-orange-700 dark:text-orange-300 font-medium\">Orta (40%+)</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-3 h-3 rounded-full bg-red-500 shadow-sm\"></div>\n              <span className=\"text-red-700 dark:text-red-300 font-medium\">Geliştirilmeli</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":12538},"client/src/bilesenler/arayuz/slider.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/kutuphane/yardimcilar\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":1193},"server/testler/api.test.ts":{"content":"import { describe, it, expect, beforeAll, afterEach, vi } from 'vitest'\nimport request from 'supertest'\nimport express, { type Express } from 'express'\nimport { registerRoutes } from '../rotalar'\nimport type { IStorage } from '../depolama'\n\n// Mock storage\nconst mockStorage: IStorage = {\n  // Task methods\n  getTasks: vi.fn().mockResolvedValue([]),\n  createTask: vi.fn().mockImplementation((data) => Promise.resolve({ id: '1', ...data })),\n  updateTask: vi.fn().mockImplementation((id, data) => Promise.resolve({ id, ...data })),\n  toggleTaskComplete: vi.fn().mockResolvedValue({ id: '1', completed: true }),\n  archiveTask: vi.fn().mockResolvedValue({ id: '1', archived: true }),\n  deleteTask: vi.fn().mockResolvedValue({ id: '1', deleted: true }),\n  \n  // Exam result methods\n  getExamResults: vi.fn().mockResolvedValue([]),\n  createExamResult: vi.fn().mockImplementation((data) => Promise.resolve({ id: '1', ...data })),\n  updateExamResult: vi.fn().mockImplementation((id, data) => Promise.resolve({ id, ...data })),\n  deleteExamResult: vi.fn().mockResolvedValue({ id: '1', deleted: true }),\n  archiveExamResult: vi.fn().mockResolvedValue({ id: '1', archived: true }),\n  \n  // Question log methods\n  getQuestionLogs: vi.fn().mockResolvedValue([]),\n  createQuestionLog: vi.fn().mockImplementation((data) => Promise.resolve({ id: '1', ...data })),\n  updateQuestionLog: vi.fn().mockImplementation((id, data) => Promise.resolve({ id, ...data })),\n  deleteQuestionLog: vi.fn().mockResolvedValue({ id: '1', deleted: true }),\n  archiveQuestionLog: vi.fn().mockResolvedValue({ id: '1', archived: true }),\n  \n  // Other methods\n  getMoods: vi.fn().mockResolvedValue([]),\n  createMood: vi.fn().mockImplementation((data) => Promise.resolve({ id: '1', ...data })),\n  deleteMood: vi.fn().mockResolvedValue({ id: '1' }),\n  \n  getGoals: vi.fn().mockResolvedValue([]),\n  createGoal: vi.fn().mockImplementation((data) => Promise.resolve({ id: '1', ...data })),\n  updateGoal: vi.fn().mockImplementation((id, data) => Promise.resolve({ id, ...data })),\n  deleteGoal: vi.fn().mockResolvedValue({ id: '1' }),\n  \n  getStudyHours: vi.fn().mockResolvedValue([]),\n  createStudyHour: vi.fn().mockImplementation((data) => Promise.resolve({ id: '1', ...data })),\n  deleteStudyHour: vi.fn().mockResolvedValue({ id: '1' }),\n  \n  getExamSubjectNets: vi.fn().mockResolvedValue([]),\n  createExamSubjectNet: vi.fn().mockImplementation((data) => Promise.resolve({ id: '1', ...data })),\n  deleteExamSubjectNets: vi.fn().mockResolvedValue(undefined),\n  \n  getSetupStatus: vi.fn().mockResolvedValue({ isSetupComplete: false }),\n  updateSetupStatus: vi.fn().mockResolvedValue({ isSetupComplete: true })\n}\n\n// Mock the storage module\nvi.mock('../depolama', () => ({\n  storage: mockStorage\n}))\n\ndescribe('Backend API Tests', () => {\n  let app: Express\n\n  beforeAll(async () => {\n    app = express()\n    app.use(express.json())\n    await registerRoutes(app)\n  })\n\n  afterEach(() => {\n    vi.clearAllMocks()\n  })\n\n  describe('Exam Results API', () => {\n    describe('GET /api/exam-results', () => {\n      it('tüm deneme sonuçlarını getirmeli', async () => {\n        const mockExams = [\n          { id: '1', exam_name: 'TYT Deneme 1', tyt_net: '85', ayt_net: '0' }\n        ]\n        mockStorage.getExamResults = vi.fn().mockResolvedValue(mockExams)\n\n        const response = await request(app).get('/api/exam-results')\n        \n        expect(response.status).toBe(200)\n        expect(response.body).toEqual(mockExams)\n        expect(mockStorage.getExamResults).toHaveBeenCalled()\n      })\n\n      it('hata durumunda 500 dönmeli', async () => {\n        mockStorage.getExamResults = vi.fn().mockRejectedValue(new Error('DB Error'))\n\n        const response = await request(app).get('/api/exam-results')\n        \n        expect(response.status).toBe(500)\n      })\n    })\n\n    describe('POST /api/exam-results', () => {\n      it('geçerli TYT denemesi oluşturmalı', async () => {\n        const newExam = {\n          exam_name: 'TYT Deneme 1',\n          exam_date: '2025-10-30',\n          exam_type: 'TYT',\n          exam_scope: 'full',\n          tyt_net: '85.5',\n          ayt_net: '0'\n        }\n\n        const response = await request(app)\n          .post('/api/exam-results')\n          .send(newExam)\n        \n        expect(response.status).toBe(201)\n        expect(mockStorage.createExamResult).toHaveBeenCalled()\n      })\n\n      it('geçersiz veri için 400 dönmeli', async () => {\n        const invalidExam = {\n          tyt_net: '85'\n        }\n\n        const response = await request(app)\n          .post('/api/exam-results')\n          .send(invalidExam)\n        \n        expect(response.status).toBe(400)\n      })\n    })\n\n    describe('PUT /api/exam-results/:id', () => {\n      it('mevcut denemeyi güncellemeli', async () => {\n        const updateData = {\n          exam_name: 'TYT Deneme 1 Updated',\n          tyt_net: '90'\n        }\n\n        mockStorage.updateExamResult = vi.fn().mockResolvedValue({ id: '1', ...updateData })\n\n        const response = await request(app)\n          .put('/api/exam-results/1')\n          .send(updateData)\n        \n        expect(response.status).toBe(200)\n        expect(mockStorage.updateExamResult).toHaveBeenCalledWith('1', expect.any(Object))\n      })\n\n      it('bulunamayan deneme için 404 dönmeli', async () => {\n        mockStorage.updateExamResult = vi.fn().mockResolvedValue(null)\n\n        const response = await request(app)\n          .put('/api/exam-results/999')\n          .send({ exam_name: 'Test' })\n        \n        expect(response.status).toBe(404)\n      })\n    })\n\n    describe('DELETE /api/exam-results/:id', () => {\n      it('denemeyi silmeli', async () => {\n        const response = await request(app).delete('/api/exam-results/1')\n        \n        expect(response.status).toBe(200)\n        expect(mockStorage.deleteExamResult).toHaveBeenCalledWith('1')\n      })\n    })\n  })\n\n  describe('Question Logs API', () => {\n    describe('GET /api/question-logs', () => {\n      it('tüm soru loglarını getirmeli', async () => {\n        const mockLogs = [\n          { \n            id: '1', \n            exam_type: 'TYT', \n            subject: 'Matematik',\n            correct_count: '15',\n            wrong_count: '3',\n            blank_count: '2',\n            study_date: '2025-10-30'\n          }\n        ]\n        mockStorage.getQuestionLogs = vi.fn().mockResolvedValue(mockLogs)\n\n        const response = await request(app).get('/api/question-logs')\n        \n        expect(response.status).toBe(200)\n        expect(response.body).toEqual(mockLogs)\n      })\n    })\n\n    describe('POST /api/question-logs', () => {\n      it('geçerli soru logu oluşturmalı', async () => {\n        const newLog = {\n          exam_type: 'TYT',\n          subject: 'Matematik',\n          topic: 'Fonksiyonlar',\n          correct_count: '15',\n          wrong_count: '3',\n          blank_count: '2',\n          study_date: '2025-10-30'\n        }\n\n        const response = await request(app)\n          .post('/api/question-logs')\n          .send(newLog)\n        \n        expect(response.status).toBe(201)\n        expect(mockStorage.createQuestionLog).toHaveBeenCalled()\n      })\n\n      it('geçersiz exam_type için 400 dönmeli', async () => {\n        const invalidLog = {\n          exam_type: 'INVALID',\n          subject: 'Matematik',\n          correct_count: '15',\n          wrong_count: '3',\n          blank_count: '2',\n          study_date: '2025-10-30'\n        }\n\n        const response = await request(app)\n          .post('/api/question-logs')\n          .send(invalidLog)\n        \n        expect(response.status).toBe(400)\n      })\n    })\n  })\n\n  describe('Tasks API', () => {\n    describe('GET /api/tasks', () => {\n      it('tüm görevleri getirmeli', async () => {\n        const mockTasks = [\n          { id: '1', title: 'Matematik Çalış', completed: false }\n        ]\n        mockStorage.getTasks = vi.fn().mockResolvedValue(mockTasks)\n\n        const response = await request(app).get('/api/tasks')\n        \n        expect(response.status).toBe(200)\n        expect(response.body).toEqual(mockTasks)\n      })\n    })\n\n    describe('POST /api/tasks', () => {\n      it('yeni görev oluşturmalı', async () => {\n        const newTask = {\n          title: 'Matematik Çalış',\n          priority: 'high',\n          category: 'matematik'\n        }\n\n        const response = await request(app)\n          .post('/api/tasks')\n          .send(newTask)\n        \n        expect(response.status).toBe(201)\n        expect(mockStorage.createTask).toHaveBeenCalled()\n      })\n    })\n\n    describe('PATCH /api/tasks/:id/toggle', () => {\n      it('görev durumunu değiştirmeli', async () => {\n        const response = await request(app).patch('/api/tasks/1/toggle')\n        \n        expect(response.status).toBe(200)\n        expect(mockStorage.toggleTaskComplete).toHaveBeenCalledWith('1')\n      })\n    })\n  })\n\n  describe('Goals API', () => {\n    describe('GET /api/goals', () => {\n      it('tüm hedefleri getirmeli', async () => {\n        const mockGoals = [\n          { id: '1', title: 'TYT Net 100', targetValue: '100' }\n        ]\n        mockStorage.getGoals = vi.fn().mockResolvedValue(mockGoals)\n\n        const response = await request(app).get('/api/goals')\n        \n        expect(response.status).toBe(200)\n        expect(response.body).toEqual(mockGoals)\n      })\n    })\n\n    describe('POST /api/goals', () => {\n      it('yeni hedef oluşturmalı', async () => {\n        const newGoal = {\n          title: 'TYT Net 100',\n          targetValue: '100',\n          currentValue: '85',\n          unit: 'net',\n          category: 'tyt',\n          timeframe: 'aylık'\n        }\n\n        const response = await request(app)\n          .post('/api/goals')\n          .send(newGoal)\n        \n        expect(response.status).toBe(201)\n        expect(mockStorage.createGoal).toHaveBeenCalled()\n      })\n    })\n  })\n})\n","size_bytes":9916},"client/src/bilesenler/arayuz/tooltip.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\n\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/kutuphane/yardimcilar\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":1325},"client/src/sayfalar/bulunamadi.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport { Card, CardContent } from \"@/bilesenler/arayuz/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":819},"client/src/bilesenler/yan-menu.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport React, { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Task } from \"@shared/sema\";\nimport { Clock, Plus, X, Info } from \"lucide-react\";\nimport { Button } from \"@/bilesenler/arayuz/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/bilesenler/arayuz/dialog\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/bilesenler/arayuz/popover\";\n\nexport function Sidebar() {\n  const { data: tasks = [] } = useQuery<Task[]>({\n    queryKey: [\"/api/tasks\"],\n  });\n  \n  // Arşivlenmiş görevleri de getir - heatmap için\n  const { data: archivedTasks = [] } = useQuery<Task[]>({\n    queryKey: [\"/api/tasks/archived\"],\n  });\n  \n  // Get additional data needed for report\n  const { data: questionLogs = [] } = useQuery<any[]>({\n    queryKey: [\"/api/question-logs\"],\n  });\n  \n  const { data: examResults = [] } = useQuery<any[]>({\n    queryKey: [\"/api/exam-results\"],\n  });\n  \n  const { data: studyHours = [] } = useQuery<any[]>({\n    queryKey: [\"/api/study-hours\"],\n  });\n\n  // Real-time clock state\n  const [currentTime, setCurrentTime] = React.useState(new Date());\n  \n  // Calendar day detail dialog state\n  const [selectedDate, setSelectedDate] = useState<Date | null>(null);\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n\n  // Update time every second\n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const totalTasks = tasks.length;\n  const completedTasks = tasks.filter(task => task.completed).length;\n  const pendingTasks = totalTasks - completedTasks;\n  const completionPercentage = totalTasks > 0 ? Math.round((completedTasks / totalTasks) * 100) : 0;\n\n  const turkçeTasks = tasks.filter(task => task.category === \"turkce\").length;\n  const matematikTasks = tasks.filter(task => task.category === \"matematik\").length;\n  const genelTasks = tasks.filter(task => task.category === \"genel\").length;\n\n  // Heatmap için aktif ve arşivlenmiş tüm görevleri birleştir\n  const allTasksForHeatmap = React.useMemo(() => [...tasks, ...archivedTasks], [tasks, archivedTasks]);\n\n  // Yerel saat dilimine göre tarih formatla (UTC sorununu çöz)\n  const formatLocalDate = (dateStr: string | Date) => {\n    const date = new Date(dateStr);\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    return `${year}-${month}-${day}`;\n  };\n\n  // Zaman dilimi sorunlarını önlemek ve performansı artırmak için yerel tarihleri kullanarak özet ön hesaplama etkinlik haritasını geliştir, İstatistikler - 2x2 Izgara Düzeni\n  const activityMap = React.useMemo(() => {\n    const map = new Map<string, { hasCreated: boolean; hasCompleted: boolean; hasActivity: boolean }>();\n    \n    allTasksForHeatmap.forEach(task => {\n      // Yerel tarih biçimini kullanarak görev oluşturma tarihini işleyin\n      if (task.createdAt) {\n        const createdDate = formatLocalDate(task.createdAt);\n        const existing = map.get(createdDate) || { hasCreated: false, hasCompleted: false, hasActivity: false };\n        map.set(createdDate, { ...existing, hasCreated: true, hasActivity: true });\n      }\n      \n      // Yerel tarih biçimini kullanarak görev tamamlama tarihini işleyin\n      if (task.completed && task.completedAt) {\n        const completedDate = formatLocalDate(task.completedAt);\n        const existing = map.get(completedDate) || { hasCreated: false, hasCompleted: false, hasActivity: false };\n        map.set(completedDate, { ...existing, hasCompleted: true, hasActivity: true });\n      }\n    });\n    \n    // Soru loglarını ekle\n    questionLogs.forEach((log: any) => {\n      if (log.study_date) {\n        const dateStr = formatLocalDate(log.study_date);\n        const existing = map.get(dateStr) || { hasCreated: false, hasCompleted: false, hasActivity: false };\n        map.set(dateStr, { ...existing, hasActivity: true });\n      }\n    });\n    \n    // Sınav sonuçlarını ekle\n    examResults.forEach((exam: any) => {\n      if (exam.exam_date) {\n        const dateStr = formatLocalDate(exam.exam_date);\n        const existing = map.get(dateStr) || { hasCreated: false, hasCompleted: false, hasActivity: false };\n        map.set(dateStr, { ...existing, hasActivity: true });\n      }\n    });\n    \n    // Çalışma saatlerini ekle\n    studyHours.forEach((sh: any) => {\n      if (sh.study_date) {\n        const dateStr = formatLocalDate(sh.study_date);\n        const existing = map.get(dateStr) || { hasCreated: false, hasCompleted: false, hasActivity: false };\n        map.set(dateStr, { ...existing, hasActivity: true });\n      }\n    });\n    \n    return map;\n  }, [allTasksForHeatmap, questionLogs, examResults, studyHours]);\n\n  // Bir tarih için etkinlik türünü alma işlevi (O(1) arama)\n  const getActivityType = (date: Date): 'created' | 'completed' | 'both' | 'activity' | 'none' => {\n    const dateStr = formatLocalDate(date);\n    const activity = activityMap.get(dateStr);\n    \n    if (!activity || !activity.hasActivity) return 'none';\n    if (activity.hasCreated && activity.hasCompleted) return 'both';\n    if (activity.hasCompleted) return 'completed';\n    if (activity.hasCreated) return 'created';\n    return 'activity';\n  };\n  \n  // Belirli bir tarihteki görevleri getir - Arşivlenmemiş görevleri göster\n  const getTasksForDate = (date: Date) => {\n    const dateStr = formatLocalDate(date);\n    return allTasksForHeatmap.filter(task => {\n      // Arşivlenmiş görevleri hariç tut\n      if (task.archived) return false;\n      \n      const createdDateStr = task.createdAt ? formatLocalDate(task.createdAt) : null;\n      const completedDateStr = task.completed && task.completedAt ? formatLocalDate(task.completedAt) : null;\n      return createdDateStr === dateStr || completedDateStr === dateStr;\n    });\n  };\n  \n  // Belirli bir tarihteki soru çözme bilgilerini getir\n  const getQuestionLogsForDate = (date: Date) => {\n    const dateStr = formatLocalDate(date);\n    return questionLogs.filter((log: any) => {\n      const logDateStr = log.study_date ? formatLocalDate(log.study_date) : null;\n      return logDateStr === dateStr;\n    });\n  };\n  \n  // Belirli bir tarihteki sınav sonuçlarını getir\n  const getExamResultsForDate = (date: Date) => {\n    const dateStr = formatLocalDate(date);\n    return examResults.filter((exam: any) => {\n      const examDateStr = exam.exam_date ? formatLocalDate(exam.exam_date) : null;\n      return examDateStr === dateStr;\n    });\n  };\n  \n  // Belirli bir tarihteki çalışma saatlerini getir\n  const getStudyHoursForDate = (date: Date) => {\n    const dateStr = formatLocalDate(date);\n    return studyHours.filter((sh: any) => {\n      const studyDateStr = sh.study_date ? formatLocalDate(sh.study_date) : null;\n      return studyDateStr === dateStr;\n    });\n  };\n  \n  // Kategori ismini güzelleştir\n  const getCategoryName = (category: string) => {\n    const categoryMap: Record<string, string> = {\n      'turkce': 'Türkçe',\n      'matematik': 'Matematik',\n      'fizik': 'Fizik',\n      'kimya': 'Kimya',\n      'biyoloji': 'Biyoloji',\n      'sosyal': 'Sosyal',\n      'tyt-geometri': 'TYT Geometri',\n      'ayt-matematik': 'AYT Matematik',\n      'ayt-fizik': 'AYT Fizik',\n      'ayt-kimya': 'AYT Kimya',\n      'ayt-biyoloji': 'AYT Biyoloji',\n      'ayt-geometri': 'AYT Geometri',\n      'genel': 'Genel'\n    };\n    return categoryMap[category] || category;\n  };\n  \n  // Takvim gününe tıklandığında\n  const handleDayClick = (date: Date, activityType: string) => {\n    if (activityType !== 'none') {\n      setSelectedDate(date);\n      setIsDialogOpen(true);\n    }\n  };\n\n  const currentDate = new Date();\n  const currentDay = currentDate.getDate();\n  const currentMonth = currentDate.toLocaleDateString(\"tr-TR\", { month: \"long\", year: \"numeric\" });\n  const currentWeekday = currentDate.toLocaleDateString(\"tr-TR\", { weekday: \"long\" });\n\n  // Geçerli ay için takvim günleri oluştur\n  const year = currentDate.getFullYear();\n  const month = currentDate.getMonth();\n  const firstDay = new Date(year, month, 1);\n  const lastDay = new Date(year, month + 1, 0);\n  const startDate = new Date(firstDay);\n  startDate.setDate(startDate.getDate() - firstDay.getDay());\n\n  const calendarDays = [];\n  for (let i = 0; i < 35; i++) {\n    const date = new Date(startDate);\n    date.setDate(startDate.getDate() + i);\n    calendarDays.push(date);\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Hızlı İstatistikler */}\n      <div className=\"bg-card rounded-lg border border-border p-6 transition-colors duration-300\">\n        <h3 className=\"text-lg font-semibold text-foreground mb-4\">Dashboard</h3>\n        <div className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-muted-foreground text-sm\">Toplam Görev</span>\n            <span className=\"font-semibold text-foreground\" data-testid=\"text-total-tasks\">{totalTasks}</span>\n          </div>\n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-muted-foreground text-sm\">Tamamlanan</span>\n            <span className=\"font-semibold text-green-600\" data-testid=\"text-completed-tasks\">{completedTasks}</span>\n          </div>\n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-muted-foreground text-sm\">Bekleyen</span>\n            <span className=\"font-semibold text-orange-600\" data-testid=\"text-pending-tasks\">{pendingTasks}</span>\n          </div>\n          <div className=\"w-full bg-secondary rounded-full h-2\">\n            <div \n              className=\"bg-primary h-2 rounded-full transition-all duration-300\" \n              style={{ width: `${completionPercentage}%` }}\n            ></div>\n          </div>\n          <p className=\"text-xs text-muted-foreground\">%{completionPercentage} tamamlandı</p>\n        </div>\n      </div>\n\n      {/* Takvim Widget'ı */}\n      <div className=\"bg-card rounded-lg border border-border p-6 transition-colors duration-300\">\n        <h3 className=\"text-lg font-semibold text-foreground mb-4\">Takvim</h3>\n        <div className=\"text-center mb-4\">\n          <div className=\"text-2xl font-bold text-foreground\" data-testid=\"text-current-day\">{currentDay}</div>\n          <div className=\"text-sm text-muted-foreground\" data-testid=\"text-current-date\">{currentMonth}</div>\n          <div className=\"text-xs text-muted-foreground\" data-testid=\"text-current-weekday\">{currentWeekday}</div>\n        </div>\n        \n        {/* Saat Göstergesi - Saat Simgesi ile Ortalanmış */}\n        <div className=\"flex items-center justify-center gap-2 mb-4 p-3 border border-border rounded-lg bg-secondary/30\" data-testid=\"clock-display\">\n          <Clock className=\"w-5 h-5 text-primary\" />\n          <div className=\"text-lg font-mono font-semibold text-foreground\" data-testid=\"text-current-time\">\n            {currentTime.toLocaleTimeString('tr-TR', { \n              hour: '2-digit', \n              minute: '2-digit', \n              second: '2-digit',\n              hour12: false \n            })}\n          </div>\n        </div>\n\n        {/* Mini Takvim Izgarası */}\n        <div className=\"grid grid-cols-7 gap-1 text-xs\">\n          <div className=\"text-center text-muted-foreground p-1\">P</div>\n          <div className=\"text-center text-muted-foreground p-1\">S</div>\n          <div className=\"text-center text-muted-foreground p-1\">Ç</div>\n          <div className=\"text-center text-muted-foreground p-1\">P</div>\n          <div className=\"text-center text-muted-foreground p-1\">C</div>\n          <div className=\"text-center text-muted-foreground p-1\">C</div>\n          <div className=\"text-center text-muted-foreground p-1\">P</div>\n          {calendarDays.map((date, index) => {\n            const isCurrentMonth = date.getMonth() === month;\n            const isToday = date.getDate() === currentDay && isCurrentMonth && date.getMonth() === currentDate.getMonth() && date.getFullYear() === currentDate.getFullYear();\n            const activityType = getActivityType(date);\n            \n            return (\n              <div\n                key={`${date.getFullYear()}-${date.getMonth()}-${date.getDate()}`}\n                onClick={() => handleDayClick(date, activityType)}\n                className={`text-center p-1 relative bg-transparent ${\n                  isToday\n                    ? \"bg-primary text-primary-foreground rounded\"\n                    : isCurrentMonth\n                    ? `hover:bg-secondary rounded ${activityType !== 'none' ? 'cursor-pointer' : ''}`\n                    : \"text-muted-foreground/30 opacity-50\"\n                }`}\n              >\n                {date.getDate()}\n                {activityType !== 'none' && !isToday && (\n                  <div className=\"absolute top-0 right-0 flex flex-col gap-0.5\">\n                    {activityType === 'created' && (\n                      <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                    )}\n                    {activityType === 'completed' && (\n                      <div className=\"w-2 h-2 bg-purple-500 rounded-full\"></div>\n                    )}\n                    {activityType === 'both' && (\n                      <>\n                        <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                        <div className=\"w-2 h-2 bg-purple-500 rounded-full\"></div>\n                      </>\n                    )}\n                    {activityType === 'activity' && (\n                      <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                    )}\n                  </div>\n                )}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Kategoriler */}\n      <div className=\"bg-card rounded-lg border border-border p-6 transition-colors duration-300\">\n        <h3 className=\"text-lg font-semibold text-foreground mb-4\">Kategoriler</h3>\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center justify-between p-2 hover:bg-secondary rounded-lg cursor-pointer transition-colors\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-3 h-3 bg-blue-500 rounded-full\"></div>\n              <span className=\"text-sm text-foreground\">Türkçe</span>\n            </div>\n            <span className=\"text-xs text-muted-foreground\" data-testid=\"text-turkce-tasks\">{turkçeTasks}</span>\n          </div>\n          <div className=\"flex items-center justify-between p-2 hover:bg-secondary rounded-lg cursor-pointer transition-colors\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n              <span className=\"text-sm text-foreground\">Matematik</span>\n            </div>\n            <span className=\"text-xs text-muted-foreground\" data-testid=\"text-matematik-tasks\">{matematikTasks}</span>\n          </div>\n          <div className=\"flex items-center justify-between p-2 hover:bg-secondary rounded-lg cursor-pointer transition-colors\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-3 h-3 bg-purple-500 rounded-full\"></div>\n              <span className=\"text-sm text-foreground\">Genel</span>\n            </div>\n            <span className=\"text-xs text-muted-foreground\" data-testid=\"text-genel-tasks\">{genelTasks}</span>\n          </div>\n        </div>\n      </div>\n      \n      {/* Aktivite Detayları Dialog */}\n      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n        <DialogContent className=\"max-w-lg\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center justify-between\">\n              <span>\n                {selectedDate?.toLocaleDateString('tr-TR', { \n                  day: 'numeric', \n                  month: 'long', \n                  year: 'numeric' \n                })}\n              </span>\n              <button\n                onClick={() => setIsDialogOpen(false)}\n                className=\"text-muted-foreground hover:text-foreground transition-colors\"\n              >\n                <X className=\"w-5 h-5\" />\n              </button>\n            </DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"mt-4 space-y-4\">\n            {/* Çözülen Sorular Özeti */}\n            {selectedDate && getQuestionLogsForDate(selectedDate).length > 0 && (\n              <div className=\"p-4 bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-950/30 dark:to-indigo-950/30 rounded-lg border border-blue-200 dark:border-blue-800\">\n                <h4 className=\"font-semibold text-blue-900 dark:text-blue-100 mb-3 flex items-center gap-2\">\n                  <Info className=\"h-4 w-4\" />\n                  Çözülen Sorular\n                </h4>\n                <div className=\"space-y-2\">\n                  {getQuestionLogsForDate(selectedDate).map((log: any, index: number) => {\n                    const totalNet = (parseInt(log.correct_count) || 0) - (parseInt(log.wrong_count) || 0) / 4;\n                    return (\n                      <div key={index} className=\"flex items-center justify-between text-sm\">\n                        <span className=\"text-blue-700 dark:text-blue-300\">\n                          {log.exam_type} {log.subject}\n                        </span>\n                        <div className=\"flex items-center gap-2\">\n                          <span className=\"text-green-600 dark:text-green-400 font-medium\">\n                            ✓ {log.correct_count}\n                          </span>\n                          <span className=\"text-red-600 dark:text-red-400 font-medium\">\n                            ✗ {log.wrong_count}\n                          </span>\n                          <span className=\"text-blue-600 dark:text-blue-400 font-bold\">\n                            Net: {totalNet.toFixed(2)}\n                          </span>\n                        </div>\n                      </div>\n                    );\n                  })}\n                  <div className=\"pt-2 border-t border-blue-300 dark:border-blue-700\">\n                    <div className=\"flex justify-between font-bold text-blue-900 dark:text-blue-100\">\n                      <span>Toplam Net:</span>\n                      <span>\n                        {getQuestionLogsForDate(selectedDate).reduce((sum: number, log: any) => {\n                          return sum + ((parseInt(log.correct_count) || 0) - (parseInt(log.wrong_count) || 0) / 4);\n                        }, 0).toFixed(2)}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n            \n            {/* Sınav Sonuçları Özeti */}\n            {selectedDate && getExamResultsForDate(selectedDate).length > 0 && (\n              <div className=\"p-4 bg-gradient-to-r from-purple-50 to-pink-50 dark:from-purple-950/30 dark:to-pink-950/30 rounded-lg border border-purple-200 dark:border-purple-800\">\n                <h4 className=\"font-semibold text-purple-900 dark:text-purple-100 mb-3 flex items-center gap-2\">\n                  <Info className=\"h-4 w-4\" />\n                  Sınav Sonuçları\n                </h4>\n                <div className=\"space-y-2\">\n                  {getExamResultsForDate(selectedDate).map((exam: any, index: number) => (\n                    <div key={index} className=\"text-sm\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-purple-700 dark:text-purple-300 font-medium\">\n                          {exam.exam_type} {exam.exam_scope === 'branch' ? 'Branş' : 'Genel'} Denemesi\n                        </span>\n                        <span className=\"text-purple-600 dark:text-purple-400 font-bold\">\n                          {exam.totalNet || 0} Net\n                        </span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n            \n            {/* Çalışma Saatleri Özeti */}\n            {selectedDate && getStudyHoursForDate(selectedDate).length > 0 && (\n              <div className=\"p-4 bg-gradient-to-r from-green-50 to-emerald-50 dark:from-green-950/30 dark:to-emerald-950/30 rounded-lg border border-green-200 dark:border-green-800\">\n                <h4 className=\"font-semibold text-green-900 dark:text-green-100 mb-3 flex items-center gap-2\">\n                  <Clock className=\"h-4 w-4\" />\n                  Çalışma Saatleri\n                </h4>\n                <div className=\"space-y-2\">\n                  {getStudyHoursForDate(selectedDate).map((sh: any, index: number) => (\n                    <div key={index} className=\"text-sm\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-green-700 dark:text-green-300\">\n                          {sh.subject || 'Genel'}\n                        </span>\n                        <span className=\"text-green-600 dark:text-green-400 font-bold\">\n                          {sh.hours || 0} saat\n                        </span>\n                      </div>\n                    </div>\n                  ))}\n                  <div className=\"pt-2 border-t border-green-300 dark:border-green-700\">\n                    <div className=\"flex justify-between font-bold text-green-900 dark:text-green-100\">\n                      <span>Toplam:</span>\n                      <span>\n                        {getStudyHoursForDate(selectedDate).reduce((sum: number, sh: any) => {\n                          return sum + (parseFloat(sh.hours) || 0);\n                        }, 0).toFixed(1)} saat\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n            \n            {selectedDate && (\n              getTasksForDate(selectedDate).length > 0 ||\n              getQuestionLogsForDate(selectedDate).length > 0 ||\n              getExamResultsForDate(selectedDate).length > 0 ||\n              getStudyHoursForDate(selectedDate).length > 0\n            ) ? (\n              getTasksForDate(selectedDate).length > 0 && (\n                <div className=\"space-y-3\">\n                  {getTasksForDate(selectedDate).map((task) => (\n                    <div\n                      key={task.id}\n                      className=\"p-4 bg-secondary/30 rounded-lg border border-border hover:bg-secondary/50 transition-colors\"\n                      style={{ borderLeftColor: task.color, borderLeftWidth: '4px' }}\n                    >\n                      <div className=\"flex items-start justify-between gap-3\">\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-semibold text-foreground mb-1\">{task.title}</h4>\n                          {task.description && (\n                            <p className=\"text-sm text-muted-foreground mb-2\">{task.description}</p>\n                          )}\n                          <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n                            <span className=\"px-2 py-1 bg-primary/10 text-primary rounded-md font-medium\">\n                              {getCategoryName(task.category)}\n                            </span>\n                            {task.completed && task.completedAt && (\n                              <span className=\"text-green-600 font-medium\">✓ Tamamlandı</span>\n                            )}\n                          </div>\n                        </div>\n                        \n                        {/* + Butonu - Görev Detayları */}\n                        <Popover>\n                          <PopoverTrigger asChild>\n                            <button \n                              className=\"flex-shrink-0 p-1.5 rounded-full hover:bg-primary/10 text-primary transition-colors\"\n                              data-testid={`button-calendar-task-details-${task.id}`}\n                            >\n                              <Plus className=\"h-5 w-5\" />\n                            </button>\n                          </PopoverTrigger>\n                          <PopoverContent className=\"w-80\" align=\"end\">\n                            <div className=\"space-y-3\">\n                              <div>\n                                <h4 className=\"font-semibold text-foreground mb-1\">{task.title}</h4>\n                                {task.description && (\n                                  <p className=\"text-sm text-muted-foreground\">{task.description}</p>\n                                )}\n                              </div>\n                              \n                              <div className=\"space-y-2 text-sm\">\n                                <div className=\"flex items-center justify-between\">\n                                  <span className=\"text-muted-foreground\">Ders:</span>\n                                  <span className=\"font-medium text-foreground\">{getCategoryName(task.category)}</span>\n                                </div>\n                                \n                                <div className=\"flex items-center justify-between\">\n                                  <span className=\"text-muted-foreground\">Öncelik:</span>\n                                  <span className={`font-medium ${\n                                    task.priority === 'high' \n                                      ? 'text-red-600 dark:text-red-400'\n                                      : task.priority === 'medium'\n                                      ? 'text-yellow-600 dark:text-yellow-400'\n                                      : 'text-gray-600 dark:text-gray-400'\n                                  }`}>\n                                    {task.priority === 'high' ? 'Yüksek' : task.priority === 'medium' ? 'Orta' : 'Düşük'}\n                                  </span>\n                                </div>\n                                \n                                {task.dueDate && (\n                                  <div className=\"flex items-center justify-between\">\n                                    <span className=\"text-muted-foreground\">Bitiş Tarihi:</span>\n                                    <span className=\"font-medium text-foreground\">\n                                      {new Date(task.dueDate).toLocaleDateString('tr-TR', {\n                                        day: 'numeric',\n                                        month: 'long',\n                                        year: 'numeric'\n                                      })}\n                                    </span>\n                                  </div>\n                                )}\n                                \n                                <div className=\"flex items-center justify-between\">\n                                  <span className=\"text-muted-foreground\">Oluşturulma:</span>\n                                  <span className=\"font-medium text-foreground\">\n                                    {new Date(task.createdAt).toLocaleDateString('tr-TR', {\n                                      day: 'numeric',\n                                      month: 'long',\n                                      year: 'numeric'\n                                    })}\n                                  </span>\n                                </div>\n                                \n                                {task.completed && task.completedAt && (\n                                  <div className=\"flex items-center justify-between\">\n                                    <span className=\"text-muted-foreground\">Tamamlanma:</span>\n                                    <span className=\"font-medium text-green-600 dark:text-green-400\">\n                                      {new Date(task.completedAt).toLocaleDateString('tr-TR', {\n                                        day: 'numeric',\n                                        month: 'long',\n                                        year: 'numeric'\n                                      })}\n                                    </span>\n                                  </div>\n                                )}\n                              </div>\n                            </div>\n                          </PopoverContent>\n                        </Popover>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )\n            ) : (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <p>Bugün hiçbir aktivite tamamlanmamış</p>\n              </div>\n            )}\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":29036},"client/src/main.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nconst consoleBerat = `\n%c╔══════════════════════════════════════════════════════════════╗\n║                                                              ║\n║   ██████╗ ███████╗██████╗  █████╗ ████████╗                 ║\n║   ██╔══██╗██╔════╝██╔══██╗██╔══██╗╚══██╔══╝                 ║\n║   ██████╔╝█████╗  ██████╔╝███████║   ██║                    ║\n║   ██╔══██╗██╔══╝  ██╔══██╗██╔══██║   ██║                    ║\n║   ██████╔╝███████╗██║  ██║██║  ██║   ██║                    ║\n║   ╚═════╝ ╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝                    ║\n║                                                              ║\n║    ██████╗ █████╗ ███╗   ██╗██╗  ██╗██╗██████╗              ║\n║   ██╔════╝██╔══██╗████╗  ██║██║ ██╔╝██║██╔══██╗             ║\n║   ██║     ███████║██╔██╗ ██║█████╔╝ ██║██████╔╝             ║\n║   ██║     ██╔══██║██║╚██╗██║██╔═██╗ ██║██╔══██╗             ║\n║   ╚██████╗██║  ██║██║ ╚████║██║  ██╗██║██║  ██║             ║\n║    ╚═════╝╚═╝  ╚═╝╚═╝  ╚═══╝╚═╝  ╚═╝╚═╝╚═╝  ╚═╝             ║\n║                                                              ║\n╚══════════════════════════════════════════════════════════════╝\n`;\n\nconst warningMessage = `%c\n   ⚠️  UMARIM KÖTÜ ŞEYLER YAPMAYA GELMEDİN :D?  ⚠️\n`;\n\nconsole.log(consoleBerat, 'color: #9333ea; font-weight: bold; font-size: 12px;');\nconsole.log(warningMessage, 'color: #f59e0b; font-weight: bold; font-size: 16px; text-align: center; padding: 10px;');\nconsole.log('%c🔒 Bu konsol geliştiriciler içindir. Bilinmeyen kodları buraya yapıştırmayın!', 'color: #ef4444; font-weight: bold; font-size: 14px;');\nconsole.log('%c📚 YKS\\'de başarılar dilerim! - Berat Cankır', 'color: #10b981; font-weight: bold; font-size: 13px;');\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR","size_bytes":3145},"client/src/bilesenler/soru-analiz-grafikleri.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport { useState, useMemo } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Line, ComposedChart } from \"recharts\";\nimport { BookOpen, Calendar, RefreshCw } from \"lucide-react\";\nimport { Button } from \"@/bilesenler/arayuz/button\";\nimport { Input } from \"@/bilesenler/arayuz/input\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/bilesenler/arayuz/popover\";\nimport { QuestionLog } from \"@shared/sema\";\n\ntype ExamResult = {\n  id: string;\n  exam_date: string;\n  exam_scope?: string;\n};\n\ntype ExamSubjectNet = {\n  id: string;\n  exam_id: string;\n  exam_type: string;\n  subject: string;\n  net_score: string;\n  correct_count: string;\n  wrong_count: string;\n  blank_count: string;\n};\n\nexport function QuestionAnalysisCharts() {\n  const [viewMode, setViewMode] = useState<'daily' | 'weekly'>('daily');\n  const [useCustomDates, setUseCustomDates] = useState(false);\n  const [startDate, setStartDate] = useState(() => {\n    const date = new Date();\n    date.setDate(date.getDate() - 13);\n    return date.toISOString().split('T')[0];\n  });\n  const [endDate, setEndDate] = useState(() => new Date().toISOString().split('T')[0]);\n  \n  const { data: questionLogs = [] } = useQuery<QuestionLog[]>({\n    queryKey: [\"/api/question-logs\"],\n  });\n  \n  // Arşivlenen soru kayıtlarını da çek\n  const { data: archivedQuestionLogs = [] } = useQuery<QuestionLog[]>({\n    queryKey: [\"/api/question-logs/archived\"],\n  });\n  \n  const { data: examResults = [] } = useQuery<ExamResult[]>({\n    queryKey: [\"/api/exam-results\"],\n  });\n  \n  // Arşivlenen denemeleri de çek\n  const { data: archivedExamResults = [] } = useQuery<ExamResult[]>({\n    queryKey: [\"/api/exam-results/archived\"],\n  });\n  \n  const { data: examSubjectNets = [] } = useQuery<ExamSubjectNet[]>({\n    queryKey: [\"/api/exam-subject-nets\"],\n  });\n  \n  // Tüm denemeleri birleştir (aktif + arşivlenmiş)\n  const allExamResults = useMemo(() => [...examResults, ...archivedExamResults], [examResults, archivedExamResults]);\n  \n  // Branş ve Genel deneme verilerini questionLog formatına çevir\n  const branchExamLogs = useMemo(() => {\n    const logs: QuestionLog[] = [];\n    \n    allExamResults.forEach(exam => {\n      // Branş ve Genel denemeleri al (full scope da genel deneme olarak kabul edilir)\n      if (exam.exam_scope === 'branch' || exam.exam_scope === 'general' || exam.exam_scope === 'full') {\n        // Bu exam'e ait subject netlerini bul\n        const examNets = examSubjectNets.filter(net => net.exam_id === exam.id);\n        \n        examNets.forEach(net => {\n          logs.push({\n            study_date: exam.exam_date,\n            subject: net.subject,\n            topic: null,\n            correct_count: net.correct_count,\n            wrong_count: net.wrong_count,\n            blank_count: net.blank_count || '0'\n          } as QuestionLog);\n        });\n      }\n    });\n    \n    return logs;\n  }, [allExamResults, examSubjectNets]);\n  \n  // questionLogs, arşivlenen questionLogs ve branchExamLogs'u birleştir\n  const allQuestionLogs = useMemo(() => {\n    return [...questionLogs, ...archivedQuestionLogs, ...branchExamLogs];\n  }, [questionLogs, archivedQuestionLogs, branchExamLogs]);\n\n  // Günlük/haftalık soru tablosu verilerini hazırlayın\n  const prepareDailyWeeklyData = () => {\n    if (allQuestionLogs.length === 0) return [];\n\n    if (viewMode === 'daily') {\n      let dateRange: string[];\n      \n      if (useCustomDates) {\n        // Başlangıç ve bitiş tarihleri arasında tarih aralığı oluşturun\n        const start = new Date(startDate);\n        const end = new Date(endDate);\n        dateRange = [];\n        \n        for (let d = new Date(start); d <= end; d.setDate(d.getDate() + 1)) {\n          dateRange.push(d.toISOString().split('T')[0]);\n        }\n      } else {\n        // Varsayılan: son 14 gün\n        dateRange = Array.from({ length: 14 }, (_, i) => {\n          const date = new Date();\n          date.setDate(date.getDate() - (13 - i));\n          return date.toISOString().split('T')[0];\n        });\n      }\n\n      return dateRange.map(dateStr => {\n        const dayLogs = allQuestionLogs.filter(log => log.study_date === dateStr);\n        const totalQuestions = dayLogs.reduce((sum, log) => \n          sum + (Number(log.correct_count) || 0) + (Number(log.wrong_count) || 0) + (Number(log.blank_count) || 0), 0\n        );\n        const correctQuestions = dayLogs.reduce((sum, log) => sum + (Number(log.correct_count) || 0), 0);\n        const attempted = dayLogs.reduce((sum, log) => sum + (Number(log.correct_count) || 0) + (Number(log.wrong_count) || 0), 0);\n        \n        return {\n          date: dateStr,\n          dayName: new Date(dateStr).toLocaleDateString('tr-TR', { weekday: 'short', day: 'numeric' }),\n          totalQuestions,\n          correctQuestions,\n          wrongQuestions: dayLogs.reduce((sum, log) => sum + (Number(log.wrong_count) || 0), 0),\n          successRate: attempted > 0 ? Math.round((correctQuestions / attempted) * 100) : 0\n        };\n      });\n    } else {\n      // Haftalık toplama\n      const weeks = [];\n      const today = new Date();\n      \n      // Tarih aralığını belirle\n      let customStart: Date | null = null;\n      let customEnd: Date | null = null;\n      if (useCustomDates) {\n        customStart = new Date(startDate);\n        customEnd = new Date(endDate);\n      }\n      \n      const weeksToShow = useCustomDates ? 52 : 8; // Custom date için daha geniş aralık\n      \n      for (let i = weeksToShow - 1; i >= 0; i--) {\n        // Hedef haftanın Pazartesi'sini hesaplayın (ISO hafta başlangıcı) UTC'de\n        const weekStart = new Date(today);\n        const daysFromMonday = (today.getUTCDay() + 6) % 7;\n        weekStart.setUTCDate(today.getUTCDate() - (i * 7) - daysFromMonday);\n        weekStart.setUTCHours(0, 0, 0, 0);\n        \n        const weekEnd = new Date(weekStart);\n        weekEnd.setUTCDate(weekStart.getUTCDate() + 6);\n        weekEnd.setUTCHours(23, 59, 59, 999);\n        \n        // Custom date kontrolü - hafta tamamen aralık dışındaysa atla\n        if (useCustomDates && customStart && customEnd) {\n          if (weekEnd < customStart || weekStart > customEnd) {\n            continue; // Bu haftayı atla\n          }\n        }\n        \n        // UTC tabanlı dize karşılaştırması kullanarak bu haftanın günlüklerini filtreleyin \n        const weekLogs = allQuestionLogs.filter(log => {\n          const logDateStr = log.study_date;\n          const weekStartStr = weekStart.toISOString().slice(0, 10);\n          const weekEndStr = weekEnd.toISOString().slice(0, 10);\n          return logDateStr >= weekStartStr && logDateStr <= weekEndStr;\n        });\n        \n        const totalQuestions = weekLogs.reduce((sum, log) => \n          sum + (Number(log.correct_count) || 0) + (Number(log.wrong_count) || 0) + (Number(log.blank_count) || 0), 0\n        );\n        const correctQuestions = weekLogs.reduce((sum, log) => sum + (Number(log.correct_count) || 0), 0);\n        const attempted = weekLogs.reduce((sum, log) => sum + (Number(log.correct_count) || 0) + (Number(log.wrong_count) || 0), 0);\n        \n        // Tarih aralığı içeren açıklayıcı hafta etiketi oluştuR\n        const weekKey = `${weekStart.getUTCFullYear()}-W${String(8 - i).padStart(2, '0')}`;\n        const startMonth = weekStart.toLocaleDateString('tr-TR', { month: 'short', timeZone: 'UTC' });\n        const endMonth = weekEnd.toLocaleDateString('tr-TR', { month: 'short', timeZone: 'UTC' });\n        const startYear = weekStart.getUTCFullYear();\n        const endYear = weekEnd.getUTCFullYear();\n        \n        let weekLabel;\n        if (startMonth === endMonth && startYear === endYear) {\n          // Aynı ay ve yıl: “02–08 Eyl”\n          weekLabel = `${weekStart.getUTCDate().toString().padStart(2, '0')}–${weekEnd.getUTCDate().toString().padStart(2, '0')} ${startMonth}`;\n        } else if (startYear === endYear) {\n          // Farklı aylar, aynı yıl: \"29 Ağu – 04 Eyl\"\n          weekLabel = `${weekStart.getUTCDate().toString().padStart(2, '0')} ${startMonth} – ${weekEnd.getUTCDate().toString().padStart(2, '0')} ${endMonth}`;\n        } else {\n          // Farklı yıllar: \"29 Ara 2024 – 04 Oca 2025\"\n          weekLabel = `${weekStart.getUTCDate().toString().padStart(2, '0')} ${startMonth} ${startYear} – ${weekEnd.getUTCDate().toString().padStart(2, '0')} ${endMonth} ${endYear}`;\n        }\n        \n        weeks.push({\n          date: weekKey,\n          dayName: weekLabel,\n          totalQuestions,\n          correctQuestions,\n          wrongQuestions: weekLogs.reduce((sum, log) => sum + (Number(log.wrong_count) || 0), 0),\n          successRate: attempted > 0 ? Math.round((correctQuestions / attempted) * 100) : 0\n        });\n      }\n      \n      return weeks;\n    }\n  };\n\n\n  const dailyWeeklyData = useMemo(() => prepareDailyWeeklyData(), [allQuestionLogs, viewMode, useCustomDates, startDate, endDate]);\n\n\n  return (\n    <div className=\"space-y-6 mb-8\">\n      {/* Geliştirilmiş Günlük/Haftalık Soru Grafiği */}\n      <div className=\"bg-gradient-to-br from-emerald-50/60 via-card to-blue-50/40 dark:from-emerald-950/30 dark:via-card dark:to-blue-950/25 rounded-2xl border-2 border-emerald-200/40 dark:border-emerald-800/40 p-8 relative overflow-hidden shadow-2xl backdrop-blur-sm\">\n        <div className=\"absolute top-0 right-0 w-40 h-40 bg-gradient-to-br from-emerald-500/10 to-blue-500/10 rounded-full blur-3xl animate-pulse\"></div>\n        <div className=\"absolute -bottom-8 -left-8 w-32 h-32 bg-gradient-to-tr from-blue-500/10 to-emerald-500/10 rounded-full blur-2xl\"></div>\n        <div className=\"relative\">\n          <div className=\"flex items-center justify-between mb-8\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-3 bg-gradient-to-br from-emerald-500 via-blue-500 to-emerald-600 rounded-xl shadow-lg\">\n                <BookOpen className=\"h-6 w-6 text-white drop-shadow-lg\" />\n              </div>\n              <div>\n                <h3 className=\"text-2xl font-bold bg-gradient-to-r from-emerald-600 via-blue-600 to-emerald-700 bg-clip-text text-transparent\">\n                  📚 {viewMode === 'daily' ? 'Günlük' : 'Haftalık'} Soru Çözüm Analizi\n                </h3>\n                <p className=\"text-sm text-emerald-600/70 dark:text-emerald-400/70 font-medium\">\n                  Soru çözme performansı ve deneme verileriyle gelişim takibi\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-3 flex-wrap\">\n              <div className=\"flex border-2 border-emerald-200/50 dark:border-emerald-700/50 rounded-xl p-1 bg-white/60 dark:bg-gray-900/60 backdrop-blur-sm\">\n                <Button\n                  variant={viewMode === 'daily' ? 'default' : 'ghost'}\n                  size=\"sm\"\n                  onClick={() => setViewMode('daily')}\n                  className={`text-sm px-4 py-2 h-auto font-medium transition-all duration-200 rounded-lg ${\n                    viewMode === 'daily'\n                      ? 'bg-gradient-to-r from-emerald-500 to-blue-500 text-white shadow-lg hover:shadow-xl'\n                      : 'hover:bg-emerald-50 dark:hover:bg-emerald-900/30 text-emerald-700 dark:text-emerald-300'\n                  }`}\n                  data-testid=\"button-daily-view\"\n                >\n                  📅 Günlük\n                </Button>\n                <Button\n                  variant={viewMode === 'weekly' ? 'default' : 'ghost'}\n                  size=\"sm\"\n                  onClick={() => setViewMode('weekly')}\n                  className={`text-sm px-4 py-2 h-auto font-medium transition-all duration-200 rounded-lg ${\n                    viewMode === 'weekly'\n                      ? 'bg-gradient-to-r from-emerald-500 to-blue-500 text-white shadow-lg hover:shadow-xl'\n                      : 'hover:bg-emerald-50 dark:hover:bg-emerald-900/30 text-emerald-700 dark:text-emerald-300'\n                  }`}\n                  data-testid=\"button-weekly-view\"\n                >\n                  🗓️ Haftalık\n                </Button>\n                \n                {/* Tarih Aralığı Popover */}\n                <Popover open={useCustomDates} onOpenChange={setUseCustomDates}>\n                  <PopoverTrigger asChild>\n                    <Button\n                      variant={useCustomDates ? 'default' : 'ghost'}\n                      size=\"sm\"\n                      className={`text-sm px-4 py-2 h-auto font-medium transition-all duration-200 rounded-lg ${\n                        useCustomDates\n                          ? 'bg-gradient-to-r from-emerald-500 to-blue-500 text-white shadow-lg hover:shadow-xl'\n                          : 'hover:bg-emerald-50 dark:hover:bg-emerald-900/30 text-emerald-700 dark:text-emerald-300'\n                      }`}\n                      data-testid=\"button-custom-dates\"\n                    >\n                      <Calendar className=\"h-4 w-4 mr-1\" />\n                      Tarih Seç\n                    </Button>\n                  </PopoverTrigger>\n                  <PopoverContent className=\"w-auto p-4 bg-white dark:bg-gray-900 border-emerald-200 dark:border-emerald-700\" align=\"end\">\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center gap-2\">\n                        <label className=\"text-sm font-medium text-emerald-700 dark:text-emerald-300 whitespace-nowrap\">Başlangıç:</label>\n                        <Input\n                          type=\"date\"\n                          value={startDate}\n                          onChange={(e) => setStartDate(e.target.value)}\n                          className=\"text-sm border-emerald-200 dark:border-emerald-700 focus:border-emerald-500 focus:ring-emerald-500\"\n                          data-testid=\"input-start-date\"\n                        />\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <label className=\"text-sm font-medium text-emerald-700 dark:text-emerald-300 whitespace-nowrap\">Bitiş:</label>\n                        <Input\n                          type=\"date\"\n                          value={endDate}\n                          onChange={(e) => setEndDate(e.target.value)}\n                          className=\"text-sm border-emerald-200 dark:border-emerald-700 focus:border-emerald-500 focus:ring-emerald-500\"\n                          data-testid=\"input-end-date\"\n                        />\n                      </div>\n                      <div className=\"flex flex-col gap-2 pt-2 border-t border-emerald-200 dark:border-emerald-700\">\n                        <div className=\"text-xs font-medium text-emerald-600 dark:text-emerald-400 mb-1\">Hızlı Seçim:</div>\n                        <div className=\"flex gap-2\">\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => {\n                              const today = new Date();\n                              const threeMonthsAgo = new Date();\n                              threeMonthsAgo.setMonth(today.getMonth() - 3);\n                              setStartDate(threeMonthsAgo.toISOString().split('T')[0]);\n                              setEndDate(today.toISOString().split('T')[0]);\n                              setUseCustomDates(true);\n                            }}\n                            className=\"text-xs hover:bg-emerald-50 dark:hover:bg-emerald-900/30 text-emerald-700 dark:text-emerald-300 border-emerald-200 dark:border-emerald-700\"\n                            data-testid=\"button-3-months\"\n                          >\n                            📅 3 Ay\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => {\n                              const today = new Date();\n                              const sixMonthsAgo = new Date();\n                              sixMonthsAgo.setMonth(today.getMonth() - 6);\n                              setStartDate(sixMonthsAgo.toISOString().split('T')[0]);\n                              setEndDate(today.toISOString().split('T')[0]);\n                              setUseCustomDates(true);\n                            }}\n                            className=\"text-xs hover:bg-emerald-50 dark:hover:bg-emerald-900/30 text-emerald-700 dark:text-emerald-300 border-emerald-200 dark:border-emerald-700\"\n                            data-testid=\"button-6-months\"\n                          >\n                            📅 6 Ay\n                          </Button>\n                        </div>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => {\n                            const today = new Date();\n                            const twoWeeksAgo = new Date();\n                            twoWeeksAgo.setDate(today.getDate() - 13);\n                            setStartDate(twoWeeksAgo.toISOString().split('T')[0]);\n                            setEndDate(today.toISOString().split('T')[0]);\n                            setUseCustomDates(false);\n                          }}\n                          className=\"text-xs hover:bg-emerald-50 dark:hover:bg-emerald-900/30 text-emerald-700 dark:text-emerald-300 border-emerald-200 dark:border-emerald-700\"\n                          data-testid=\"button-reset-dates\"\n                        >\n                          <RefreshCw className=\"h-3 w-3 mr-1\" />\n                          Sıfırla (Son 14 gün)\n                        </Button>\n                      </div>\n                    </div>\n                  </PopoverContent>\n                </Popover>\n              </div>\n\n              {!useCustomDates && (\n                <div className=\"text-sm text-muted-foreground bg-emerald-100/60 dark:bg-emerald-900/30 px-4 py-2 rounded-full border border-emerald-200/50 dark:border-emerald-700/50 font-medium\">\n                  {viewMode === 'daily' ? 'Son 14 gün' : 'Son 8 hafta'}\n                </div>\n              )}\n            </div>\n          </div>\n          \n          {dailyWeeklyData.length === 0 || dailyWeeklyData.every(d => d.totalQuestions === 0) ? (\n            <div className=\"text-center py-20 text-muted-foreground\">\n              <div className=\"w-20 h-20 rounded-full bg-gradient-to-br from-emerald-100 to-blue-100 dark:from-emerald-900/30 dark:to-blue-900/30 flex items-center justify-center mx-auto mb-6 shadow-lg\">\n                <BookOpen className=\"h-10 w-10 text-emerald-500\" />\n              </div>\n              <h4 className=\"text-lg font-semibold text-emerald-700 dark:text-emerald-300 mb-2\">Soru çözüm verisi bulunmuyor</h4>\n              <p className=\"text-sm opacity-75 mb-4\">Soru kayıtları veri girişi yapılmadan gözükmez.</p>\n              <div className=\"flex justify-center space-x-1\">\n                <div className=\"w-2 h-2 rounded-full bg-emerald-500 animate-bounce\"></div>\n                <div className=\"w-2 h-2 rounded-full bg-blue-500 animate-bounce delay-100\"></div>\n                <div className=\"w-2 h-2 rounded-full bg-emerald-600 animate-bounce delay-200\"></div>\n              </div>\n            </div>\n          ) : (\n            <>\n              <div className=\"h-80 mb-6\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <ComposedChart data={dailyWeeklyData} margin={{ top: 20, right: 40, left: 20, bottom: 10 }}>\n                    <CartesianGrid strokeDasharray=\"3 3\" className=\"opacity-30\" stroke=\"currentColor\" />\n                    <XAxis \n                      dataKey=\"dayName\" \n                      className=\"text-xs text-muted-foreground\"\n                      tick={{ fontSize: 11, fontWeight: 500 }}\n                      stroke=\"currentColor\"\n                      axisLine={{ stroke: 'currentColor', strokeWidth: 1 }}\n                    />\n                    <YAxis \n                      yAxisId=\"questions\"\n                      className=\"text-xs text-muted-foreground\"\n                      tick={{ fontSize: 11, fontWeight: 500 }}\n                      stroke=\"currentColor\"\n                      axisLine={{ stroke: 'currentColor', strokeWidth: 1 }}\n                      label={{ value: 'Soru Sayısı', angle: -90, position: 'insideLeft', style: { textAnchor: 'middle' } }}\n                    />\n                    <YAxis \n                      yAxisId=\"percentage\"\n                      orientation=\"right\"\n                      className=\"text-xs text-muted-foreground\"\n                      tick={{ fontSize: 11, fontWeight: 500 }}\n                      stroke=\"currentColor\"\n                      axisLine={{ stroke: 'currentColor', strokeWidth: 1 }}\n                      domain={[0, 100]}\n                      label={{ value: 'Başarı %', angle: 90, position: 'insideRight', style: { textAnchor: 'middle' } }}\n                    />\n                    <Tooltip\n                      contentStyle={{\n                        backgroundColor: 'hsl(var(--card))',\n                        border: '1px solid hsl(var(--border))',\n                        borderRadius: '12px',\n                        fontSize: '13px',\n                        boxShadow: '0 8px 32px rgba(0,0,0,0.1)',\n                        padding: '12px'\n                      }}\n                      formatter={(value: any, name: any) => [\n                        name === 'successRate' ? `%${value}` : `${value} soru`,\n                        name === 'correctQuestions' ? '✅ Doğru' : \n                        name === 'wrongQuestions' ? '❌ Yanlış' : \n                        name === 'successRate' ? '📈 Başarı Oranı' :\n                        name === 'totalQuestions' ? '📊 Toplam' : name\n                      ]}\n                      labelFormatter={(label) => `📅 ${label}`}\n                    />\n                    <Legend \n                      wrapperStyle={{ paddingTop: '20px' }}\n                      iconType=\"rect\"\n                    />\n                    \n                    {/* Degrade efektli geliştirilmiş çubuklar */}\n                    <Bar \n                      yAxisId=\"questions\" \n                      dataKey=\"correctQuestions\" \n                      stackId=\"a\" \n                      fill=\"url(#correctGradient)\" \n                      name=\"Doğru\" \n                      radius={[0, 0, 0, 0]} \n                    />\n                    <Bar \n                      yAxisId=\"questions\" \n                      dataKey=\"wrongQuestions\" \n                      stackId=\"a\" \n                      fill=\"url(#wrongGradient)\" \n                      name=\"Yanlış\" \n                      radius={[4, 4, 0, 0]} \n                    />\n                    \n                    {/* Geliştirilmiş başarı oranı çizgisi */}\n                    <Line \n                      yAxisId=\"percentage\" \n                      type=\"monotone\" \n                      dataKey=\"successRate\" \n                      stroke=\"url(#successGradient)\" \n                      strokeWidth={4} \n                      dot={{ r: 5, fill: \"#3b82f6\", strokeWidth: 2, stroke: '#ffffff' }} \n                      activeDot={{ r: 7, stroke: '#3b82f6', strokeWidth: 3, fill: '#ffffff' }}\n                      name=\"Başarı Oranı (%)\" \n                    />\n                    \n                    {/* Degrade Tanımları */}\n                    <defs>\n                      <linearGradient id=\"correctGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n                        <stop offset=\"0%\" stopColor=\"#10b981\" />\n                        <stop offset=\"100%\" stopColor=\"#059669\" />\n                      </linearGradient>\n                      <linearGradient id=\"wrongGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n                        <stop offset=\"0%\" stopColor=\"#ef4444\" />\n                        <stop offset=\"100%\" stopColor=\"#dc2626\" />\n                      </linearGradient>\n                      <linearGradient id=\"successGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                        <stop offset=\"0%\" stopColor=\"#3b82f6\" />\n                        <stop offset=\"100%\" stopColor=\"#1d4ed8\" />\n                      </linearGradient>\n                    </defs>\n                  </ComposedChart>\n                </ResponsiveContainer>\n              </div>\n              \n              {/* Geliştirilmiş Özet İstatistikler - Responsive Grid Düzeni */}\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3 pt-6 border-t-2 border-emerald-200/30 dark:border-emerald-700/30\">\n                <div className=\"text-center bg-white/40 dark:bg-gray-900/40 rounded-xl p-3 backdrop-blur-sm border border-emerald-200/30 dark:border-emerald-700/30 shadow-lg\">\n                  <div className=\"text-xl font-bold bg-gradient-to-r from-green-600 to-emerald-600 bg-clip-text text-transparent mb-1\">\n                    {dailyWeeklyData.reduce((sum, d) => sum + d.correctQuestions, 0)}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground font-medium\">✅ Toplam Doğru</div>\n                  <div className=\"w-6 h-1 bg-gradient-to-r from-green-500 to-emerald-500 rounded-full mx-auto mt-1.5\"></div>\n                </div>\n                <div className=\"text-center bg-white/40 dark:bg-gray-900/40 rounded-xl p-3 backdrop-blur-sm border border-red-200/30 dark:border-red-700/30 shadow-lg\">\n                  <div className=\"text-xl font-bold bg-gradient-to-r from-red-600 to-red-500 bg-clip-text text-transparent mb-1\">\n                    {dailyWeeklyData.reduce((sum, d) => sum + d.wrongQuestions, 0)}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground font-medium\">❌ Toplam Yanlış</div>\n                  <div className=\"w-6 h-1 bg-gradient-to-r from-red-500 to-red-600 rounded-full mx-auto mt-1.5\"></div>\n                </div>\n                <div className=\"text-center bg-white/40 dark:bg-gray-900/40 rounded-xl p-3 backdrop-blur-sm border border-emerald-200/30 dark:border-emerald-700/30 shadow-lg\">\n                  <div className=\"text-xl font-bold bg-gradient-to-r from-emerald-600 to-blue-600 bg-clip-text text-transparent mb-1\">\n                    {dailyWeeklyData.reduce((sum, d) => sum + d.totalQuestions, 0)}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground font-medium\">📊 Toplam Soru</div>\n                  <div className=\"w-6 h-1 bg-gradient-to-r from-emerald-500 to-blue-500 rounded-full mx-auto mt-1.5\"></div>\n                </div>\n                <div className=\"text-center bg-white/40 dark:bg-gray-900/40 rounded-xl p-3 backdrop-blur-sm border border-emerald-200/30 dark:border-emerald-700/30 shadow-lg\">\n                  <div className=\"text-xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent mb-1\">\n                    {Math.round(dailyWeeklyData.reduce((sum, d) => sum + d.successRate, 0) / dailyWeeklyData.filter(d => d.totalQuestions > 0).length) || 0}%\n                  </div>\n                  <div className=\"text-xs text-muted-foreground font-medium\">📈 Ortalama Başarı</div>\n                  <div className=\"w-6 h-1 bg-gradient-to-r from-blue-500 to-indigo-500 rounded-full mx-auto mt-1.5\"></div>\n                </div>\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n\n    </div>\n  );\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":27821},"client/src/types/electron.d.ts":{"content":"interface ElectronAPI {\n  minimizeWindow: () => void;\n  maximizeWindow: () => void;\n  closeWindow: () => void;\n  goBack: () => void;\n  goForward: () => void;\n  reload: () => void;\n  toggleFullscreen: () => void;\n  onFullscreenChange: (callback: (isFullscreen: boolean) => void) => void;\n  isElectron: boolean;\n}\n\ninterface Window {\n  electronAPI?: ElectronAPI;\n}\n","size_bytes":363},"client/src/bilesenler/arayuz/separator.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/kutuphane/yardimcilar\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":872},"server/rotalar.ts":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./depolama\";\n\n// Activity logger helper - outputs to stdout for Electron to capture\nfunction logActivity(action: string, description?: string) {\n  const timestamp = new Date().toLocaleString('tr-TR', {\n    day: '2-digit',\n    month: 'long',\n    year: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit'\n  });\n  const message = description \n    ? `[ACTIVITY] ${action} | ${description}`\n    : `[ACTIVITY] ${action}`;\n  console.log(message);\n}\n\nimport {\n  insertTaskSchema,\n  insertMoodSchema,\n  insertGoalSchema,\n  insertQuestionLogSchema,\n  insertExamResultSchema,\n  insertFlashcardSchema,\n  insertExamSubjectNetSchema,\n  insertStudyHoursSchema,\n  insertSetupCompletedSchema,\n} from \"@shared/sema\";\nimport { z } from \"zod\";\nimport dotenv from \"dotenv\";\nimport nodemailer from \"nodemailer\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { generateModernEmailTemplate } from \"./email-template\";\ndotenv.config();\n\ninterface WeatherData {\n  main: {\n    temp: number;\n    temp_max: number;\n    temp_min: number;\n    humidity: number;\n    pressure: number;\n    feels_like: number;\n  };\n  weather: Array<{ id: number; description: string; main: string }>;\n  wind: { speed: number; deg: number };\n  clouds: { all: number };\n  visibility: number;\n  sys: {\n    sunrise: number;\n    sunset: number;\n  };\n  rain?: { \"1h\"?: number; \"3h\"?: number };\n  snow?: { \"1h\"?: number; \"3h\"?: number };\n  cod?: number | string;\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Görev routes\n  app.get(\"/api/tasks\", async (req, res) => {\n    try {\n      const tasks = await storage.getTasks();\n      res.json(tasks);\n    } catch (error) {\n      console.error(\"Error fetching tasks:\", error);\n      res.status(500).json({ message: \"Failed to fetch tasks\" });\n    }\n  });\n\n  app.post(\"/api/tasks\", async (req, res) => {\n    try {\n      const validatedData = insertTaskSchema.parse(req.body);\n      const task = await storage.createTask(validatedData);\n      logActivity('Görev Eklendi', validatedData.title);\n      res.status(201).json(task);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res\n          .status(400)\n          .json({ \n            message: \"Görev verisi geçersiz. Lütfen tüm gerekli alanları kontrol edin.\", \n            errors: error.errors \n          });\n      } else {\n        console.error(\"Error creating task:\", error);\n        res.status(500).json({ message: \"Görev oluşturulurken bir hata oluştu. Lütfen tekrar deneyin.\" });\n      }\n    }\n  });\n\n  app.put(\"/api/tasks/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertTaskSchema.partial().parse(req.body);\n      const task = await storage.updateTask(id, validatedData);\n\n      if (!task) {\n        return res.status(404).json({ message: \"Task not found\" });\n      }\n\n      res.json(task);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res\n          .status(400)\n          .json({ message: \"Invalid task data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to update task\" });\n      }\n    }\n  });\n\n  app.patch(\"/api/tasks/:id/toggle\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const task = await storage.toggleTaskComplete(id);\n\n      if (!task) {\n        return res.status(404).json({ message: \"Task not found\" });\n      }\n\n      logActivity('Görev Durumu Değiştirildi', task.completed ? 'Tamamlandı' : 'Beklemede');\n      res.json(task);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to toggle task completion\" });\n    }\n  });\n\n  app.patch(\"/api/tasks/:id/archive\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const task = await storage.archiveTask(id);\n\n      if (!task) {\n        return res.status(404).json({ message: \"Task not found\" });\n      }\n\n      logActivity('Görev Arşivlendi');\n      res.json(task);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to archive task\" });\n    }\n  });\n\n  app.patch(\"/api/tasks/:id/unarchive\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const task = await storage.updateTask(id, { archived: false });\n\n      if (!task) {\n        return res.status(404).json({ message: \"Task not found\" });\n      }\n\n      logActivity('Görev Geri Yüklendi', 'Arşivden çıkarıldı');\n      res.json(task);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to unarchive task\" });\n    }\n  });\n\n  app.get(\"/api/tasks/archived\", async (req, res) => {\n    try {\n      const tasks = await storage.getArchivedTasks();\n      res.json(tasks);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch archived tasks\" });\n    }\n  });\n\n  app.get(\"/api/tasks/by-date-range\", async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      if (!startDate || !endDate) {\n        return res.status(400).json({ message: \"Start date and end date are required\" });\n      }\n      const tasks = await storage.getTasksByDateRange(startDate as string, endDate as string);\n      res.json(tasks);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch tasks by date range\" });\n    }\n  });\n\n  app.delete(\"/api/tasks/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteTask(id);\n\n      if (!deleted) {\n        return res.status(404).json({ message: \"Görev bulunamadı. Zaten silinmiş olabilir.\" });\n      }\n\n      logActivity('Görev Silindi');\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting task:\", error);\n      res.status(500).json({ message: \"Görev silinirken bir hata oluştu. Lütfen tekrar deneyin.\" });\n    }\n  });\n\n  // Ruh hali routes\n  app.get(\"/api/moods\", async (req, res) => {\n    try {\n      const moods = await storage.getMoods();\n      res.json(moods);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch moods\" });\n    }\n  });\n\n  app.get(\"/api/moods/latest\", async (req, res) => {\n    try {\n      const mood = await storage.getLatestMood();\n      res.json(mood);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch latest mood\" });\n    }\n  });\n\n  app.post(\"/api/moods\", async (req, res) => {\n    try {\n      const validatedData = insertMoodSchema.parse(req.body);\n      const mood = await storage.createMood(validatedData);\n      res.status(201).json(mood);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res\n          .status(400)\n          .json({ message: \"Invalid mood data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to create mood\" });\n      }\n    }\n  });\n\n  // raporlarım ve takvim kısmı routes\n  app.get(\"/api/summary/daily\", async (req, res) => {\n    try {\n      const range = parseInt(req.query.range as string) || 30;\n      const summary = await storage.getDailySummary(range);\n      res.json(summary);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch daily summary\" });\n    }\n  });\n\n  app.get(\"/api/calendar/:date\", async (req, res) => {\n    try {\n      const { date } = req.params; // YYYY-AA-GG format\n      \n      // Görevleri getir (arşivlenmiş dahil - takvim için)\n      let activeTasks = [];\n      let archivedTasks = [];\n      try {\n        activeTasks = await storage.getTasksByDate(date) || [];\n        archivedTasks = await storage.getArchivedTasks() || [];\n      } catch (taskError) {\n        console.error(\"❌ Error fetching tasks:\", taskError);\n        activeTasks = [];\n        archivedTasks = [];\n      }\n      \n      const archivedTasksForDate = archivedTasks.filter((t: any) => {\n        if (t.dueDate) {\n          const taskDate = t.dueDate.split('T')[0];\n          return taskDate === date;\n        }\n        if (t.createdAt) {\n          const createdDate = new Date(t.createdAt).toISOString().split('T')[0];\n          return createdDate === date;\n        }\n        return false;\n      });\n      const tasksForDate = [...activeTasks, ...archivedTasksForDate];\n      \n      // Çalışma saatlerini getir (arşivlenmiş dahil - takvim için)\n      let activeStudyHours = [];\n      let archivedStudyHours = [];\n      try {\n        activeStudyHours = await storage.getStudyHours() || [];\n        archivedStudyHours = await storage.getArchivedStudyHours() || [];\n      } catch (studyError) {\n        console.error(\"❌ Error fetching study hours:\", studyError);\n        activeStudyHours = [];\n        archivedStudyHours = [];\n      }\n      \n      const allStudyHours = [...activeStudyHours, ...archivedStudyHours];\n      const studyHoursForDate = allStudyHours.filter((sh: any) => sh.study_date === date);\n      \n      // Soru loglarını getir (arşivlenmiş dahil - takvim için)\n      let activeQuestionLogs = [];\n      let archivedQuestionLogs = [];\n      try {\n        activeQuestionLogs = await storage.getQuestionLogs() || [];\n        archivedQuestionLogs = await storage.getArchivedQuestionLogs() || [];\n      } catch (questionError) {\n        console.error(\"❌ Error fetching question logs:\", questionError);\n        activeQuestionLogs = [];\n        archivedQuestionLogs = [];\n      }\n      \n      const allQuestionLogs = [...activeQuestionLogs, ...archivedQuestionLogs];\n      const questionsForDate = allQuestionLogs.filter((q: any) => q.study_date === date);\n      \n      // Sınav sonuçlarını getir (arşivlenmiş dahil - takvim için)\n      let activeExamResults = [];\n      let archivedExamResults = [];\n      try {\n        activeExamResults = await storage.getExamResults() || [];\n        archivedExamResults = await storage.getArchivedExamResults() || [];\n      } catch (examError) {\n        console.error(\"❌ Error fetching exam results:\", examError);\n        activeExamResults = [];\n        archivedExamResults = [];\n      }\n      \n      const allExamResults = [...activeExamResults, ...archivedExamResults];\n      const examsForDate = allExamResults.filter((e: any) => e.exam_date === date);\n\n      // günlük kalan gün sayısı hesaplama - Türkiye saati ile (UTC+3)\n      // Türkiye saatine göre bugünün tarihini al\n      const now = new Date();\n      const formatter = new Intl.DateTimeFormat('en-CA', { \n        timeZone: 'Europe/Istanbul',\n        year: 'numeric',\n        month: '2-digit', \n        day: '2-digit'\n      });\n      const istanbulDateStr = formatter.format(now); // YYYY-MM-DD formatında\n      const [todayYear, todayMonth, todayDay] = istanbulDateStr.split('-').map(Number);\n      const today = new Date(todayYear, todayMonth - 1, todayDay);\n      \n      // Hedef tarihi parse et\n      const [year, month, day] = date.split('-').map(Number);\n      const targetDate = new Date(year, month - 1, day);\n\n      const diffTime = targetDate.getTime() - today.getTime();\n      // Math.floor kullanarak negatif değerleri doğru hesapla (dün = -1, bugün = 0, yarın = 1)\n      const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\n\n      const response = {\n        date,\n        dayNumber: targetDate.getDate(),\n        daysRemaining: diffDays,\n        tasks: tasksForDate,\n        tasksCount: tasksForDate.length,\n        studyHours: studyHoursForDate,\n        questions: questionsForDate,\n        exams: examsForDate,\n      };\n      \n      res.json(response);\n    } catch (error) {\n      console.error(\"❌ Calendar endpoint error:\", error);\n      console.error(\"❌ Error details:\", {\n        name: (error as Error)?.name,\n        message: (error as Error)?.message,\n        stack: (error as Error)?.stack\n      });\n      res.status(500).json({ message: \"Failed to fetch calendar data\", error: (error as Error)?.message });\n    }\n  });\n\n  // NET HESAPLAMA\n  app.post(\"/api/calculate-ranking\", async (req, res) => {\n    try {\n      const { nets, year } = req.body;\n\n      // nets objesi örneği:\n      let tytNets = 0;\n      let aytNets = 0;\n\n      // TYT neti hesaplama\n      if (nets?.tyt) {\n        const tyt = nets.tyt;\n        tytNets =\n          (parseFloat(tyt.turkce) || 0) +\n          (parseFloat(tyt.sosyal) || 0) +\n          (parseFloat(tyt.matematik) || 0) +\n          (parseFloat(tyt.fen) || 0);\n      }\n\n      // AYT neti hesaplama\n      if (nets?.ayt) {\n        const ayt = nets.ayt;\n        aytNets =\n          (parseFloat(ayt.matematik) || 0) +\n          (parseFloat(ayt.fizik) || 0) +\n          (parseFloat(ayt.kimya) || 0) +\n          (parseFloat(ayt.biyoloji) || 0);\n      }\n\n      // 2023-2025 YKS sıralama verileri (yaklaşık değerler)\n      //burası kullanılmayacak\n      const rankingData: Record<string, any> = {\n        \"2023\": {\n          tytWeight: 0.4,\n          aytWeight: 0.6,\n          rankings: {\n            350: 1000,\n            320: 5000,\n            300: 10000,\n            280: 20000,\n            260: 35000,\n            240: 50000,\n            220: 75000,\n            200: 100000,\n            180: 150000,\n            160: 200000,\n          },\n        },\n        \"2024\": {\n          tytWeight: 0.4,\n          aytWeight: 0.6,\n          rankings: {\n            360: 1000,\n            330: 5000,\n            310: 10000,\n            290: 20000,\n            270: 35000,\n            250: 50000,\n            230: 75000,\n            210: 100000,\n            190: 150000,\n            170: 200000,\n          },\n        },\n        \"2025\": {\n          tytWeight: 0.4,\n          aytWeight: 0.6,\n          rankings: {\n            355: 1000,\n            325: 5000,\n            305: 10000,\n            285: 20000,\n            265: 35000,\n            245: 50000,\n            225: 75000,\n            205: 100000,\n            185: 150000,\n            165: 200000,\n          },\n        },\n      };\n\n      const yearData = rankingData[year] || rankingData[\"2024\"];\n\n      // numarasal hatalara karşı kontrol\n      if (isNaN(tytNets)) tytNets = 0;\n      if (isNaN(aytNets)) aytNets = 0;\n\n      // Net'i puana çevirme (yaklaşık formül)\n      const tytScore = tytNets * 4; // Her doğru ~4 puan\n      const aytScore = aytNets * 4; // Her doğru ~4 puan\n\n      // Ağırlıklı toplam puan\n      const totalScore =\n        tytScore * yearData.tytWeight + aytScore * yearData.aytWeight;\n\n      // En yakın sıralamayı bul\n      let estimatedRanking = 500000; // Varsayılan\n      const scores = Object.keys(yearData.rankings)\n        .map(Number)\n        .sort((a, b) => b - a);\n\n      for (const score of scores) {\n        if (totalScore >= score) {\n          estimatedRanking = yearData.rankings[score];\n          break;\n        }\n      }\n\n      res.json({\n        tytScore: tytScore.toFixed(2),\n        aytScore: aytScore.toFixed(2),\n        totalScore: totalScore.toFixed(2),\n        estimatedRanking,\n        year,\n        methodology: \"2023-2025 YKS verilerine dayalı tahmin\",\n      });\n    } catch (error) {\n      console.error(\"Ranking calculation error:\", error);\n      res.status(500).json({ message: \"Sıralama hesaplanamadı\" });\n    }\n  });\n\n  // Goal routes\n  app.get(\"/api/goals\", async (req, res) => {\n    try {\n      const goals = await storage.getGoals();\n      res.json(goals);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch goals\" });\n    }\n  });\n\n  app.post(\"/api/goals\", async (req, res) => {\n    try {\n      const validatedData = insertGoalSchema.parse(req.body);\n      const goal = await storage.createGoal(validatedData);\n      res.status(201).json(goal);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res\n          .status(400)\n          .json({ message: \"Invalid goal data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to create goal\" });\n      }\n    }\n  });\n\n  app.put(\"/api/goals/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertGoalSchema.partial().parse(req.body);\n      const goal = await storage.updateGoal(id, validatedData);\n\n      if (!goal) {\n        return res.status(404).json({ message: \"Goal not found\" });\n      }\n\n      res.json(goal);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res\n          .status(400)\n          .json({ message: \"Invalid goal data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to update goal\" });\n      }\n    }\n  });\n\n  app.delete(\"/api/goals/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteGoal(id);\n\n      if (!deleted) {\n        return res.status(404).json({ message: \"Goal not found\" });\n      }\n\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete goal\" });\n    }\n  });\n\n  // Sakarya,serdivan için hava durumu route\n  app.get(\"/api/weather\", async (req, res) => {\n    try {\n      const OPENWEATHER_API_KEY = process.env.OPENWEATHER_API_KEY;\n\n      let currentData: WeatherData;\n      let forecastData: any;\n      let airQualityData: any;\n      let uvData: any;\n\n      if (!OPENWEATHER_API_KEY) {\n        // API anahtarı yoksa statik veri kullan\n        currentData = {\n          main: {\n            temp: 18,\n            temp_max: 20,\n            temp_min: 15,\n            humidity: 75,\n            pressure: 1013,\n            feels_like: 18,\n          },\n          weather: [{ id: 800, description: \"açık\", main: \"Clear\" }],\n          wind: { speed: 2.5, deg: 180 },\n          clouds: { all: 20 },\n          visibility: 10000,\n          sys: {\n            sunrise: Math.floor(new Date().setHours(5, 54, 0, 0) / 1000),\n            sunset: Math.floor(new Date().setHours(18, 53, 0, 0) / 1000),\n          },\n        };\n        forecastData = { list: [] };\n        airQualityData = {\n          list: [\n            { main: { aqi: 2 }, components: { pm2_5: 15, pm10: 25, o3: 60 } },\n          ],\n        };\n        uvData = { value: 4 };\n      } else {\n        // Sakarya, Serdivan için gerçek OpenWeather API çağrıları (lat: 40.7969, lon: 30.3781)\n        const lat = 40.7969;\n        const lon = 30.3781;\n\n        try {\n          // hava durumu\n          const currentResponse = await fetch(\n            `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${OPENWEATHER_API_KEY}&units=metric&lang=tr`,\n          );\n          currentData = await currentResponse.json();\n          \n          // API başarısız olursa (geçersiz anahtar vs) statik veri kullan\n          if (!currentData || !currentData.main || currentData.cod === 401 || currentData.cod === '401') {\n            console.log(\"Weather API key is invalid, using static data\");\n            currentData = {\n              main: {\n                temp: 18,\n                temp_max: 20,\n                temp_min: 15,\n                humidity: 75,\n                pressure: 1013,\n                feels_like: 18,\n              },\n              weather: [{ id: 800, description: \"açık\", main: \"Clear\" }],\n              wind: { speed: 2.5, deg: 180 },\n              clouds: { all: 20 },\n              visibility: 10000,\n              sys: {\n                sunrise: Math.floor(new Date().setHours(5, 54, 0, 0) / 1000),\n                sunset: Math.floor(new Date().setHours(18, 53, 0, 0) / 1000),\n              },\n            };\n            forecastData = { list: [] };\n            airQualityData = {\n              list: [\n                { main: { aqi: 2 }, components: { pm2_5: 15, pm10: 25, o3: 60 } },\n              ],\n            };\n            uvData = { value: 4 };\n          } else {\n            // 5 günlük tahmin\n            const forecastResponse = await fetch(\n              `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${OPENWEATHER_API_KEY}&units=metric&lang=tr`,\n            );\n            forecastData = await forecastResponse.json();\n\n            // hava kalitesi\n            const airQualityResponse = await fetch(\n              `https://api.openweathermap.org/data/2.5/air_pollution?lat=${lat}&lon=${lon}&appid=${OPENWEATHER_API_KEY}`,\n            );\n            airQualityData = await airQualityResponse.json();\n\n            // uv indeksi\n            const uvResponse = await fetch(\n              `https://api.openweathermap.org/data/2.5/uvi?lat=${lat}&lon=${lon}&appid=${OPENWEATHER_API_KEY}`,\n            );\n            uvData = await uvResponse.json();\n          }\n        } catch (apiError) {\n          console.error(\n            \"OpenWeather API error, falling back to static data:\",\n            apiError,\n          );\n          // geriye statik veri döndür\n          currentData = {\n            main: {\n              temp: 18,\n              temp_max: 20,\n              temp_min: 15,\n              humidity: 75,\n              pressure: 1013,\n              feels_like: 18,\n            },\n            weather: [{ id: 800, description: \"açık\", main: \"Clear\" }],\n            wind: { speed: 2.5, deg: 180 },\n            clouds: { all: 20 },\n            visibility: 10000,\n            sys: {\n              sunrise: Math.floor(new Date().setHours(5, 54, 0, 0) / 1000),\n              sunset: Math.floor(new Date().setHours(18, 53, 0, 0) / 1000),\n            },\n          };\n          forecastData = { list: [] };\n          airQualityData = {\n            list: [\n              { main: { aqi: 2 }, components: { pm2_5: 15, pm10: 25, o3: 60 } },\n            ],\n          };\n          uvData = { value: 4 };\n        }\n      }\n\n      // emoji fonksiyonu\n      const getWeatherEmoji = (weatherId: number, isDay: boolean = true) => {\n        if (weatherId >= 200 && weatherId < 300) return \"⛈️\"; // gök gürültülü\n        if (weatherId >= 300 && weatherId < 400) return \"🌦️\"; // hafif yağmur\n        if (weatherId >= 500 && weatherId < 600) return \"🌧️\"; // yağmur\n        if (weatherId >= 600 && weatherId < 700) return \"❄️\"; // kar\n        if (weatherId >= 700 && weatherId < 800) return \"🌫️\"; // sis\n        if (weatherId === 800) return isDay ? \"☀️\" : \"🌙\"; // açık\n        if (weatherId > 800) return isDay ? \"⛅\" : \"☁️\"; // bulutlu\n        return \"🌤️\";\n      };\n\n      // 12 saatlik tahmin işleme\n      const hourlyForecast = [];\n      const currentHour = new Date().getHours();\n\n      for (let i = 0; i < 12; i++) {\n        const hour = (currentHour + i) % 24;\n        const isDay = hour >= 6 && hour <= 19;\n\n        // Gün boyunca sıcaklık değişimi\n        let temp = 18; // Temel sıcaklık\n        if (hour >= 6 && hour <= 8)\n          temp = 16; // Sabah serin\n        else if (hour >= 9 && hour <= 11)\n          temp = 19; // Geç sabah sıcak\n        else if (hour >= 12 && hour <= 15)\n          temp = 21; // Öğle en sıcak\n        else if (hour >= 16 && hour <= 18)\n          temp = 20; // Akşam serin\n        else if (hour >= 19 && hour <= 21)\n          temp = 18; // Gece serin\n        else temp = 15; // Gece en serin\n\n        // Rastgelelik ekle ama gerçekçi tut\n        temp += Math.floor(Math.random() * 3) - 1; // ±1°C\n\n        // Hava durumu koşulları - çeşitlilik için karışım\n        let weatherId = 800; // Açık varsayılan\n        let precipitation = 0;\n\n        if (i === 2 || i === 3) {\n          weatherId = 801; // Az bulutlu\n        } else if (i === 5 || i === 6) {\n          weatherId = 802; // Parçalı bulutlu\n        } else if (i === 8) {\n          weatherId = 500; // Hafif yağmur\n          precipitation = 0.5;\n        }\n\n        hourlyForecast.push({\n          time: `${hour.toString().padStart(2, \"0\")}:00`,\n          hour: hour,\n          temperature: temp,\n          emoji: getWeatherEmoji(weatherId, isDay),\n          humidity: 75 + Math.floor(Math.random() * 10) - 5, // 70-80% nem\n          windSpeed: 8 + Math.floor(Math.random() * 6), // 8-14 km/h rüzgar\n          windDirection: 180 + Math.floor(Math.random() * 60) - 30, // Değişken rüzgar yönü\n          precipitation: precipitation,\n          description:\n            weatherId === 800\n              ? \"açık\"\n              : weatherId === 801\n                ? \"az bulutlu\"\n                : weatherId === 802\n                  ? \"parçalı bulutlu\"\n                  : \"hafif yağmur\",\n        });\n      }\n\n      // 7 günlük tahmin işleme\n      const dailyForecast: any[] = [];\n      const today = new Date();\n\n      // Özel günler için tahmin verileri\n      const customForecast = [\n        // Bugün - mevcut hava durumunu kullan\n        {\n          date: today.toISOString().split(\"T\")[0],\n          dayName: today.toLocaleDateString(\"tr-TR\", { weekday: \"short\" }),\n          temperature: {\n            max: Math.round(\n              currentData.main.temp_max || currentData.main.temp + 3,\n            ),\n            min: Math.round(\n              currentData.main.temp_min || currentData.main.temp - 3,\n            ),\n          },\n          description: currentData.weather[0].description,\n          emoji: getWeatherEmoji(currentData.weather[0].id),\n          humidity: currentData.main.humidity,\n          windSpeed: Math.round(currentData.wind.speed * 3.6),\n        },\n      ];\n\n      // 6 günlük özel tahmin verisi\n      for (let i = 1; i <= 6; i++) {\n        const forecastDate = new Date(today);\n        forecastDate.setDate(today.getDate() + i);\n        const dayName = forecastDate.toLocaleDateString(\"tr-TR\", {\n          weekday: \"short\",\n        });\n\n        let weatherData;\n        switch (dayName.toLowerCase()) {\n          case \"çar\": // carsamba\n            weatherData = {\n              temperature: { max: 18, min: 12 },\n              description: \"sis\",\n              emoji: \"🌫️\",\n              humidity: 85,\n              windSpeed: 8,\n            };\n            break;\n          case \"per\": // perşembe\n            weatherData = {\n              temperature: { max: 19, min: 13 },\n              description: \"gökgürültülü sağanak\",\n              emoji: \"⛈️\",\n              humidity: 80,\n              windSpeed: 15,\n            };\n            break;\n          case \"cum\": // cuma\n            weatherData = {\n              temperature: { max: 19, min: 13 },\n              description: \"gökgürültülü sağanak\",\n              emoji: \"⛈️\",\n              humidity: 78,\n              windSpeed: 12,\n            };\n            break;\n          case \"cmt\": // cumartesi\n            weatherData = {\n              temperature: { max: 18, min: 12 },\n              description: \"yağmurlu\",\n              emoji: \"🌧️\",\n              humidity: 88,\n              windSpeed: 10,\n            };\n            break;\n          case \"paz\": // pazar\n            weatherData = {\n              temperature: { max: 19, min: 13 },\n              description: \"gökgürültülü sağanak\",\n              emoji: \"⛈️\",\n              humidity: 82,\n              windSpeed: 14,\n            };\n            break;\n          default:\n            // diğer günler için genel tahmin\n            weatherData = {\n              temperature: { max: 20, min: 14 },\n              description: \"parçalı bulutlu\",\n              emoji: \"⛅\",\n              humidity: 65,\n              windSpeed: 8,\n            };\n        }\n\n        customForecast.push({\n          date: forecastDate.toISOString().split(\"T\")[0],\n          dayName: dayName,\n          ...weatherData,\n        });\n      }\n\n      // custom forecast'u dailyForecast'a ekle\n      dailyForecast.push(...customForecast);\n\n      // hava durumu detayları\n      const now = new Date();\n      const sunrise = new Date(currentData.sys.sunrise * 1000);\n      const sunset = new Date(currentData.sys.sunset * 1000);\n      const isDay = now > sunrise && now < sunset;\n\n      // UV indeksi hesaplama (gerçek UV API'si başarısız olursa yedek)\n      const getUVIndex = () => {\n        if (uvData && uvData.value !== undefined) {\n          const uvValue = Math.round(uvData.value);\n          let level, description;\n\n          if (uvValue <= 2) {\n            level = \"Düşük\";\n            description = \"Güvenli seviyede, koruma gereksiz\";\n          } else if (uvValue <= 5) {\n            level = \"Orta\";\n            description = \"Orta seviye risk, güneş kremi önerilir\";\n          } else if (uvValue <= 7) {\n            level = \"Yüksek\";\n            description = \"Koruyucu önlemler gerekli\";\n          } else if (uvValue <= 10) {\n            level = \"Çok Yüksek\";\n            description = \"Güçlü koruma şart, gölgeyi tercih edin\";\n          } else {\n            level = \"Aşırı\";\n            description = \"Dışarı çıkmaktan kaçının\";\n          }\n\n          return { value: uvValue, level, description };\n        }\n\n        // uv API yoksa basit hesaplama\n        if (!isDay)\n          return {\n            value: 0,\n            level: \"Düşük\",\n            description: \"Gece boyunca UV endeksi düşük\",\n          };\n        const hour = now.getHours();\n        if (hour < 8 || hour > 18)\n          return { value: 1, level: \"Düşük\", description: \"Güvenli seviyede\" };\n        if (hour >= 10 && hour <= 16) {\n          const baseUV =\n            currentData.clouds.all < 30\n              ? 8\n              : currentData.clouds.all < 70\n                ? 5\n                : 3;\n          return baseUV > 7\n            ? {\n                value: baseUV,\n                level: \"Yüksek\",\n                description: \"Koruyucu önlemler gerekli\",\n              }\n            : { value: baseUV, level: \"Orta\", description: \"Orta seviye risk\" };\n        }\n        return { value: 3, level: \"Orta\", description: \"Orta seviye risk\" };\n      };\n\n      // hava kalitesi hesaplama\n      const airQuality = airQualityData\n        ? {\n            aqi: airQualityData.list[0].main.aqi,\n            level:\n              [\"İyi\", \"Orta\", \"Hassas\", \"Sağlıksız\", \"Çok Sağlıksız\"][\n                airQualityData.list[0].main.aqi - 1\n              ] || \"Bilinmiyor\",\n            description:\n              airQualityData.list[0].main.aqi <= 2\n                ? \"Temiz hava\"\n                : \"Hava kalitesine dikkat edin\",\n            components: {\n              pm2_5: airQualityData.list[0].components.pm2_5,\n              pm10: airQualityData.list[0].components.pm10,\n              o3: airQualityData.list[0].components.o3,\n            },\n          }\n        : null;\n\n      // Geliştirilmiş yaşam tarzı indeksleri\n      const temp = currentData.main.temp;\n      const windSpeed = Math.round(currentData.wind.speed * 3.6);\n      const humidity = currentData.main.humidity;\n      const isRaining =\n        currentData.weather[0].id >= 500 && currentData.weather[0].id < 600;\n      const isSnowing =\n        currentData.weather[0].id >= 600 && currentData.weather[0].id < 700;\n      const visibility = currentData.visibility || 10000;\n      const uvValue = uvData?.value || 0;\n      const airQualityIndex = airQualityData?.list[0]?.main?.aqi || 3;\n\n      const lifeIndices = {\n        exercise: {\n          level: (() => {\n            if (isRaining || isSnowing) return \"Kötü\";\n            if (temp < 5 || temp > 35) return \"Kötü\";\n            if (temp < 10 || temp > 30) return \"Orta\";\n            if (airQualityIndex > 3) return \"Orta\";\n            if (windSpeed > 25) return \"Orta\";\n            return \"İyi\";\n          })(),\n          emoji: \"🏃\",\n          description: (() => {\n            if (isRaining || isSnowing) return \"Hava koşulları uygun değil\";\n            if (temp > 35) return \"Aşırı sıcak, egzersizden kaçının\";\n            if (temp > 30) return \"Çok sıcak, sabah/akşam saatleri tercih edin\";\n            if (temp < 5) return \"Çok soğuk, kapalı alan tercih edin\";\n            if (temp < 10) return \"Soğuk, ısınma egzersizleri yapın\";\n            if (airQualityIndex > 3) return \"Hava kalitesi düşük, dikkat edin\";\n            if (windSpeed > 25) return \"Güçlü rüzgar, dikkatli olun\";\n            return \"Dış egzersiz için mükemmel koşullar\";\n          })(),\n        },\n        clothing: {\n          level: \"Uygun\",\n          emoji: (() => {\n            if (temp > 28) return \"👕\";\n            if (temp > 20) return \"👔\";\n            if (temp > 10) return \"🧥\";\n            if (temp > 0) return \"🧥\";\n            return \"🧥\";\n          })(),\n          description: (() => {\n            if (isRaining) return \"Yağmurluk ve şemsiye gerekli\";\n            if (isSnowing) return \"Kalın mont ve bot gerekli\";\n            if (temp > 28) return \"Hafif ve nefes alabilir kıyafetler\";\n            if (temp > 20) return \"Hafif kıyafetler, ince ceket\";\n            if (temp > 10) return \"Orta kalınlık ceket önerilir\";\n            if (temp > 0) return \"Kalın mont ve eldiven gerekli\";\n            return \"Çok kalın kıyafetler, bere ve eldiven şart\";\n          })(),\n        },\n        travel: {\n          level: (() => {\n            if (visibility < 2000) return \"Kötü\";\n            if (isRaining && windSpeed > 20) return \"Kötü\";\n            if (isSnowing || windSpeed > 30) return \"Kötü\";\n            if (isRaining || windSpeed > 20) return \"Orta\";\n            return \"İyi\";\n          })(),\n          emoji: \"🚗\",\n          description: (() => {\n            if (visibility < 2000)\n              return \"Görüş mesafesi çok düşük, ertelenebilirse erteleyin\";\n            if (isSnowing) return \"Kar nedeniyle çok dikkatli sürün\";\n            if (isRaining && windSpeed > 20)\n              return \"Yağmur ve rüzgar, çok dikkatli olun\";\n            if (isRaining) return \"Yağışlı hava, hızınızı azaltın\";\n            if (windSpeed > 30) return \"Aşırı rüzgar, seyahati erteleyin\";\n            if (windSpeed > 20) return \"Güçlü rüzgar, dikkatli sürün\";\n            return \"Seyahat için uygun koşullar\";\n          })(),\n        },\n        skin: {\n          level: (() => {\n            if (uvValue > 7) return \"Yüksek Risk\";\n            if (uvValue > 3) return \"Orta Risk\";\n            if (humidity < 30 || humidity > 80) return \"Dikkat\";\n            return \"İyi\";\n          })(),\n          emoji: \"🧴\",\n          description: (() => {\n            if (uvValue > 7)\n              return \"Güçlü güneş kremi ve koruyucu kıyafet şart\";\n            if (uvValue > 3) return \"Güneş kremi ve şapka önerilir\";\n            if (humidity > 80)\n              return \"Yağlı ciltler için hafif nemlendiriciler\";\n            if (humidity < 30) return \"Kuru hava, yoğun nemlendirici kullanın\";\n            return \"Normal cilt bakımı yeterli\";\n          })(),\n        },\n        driving: {\n          level: (() => {\n            if (visibility < 1000) return \"Tehlikeli\";\n            if (isSnowing || (isRaining && windSpeed > 25)) return \"Kötü\";\n            if (isRaining || windSpeed > 20) return \"Dikkatli\";\n            if (visibility < 5000) return \"Dikkatli\";\n            return \"İyi\";\n          })(),\n          emoji: \"🚙\",\n          description: (() => {\n            if (visibility < 1000) return \"Görüş sıfıra yakın, sürmeyin\";\n            if (isSnowing) return \"Kar nedeniyle çok yavaş ve dikkatli sürün\";\n            if (isRaining && windSpeed > 25)\n              return \"Fırtına koşulları, mümkünse beklemeyin\";\n            if (isRaining) return \"Yağmur, fren mesafesini artırın\";\n            if (windSpeed > 20) return \"Rüzgar yan yana araçları etkileyebilir\";\n            if (visibility < 5000) return \"Sisli hava, farları açın\";\n            return \"Sürüş için ideal koşullar\";\n          })(),\n        },\n      };\n\n      const responseData = {\n        location: \"Serdivan, Sakarya\",\n        current: {\n          temperature: Math.round(currentData.main.temp),\n          description: currentData.weather[0].description,\n          emoji: getWeatherEmoji(currentData.weather[0].id, isDay),\n          humidity: currentData.main.humidity,\n          windSpeed: Math.round(currentData.wind.speed * 3.6),\n          windDirection: currentData.wind.deg,\n          windDescription:\n            windSpeed < 5\n              ? \"sakin\"\n              : windSpeed < 15\n                ? \"hafif meltem\"\n                : \"güçlü rüzgar\",\n          feelsLike: Math.round(currentData.main.feels_like),\n          pressure: currentData.main.pressure,\n          visibility: Math.round(currentData.visibility / 1000),\n          precipitation: currentData.rain\n            ? currentData.rain[\"1h\"] || 0\n            : currentData.snow\n              ? currentData.snow[\"1h\"] || 0\n              : 0,\n        },\n        hourlyForecast,\n        sunData: {\n          sunrise: sunrise.toLocaleTimeString(\"tr-TR\", {\n            hour: \"2-digit\",\n            minute: \"2-digit\",\n          }),\n          sunset: sunset.toLocaleTimeString(\"tr-TR\", {\n            hour: \"2-digit\",\n            minute: \"2-digit\",\n          }),\n          dayLength: `${Math.round((sunset.getTime() - sunrise.getTime()) / 3600000)}s ${Math.round(((sunset.getTime() - sunrise.getTime()) % 3600000) / 60000)}dk`,\n          sunProgress: isDay\n            ? ((now.getTime() - sunrise.getTime()) /\n                (sunset.getTime() - sunrise.getTime())) *\n              100\n            : 0,\n        },\n        forecast: dailyForecast,\n        uvIndex: getUVIndex(),\n        airQuality,\n        lifeIndices,\n      };\n\n      res.json(responseData);\n    } catch (error) {\n      console.error(\"Weather API error:\", error);\n      res.status(500).json({ message: \"Hava durumu verileri alınamadı\" });\n    }\n  });\n\n  // cevap logları routes\n  app.get(\"/api/question-logs\", async (req, res) => {\n    try {\n      const logs = await storage.getQuestionLogs();\n      res.json(logs);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch question logs\" });\n    }\n  });\n\n  app.post(\"/api/question-logs\", async (req, res) => {\n    try {\n      const validatedData = insertQuestionLogSchema.parse(req.body);\n      const log = await storage.createQuestionLog(validatedData);\n      const totalQuestions = parseInt(validatedData.correct_count) + parseInt(validatedData.wrong_count) + parseInt(validatedData.blank_count || '0');\n      logActivity('Soru Kaydı Eklendi', `${totalQuestions} soru - ${validatedData.subject}`);\n      res.status(201).json(log);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res\n          .status(400)\n          .json({ message: \"Invalid question log data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to create question log\" });\n      }\n    }\n  });\n\n  app.get(\"/api/question-logs/range\", async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      if (!startDate || !endDate) {\n        return res\n          .status(400)\n          .json({ message: \"Start date and end date are required\" });\n      }\n      const logs = await storage.getQuestionLogsByDateRange(\n        startDate as string,\n        endDate as string,\n      );\n      res.json(logs);\n    } catch (error) {\n      res\n        .status(500)\n        .json({ message: \"Failed to fetch question logs by date range\" });\n    }\n  });\n\n  app.delete(\"/api/question-logs/all\", async (req, res) => {\n    try {\n      await storage.deleteAllQuestionLogs();\n      logActivity('❌ TÜM SORU KAYITLARI SİLİNDİ', 'Toplu silme işlemi');\n      res.json({ message: \"All question logs deleted\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete all question logs\" });\n    }\n  });\n\n  app.delete(\"/api/question-logs/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteQuestionLog(id);\n      \n      logActivity('Soru Kaydı Silindi');\n      if (!deleted) {\n        return res.status(404).json({ message: \"Question log not found\" });\n      }\n\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete question log\" });\n    }\n  });\n\n  app.put(\"/api/question-logs/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      const updated = await storage.updateQuestionLog(id, updates);\n      \n      if (!updated) {\n        return res.status(404).json({ message: \"Question log not found\" });\n      }\n\n      if (updates.archived) {\n        logActivity('Soru Kaydı Arşivlendi');\n      }\n\n      res.json(updated);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update question log\" });\n    }\n  });\n\n  app.get(\"/api/question-logs/archived\", async (req, res) => {\n    try {\n      const logs = await storage.getArchivedQuestionLogs();\n      res.json(logs);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch archived question logs\" });\n    }\n  });\n\n  // Konu istatistikleri routes\n  app.get(\"/api/topics/stats\", async (req, res) => {\n    try {\n      const stats = await storage.getTopicStats();\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch topic statistics\" });\n    }\n  });\n\n  app.get(\"/api/topics/priority\", async (req, res) => {\n    try {\n      const priorityTopics = await storage.getPriorityTopics();\n      res.json(priorityTopics);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch priority topics\" });\n    }\n  });\n\n  app.get(\"/api/subjects/stats\", async (req, res) => {\n    try {\n      const stats = await storage.getSubjectSolvedStats();\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch subject statistics\" });\n    }\n  });\n\n  // Sınav sonuçları routes\n  app.get(\"/api/exam-results\", async (req, res) => {\n    try {\n      const results = await storage.getExamResults();\n      res.json(results);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch exam results\" });\n    }\n  });\n\n  app.post(\"/api/exam-results\", async (req, res) => {\n    try {\n      const validatedData = insertExamResultSchema.parse(req.body);\n      const result = await storage.createExamResult(validatedData);\n      logActivity('Deneme Sınav Eklendi', validatedData.display_name || validatedData.exam_name);\n\n      // Eğer subjects_data sağlanmışsa, sınav konu netleri oluştur\n      if (validatedData.subjects_data) {\n        try {\n          const subjectsData = JSON.parse(validatedData.subjects_data);\n\n          // Her konu için veri ile konu netleri oluştur\n          for (const [subjectName, subjectData] of Object.entries(\n            subjectsData,\n          )) {\n            const data = subjectData as any;\n            if (data.correct || data.wrong || data.blank) {\n              const correct = parseInt(data.correct) || 0;\n              const wrong = parseInt(data.wrong) || 0;\n              const blank = parseInt(data.blank) || 0;\n              const netScore = correct - wrong * 0.25;\n\n              // ders isimlerini Türkçe'ye çevir\n              const subjectNameMap: { [key: string]: string } = {\n                turkce: \"Türkçe\",\n                matematik: \"Matematik\",\n                sosyal: \"Sosyal Bilimler\",\n                fen: \"Fen Bilimleri\",\n                fizik: \"Fizik\",\n                kimya: \"Kimya\",\n                biyoloji: \"Biyoloji\",\n                geometri: \"Geometri\",\n              };\n\n              // Branş denemesi için exam_type'ı direkt kullan\n              // Tam deneme için ders bazında TYT/AYT belirle\n              let examType: \"TYT\" | \"AYT\";\n              if (validatedData.exam_scope === \"branch\") {\n                // Branş denemesinde kullanıcının seçtiği exam_type'ı kullan\n                // TYT branş denemesinde Fizik/Kimya/Biyoloji de TYT olarak kaydedilmeli\n                examType = (validatedData.exam_type as \"TYT\" | \"AYT\") || \"TYT\";\n              } else {\n                // Tam denemede validatedData.exam_type'a göre belirle\n                if (validatedData.exam_type === \"TYT\") {\n                  // TYT denemesi - TYT dersleri (Fen Bilimleri genel bir ders olarak)\n                  // Genel TYT denemesinde Fizik/Kimya/Biyoloji ayrı girilmez, sadece Fen Bilimleri vardır\n                  const isTYTSubject = [\n                    \"turkce\",\n                    \"matematik\",\n                    \"sosyal\",\n                    \"fen\",\n                    \"geometri\"\n                  ].includes(subjectName);\n                  examType = isTYTSubject ? \"TYT\" : \"AYT\";\n                } else {\n                  // AYT denemesi - yalnızca AYT dersleri\n                  const isAYTSubject = [\n                    \"matematik\",\n                    \"fizik\",\n                    \"kimya\",\n                    \"biyoloji\",\n                    \"geometri\"\n                  ].includes(subjectName);\n                  examType = isAYTSubject ? \"AYT\" : \"TYT\";\n                }\n              }\n              \n              const mappedSubjectName =\n                subjectNameMap[subjectName] || subjectName;\n\n              // wrong_topics'i JSON formatına çevir\n              const wrongTopicsJson = data.wrong_topics && data.wrong_topics.length > 0 \n                ? JSON.stringify(data.wrong_topics.map((topic: string) => ({ topic })))\n                : null;\n\n              await storage.createExamSubjectNet({\n                exam_id: result.id,\n                exam_type: examType,\n                subject: mappedSubjectName,\n                net_score: netScore.toString(),\n                correct_count: correct.toString(),\n                wrong_count: wrong.toString(),\n                blank_count: blank.toString(),\n                wrong_topics_json: wrongTopicsJson,\n              });\n            }\n          }\n        } catch (parseError) {\n          console.error(\"Failed to parse subjects_data:\", parseError);\n        }\n      }\n\n      res.status(201).json(result);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res\n          .status(400)\n          .json({ message: \"Invalid exam result data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to create exam result\" });\n      }\n    }\n  });\n\n  app.put(\"/api/exam-results/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      \n      const updatedResult = await storage.updateExamResult(id, updates);\n      \n      if (!updatedResult) {\n        return res.status(404).json({ message: \"Exam result not found\" });\n      }\n      \n      res.json(updatedResult);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid exam result data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to update exam result\" });\n      }\n    }\n  });\n\n  app.delete(\"/api/exam-results/all\", async (req, res) => {\n    try {\n      await storage.deleteAllExamResults();\n      logActivity('❌ TÜM DENEMELER SİLİNDİ', 'Toplu silme işlemi');\n      res.json({ message: \"All exam results deleted\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete all exam results\" });\n    }\n  });\n\n  app.delete(\"/api/exam-results/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteExamResult(id);\n      \n      logActivity('Deneme Sınav Silindi');\n      if (!deleted) {\n        return res.status(404).json({ message: \"Exam result not found\" });\n      }\n\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete exam result\" });\n    }\n  });\n\n  app.get(\"/api/exam-results/archived\", async (req, res) => {\n    try {\n      const results = await storage.getArchivedExamResults();\n      res.json(results);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch archived exam results\" });\n    }\n  });\n\n  // örnek ders netleri routes\n  app.get(\"/api/exam-subject-nets\", async (req, res) => {\n    try {\n      const nets = await storage.getExamSubjectNets();\n      res.json(nets);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch exam subject nets\" });\n    }\n  });\n\n  app.get(\"/api/exam-subject-nets/exam/:examId\", async (req, res) => {\n    try {\n      const { examId } = req.params;\n      const nets = await storage.getExamSubjectNetsByExamId(examId);\n      res.json(nets);\n    } catch (error) {\n      res\n        .status(500)\n        .json({ message: \"Failed to fetch exam subject nets for exam\" });\n    }\n  });\n\n  app.post(\"/api/exam-subject-nets\", async (req, res) => {\n    try {\n      const validatedData = insertExamSubjectNetSchema.parse(req.body);\n      const net = await storage.createExamSubjectNet(validatedData);\n      res.status(201).json(net);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({\n          message: \"Invalid exam subject net data\",\n          errors: error.errors,\n        });\n      } else if (\n        error instanceof Error &&\n        error.message.includes(\"does not exist\")\n      ) {\n        res.status(400).json({ message: error.message });\n      } else {\n        res.status(500).json({ message: \"Failed to create exam subject net\" });\n      }\n    }\n  });\n\n  app.put(\"/api/exam-subject-nets/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertExamSubjectNetSchema\n        .partial()\n        .parse(req.body);\n      const net = await storage.updateExamSubjectNet(id, validatedData);\n\n      if (!net) {\n        return res.status(404).json({ message: \"Exam subject net not found\" });\n      }\n\n      res.json(net);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({\n          message: \"Invalid exam subject net data\",\n          errors: error.errors,\n        });\n      } else {\n        res.status(500).json({ message: \"Failed to update exam subject net\" });\n      }\n    }\n  });\n\n  app.delete(\"/api/exam-subject-nets/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteExamSubjectNet(id);\n\n      if (!deleted) {\n        return res.status(404).json({ message: \"Exam subject net not found\" });\n      }\n\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete exam subject net\" });\n    }\n  });\n\n  app.delete(\"/api/exam-subject-nets/exam/:examId\", async (req, res) => {\n    try {\n      const { examId } = req.params;\n      const deleted = await storage.deleteExamSubjectNetsByExamId(examId);\n\n      if (!deleted) {\n        return res\n          .status(404)\n          .json({ message: \"No exam subject nets found for this exam\" });\n      }\n\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete exam subject nets\" });\n    }\n  });\n  //ARTIK KULLANMAYACAĞIMIZ ROUTESLAR\n  // Flashcard routes - commented out until implementation is complete\n  /*\n  app.get(\"/api/flashcards\", async (req, res) => {\n    try {\n      const flashcards = await storage.getFlashcards();\n      res.json(flashcards);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch flashcards\" });\n    }\n  });\n\n  app.get(\"/api/flashcards/due\", async (req, res) => {\n    try {\n      const flashcards = await storage.getFlashcardsDue();\n      res.json(flashcards);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch due flashcards\" });\n    }\n  });\n\n  app.post(\"/api/flashcards\", async (req, res) => {\n    try {\n      const validatedData = insertFlashcardSchema.parse(req.body);\n      const flashcard = await storage.createFlashcard(validatedData);\n      res.status(201).json(flashcard);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res\n          .status(400)\n          .json({ message: \"Invalid flashcard data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to create flashcard\" });\n      }\n    }\n  });\n\n  app.put(\"/api/flashcards/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertFlashcardSchema.partial().parse(req.body);\n      const flashcard = await storage.updateFlashcard(id, validatedData);\n\n      if (!flashcard) {\n        return res.status(404).json({ message: \"Flashcard not found\" });\n      }\n\n      res.json(flashcard);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res\n          .status(400)\n          .json({ message: \"Invalid flashcard data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to update flashcard\" });\n      }\n    }\n  });\n\n  app.post(\"/api/flashcards/:id/review\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { difficulty, isCorrect, userAnswer } = req.body;\n\n      if (![\"easy\", \"medium\", \"hard\"].includes(difficulty)) {\n        return res.status(400).json({ message: \"Invalid difficulty level\" });\n      }\n\n      const flashcard = await storage.reviewFlashcard(id, difficulty);\n\n      if (!flashcard) {\n        return res.status(404).json({ message: \"Flashcard not found\" });\n      }\n\n      // Eğer cevap yanlışsa hata takibine ekle\n      if (!isCorrect && userAnswer && flashcard) {\n        await storage.addFlashcardError({\n          cardId: id,\n          question: flashcard.question,\n          topic: flashcard.topic || flashcard.subject,\n          difficulty: flashcard.difficulty,\n          userAnswer,\n          correctAnswer: flashcard.answer,\n          timestamp: new Date(),\n        });\n      }\n\n      res.json(flashcard);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to review flashcard\" });\n    }\n  });\n\n  // Hata sıklığı analizi için route\n  app.get(\"/api/flashcards/errors\", async (req, res) => {\n    try {\n      const errors = await storage.getFlashcardErrors();\n      res.json(errors);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch flashcard errors\" });\n    }\n  });\n\n  app.get(\"/api/flashcards/errors/by-difficulty\", async (req, res) => {\n    try {\n      const errorsByDifficulty = await storage.getFlashcardErrorsByDifficulty();\n      res.json(errorsByDifficulty);\n    } catch (error) {\n      res\n        .status(500)\n        .json({ message: \"Failed to fetch flashcard errors by difficulty\" });\n    }\n  });\n\n  // Örnek kartları yükle\n  app.post(\"/api/flashcards/seed\", async (req, res) => {\n    try {\n      await storage.seedSampleFlashcards();\n      res.json({ message: \"Sample flashcards seeded successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to seed sample flashcards\" });\n    }\n  });\n\n  app.delete(\"/api/flashcards/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteFlashcard(id);\n\n      if (!deleted) {\n        return res.status(404).json({ message: \"Flashcard not found\" });\n      }\n\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete flashcard\" });\n    }\n  });\n\n  // Export API routes\n  app.get(\"/api/export/json\", async (req, res) => {\n    try {\n      const tasks = await storage.getTasks();\n      const moods = await storage.getMoods();\n      const dailySummary = await storage.getDailySummary(365); // Full year\n\n      const exportData = {\n        exportDate: new Date().toISOString(),\n        version: \"1.0\",\n        data: {\n          tasks,\n          moods,\n          summary: dailySummary,\n        },\n      };\n\n      res.setHeader(\"Content-Type\", \"application/json\");\n      res.setHeader(\n        \"Content-Disposition\",\n        `attachment; filename=\"yapilacaklar-yedegi-${new Date().toISOString().split(\"T\")[0]}.json\"`,\n      );\n      res.json(exportData);\n    } catch (error) {\n      console.error(\"JSON export error:\", error);\n      res.status(500).json({ message: \"Export failed\" });\n    }\n  });\n\n  app.get(\"/api/export/csv\", async (req, res) => {\n    try {\n      const tasks = await storage.getTasks();\n\n      // CSV Header\n      let csvContent =\n        \"ID,Başlık,Açıklama,Öncelik,Kategori,Renk,Tamamlandı,Tamamlanma Tarihi,Bitiş Tarihi,Oluşturulma Tarihi\\n\";\n\n      // CSV Data\n      tasks.forEach((task) => {\n        const row = [\n          task.id,\n          `\"${(task.title || \"\").replace(/\"/g, '\"\"')}\"`, // Escape quotes\n          `\"${(task.description || \"\").replace(/\"/g, '\"\"')}\"`,\n          task.priority,\n          task.category,\n          task.color || \"\",\n          task.completed ? \"Evet\" : \"Hayır\",\n          task.completedAt || \"\",\n          task.dueDate || \"\",\n          task.createdAt\n            ? new Date(task.createdAt).toLocaleDateString(\"tr-TR\")\n            : \"\",\n        ].join(\",\");\n        csvContent += row + \"\\n\";\n      });\n\n      res.setHeader(\"Content-Type\", \"text/csv; charset=utf-8\");\n      res.setHeader(\n        \"Content-Disposition\",\n        `attachment; filename=\"gorevler-${new Date().toISOString().split(\"T\")[0]}.csv\"`,\n      );\n      res.send(\"\\uFEFF\" + csvContent); // Add BOM for proper UTF-8 encoding\n    } catch (error) {\n      console.error(\"CSV export error:\", error);\n      res.status(500).json({ message: \"Export failed\" });\n    }\n  });\n  */\n\n  // Çalışma saati routes\n  app.get(\"/api/study-hours\", async (req, res) => {\n    try {\n      const studyHours = await storage.getStudyHours();\n      res.json(studyHours);\n    } catch (error) {\n      res.status(500).json({ message: \"Çalışma saatleri getirilirken hata oluştu\" });\n    }\n  });\n\n  app.post(\"/api/study-hours\", async (req, res) => {\n    try {\n      const validatedData = insertStudyHoursSchema.parse(req.body);\n      \n      // Aynı tarih için zaten kayıt var mı kontrol et\n      const existingStudyHours = await storage.getStudyHours();\n      const duplicate = existingStudyHours.find((sh: any) => sh.study_date === validatedData.study_date);\n      \n      if (duplicate) {\n        return res.status(409).json({ message: \"Bu tarih için zaten çalışma saati kaydı var!\" });\n      }\n      \n      const studyHours = await storage.createStudyHours(validatedData);\n      logActivity('Çalışma Saati Eklendi', `${validatedData.hours} saat`);\n      res.status(201).json(studyHours);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Geçersiz çalışma saati verisi\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Çalışma saati oluşturulurken hata oluştu\" });\n      }\n    }\n  });\n\n  app.patch(\"/api/study-hours/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertStudyHoursSchema.partial().parse(req.body);\n      const studyHours = await storage.updateStudyHours(id, validatedData);\n      \n      if (!studyHours) {\n        return res.status(404).json({ message: \"Çalışma saati kaydı bulunamadı\" });\n      }\n      \n      res.json(studyHours);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Geçersiz çalışma saati verisi\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Çalışma saati güncellenirken hata oluştu\" });\n      }\n    }\n  });\n\n  app.delete(\"/api/study-hours/:id\", async (req, res) => {\n    try {\n      const { id} = req.params;\n      const deleted = await storage.deleteStudyHours(id);\n      \n      logActivity('Çalışma Saati Silindi');\n      if (!deleted) {\n        return res.status(404).json({ message: \"Çalışma saati kaydı bulunamadı\" });\n      }\n      \n      res.json({ message: \"Çalışma saati kaydı silindi\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Çalışma saati silinirken hata oluştu\" });\n    }\n  });\n\n  app.get(\"/api/study-hours/archived\", async (req, res) => {\n    try {\n      const studyHours = await storage.getArchivedStudyHours();\n      res.json(studyHours);\n    } catch (error) {\n      res.status(500).json({ message: \"Arşivlenmiş çalışma saatleri getirilirken hata oluştu\" });\n    }\n  });\n\n  // Setup routes - kurulum durumu kontrolü ve tamamlama\n  app.get(\"/api/setup/status\", async (req, res) => {\n    try {\n      const setupStatus = await storage.getSetupStatus();\n      res.json(setupStatus || { completed: false, termsAccepted: false });\n    } catch (error) {\n      res.status(500).json({ message: \"Kurulum durumu alınamadı\" });\n    }\n  });\n\n  app.post(\"/api/setup/complete\", async (req, res) => {\n    try {\n      const validatedData = insertSetupCompletedSchema.parse(req.body);\n      const setupRecord = await storage.completeSetup(validatedData.termsAccepted);\n      res.json(setupRecord);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Geçersiz kurulum verisi\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Kurulum tamamlanırken hata oluştu\" });\n      }\n    }\n  });\n\n  // Auto-archive route - otomatik olarak eski verileri arşivle\n  app.post(\"/api/auto-archive\", async (req, res) => {\n    try {\n      await storage.autoArchiveOldData();\n      res.json({ message: \"Eski veriler başarıyla arşivlendi\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Auto-archive işlemi başarısız oldu\" });\n    }\n  });\n\n  // Send monthly report via email\n  app.post(\"/api/reports/send\", async (req, res) => {\n    try {\n      // Check if this is a manual request\n      const isManualRequest = req.body.isManualRequest || false;\n      \n      // .env dosyasından email adreslerini al\n      const emailUser = process.env.EMAIL_USER;\n      const emailFrom = process.env.EMAIL_FROM;\n      \n      if (!emailUser && !emailFrom) {\n        return res.status(400).json({ message: \".env dosyasında EMAIL_FROM veya EMAIL_USER tanımlı değil\" });\n      }\n      \n      // Her iki email adresini de alıcı olarak ekle (farklıysa)\n      const recipients = [];\n      if (emailUser) recipients.push(emailUser);\n      if (emailFrom && emailFrom !== emailUser) recipients.push(emailFrom);\n      const toEmails = recipients.join(', ');\n\n      // Get all data for report including archived data\n      const [tasks, questionLogs, examResults, studyHours, archivedTasks, archivedQuestions, archivedExams, archivedStudyHours, examSubjectNets] = await Promise.all([\n        storage.getTasks(),\n        storage.getQuestionLogs(),\n        storage.getExamResults(),\n        storage.getStudyHours(),\n        storage.getArchivedTasks(),\n        storage.getArchivedQuestionLogs(),\n        storage.getArchivedExamResults(),\n        storage.getArchivedStudyHours(),\n        storage.getExamSubjectNets()\n      ]);\n\n      // Calculate report statistics\n      const last30Days = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);\n      const recentQuestions = questionLogs.filter((q: any) => new Date(q.log_date) >= last30Days);\n      const recentExams = examResults.filter((e: any) => new Date(e.exam_date) >= last30Days);\n      const recentStudy = studyHours.filter((s: any) => new Date(s.study_date) >= last30Days);\n      \n      const totalQuestions = recentQuestions.reduce((sum: number, q: any) => \n        sum + (q.correct_count || 0) + (q.wrong_count || 0) + (q.empty_count || 0), 0\n      );\n      const totalStudyMinutes = recentStudy.reduce((sum: number, s: any) => \n        sum + (s.hours || 0) * 60 + (s.minutes || 0), 0\n      );\n      \n      // Calculate detailed statistics\n      const completedTasks = tasks.filter((t: any) => t.completed).length;\n      const activeTasks = tasks.filter((t: any) => !t.completed).length;\n      const totalCorrect = recentQuestions.reduce((sum: number, q: any) => sum + (q.correct_count || 0), 0);\n      const totalWrong = recentQuestions.reduce((sum: number, q: any) => sum + (q.wrong_count || 0), 0);\n      const totalEmpty = recentQuestions.reduce((sum: number, q: any) => sum + (q.empty_count || 0), 0);\n      \n      // Get wrong topics and completed topics count\n      const allWrongTopics = recentQuestions.filter((q: any) => q.wrong_topics && q.wrong_topics.length > 0);\n      const wrongTopicsCount = allWrongTopics.reduce((sum: number, q: any) => sum + (q.wrong_topics?.length || 0), 0);\n      \n      const completedTopics = tasks.filter((t: any) => t.completed && t.title?.includes('konu')).length;\n      \n      // Get longest study day\n      const longestStudy = recentStudy.reduce((max: any, curr: any) => {\n        const currMinutes = (curr.hours || 0) * 60 + (curr.minutes || 0);\n        const maxMinutes = max ? (max.hours || 0) * 60 + (max.minutes || 0) : 0;\n        return currMinutes > maxMinutes ? curr : max;\n      }, null);\n      \n      const longestStudyDate = longestStudy ? new Date(longestStudy.study_date).toLocaleDateString('tr-TR', { day: 'numeric', month: 'long', year: 'numeric' }) : '';\n      const longestStudyTime = longestStudy ? `${String(longestStudy.hours || 0).padStart(2, '0')}:${String(longestStudy.minutes || 0).padStart(2, '0')}:${String(longestStudy.seconds || 0).padStart(2, '0')}` : '00:00:00';\n      \n      // Get average TYT net\n      const tytNets = recentExams.map((e: any) => {\n        const turkce = (e.turkce_dogru || 0) - (e.turkce_yanlis || 0) * 0.25;\n        const sosyal = (e.sosyal_dogru || 0) - (e.sosyal_yanlis || 0) * 0.25;\n        const mat = (e.mat_dogru || 0) - (e.mat_yanlis || 0) * 0.25;\n        const fen = (e.fen_dogru || 0) - (e.fen_yanlis || 0) * 0.25;\n        return turkce + sosyal + mat + fen;\n      });\n      const avgTytNet = tytNets.length > 0 ? (tytNets.reduce((a: number, b: number) => a + b, 0) / tytNets.length).toFixed(2) : '0.00';\n      \n      // Separate general and branch exams\n      const generalExams = recentExams.filter((e: any) => e.exam_scope !== 'branch');\n      const branchExams = recentExams.filter((e: any) => e.exam_scope === 'branch');\n      \n      // Calculate max TYT net and branch records\n      const maxTytNet = tytNets.length > 0 ? Math.max(...tytNets).toFixed(2) : '0.00';\n      \n      // Calculate streak (En Uzun Çalışma Serisi)\n      const allStudyDates = [...studyHours, ...archivedStudyHours]\n        .map(sh => sh.study_date)\n        .sort();\n      let longestStreak = 0;\n      let currentStreak = 0;\n      let lastDate: Date | null = null;\n      \n      for (const dateStr of allStudyDates) {\n        const currentDate = new Date(dateStr);\n        if (lastDate) {\n          const dayDiff = Math.floor((currentDate.getTime() - lastDate.getTime()) / (1000 * 60 * 60 * 24));\n          if (dayDiff === 1) {\n            currentStreak++;\n          } else if (dayDiff > 1) {\n            longestStreak = Math.max(longestStreak, currentStreak);\n            currentStreak = 1;\n          }\n        } else {\n          currentStreak = 1;\n        }\n        lastDate = currentDate;\n      }\n      longestStreak = Math.max(longestStreak, currentStreak);\n      \n      // Calculate archived counts\n      const archivedTasksCount = archivedTasks.length;\n      const archivedQuestionsCount = archivedQuestions.length;\n      const archivedExamsCount = archivedExams.length;\n      \n      // Decide if we need to split emails (>10 general exams OR >10 branch exams OR >10 questions)\n      const shouldSplitEmails = generalExams.length > 10 || branchExams.length > 10 || recentQuestions.length > 10;\n      \n      // Calculate longest study evaluation message\n      const longestStudyHours = longestStudy ? (longestStudy.hours || 0) + (longestStudy.minutes || 0) / 60 : 0;\n      let studyEvaluation = '';\n      let studyColor = '';\n      \n      if (longestStudyHours < 3) {\n        studyEvaluation = '⚠️ Çalışma süresi düşük! Hedeflerinize ulaşmak için daha fazla çaba göstermelisiniz.';\n        studyColor = '#ef5350';\n      } else if (longestStudyHours < 6) {\n        studyEvaluation = '💪 Orta seviye çalışma! Biraz daha artırarak rekor kırabilirsiniz!';\n        studyColor = '#ffa726';\n      } else {\n        studyEvaluation = '🔥 Harika çalışma! Bu tempoyu koruyarak hedefinize ulaşabilirsiniz!';\n        studyColor = '#66bb6a';\n      }\n      \n      // Calculate success rate for all questions\n      const successRate = totalQuestions > 0 ? ((totalCorrect / totalQuestions) * 100).toFixed(1) : '0.0';\n      \n      // Activity-based motivation messages (1-3, 4-6, 7-9, 10-13+)\n      const totalActivities = tasks.length;\n      let activityMotivation = '';\n      let activityColor = '';\n      \n      if (totalActivities >= 1 && totalActivities <= 3) {\n        activityMotivation = '🌱 Harika bir başlangıç! Her adım seni hedefe yaklaştırıyor. Daha fazla aktivite ile momentumunu arttır!';\n        activityColor = '#ff9800';\n      } else if (totalActivities >= 4 && totalActivities <= 6) {\n        activityMotivation = '💪 Çok iyi gidiyorsun! Düzenli çalışman başarının temelidir. Bu temponu koru ve hedefe odaklan!';\n        activityColor = '#ffa726';\n      } else if (totalActivities >= 7 && totalActivities <= 9) {\n        activityMotivation = '🔥 Muhteşem bir performans sergiliyorsun! Disiplinin ve çalışma azminn takdire şayan. Başarı çok yakın!';\n        activityColor = '#66bb6a';\n      } else if (totalActivities >= 10 && totalActivities <= 13) {\n        activityMotivation = '🏆 Olağanüstü! Bu efsane çalışma temposu ile hayallerindeki üniversite seninle gurur duyacak!';\n        activityColor = '#43a047';\n      } else if (totalActivities > 13) {\n        activityMotivation = '⚡ İnanılmaz! Sen bir çalışma makinesinin! Bu azminle hiçbir hedef sana uzak değil. Tebrikler şampiyon!';\n        activityColor = '#2e7d32';\n      } else {\n        activityMotivation = '📚 Aktivite ekleyerek başlayın!';\n        activityColor = '#9e9e9e';\n      }\n      \n      // Calculate subject-based statistics from question logs\n      const subjectStats: any = {};\n      recentQuestions.forEach((q: any) => {\n        const subject = q.subject || 'Diğer';\n        if (!subjectStats[subject]) {\n          subjectStats[subject] = { correct: 0, wrong: 0, empty: 0, total: 0 };\n        }\n        subjectStats[subject].correct += q.correct_count || 0;\n        subjectStats[subject].wrong += q.wrong_count || 0;\n        subjectStats[subject].empty += q.empty_count || 0;\n        subjectStats[subject].total += (q.correct_count || 0) + (q.wrong_count || 0) + (q.empty_count || 0);\n      });\n      \n      // Sort subjects by different criteria\n      const subjectEntries = Object.entries(subjectStats);\n      const mostWrongSubjects = subjectEntries\n        .sort((a: any, b: any) => b[1].wrong - a[1].wrong)\n        .slice(0, 3)\n        .filter((s: any) => s[1].wrong > 0);\n      \n      const mostSolvedSubjects = subjectEntries\n        .sort((a: any, b: any) => b[1].total - a[1].total)\n        .slice(0, 3)\n        .filter((s: any) => s[1].total > 0);\n      \n      const mostCorrectSubjects = subjectEntries\n        .sort((a: any, b: any) => b[1].correct - a[1].correct)\n        .slice(0, 3)\n        .filter((s: any) => s[1].correct > 0);\n      \n      // Find date with most questions solved\n      const dateQuestionCount: any = {};\n      recentQuestions.forEach((q: any) => {\n        const date = new Date(q.log_date).toLocaleDateString('tr-TR');\n        const count = (q.correct_count || 0) + (q.wrong_count || 0) + (q.empty_count || 0);\n        dateQuestionCount[date] = (dateQuestionCount[date] || 0) + count;\n      });\n      \n      let mostQuestionsDate = '';\n      let mostQuestionsCount = 0;\n      Object.entries(dateQuestionCount).forEach(([date, count]: any) => {\n        if (count > mostQuestionsCount) {\n          mostQuestionsCount = count;\n          mostQuestionsDate = date;\n        }\n      });\n      \n      // Calculate branch exam records by subject\n      const branchRecords: any = {};\n      branchExams.forEach((exam: any) => {\n        const subject = exam.subject || exam.exam_type || 'Genel';\n        const net = (exam.correct_count || 0) - (exam.wrong_count || 0) * 0.25;\n        if (!branchRecords[subject] || net > branchRecords[subject].net) {\n          branchRecords[subject] = { net: net.toFixed(2), exam_name: exam.exam_name, date: exam.exam_date };\n        }\n      });\n      \n      // Get completed topics history (from both archived AND recent tasks for comprehensive data)\n      const allTasksForHistory = [...tasks, ...archivedTasks];\n      const completedTopicsHistory = allTasksForHistory\n        .filter((t: any) => t.completed && (t.category === 'wrong_topic' || t.title?.toLowerCase().includes('konu') || t.title?.toLowerCase().includes('hata')))\n        .map((t: any) => ({\n          title: t.title,\n          subject: t.subject || 'Genel',\n          source: t.source || 'Bilinmiyor',\n          completedAt: t.completedAt || t.createdAt\n        }))\n        .sort((a: any, b: any) => new Date(b.completedAt).getTime() - new Date(a.completedAt).getTime())\n        .slice(0, 15);\n      \n      // Get completed questions history (from both archived AND recent question logs)\n      // Include all questions with wrong topics to show what was worked on\n      const allQuestionsForHistory = [...questionLogs, ...archivedQuestions];\n      const completedQuestionsHistory = allQuestionsForHistory\n        .filter((q: any) => q.wrong_count > 0 || q.wrong_topics?.length > 0)\n        .map((q: any) => ({\n          subject: q.subject,\n          wrongCount: q.wrong_count,\n          correctCount: q.correct_count,\n          emptyCount: q.empty_count,\n          wrongTopics: Array.isArray(q.wrong_topics) ? q.wrong_topics.map((t: any) => typeof t === 'string' ? t : t.topic) : [],\n          logDate: q.log_date\n        }))\n        .sort((a: any, b: any) => new Date(b.logDate).getTime() - new Date(a.logDate).getTime())\n        .slice(0, 15);\n      \n      // Create email HTML content with beautiful modern design\n      const htmlContent = generateModernEmailTemplate({\n        totalQuestions,\n        totalCorrect,\n        totalWrong,\n        totalEmpty,\n        successRate,\n        recentExams,\n        generalExams,\n        branchExams,\n        tasks,\n        completedTasks,\n        totalActivities,\n        activityMotivation,\n        activityColor,\n        longestStreak,\n        wrongTopicsCount,\n        completedTopics,\n        maxTytNet,\n        branchRecords,\n        mostQuestionsDate,\n        mostQuestionsCount,\n        mostWrongSubjects,\n        mostSolvedSubjects,\n        mostCorrectSubjects,\n        examSubjectNets,\n        completedTopicsHistory,\n        completedQuestionsHistory,\n        isManualRequest\n      });\n\n      // Configure nodemailer transporter with Gmail SMTP\n      const transporter = nodemailer.createTransport({\n        service: 'gmail',\n        auth: {\n          user: process.env.EMAIL_USER,\n          pass: process.env.EMAIL_PASS,\n        },\n      });\n\n      // Send email with embedded images\n      const fs = await import('fs');\n      const path = await import('path');\n      \n      const attachments = [\n        {\n          filename: 'turkbayragi.png',\n          path: path.join(process.cwd(), 'client/public/turkbayragi.png'),\n          cid: 'turkbayragi'\n        },\n        {\n          filename: 'ataturkimza.png',\n          path: path.join(process.cwd(), 'client/public/ataturkimza.png'),\n          cid: 'ataturkimza'\n        },\n        {\n          filename: 'ataturk.png',\n          path: path.join(process.cwd(), 'client/public/ataturk.png'),\n          cid: 'ataturk'\n        }\n      ];\n      \n      if (shouldSplitEmails) {\n        // Send 3 separate emails: General exams, Branch exams, Questions\n        // Email 1: General Exams Only\n        if (generalExams.length > 0) {\n          const generalOnlyHtml = htmlContent.replace(/📋 BRANŞ DENEME DETAYLARI[\\s\\S]*?(?=<div class=\"footer-note\">)/g, '');\n          await transporter.sendMail({\n            from: `\"Aylık Çalışma Raporum\" <${emailFrom || emailUser}>`,\n            to: toEmails,\n            subject: `📊 Genel Deneme Raporu - ${new Date().toLocaleDateString('tr-TR', { month: 'long', year: 'numeric' })}`,\n            html: generalOnlyHtml,\n            attachments\n          });\n        }\n        \n        // Email 2: Branch Exams Only  \n        if (branchExams.length > 0) {\n          const branchOnlyHtml = htmlContent.replace(/📋 GENEL DENEME DETAYLARI[\\s\\S]*?(?=📋 BRANŞ DENEME DETAYLARI)/g, '').replace(/📋 BRANŞ DENEME DETAYLARI/, '📋 BRANŞ DENEME DETAYLARI');\n          await transporter.sendMail({\n            from: `\"Aylık Çalışma Raporum\" <${emailFrom || emailUser}>`,\n            to: toEmails,\n            subject: `📊 Branş Deneme Raporu - ${new Date().toLocaleDateString('tr-TR', { month: 'long', year: 'numeric' })}`,\n            html: branchOnlyHtml,\n            attachments\n          });\n        }\n        \n        // Email 3: Questions Only (if needed)\n        if (recentQuestions.length > 10) {\n          const questionsOnlyHtml = htmlContent.replace(/📋 GENEL DENEME DETAYLARI[\\s\\S]*?(?=<div class=\"footer-note\">)/g, '').replace(/📋 BRANŞ DENEME DETAYLARI[\\s\\S]*?(?=<div class=\"footer-note\">)/g, '');\n          await transporter.sendMail({\n            from: `\"Aylık Çalışma Raporum\" <${emailFrom || emailUser}>`,\n            to: toEmails,\n            subject: `📊 Soru Çözüm Raporu - ${new Date().toLocaleDateString('tr-TR', { month: 'long', year: 'numeric' })}`,\n            html: questionsOnlyHtml,\n            attachments\n          });\n        }\n        \n        logActivity('Rapor Gönderildi (3 Ayrı Email)', toEmails);\n        res.json({ message: \"Raporlar 3 ayrı email olarak başarıyla gönderildi\" });\n      } else {\n        // Send single combined email\n        await transporter.sendMail({\n          from: `\"Aylık Çalışma Raporum\" <${emailFrom || emailUser}>`,\n          to: toEmails,\n          subject: \"Aylık Çalışma Raporum\",\n          html: htmlContent,\n          attachments\n        });\n        \n        logActivity('Rapor Gönderildi', toEmails);\n        res.json({ message: \"Rapor başarıyla gönderildi\" });\n      }\n    } catch (error) {\n      console.error(\"Error sending report:\", error);\n      res.status(500).json({ message: \"Rapor gönderilirken hata oluştu. SMTP ayarlarını kontrol edin.\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":78352},"shared/sema.ts":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\n// ŞEMA.TS - Veritabanı tabloları ve Zod şemaları\nimport { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, boolean, timestamp, integer } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Maksimum soru sayısı limitleri (TYT ve AYT için)\nexport const SUBJECT_LIMITS: Record<string, Record<string, number>> = {\n  TYT: {\n    'Türkçe': 40,\n    'Sosyal Bilimler': 20,\n    'Matematik': 30,\n    'Geometri': 10,\n    'Fen Bilimleri': 20,\n    'Fizik': 7,\n    'Kimya': 7,\n    'Biyoloji': 6\n  },\n  AYT: {\n    'Matematik': 30,\n    'Geometri': 10,\n    'Fizik': 14,\n    'Kimya': 13,\n    'Biyoloji': 13\n  }\n};\n\nexport const tasks = pgTable(\"tasks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  priority: text(\"priority\", { enum: [\"low\", \"medium\", \"high\"] }).notNull().default(\"medium\"),\n  category: text(\"category\", { enum: [\"genel\", \"turkce\", \"sosyal\", \"matematik\", \"fizik\", \"kimya\", \"biyoloji\", \"tyt-geometri\", \"ayt-geometri\", \"ayt-matematik\", \"ayt-fizik\", \"ayt-kimya\", \"ayt-biyoloji\"] }).notNull().default(\"genel\"),\n  color: text(\"color\").default(\"#8B5CF6\"),\n  completed: boolean(\"completed\").notNull().default(false),\n  completedAt: text(\"completed_at\"),\n  archived: boolean(\"archived\").notNull().default(false),\n  archivedAt: text(\"archived_at\"),\n  deleted: boolean(\"deleted\").notNull().default(false),\n  deletedAt: text(\"deleted_at\"),\n  dueDate: text(\"due_date\"),\n  recurrenceType: text(\"recurrence_type\", { enum: [\"none\", \"weekly\", \"monthly\"] }).notNull().default(\"none\"),\n  recurrenceEndDate: text(\"recurrence_end_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const moods = pgTable(\"moods\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  mood: text(\"mood\").notNull(),\n  moodBg: text(\"mood_bg\"),\n  note: text(\"note\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const goals = pgTable(\"goals\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  targetValue: text(\"target_value\").notNull(),\n  currentValue: text(\"current_value\").notNull().default(\"0\"),\n  unit: text(\"unit\").notNull(),\n  category: text(\"category\", { enum: [\"tyt\", \"ayt\", \"siralama\", \"genel\"] }).notNull().default(\"genel\"),\n  timeframe: text(\"timeframe\", { enum: [\"günlük\", \"haftalık\", \"aylık\", \"yıllık\"] }).notNull().default(\"aylık\"),\n  targetDate: text(\"target_date\"),\n  completed: boolean(\"completed\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const questionLogs = pgTable(\"question_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  exam_type: text(\"exam_type\", { enum: [\"TYT\", \"AYT\"] }).notNull(),\n  subject: text(\"subject\").notNull(),\n  topic: text(\"topic\"),\n  correct_count: text(\"correct_count\").notNull(),\n  wrong_count: text(\"wrong_count\").notNull(),\n  blank_count: text(\"blank_count\").notNull().default(\"0\"),\n  wrong_topics: text(\"wrong_topics\").array().default([]),\n  wrong_topics_json: text(\"wrong_topics_json\"),\n  time_spent_minutes: integer(\"time_spent_minutes\"),\n  study_date: text(\"study_date\").notNull(),\n  deleted: boolean(\"deleted\").notNull().default(false),\n  deletedAt: text(\"deleted_at\"),\n  archived: boolean(\"archived\").notNull().default(false),\n  archivedAt: text(\"archived_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const examResults = pgTable(\"exam_results\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  exam_name: text(\"exam_name\").notNull(),\n  display_name: text(\"display_name\"),\n  exam_date: text(\"exam_date\").notNull(),\n  exam_type: text(\"exam_type\", { enum: [\"TYT\", \"AYT\"] }),\n  exam_scope: text(\"exam_scope\", { enum: [\"full\", \"branch\"] }),\n  selected_subject: text(\"selected_subject\"),\n  tyt_net: text(\"tyt_net\").notNull().default(\"0\"),\n  ayt_net: text(\"ayt_net\").notNull().default(\"0\"),\n  subjects_data: text(\"subjects_data\"),\n  ranking: text(\"ranking\"),\n  notes: text(\"notes\"),\n  time_spent_minutes: integer(\"time_spent_minutes\"),\n  deleted: boolean(\"deleted\").notNull().default(false),\n  deletedAt: text(\"deleted_at\"),\n  archived: boolean(\"archived\").notNull().default(false),\n  archivedAt: text(\"archived_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const examSubjectNets = pgTable(\"exam_subject_nets\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  exam_id: varchar(\"exam_id\").notNull(),\n  exam_type: text(\"exam_type\", { enum: [\"TYT\", \"AYT\"] }).notNull(),\n  subject: text(\"subject\").notNull(),\n  net_score: text(\"net_score\").notNull(),\n  correct_count: text(\"correct_count\").notNull().default(\"0\"),\n  wrong_count: text(\"wrong_count\").notNull().default(\"0\"),\n  blank_count: text(\"blank_count\").notNull().default(\"0\"),\n  wrong_topics_json: text(\"wrong_topics_json\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const flashcards = pgTable(\"flashcards\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  question: text(\"question\").notNull(),\n  answer: text(\"answer\").notNull(),\n  examType: text(\"exam_type\", { enum: [\"TYT\", \"AYT\"] }).notNull().default(\"TYT\"),\n  subject: text(\"subject\", { enum: [\"turkce\", \"matematik\", \"fizik\", \"kimya\", \"biyoloji\", \"tarih\", \"cografya\", \"felsefe\", \"genel\"] }).notNull().default(\"genel\"),\n  topic: text(\"topic\"),\n  difficulty: text(\"difficulty\", { enum: [\"easy\", \"medium\", \"hard\"] }).notNull().default(\"medium\"),\n  lastReviewed: timestamp(\"last_reviewed\"),\n  nextReview: timestamp(\"next_review\").defaultNow(),\n  reviewCount: text(\"review_count\").notNull().default(\"0\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const studyHours = pgTable(\"study_hours\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  study_date: text(\"study_date\").notNull(),\n  hours: integer(\"hours\").notNull().default(0),\n  minutes: integer(\"minutes\").notNull().default(0),\n  seconds: integer(\"seconds\").notNull().default(0),\n  deleted: boolean(\"deleted\").notNull().default(false),\n  deletedAt: text(\"deleted_at\"),\n  archived: boolean(\"archived\").notNull().default(false),\n  archivedAt: text(\"archived_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const setupCompleted = pgTable(\"setup_completed\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  completed: boolean(\"completed\").notNull().default(false),\n  completedAt: text(\"completed_at\"),\n  termsAccepted: boolean(\"terms_accepted\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const installations = pgTable(\"installations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userName: text(\"user_name\"),\n  userEmail: text(\"user_email\"),\n  ipAddress: text(\"ip_address\"),\n  location: text(\"location\"),\n  computerSpecs: text(\"computer_specs\"),\n  operatingSystem: text(\"operating_system\"),\n  browserInfo: text(\"browser_info\"),\n  installDate: text(\"install_date\").notNull(),\n  lastActivity: text(\"last_activity\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertTaskSchema = z.object({\n  title: z.string(),\n  description: z.string().nullable().optional(),\n  priority: z.enum([\"low\", \"medium\", \"high\"]).default(\"medium\"),\n  category: z.enum([\"genel\", \"turkce\", \"sosyal\", \"matematik\", \"fizik\", \"kimya\", \"biyoloji\", \"tyt-geometri\", \"ayt-geometri\", \"ayt-matematik\", \"ayt-fizik\", \"ayt-kimya\", \"ayt-biyoloji\"]).default(\"genel\"),\n  color: z.string().optional(),\n  completed: z.boolean().optional(),\n  archived: z.boolean().optional(),\n  deleted: z.boolean().optional(),\n  dueDate: z.string().nullable().optional(),\n  recurrenceType: z.enum([\"none\", \"weekly\", \"monthly\"]).default(\"none\"),\n  recurrenceEndDate: z.string().nullable().optional(),\n});\n\nexport const insertMoodSchema = z.object({\n  mood: z.string(),\n  moodBg: z.string().nullable().optional(),\n  note: z.string().nullable().optional(),\n});\n\nexport const insertGoalSchema = z.object({\n  title: z.string(),\n  description: z.string().nullable().optional(),\n  targetValue: z.string(),\n  currentValue: z.string().optional(),\n  unit: z.string(),\n  category: z.enum([\"tyt\", \"ayt\", \"siralama\", \"genel\"]).default(\"genel\"),\n  timeframe: z.enum([\"günlük\", \"haftalık\", \"aylık\", \"yıllık\"]).default(\"aylık\"),\n  targetDate: z.string().nullable().optional(),\n  completed: z.boolean().optional(),\n});\n\nexport const insertQuestionLogSchema = z.object({\n  exam_type: z.enum([\"TYT\", \"AYT\"]),\n  subject: z.string(),\n  topic: z.string().nullable().optional(),\n  correct_count: z.string(),\n  wrong_count: z.string(),\n  blank_count: z.string().optional(),\n  wrong_topics: z.array(z.string()).optional(),\n  wrong_topics_json: z.string().nullable().optional(),\n  time_spent_minutes: z.number().nullable().optional(),\n  study_date: z.string(),\n  deleted: z.boolean().optional(),\n  archived: z.boolean().optional(),\n});\n\nexport const insertExamResultSchema = z.object({\n  exam_name: z.string(),\n  display_name: z.string().optional(),\n  exam_date: z.string(),\n  exam_type: z.enum([\"TYT\", \"AYT\"]).optional(),\n  exam_scope: z.enum([\"full\", \"branch\"]).optional(),\n  selected_subject: z.string().optional(),\n  tyt_net: z.string().optional(),\n  ayt_net: z.string().optional(),\n  subjects_data: z.string().nullable().optional(),\n  ranking: z.string().nullable().optional(),\n  notes: z.string().nullable().optional(),\n  time_spent_minutes: z.number().nullable().optional(),\n  deleted: z.boolean().optional(),\n  archived: z.boolean().optional(),\n});\n\nexport const insertFlashcardSchema = z.object({\n  question: z.string(),\n  answer: z.string(),\n  examType: z.enum([\"TYT\", \"AYT\"]).default(\"TYT\"),\n  subject: z.enum([\"turkce\", \"matematik\", \"fizik\", \"kimya\", \"biyoloji\", \"tarih\", \"cografya\", \"felsefe\", \"genel\"]).default(\"genel\"),\n  topic: z.string().nullable().optional(),\n  difficulty: z.enum([\"easy\", \"medium\", \"hard\"]).default(\"medium\"),\n  lastReviewed: z.date().nullable().optional(),\n  nextReview: z.date().optional(),\n});\n\nexport const insertExamSubjectNetSchema = z.object({\n  exam_id: z.string(),\n  exam_type: z.enum([\"TYT\", \"AYT\"]),\n  subject: z.string(),\n  net_score: z.string(),\n  correct_count: z.string().optional(),\n  wrong_count: z.string().optional(),\n  blank_count: z.string().optional(),\n  wrong_topics_json: z.string().nullable().optional(),\n});\n\nexport const insertStudyHoursSchema = z.object({\n  study_date: z.string(),\n  hours: z.number().default(0),\n  minutes: z.number().default(0),\n  seconds: z.number().default(0),\n  deleted: z.boolean().optional(),\n  archived: z.boolean().optional(),\n});\n\nexport const insertInstallationSchema = z.object({\n  userName: z.string().nullable().optional(),\n  userEmail: z.string().nullable().optional(),\n  ipAddress: z.string().nullable().optional(),\n  location: z.string().nullable().optional(),\n  computerSpecs: z.string().nullable().optional(),\n  operatingSystem: z.string().nullable().optional(),\n  browserInfo: z.string().nullable().optional(),\n  installDate: z.string(),\n  lastActivity: z.string().nullable().optional(),\n});\n\nexport const insertSetupCompletedSchema = z.object({\n  completed: z.boolean().default(false),\n  termsAccepted: z.boolean().default(false),\n  completedAt: z.string().nullable().optional(),\n});\n\nexport type InsertTask = z.infer<typeof insertTaskSchema>;\nexport type Task = typeof tasks.$inferSelect;\nexport type InsertMood = z.infer<typeof insertMoodSchema>;\nexport type Mood = typeof moods.$inferSelect;\nexport type InsertGoal = z.infer<typeof insertGoalSchema>;\nexport type Goal = typeof goals.$inferSelect;\nexport type InsertQuestionLog = z.infer<typeof insertQuestionLogSchema>;\nexport type QuestionLog = typeof questionLogs.$inferSelect;\nexport type InsertExamResult = z.infer<typeof insertExamResultSchema>;\nexport type ExamResult = typeof examResults.$inferSelect;\nexport type InsertFlashcard = z.infer<typeof insertFlashcardSchema>;\nexport type Flashcard = typeof flashcards.$inferSelect;\nexport type InsertExamSubjectNet = z.infer<typeof insertExamSubjectNetSchema>;\nexport type ExamSubjectNet = typeof examSubjectNets.$inferSelect;\nexport type InsertStudyHours = z.infer<typeof insertStudyHoursSchema>;\nexport type StudyHours = typeof studyHours.$inferSelect;\nexport type SetupCompleted = typeof setupCompleted.$inferSelect;\nexport type InsertSetupCompleted = z.infer<typeof insertSetupCompletedSchema>;\nexport type InsertInstallation = z.infer<typeof insertInstallationSchema>;\nexport type Installation = typeof installations.$inferSelect;\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":12724},"shared/testler/sema.test.ts":{"content":"import { describe, it, expect } from 'vitest'\nimport { \n  insertExamResultSchema, \n  insertQuestionLogSchema, \n  insertTaskSchema,\n  insertGoalSchema,\n  SUBJECT_LIMITS \n} from '../sema'\n\ndescribe('Schema Validation Tests', () => {\n  describe('SUBJECT_LIMITS', () => {\n    it('TYT için doğru ders limitleri tanımlı olmalı', () => {\n      expect(SUBJECT_LIMITS.TYT).toBeDefined()\n      expect(SUBJECT_LIMITS.TYT['Türkçe']).toBe(40)\n      expect(SUBJECT_LIMITS.TYT['Sosyal Bilimler']).toBe(20)\n      expect(SUBJECT_LIMITS.TYT['Matematik']).toBe(30)\n      expect(SUBJECT_LIMITS.TYT['Geometri']).toBe(10)\n      expect(SUBJECT_LIMITS.TYT['Fen Bilimleri']).toBe(20)\n    })\n\n    it('AYT için doğru ders limitleri tanımlı olmalı', () => {\n      expect(SUBJECT_LIMITS.AYT).toBeDefined()\n      expect(SUBJECT_LIMITS.AYT['Matematik']).toBe(30)\n      expect(SUBJECT_LIMITS.AYT['Geometri']).toBe(10)\n      expect(SUBJECT_LIMITS.AYT['Fizik']).toBe(14)\n      expect(SUBJECT_LIMITS.AYT['Kimya']).toBe(13)\n      expect(SUBJECT_LIMITS.AYT['Biyoloji']).toBe(13)\n    })\n\n    it('AYT\\'de TYT derslerinin olmaması gerekir', () => {\n      expect(SUBJECT_LIMITS.AYT['Türkçe']).toBeUndefined()\n      expect(SUBJECT_LIMITS.AYT['Sosyal Bilimler']).toBeUndefined()\n      expect(SUBJECT_LIMITS.AYT['Fen Bilimleri']).toBeUndefined()\n    })\n  })\n\n  describe('ExamResult Schema Validation', () => {\n    it('geçerli TYT denemesi oluşturulabilmeli', () => {\n      const validExam = {\n        exam_name: 'TYT Genel Deneme 1',\n        exam_date: '2025-10-30',\n        exam_type: 'TYT' as const,\n        exam_scope: 'full' as const,\n        tyt_net: '85.5',\n        ayt_net: '0'\n      }\n      \n      const result = insertExamResultSchema.safeParse(validExam)\n      expect(result.success).toBe(true)\n    })\n\n    it('geçerli AYT denemesi oluşturulabilmeli', () => {\n      const validExam = {\n        exam_name: 'AYT Genel Deneme 1',\n        exam_date: '2025-10-30',\n        exam_type: 'AYT' as const,\n        exam_scope: 'full' as const,\n        tyt_net: '0',\n        ayt_net: '45.25'\n      }\n      \n      const result = insertExamResultSchema.safeParse(validExam)\n      expect(result.success).toBe(true)\n    })\n\n    it('branş denemesi selected_subject gerektirir', () => {\n      const branchExam = {\n        exam_name: 'Matematik Branş',\n        exam_date: '2025-10-30',\n        exam_type: 'TYT' as const,\n        exam_scope: 'branch' as const,\n        selected_subject: 'matematik',\n        tyt_net: '25',\n        ayt_net: '0'\n      }\n      \n      const result = insertExamResultSchema.safeParse(branchExam)\n      expect(result.success).toBe(true)\n    })\n\n    it('exam_name zorunlu alan olmalı', () => {\n      const invalidExam = {\n        exam_date: '2025-10-30',\n        tyt_net: '85',\n        ayt_net: '0'\n      }\n      \n      const result = insertExamResultSchema.safeParse(invalidExam)\n      expect(result.success).toBe(false)\n    })\n\n    it('exam_date zorunlu alan olmalı', () => {\n      const invalidExam = {\n        exam_name: 'Test Deneme',\n        tyt_net: '85',\n        ayt_net: '0'\n      }\n      \n      const result = insertExamResultSchema.safeParse(invalidExam)\n      expect(result.success).toBe(false)\n    })\n  })\n\n  describe('QuestionLog Schema Validation', () => {\n    it('geçerli soru logu oluşturulabilmeli', () => {\n      const validLog = {\n        exam_type: 'TYT' as const,\n        subject: 'Matematik',\n        topic: 'Fonksiyonlar',\n        correct_count: '15',\n        wrong_count: '3',\n        blank_count: '2',\n        study_date: '2025-10-30'\n      }\n      \n      const result = insertQuestionLogSchema.safeParse(validLog)\n      expect(result.success).toBe(true)\n    })\n\n    it('exam_type TYT veya AYT olmalı', () => {\n      const invalidLog = {\n        exam_type: 'INVALID',\n        subject: 'Matematik',\n        correct_count: '15',\n        wrong_count: '3',\n        blank_count: '2',\n        study_date: '2025-10-30'\n      }\n      \n      const result = insertQuestionLogSchema.safeParse(invalidLog)\n      expect(result.success).toBe(false)\n    })\n\n    it('zorunlu alanlar kontrol edilmeli', () => {\n      const invalidLog = {\n        exam_type: 'TYT' as const,\n        subject: 'Matematik'\n      }\n      \n      const result = insertQuestionLogSchema.safeParse(invalidLog)\n      expect(result.success).toBe(false)\n    })\n  })\n\n  describe('Task Schema Validation', () => {\n    it('geçerli task oluşturulabilmeli', () => {\n      const validTask = {\n        title: 'Matematik Çalış',\n        priority: 'high' as const,\n        category: 'matematik' as const\n      }\n      \n      const result = insertTaskSchema.safeParse(validTask)\n      expect(result.success).toBe(true)\n    })\n\n    it('priority değerleri kontrol edilmeli', () => {\n      const invalidTask = {\n        title: 'Test Task',\n        priority: 'invalid'\n      }\n      \n      const result = insertTaskSchema.safeParse(invalidTask)\n      expect(result.success).toBe(false)\n    })\n  })\n\n  describe('Goal Schema Validation', () => {\n    it('geçerli hedef oluşturulabilmeli', () => {\n      const validGoal = {\n        title: 'TYT Net Hedefi',\n        targetValue: '100',\n        currentValue: '85',\n        unit: 'net',\n        category: 'tyt' as const,\n        timeframe: 'aylık' as const\n      }\n      \n      const result = insertGoalSchema.safeParse(validGoal)\n      expect(result.success).toBe(true)\n    })\n\n    it('zorunlu alanlar kontrol edilmeli', () => {\n      const invalidGoal = {\n        title: 'Hedef'\n      }\n      \n      const result = insertGoalSchema.safeParse(invalidGoal)\n      expect(result.success).toBe(false)\n    })\n  })\n})\n","size_bytes":5629},"client/src/bilesenler/arayuz/carousel.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/kutuphane/yardimcilar\"\nimport { Button } from \"@/bilesenler/arayuz/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":6330},"server/vite.ts":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nfunction getCurrentDir() {\n  try {\n    return __dirname;\n  } catch {\n    return path.dirname(fileURLToPath(import.meta.url));\n  }\n}\n\nconst currentDir = getCurrentDir();\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        // ASLA process.exit kullanma - Electron auto-restart döngüsüne sebep oluyor\n        // Production'da sadece log at, server çalışmaya devam etsin\n        if (process.env.NODE_ENV === \"development\" && !process.env.ELECTRON_RUN_AS_NODE) {\n          // Sadece standalone development modda restart yap\n          // Electron içinde çalışıyorsa ASLA exit yapma\n          log(\"⚠️ Vite hatası tespit edildi ama server çalışmaya devam ediyor\", \"vite\");\n        }\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const projectRoot = path.resolve(currentDir, \"..\");\n      const clientTemplate = path.join(projectRoot, \"client\", \"index.html\");\n\n      if (!fs.existsSync(clientTemplate)) {\n        throw new Error(`index.html not found at: ${clientTemplate}`);\n      }\n\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(currentDir, \"..\", \"dist\", \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  // Static dosyaları cache-control ile sun\n  app.use(express.static(distPath, {\n    setHeaders: (res) => {\n      res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');\n    }\n  }));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":3325},"client/vitest-env.d.ts":{"content":"/// <reference types=\"vitest\" />\n/// <reference types=\"@testing-library/jest-dom\" />\n\nimport type {\n  TestingLibraryMatchers,\n} from '@testing-library/jest-dom/matchers'\n\ndeclare global {\n  namespace Vi {\n    interface Assertion extends TestingLibraryMatchers<HTMLElement, void> {}\n    interface AsymmetricMatchersContaining extends TestingLibraryMatchers<any, void> {}\n  }\n}\n","size_bytes":376},"server/index.ts":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport dotenv from \"dotenv\";\n\nconst originalConsoleLog = console.log;\nconsole.log = (...args: any[]) => {\n  const message = args.join(' ');\n  if (message.includes('[dotenv') || message.includes('injecting env') || message.includes('dotenvx.com') || message.includes('prevent building')) {\n    return;\n  }\n  originalConsoleLog.apply(console, args);\n};\n\ndotenv.config({ debug: false });\n\nconsole.log = originalConsoleLog;\n\nimport express from \"express\";\nimport { registerRoutes } from \"./rotalar\";\nimport { log, serveStatic } from \"./static\";\nimport { validateEnvironmentVariables } from \"./env-validation\";\nimport { storage } from \"./depolama\";\n\nvalidateEnvironmentVariables();\n\nconst app = express();\n\nif (process.env.NODE_ENV === \"production\") {\n  app.set(\"env\", \"production\");\n}\n\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const pathReq = req.path;\n  let capturedJsonResponse: any;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (pathReq.startsWith(\"/api\")) {\n      // Gereksiz logları filtrele\n      const shouldSkipLog = (\n        // GET isteklerini ve 304 (Not Modified) yanıtlarını atla\n        (req.method === 'GET' && res.statusCode === 304) ||\n        // Hızlı GET isteklerini atla (< 50ms)\n        (req.method === 'GET' && duration < 50 && res.statusCode === 200)\n      );\n\n      if (shouldSkipLog) {\n        return;\n      }\n\n      const externalIp = req.headers['x-forwarded-for'] || req.socket.remoteAddress || 'unknown';\n      \n      // Sadece önemli bilgileri logla\n      let logLine = `${req.method} ${pathReq} ${res.statusCode} in ${duration}ms`;\n      \n      // Hata durumlarında veya yavaş isteklerde detay ekle\n      if (res.statusCode >= 400 || duration > 1000) {\n        logLine += ` [IP: ${externalIp}]`;\n      }\n\n      // Sadece hata durumlarında response body'yi logla\n      if (res.statusCode >= 400 && capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 200) {\n        logLine = logLine.slice(0, 199) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: any, res: any, _next: any) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    console.error(\"Server error:\", err);\n    res.status(status).json({ message });\n  });\n\n  if (app.get(\"env\") === \"development\") {\n    const { setupVite } = await import(\"./vite\");\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  const port = parseInt(process.env.PORT || \"5000\", 10);\n  const host = process.env.HOST || \"0.0.0.0\";\n\n  server.listen(port, host, () => {\n    log(`Dersime dönebilirim !!! Site Link : http://${host}:${port}`);\n  });\n\n  // Otomatik arşivleme zamanlayıcısı - Her Pazar 23:59'da çalışır (Türkiye saati GMT+3)\n  function scheduleAutoArchive() {\n    // Türkiye saati için tarih hesaplama\n    const now = new Date();\n    const turkeyTime = new Date(now.toLocaleString('en-US', { timeZone: 'Europe/Istanbul' }));\n    \n    // Bir sonraki Pazar 23:59'u bul\n    const nextSunday = new Date(turkeyTime);\n    const currentDay = nextSunday.getDay(); // 0 = Pazar, 1 = Pazartesi, ..., 6 = Cumartesi\n    \n    // Bugün Pazar ise ve saat 23:59'u geçmemişse, bugün arşivle\n    // Bugün Pazar ise ve saat 23:59'u geçtiyse, gelecek Pazar arşivle\n    // Diğer günlerdeyse, bu haftanın veya gelecek haftanın Pazarına göre hesapla\n    let daysUntilSunday: number;\n    if (currentDay === 0) {\n      // Pazar günü\n      const targetTime = new Date(turkeyTime);\n      targetTime.setHours(23, 59, 0, 0);\n      daysUntilSunday = turkeyTime < targetTime ? 0 : 7;\n    } else {\n      // Pazar değil\n      daysUntilSunday = 7 - currentDay;\n    }\n    \n    nextSunday.setDate(nextSunday.getDate() + daysUntilSunday);\n    nextSunday.setHours(23, 59, 0, 0);\n    \n    const msUntilSunday = nextSunday.getTime() - turkeyTime.getTime();\n\n    setTimeout(() => {\n      log(\"📅 Pazar 23:59 - Haftalık otomatik arşivleme başlatılıyor...\");\n      storage.autoArchiveOldData()\n        .then(() => {\n          log(\"✅ Haftalık otomatik arşivleme tamamlandı\");\n        })\n        .catch((error) => {\n          console.error(\"❌ Haftalık otomatik arşivleme hatası:\", error);\n        });\n      \n      // Bir sonraki hafta için tekrar zamanla (7 gün = 604800000 ms)\n      setInterval(() => {\n        log(\"📅 Pazar 23:59 - Haftalık otomatik arşivleme başlatılıyor...\");\n        storage.autoArchiveOldData()\n          .then(() => {\n            log(\"✅ Haftalık otomatik arşivleme tamamlandı\");\n          })\n          .catch((error) => {\n            console.error(\"❌ Haftalık otomatik arşivleme hatası:\", error);\n          });\n      }, 7 * 24 * 60 * 60 * 1000); // 7 gün\n    }, msUntilSunday);\n\n    const hoursUntil = Math.round(msUntilSunday / 1000 / 60 / 60);\n    const daysUntil = Math.floor(hoursUntil / 24);\n    log(`BERAT CANKIR ÖZEL ANALİZ TAKİP SİSTEMİNİZ GAYET GÜZEL ÇALIŞIYOR İYİ DERSLER DİLERİM :) .`);\n  }\n\n  scheduleAutoArchive();\n})();\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":5550},"client/src/bilesenler/geceyarisi-geri-sayim.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport { useState, useEffect } from \"react\";\nimport { Clock } from \"lucide-react\";\n\nexport function MidnightCountdown() {\n  const [timeUntilSundayArchive, setTimeUntilSundayArchive] = useState(\"\");\n\n  useEffect(() => {\n    const calculateTimeUntilSundayArchive = () => {\n      // Türkiye saati için Pazar 23:59 hesaplama (GMT+3)\n      const now = new Date();\n      const turkeyTime = new Date(now.toLocaleString('en-US', { timeZone: 'Europe/Istanbul' }));\n      \n      // Bir sonraki Pazar 23:59'u bul\n      const nextSunday = new Date(turkeyTime);\n      const currentDay = nextSunday.getDay(); // 0 = Pazar, 1 = Pazartesi, ..., 6 = Cumartesi\n      \n      let daysUntilSunday: number;\n      if (currentDay === 0) {\n        // Bugün Pazar\n        const targetTime = new Date(turkeyTime);\n        targetTime.setHours(23, 59, 0, 0);\n        daysUntilSunday = turkeyTime < targetTime ? 0 : 7;\n      } else {\n        // Pazar değil\n        daysUntilSunday = 7 - currentDay;\n      }\n      \n      nextSunday.setDate(nextSunday.getDate() + daysUntilSunday);\n      nextSunday.setHours(23, 59, 0, 0);\n      \n      const diff = nextSunday.getTime() - turkeyTime.getTime();\n      \n      const days = Math.floor(diff / (1000 * 60 * 60 * 24));\n      const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n      const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\n      const seconds = Math.floor((diff % (1000 * 60)) / 1000);\n      \n      return `${days.toString().padStart(2, '0')}:${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n    };\n\n    const updateTimer = () => {\n      setTimeUntilSundayArchive(calculateTimeUntilSundayArchive());\n    };\n\n    updateTimer();\n    const interval = setInterval(updateTimer, 1000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"inline-flex items-center gap-2 px-4 py-2 bg-purple-100 dark:bg-purple-900/30 text-purple-900 dark:text-purple-200 rounded-lg border border-purple-200 dark:border-purple-800\">\n      <Clock className=\"h-4 w-4\" />\n      <div className=\"flex flex-col\">\n        <span className=\"text-xs font-medium\">Pazar 23:59 Arşivleme</span>\n        <span className=\"text-sm font-bold font-mono\">{timeUntilSundayArchive}</span>\n      </div>\n    </div>\n  );\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":2448},"client/src/bilesenler/arayuz/card.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport * as React from \"react\"\n\nimport { cn } from \"@/kutuphane/yardimcilar\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":1974},"client/src/bilesenler/gorev-duzenle-modal.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport { useState, useEffect } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/bilesenler/arayuz/dialog\";\nimport { Button } from \"@/bilesenler/arayuz/button\";\nimport { Input } from \"@/bilesenler/arayuz/input\";\nimport { Textarea } from \"@/bilesenler/arayuz/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/bilesenler/arayuz/select\";\nimport { Label } from \"@/bilesenler/arayuz/label\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/bilesenler/arayuz/popover\";\nimport { Calendar } from \"@/bilesenler/arayuz/calendar\";\nimport { CalendarDays } from \"lucide-react\";\nimport { Task, InsertTask } from \"@shared/sema\";\nimport { apiRequest, sorguIstemcisi } from \"@/kutuphane/sorguIstemcisi\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface EditTaskModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  task: Task | null;\n}\n\nexport function EditTaskModal({ open, onOpenChange, task }: EditTaskModalProps) {\n  const [formData, setFormData] = useState<{\n    title: string;\n    description: string;\n    priority: \"low\" | \"medium\" | \"high\";\n    category: \"genel\" | \"turkce\" | \"sosyal\" | \"matematik\" | \"fizik\" | \"kimya\" | \"biyoloji\" | \"tyt-geometri\" | \"ayt-geometri\" | \"ayt-matematik\" | \"ayt-fizik\" | \"ayt-kimya\" | \"ayt-biyoloji\";\n    color: string;\n    dueDate: string;\n  }>({\n    title: \"\",\n    description: \"\",\n    priority: \"medium\",\n    category: \"genel\",\n    color: \"#8B5CF6\",\n    dueDate: new Date().toISOString().split('T')[0],\n  });\n\n  const { toast } = useToast();\n\n  // Görev değiştiğinde form verilerini güncelle\n  useEffect(() => {\n    if (task) {\n      setFormData({\n        title: task.title || \"\",\n        description: task.description || \"\",\n        priority: task.priority || \"medium\",\n        category: task.category || \"genel\",\n        color: task.color || \"#8B5CF6\",\n        dueDate: task.dueDate ? task.dueDate.split('T')[0] : new Date().toISOString().split('T')[0],\n      });\n    }\n  }, [task]);\n\n  const updateTaskMutation = useMutation({\n    mutationFn: (data: { id: string; updates: Partial<InsertTask> }) => \n      apiRequest(\"PUT\", `/api/tasks/${data.id}`, data.updates),\n    onSuccess: () => {\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/calendar\"] });\n      toast({\n        title: \"Görev güncellendi\",\n        description: \"Görev başarıyla güncellendi.\",\n      });\n      onOpenChange(false);\n    },\n    onError: () => {\n      toast({\n        title: \"Hata\",\n        description: \"Görev güncellenemedi.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!task) return;\n\n    if (!formData.title.trim()) {\n      toast({\n        title: \"Uyarı\",\n        description: \"Görev başlığı gereklidir.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    updateTaskMutation.mutate({\n      id: task.id,\n      updates: {\n        title: formData.title.trim(),\n        description: formData.description.trim() || undefined,\n        priority: formData.priority,\n        category: formData.category,\n        color: formData.color,\n        dueDate: formData.dueDate,\n      }\n    });\n  };\n\n  const handleCancel = () => {\n    onOpenChange(false);\n  };\n\n  if (!task) return null;\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-lg\">\n        <DialogHeader>\n          <DialogTitle>Görevi Düzenle</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          {/* Görev Başlığı */}\n          <div>\n            <Label htmlFor=\"edit-task-title\">Görev Başlığı</Label>\n            <Input\n              id=\"edit-task-title\"\n              placeholder=\"Görev başlığını girin...\"\n              value={formData.title}\n              onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n              data-testid=\"input-edit-task-title\"\n            />\n          </div>\n\n          {/* Görev Açıklaması */}\n          <div>\n            <Label htmlFor=\"edit-task-description\">Açıklama</Label>\n            <Textarea\n              id=\"edit-task-description\"\n              placeholder=\"Görev detaylarını açıklayın...\"\n              value={formData.description}\n              onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n              className=\"h-20 resize-none\"\n              data-testid=\"input-edit-task-description\"\n            />\n          </div>\n\n          {/* Görev Tarihi */}\n          <div>\n            <Label htmlFor=\"edit-task-due-date\">Görevin Bitirilme Tarihi</Label>\n            <Popover>\n              <PopoverTrigger asChild>\n                <Button\n                  variant=\"outline\"\n                  className=\"w-full justify-start text-left font-normal\"\n                  data-testid=\"button-edit-task-due-date\"\n                >\n                  <CalendarDays className=\"mr-2 h-4 w-4\" />\n                  {formData.dueDate ? new Date(formData.dueDate).toLocaleDateString('tr-TR', { \n                    day: 'numeric', \n                    month: 'long', \n                    year: 'numeric' \n                  }) : \"Tarih seçin\"}\n                </Button>\n              </PopoverTrigger>\n              <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                <Calendar\n                  mode=\"single\"\n                  selected={formData.dueDate ? new Date(formData.dueDate + 'T00:00:00') : undefined}\n                  onSelect={(date) => {\n                    if (date) {\n                      const year = date.getFullYear();\n                      const month = String(date.getMonth() + 1).padStart(2, '0');\n                      const day = String(date.getDate()).padStart(2, '0');\n                      setFormData(prev => ({ ...prev, dueDate: `${year}-${month}-${day}` }));\n                    }\n                  }}\n                  initialFocus\n                />\n              </PopoverContent>\n            </Popover>\n          </div>\n\n          {/* Öncelik & Kategori */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"edit-task-priority\">Öncelik</Label>\n              <Select\n                value={formData.priority}\n                onValueChange={(value: \"low\" | \"medium\" | \"high\") => \n                  setFormData(prev => ({ ...prev, priority: value }))\n                }\n              >\n                <SelectTrigger data-testid=\"select-edit-task-priority\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"low\">Düşük</SelectItem>\n                  <SelectItem value=\"medium\">Orta</SelectItem>\n                  <SelectItem value=\"high\">Yüksek</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"edit-task-category\">Ders Kategorisi</Label>\n              <Select\n                value={formData.category}\n                onValueChange={(value: \"genel\" | \"turkce\" | \"sosyal\" | \"matematik\" | \"fizik\" | \"kimya\" | \"biyoloji\" | \"tyt-geometri\" | \"ayt-geometri\" | \"ayt-matematik\" | \"ayt-fizik\" | \"ayt-kimya\" | \"ayt-biyoloji\") => \n                  setFormData(prev => ({ ...prev, category: value }))\n                }\n              >\n                <SelectTrigger data-testid=\"select-edit-task-category\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"genel\">Genel</SelectItem>\n                  <div className=\"px-2 py-1 text-xs font-semibold text-muted-foreground border-b\">TYT Dersleri</div>\n                  <SelectItem value=\"turkce\">Türkçe</SelectItem>\n                  <SelectItem value=\"sosyal\">Sosyal Bilimler</SelectItem>\n                  <SelectItem value=\"matematik\">Matematik</SelectItem>\n                  <SelectItem value=\"tyt-geometri\">TYT Geometri</SelectItem>\n                  <SelectItem value=\"fizik\">Fizik</SelectItem>\n                  <SelectItem value=\"kimya\">Kimya</SelectItem>\n                  <SelectItem value=\"biyoloji\">Biyoloji</SelectItem>\n                  <div className=\"px-2 py-1 text-xs font-semibold text-muted-foreground border-b border-t\">AYT Dersleri</div>\n                  <SelectItem value=\"ayt-matematik\">Matematik</SelectItem>\n                  <SelectItem value=\"ayt-fizik\">Fizik</SelectItem>\n                  <SelectItem value=\"ayt-kimya\">Kimya</SelectItem>\n                  <SelectItem value=\"ayt-biyoloji\">Biyoloji</SelectItem>\n                  <SelectItem value=\"ayt-geometri\">AYT Geometri</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {/* Renk Seçici */}\n          <div>\n            <Label htmlFor=\"edit-task-color\">Görev Rengi</Label>\n            <div className=\"flex items-center space-x-3\">\n              <Input\n                id=\"edit-task-color\"\n                type=\"color\"\n                value={formData.color}\n                onChange={(e) => setFormData(prev => ({ ...prev, color: e.target.value }))}\n                className=\"w-16 h-10 rounded cursor-pointer\"\n                data-testid=\"input-edit-task-color\"\n              />\n              <div className=\"flex space-x-2\">\n                {[\"#8B5CF6\", \"#EC4899\", \"#10B981\", \"#F59E0B\", \"#EF4444\", \"#3B82F6\"].map((color) => (\n                  <button\n                    key={color}\n                    type=\"button\"\n                    onClick={() => setFormData(prev => ({ ...prev, color }))}\n                    className={`w-6 h-6 rounded-full border-2 ${\n                      formData.color === color ? \"border-gray-400\" : \"border-transparent\"\n                    }`}\n                    style={{ backgroundColor: color }}\n                    title={color}\n                  />\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Eylem Düğmeleri */}\n          <div className=\"flex space-x-3 pt-4\">\n            <Button \n              type=\"submit\"\n              disabled={updateTaskMutation.isPending}\n              className=\"flex-1\"\n              data-testid=\"button-update-task\"\n            >\n              {updateTaskMutation.isPending ? \"Güncelleniyor...\" : \"Güncelle\"}\n            </Button>\n            <Button \n              type=\"button\"\n              variant=\"secondary\"\n              onClick={handleCancel}\n              className=\"flex-1\"\n              data-testid=\"button-cancel-edit-task\"\n            >\n              İptal\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":11013},"client/src/bilesenler/arayuz/toggle-group.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\n\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/kutuphane/yardimcilar\"\nimport { toggleVariants } from \"@/bilesenler/arayuz/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":1873},"client/src/bilesenler/arayuz/alert-dialog.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\n import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/kutuphane/yardimcilar\"\nimport { buttonVariants } from \"@/bilesenler/arayuz/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":4541},"client/src/bilesenler/arayuz/menubar.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\n\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/kutuphane/yardimcilar\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":8721},"md dosyaları/kod_aciklamasi_testler.md":{"content":"# TESTLER - DETAYLI KOD AÇIKLAMASI\n\n**📑 Hızlı Navigasyon:** [Ana Sayfa](../replit.md) | [Talimatlar](./talimatlar.md) | [Teknik Mimari](./teknik_mimari.md) | [Client Kodu](./kod_aciklamasi_client.md) | [Server Kodu](./kod_aciklamasi_server.md) | [Shared Kodu](./kod_aciklamasi_shared.md) | [Electron](./kod_aciklamasi_electron1.md)\n\n---\n\n## GİRİŞ\n\nBu doküman, Playwright test dosyasının (`testler/tam-kapsamli-sistem-testi.spec.ts`) tüm kodunu detaylı açıklar.\n\n**Dosya Konumu:** `testler/tam-kapsamli-sistem-testi.spec.ts`  \n**Test Framework:** Playwright  \n**Test Sayısı:** 13 farklı senaryo  \n**Amaç:** Uygulamanın tüm fonksiyonlarını otomatik test etmek\n\n---\n\n## BÖLÜM 1: TEST MİMARİSİ\n\n### 1.1 Playwright Nedir?\n\nPlaywright, modern web uygulamaları için end-to-end (E2E) test framework'üdür.\n\n**Avantajları:**\n1. **Multi-browser** - Chromium, Firefox, WebKit\n2. **Auto-wait** - Elementlerin hazır olmasını otomatik bekler\n3. **Network intercept** - API response'ları mock'lanabilir\n4. **Screenshot/Video** - Test fail olduğunda screenshot alır\n5. **TypeScript support** - Full type safety\n\n**vs. Jest:**\n| Playwright | Jest |\n|------------|------|\n| E2E testing (browser) | Unit testing (JS runtime) |\n| Kullanıcı perspektifi | Kod perspektifi |\n| Yavaş ama gerçekçi | Hızlı ama izole |\n\n### 1.2 Test File Structure\n\n```typescript\nimport { test, expect } from '@playwright/test';\n\ntest.describe('Ana Test Grubu', () => {\n  test.beforeEach(async ({ page }) => {\n    // Her test öncesi çalışır\n    await page.goto('http://localhost:5000');\n  });\n\n  test('Test 1', async ({ page }) => {\n    // Test kodları\n  });\n\n  test('Test 2', async ({ page }) => {\n    // Test kodları\n  });\n});\n```\n\n---\n\n## BÖLÜM 2: HELPER FONKSİYONLAR\n\n### 2.1 bekle()\n\n```typescript\nconst bekle = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\n```\n\n**Detaylı Açıklama:**\n\n**Ne yapar?**\nBelirli süre bekler (async/await).\n\n**Kullanım:**\n```typescript\nawait bekle(2000); // 2 saniye bekle\n```\n\n**Neden gerekli?**\n```typescript\n// ❌ YANLIŞ - Element henüz DOM'da olmayabilir\nconst button = await page.locator('button').click();\n\n// ✅ DOĞRU - Sayfa render olsun\nawait bekle(1000);\nconst button = await page.locator('button').click();\n```\n\n**Playwright auto-wait var ama yeterli değil:**\n- Animations\n- API calls (loading state)\n- Dynamic content\n\n### 2.2 sayfayaGit()\n\n```typescript\nasync function sayfayaGit(page: Page, route: string, beklenenMetin?: string) {\n  console.log(`📍 ${route} sayfasına gidiliyor...`);\n  await page.goto(`http://localhost:5000${route}`);\n  await bekle(1500);\n  \n  if (beklenenMetin) {\n    const title = await page.locator('h1, h2').filter({ hasText: new RegExp(beklenenMetin, 'i') }).first();\n    await expect(title).toBeVisible({ timeout: 5000 });\n    console.log(`✅ \"${beklenenMetin}\" başlığı görüntülendi`);\n  }\n}\n```\n\n**Detaylı Açıklama:**\n\n**1. Console Log**\n```typescript\nconsole.log(`📍 ${route} sayfasına gidiliyor...`);\n```\nTest çalışırken kullanıcıya feedback verir.\n\n**2. Page Navigation**\n```typescript\nawait page.goto(`http://localhost:5000${route}`);\n```\n\n**Örnek:**\n```typescript\nsayfayaGit(page, '/anasayfa', 'Yapılacaklar');\n// → http://localhost:5000/anasayfa\n```\n\n**3. Wait for Render**\n```typescript\nawait bekle(1500);\n```\n1.5 saniye bekle (sayfa tam yüklenmesi için).\n\n**4. Title Verification**\n```typescript\nif (beklenenMetin) {\n  const title = await page.locator('h1, h2')\n    .filter({ hasText: new RegExp(beklenenMetin, 'i') })\n    .first();\n  await expect(title).toBeVisible({ timeout: 5000 });\n}\n```\n\n**Locator Breakdown:**\n- `page.locator('h1, h2')` → H1 veya H2 elementleri\n- `.filter({ hasText: /Yapılacaklar/i })` → \"Yapılacaklar\" içeren (case-insensitive)\n- `.first()` → İlk match\n- `await expect(...).toBeVisible()` → Görünür olduğunu doğrula\n\n### 2.3 formDoldur()\n\n```typescript\nasync function formDoldur(page: Page, veriler: Record<string, any>) {\n  for (const [field, value] of Object.entries(veriler)) {\n    console.log(`  ✏️  ${field}: ${value}`);\n    \n    const input = page.locator(`[data-testid=\"input-${field}\"], [name=\"${field}\"], input[type=\"text\"]`).first();\n    \n    await input.waitFor({ state: 'visible', timeout: 3000 }).catch(() => {});\n    \n    if (await input.isVisible()) {\n      await input.clear();\n      await input.fill(value.toString());\n    }\n  }\n}\n```\n\n**Detaylı Açıklama:**\n\n**1. Object.entries()**\n```typescript\nfor (const [field, value] of Object.entries(veriler))\n```\n\n**Örnek:**\n```typescript\nveriler = {\n  title: \"Matematik Çalış\",\n  priority: \"high\",\n  category: \"ders\"\n};\n\n// Iteration:\n// 1. field=\"title\", value=\"Matematik Çalış\"\n// 2. field=\"priority\", value=\"high\"\n// 3. field=\"category\", value=\"ders\"\n```\n\n**2. Multiple Selector Strategy**\n```typescript\nconst input = page.locator(`\n  [data-testid=\"input-${field}\"],\n  [name=\"${field}\"],\n  input[type=\"text\"]\n`).first();\n```\n\n**Neden multiple selector?**\n\nForm elementleri farklı şekilde işaretlenebilir:\n```html\n<!-- Opsyon 1: data-testid -->\n<input data-testid=\"input-title\" />\n\n<!-- Opsyon 2: name attribute -->\n<input name=\"title\" />\n\n<!-- Opsyon 3: generic text input -->\n<input type=\"text\" />\n```\n\n`.first()` → İlk match'i al.\n\n**3. Graceful Error Handling**\n```typescript\nawait input.waitFor({ state: 'visible', timeout: 3000 }).catch(() => {});\n```\n\nEğer element bulunamazsa hata verme (silent fail).\n\n**4. Visibility Check**\n```typescript\nif (await input.isVisible()) {\n  await input.clear();\n  await input.fill(value.toString());\n}\n```\n\nElement görünürse doldur, yoksa skip et.\n\n---\n\n## BÖLÜM 3: TEST SENARYOLARI\n\n### 3.1 Test 1: API Health Check\n\n```typescript\ntest('1️⃣ API HEALTH CHECK - Backend Bağlantısı', async ({ page }) => {\n  console.log('\\n🔌 API HEALTH CHECK BAŞLIYOR...\\n');\n\n  const endpoints = [\n    '/api/tasks',\n    '/api/question-logs',\n    '/api/exam-results',\n    '/api/study-hours'\n  ];\n\n  let basariliSayisi = 0;\n\n  for (const endpoint of endpoints) {\n    const response = await page.request.get(`http://localhost:5000${endpoint}`);\n    const durum = response.ok() ? '✅' : '❌';\n    console.log(`${durum} ${endpoint}: ${response.status()}`);\n    \n    if (response.ok()) basariliSayisi++;\n  }\n\n  console.log(`\\n📊 SONUÇ: ${basariliSayisi}/${endpoints.length} endpoint başarılı`);\n  expect(basariliSayisi).toBeGreaterThan(0);\n  console.log('\\n✅ API TESTLERİ TAMAMLANDI\\n');\n});\n```\n\n**Detaylı Açıklama:**\n\n**1. page.request API**\n```typescript\nconst response = await page.request.get('http://localhost:5000/api/tasks');\n```\n\n**Playwright network request:**\n- Browser context içinde çalışır\n- Cookies ve headers otomatik\n- CORS problem yok\n\n**2. Response Status Check**\n```typescript\nresponse.ok()  // 200-299 için true\nresponse.status()  // HTTP status code (200, 404, 500, etc.)\n```\n\n**3. Success Counter**\n```typescript\nlet basariliSayisi = 0;\nif (response.ok()) basariliSayisi++;\n```\n\n**4. Assertion**\n```typescript\nexpect(basariliSayisi).toBeGreaterThan(0);\n```\nEn az 1 endpoint çalışmalı (yoksa test fail).\n\n### 3.2 Test 2: Görev Ekleme (6+ Görev)\n\n```typescript\ntest('2️⃣ GÖREVLER - Farklı Kategori, Öncelik, Renk, Tekrar', async ({ page }) => {\n  console.log('\\n📝 GÖREVLER DETAYLI TEST BAŞLIYOR...\\n');\n\n  await sayfayaGit(page, '/anasayfa', 'Yapılacaklar');\n  \n  const pageTitle = await page.locator('h2').filter({ hasText: /Görevlerim/i }).first();\n  await expect(pageTitle).toBeVisible({ timeout: 5000 });\n  console.log('✅ Görevler sayfası yüklendi');\n\n  let eklenenGorevSayisi = 0;\n\n  for (const gorev of testVerileri.gorevler) {\n    console.log(`\\n🎯 Görev ${eklenenGorevSayisi + 1}/${testVerileri.gorevler.length}: \"${gorev.title}\"`);\n    \n    const gorevEkleBtn = await page.locator('[data-testid*=\"button-add\"], button').filter({ hasText: /Görev Ekle|Yeni|Ekle/i }).first();\n    \n    if (await gorevEkleBtn.isVisible({ timeout: 2000 }).catch(() => false)) {\n      await gorevEkleBtn.click();\n      await bekle(1000);\n      \n      await formDoldur(page, gorev);\n      \n      const kaydetBtn = await page.locator('[data-testid*=\"button-save\"], button').filter({ hasText: /Kaydet|Ekle/i }).first();\n      \n      if (await kaydetBtn.isVisible({ timeout: 2000 }).catch(() => false)) {\n        await kaydetBtn.click();\n        await bekle(1500);\n        eklenenGorevSayisi++;\n        console.log(`  ✅ Görev eklendi (${eklenenGorevSayisi}/${testVerileri.gorevler.length})`);\n      }\n    }\n  }\n\n  console.log(`\\n📊 SONUÇ: ${eklenenGorevSayisi}/${testVerileri.gorevler.length} görev eklendi`);\n  expect(eklenenGorevSayisi).toBeGreaterThanOrEqual(6);\n  console.log('\\n✅ GÖREVLER TESTİ TAMAMLANDI\\n');\n});\n```\n\n**Detaylı Açıklama:**\n\n**1. Test Verisi**\n```typescript\nconst testVerileri = {\n  gorevler: [\n    { title: \"Matematik Türev Çalışması\", priority: \"high\", category: \"matematik\", color: \"#EF4444\" },\n    { title: \"Fizik Konu Tekrarı\", priority: \"medium\", category: \"fizik\", color: \"#3B82F6\" },\n    { title: \"Kimya Deneme Çöz\", priority: \"high\", category: \"kimya\", color: \"#10B981\" },\n    // ... 6+ görev\n  ]\n};\n```\n\n**2. Button Locator**\n```typescript\nconst gorevEkleBtn = await page.locator('[data-testid*=\"button-add\"], button')\n  .filter({ hasText: /Görev Ekle|Yeni|Ekle/i })\n  .first();\n```\n\n**Multiple strategy:**\n- `[data-testid*=\"button-add\"]` → data-testid içinde \"button-add\" geçer\n- `button` → Herhangi bir button\n- `.filter({ hasText: /Görev Ekle.../i })` → Text içeriğine göre filtrele\n- `.first()` → İlk match\n\n**3. Conditional Click**\n```typescript\nif (await gorevEkleBtn.isVisible({ timeout: 2000 }).catch(() => false)) {\n  await gorevEkleBtn.click();\n}\n```\n\nEğer button görünürse tıkla, yoksa skip et.\n\n**4. Assertion**\n```typescript\nexpect(eklenenGorevSayisi).toBeGreaterThanOrEqual(6);\n```\nEn az 6 görev eklenmiş olmalı.\n\n### 3.3 Test 3-6: Soru Kayıtları, Genel Denemeler, Branş Denemeler, Çalışma Süreleri\n\nBu testler benzer pattern kullanır:\n1. `/panel` sayfasına git\n2. İlgili sekmeye geç (Soru Kayıtları, Denemeler, etc.)\n3. Form doldur\n4. Kaydet\n5. Sonuç doğrula\n\n**Örnek: Soru Kayıtları**\n```typescript\ntest('3️⃣ SORU KAYITLARI - TYT/AYT Her Ders + Yanlış Konular', async ({ page }) => {\n  await sayfayaGit(page, '/panel', 'Raporlarım');\n  await bekle(2000);\n\n  const soruTab = await page.locator('button').filter({ hasText: /Soru.*Kayıt/i }).first();\n  if (await soruTab.isVisible({ timeout: 2000 }).catch(() => false)) {\n    await soruTab.click();\n    await bekle(1000);\n  }\n\n  // Form doldurma loop...\n});\n```\n\n### 3.4 Test 7: Sayaç (Kronometre, Pomodoro, Alarmlar)\n\n```typescript\ntest('7️⃣ SAYAÇ - Kronometre, Pomodoro, Alarmlar', async ({ page }) => {\n  await sayfayaGit(page, '/sayac', 'Sayaç');\n  \n  console.log('\\n🔍 Kronometre kontrol ediliyor...');\n  const kronometreBasla = await page.locator('button').filter({ hasText: /Başlat|Start/i }).first();\n  if (await kronometreBasla.isVisible({ timeout: 2000 }).catch(() => false)) {\n    await kronometreBasla.click();\n    await bekle(3000);\n    \n    const kronometreDurdur = await page.locator('button').filter({ hasText: /Durdur|Stop|Pause/i }).first();\n    if (await kronometreDurdur.isVisible({ timeout: 2000 }).catch(() => false)) {\n      await kronometreDurdur.click();\n      console.log('  ✅ Kronometre çalıştı');\n    }\n  }\n  \n  // Pomodoro ve alarm testleri...\n});\n```\n\n**Detaylı Açıklama:**\n\n**1. Button Text Variations**\n```typescript\n.filter({ hasText: /Başlat|Start/i })\n```\n\"Başlat\" VEYA \"Start\" içeren button (Türkçe/İngilizce).\n\n**2. Timing Test**\n```typescript\nawait kronometreBasla.click();\nawait bekle(3000);  // 3 saniye çalışsın\nawait kronometreDurdur.click();\n```\n\nKronometre 3 saniye çalıştırılır, sonra durdurulur.\n\n### 3.5 Test 8-9: Checkbox İşlemleri (Hata Sıklığı, Eksik Konular)\n\n```typescript\ntest('8️⃣ HATA SIKLIĞI - Checkbox İşlemleri', async ({ page }) => {\n  await sayfayaGit(page, '/panel', 'Raporlarım');\n  await bekle(2000);\n\n  const hataSikligiTab = await page.locator('button').filter({ hasText: /Hata.*Sıklığı/i }).first();\n  if (await hataSikligiTab.isVisible({ timeout: 2000 }).catch(() => false)) {\n    await hataSikligiTab.click();\n    await bekle(1500);\n  }\n\n  console.log('🔲 Checkbox işlemleri test ediliyor...');\n  const checkboxlar = await page.locator('input[type=\"checkbox\"]').all();\n  \n  if (checkboxlar.length > 0) {\n    console.log(`  📋 ${checkboxlar.length} checkbox bulundu`);\n    \n    for (let i = 0; i < Math.min(3, checkboxlar.length); i++) {\n      if (await checkboxlar[i].isVisible()) {\n        await checkboxlar[i].check();\n        await bekle(500);\n        console.log(`  ✅ Checkbox ${i + 1} işaretlendi`);\n      }\n    }\n  }\n});\n```\n\n**Detaylı Açıklama:**\n\n**1. Get All Checkboxes**\n```typescript\nconst checkboxlar = await page.locator('input[type=\"checkbox\"]').all();\n```\n\n`.all()` → Array of elements (Locator[])\n\n**2. Limit to First 3**\n```typescript\nfor (let i = 0; i < Math.min(3, checkboxlar.length); i++)\n```\n\nEn fazla 3 checkbox test et (performance).\n\n**3. Check Operation**\n```typescript\nawait checkboxlar[i].check();\n```\n\nCheckbox'ı işaretle (checked=true).\n\n### 3.6 Test 11: Görev Tamamlama ve Arşivleme\n\n```typescript\ntest('1️⃣1️⃣ GÖREV TAMAMLAMA VE ARŞİVLEME', async ({ page }) => {\n  await sayfayaGit(page, '/anasayfa', 'Yapılacaklar');\n  await bekle(2000);\n\n  console.log('🎯 BİR GÖREVİ TAMAMLAMA...');\n  const tamamlaBtn = await page.locator('[data-testid*=\"button-complete\"], button')\n    .filter({ hasText: /tamamla|complete/i })\n    .first();\n  \n  if (await tamamlaBtn.isVisible({ timeout: 2000 }).catch(() => false)) {\n    await tamamlaBtn.click();\n    await bekle(1500);\n    console.log('  ✅ Görev tamamlandı olarak işaretlendi');\n  }\n\n  console.log('\\n📦 ARŞİVLEME İŞLEMİ...');\n  const arsivleBtn = await page.locator('[data-testid*=\"button-archive\"], button')\n    .filter({ hasText: /arşivle|archive/i })\n    .first();\n  \n  if (await arsivleBtn.isVisible({ timeout: 2000 }).catch(() => false)) {\n    await arsivleBtn.click();\n    await bekle(1500);\n    console.log('  ✅ Görev arşivlendi');\n  }\n});\n```\n\n### 3.7 Test 12: Filtreler\n\n```typescript\ntest('1️⃣2️⃣ FİLTRELER - Tüm Filtreleme Seçenekleri', async ({ page }) => {\n  await sayfayaGit(page, '/panel', 'Raporlarım');\n  await bekle(2000);\n\n  const soruTab = await page.locator('button').filter({ hasText: /Soru.*Kayıt/i }).first();\n  if (await soruTab.isVisible()) {\n    await soruTab.click();\n    await bekle(1000);\n  }\n\n  console.log('🔍 Filtre test ediliyor...');\n  const filtreler = [\n    { selector: '[data-testid*=\"filter-exam\"], select', value: 'TYT' },\n    { selector: '[data-testid*=\"filter-subject\"], select', value: 'Matematik' },\n  ];\n\n  for (const filtre of filtreler) {\n    const select = await page.locator(filtre.selector).first();\n    if (await select.isVisible({ timeout: 2000 }).catch(() => false)) {\n      await select.selectOption(filtre.value);\n      await bekle(1000);\n      console.log(`  ✅ \"${filtre.value}\" filtresi uygulandı`);\n    }\n  }\n});\n```\n\n**Detaylı Açıklama:**\n\n**1. Select Option**\n```typescript\nawait select.selectOption('TYT');\n```\n\n**HTML:**\n```html\n<select>\n  <option value=\"TYT\">TYT</option>\n  <option value=\"AYT\">AYT</option>\n</select>\n```\n\n**Result:** \"TYT\" seçilir.\n\n---\n\n## BÖLÜM 4: TEST ÇALIŞTIRMA\n\n### 4.1 Test Komutları\n\n```bash\n# Tüm testleri çalıştır\nnpm test\n\n# Headless mode (browser görünmez)\nnpm test -- --headless\n\n# Headed mode (browser görünür)\nnpm test -- --headed\n\n# Debug mode\nnpm test -- --debug\n\n# Specific test\nnpm test -- --grep \"GÖREVLER\"\n```\n\n### 4.2 Test Çıktısı\n\n```\n📍 /anasayfa sayfasına gidiliyor...\n✅ \"Yapılacaklar\" başlığı görüntülendi\n\n🎯 Görev 1/7: \"Matematik Türev Çalışması\"\n  ✏️  title: Matematik Türev Çalışması\n  ✏️  priority: high\n  ✏️  category: matematik\n  ✅ Görev eklendi (1/7)\n\n📊 SONUÇ: 7/7 görev eklendi\n\n✅ GÖREVLER TESTİ TAMAMLANDI\n```\n\n---\n\n## ÖZET\n\n**Test Kapsamı:**\n1. ✅ API health check (4 endpoint)\n2. ✅ Görev ekleme (6+ görev, farklı kategori/öncelik)\n3. ✅ Soru kayıtları (TYT/AYT, tüm dersler)\n4. ✅ Genel denemeler (TYT/AYT)\n5. ✅ Branş denemeler (her ders ayrı)\n6. ✅ Çalışma süreleri\n7. ✅ Sayaç (kronometre, pomodoro, alarmlar)\n8. ✅ Hata sıklığı (checkbox)\n9. ✅ Eksik konular (checkbox)\n10. ✅ Tamamlanan geçmiş\n11. ✅ Görev tamamlama ve arşivleme\n12. ✅ Filtreler\n\n**Test Stratejisi:**\n- ✅ Multiple selector strategy (data-testid, name, type)\n- ✅ Graceful error handling (silent fail)\n- ✅ Console logging (user feedback)\n- ✅ Wait strategies (bekle, waitFor, timeout)\n- ✅ Assertion (expect)\n\n","size_bytes":16914},"vitest.config.ts":{"content":"import { defineConfig } from 'vitest/config'\nimport react from '@vitejs/plugin-react'\nimport path from 'path'\n\nexport default defineConfig({\n  plugins: [react()],\n  test: {\n    globals: true,\n    environment: 'happy-dom',\n    setupFiles: ['./client/vitest.setup.ts'],\n    include: ['client/src/**/*.{test,spec}.{ts,tsx}'],\n    coverage: {\n      provider: 'v8',\n      reporter: ['text', 'json', 'html'],\n      include: ['client/src/**/*.{ts,tsx}'],\n      exclude: [\n        'client/src/main.tsx',\n        'client/src/**/*.d.ts',\n        'client/src/bilesenler/arayuz/**'\n      ]\n    }\n  },\n  resolve: {\n    alias: {\n      '@': path.resolve(__dirname, './client/src'),\n      '@shared': path.resolve(__dirname, './shared'),\n      '@assets': path.resolve(__dirname, './attached_assets')\n    }\n  }\n})\n","size_bytes":796},"client/src/hooks/use-toast.ts":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/bilesenler/arayuz/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1500\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Yan etkiler ! - Bu, dismissToast() eylemine dönüştürülebilir.\n      // ancak basitlik için burada tutacağım\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":3999},"md dosyaları/kod_aciklamasi_shared.md":{"content":"# SHARED/SEMA.TS - EN DETAYLI KOD AÇIKLAMASI\n\n**📑 Hızlı Navigasyon:** [Ana Sayfa](../replit.md) | [Talimatlar](./talimatlar.md) | [Teknik Mimari](./teknik_mimari.md) | [Client Kodu](./kod_aciklamasi_client.md) | [Server Kodu](./kod_aciklamasi_server.md) | [Electron](./kod_aciklamasi_electron1.md) | [Testler](./kod_aciklamasi_testler.md)\n\n---\n\n## GİRİŞ\n\nBu doküman, paylaşılan veri şemasının (`shared/sema.ts`) tüm kodunu **satır satır** açıklar. Her İngilizce terim Türkçe karşılığıyla somutlaştırılmıştır.\n\n**Dosya Konumu:** `shared/sema.ts`  \n**Satır Sayısı:** 316 satır  \n**Amaç:** Frontend ve backend arasında paylaşılan TypeScript tipleri ve Zod validation şemaları\n\n**Shared Schema Nedir?**\n- **Basit Tanım:** Hem client (frontend) hem server (backend)'in kullandığı ortak veri yapısı tanımları\n- **Teknolojiler:** Drizzle ORM (database schema) + Zod (validation) + TypeScript (types)\n- **Avantaj:** Tek yerden yönetim, type safety, DRY principle\n\n---\n\n## BÖLÜM 1: NEDEN SHARED SCHEMA?\n\n### 1.1 Monorepo Pattern (Tek Repo, Birden Fazla Proje)\n\nBu proje full-stack JavaScript uygulamasıdır:\n```\nproject/\n├── client/          # Frontend (React + TypeScript)\n│   └── src/\n│       ├── sayfalar/\n│       ├── bilesenler/\n│       └── kutuphane/\n├── server/          # Backend (Express + TypeScript)\n│   ├── index.ts\n│   ├── rotalar.ts\n│   └── depolama.ts\n└── shared/          # Paylaşılan kod (ortak kullanılan)\n    └── sema.ts      # Veri şeması (database + validation + types)\n```\n\n**Monorepo Avantajları:**\n1. **Code reuse:** Ortak kod paylaşılır (tekrar yazmaya gerek yok)\n2. **Type safety:** Client ve server aynı tip kullanır (uyumsuzluk olmaz)\n3. **Single source of truth:** Tek bir yerden yönetilir\n4. **Easy refactoring:** Bir değişiklik her yerde geçerli olur\n\n**Shared Avantajları:**\n1. **DRY Principle (Don't Repeat Yourself)**\n   ```typescript\n   // ✅ SHARED - Tek tanım\n   // shared/sema.ts\n   export type Task = {\n     id: string;\n     title: string;\n     completed: boolean;\n   };\n   \n   // client/src/sayfalar/Gorevler.tsx\n   import { Task } from '@shared/sema';\n   const tasks: Task[] = [];\n   \n   // server/rotalar.ts\n   import { Task } from '@shared/sema';\n   const task: Task = await storage.getTask(id);\n   ```\n\n2. **Type Safety (Tip Güvenliği)**\n   ```typescript\n   // Eğer Task type'ını değiştirirsek:\n   export type Task = {\n     id: string;\n     title: string;\n     completed: boolean;\n     priority: 'low' | 'medium' | 'high'; // YENİ ALAN\n   };\n   \n   // Client ve server'da compilation error:\n   // Error: Property 'priority' is missing\n   ```\n\n3. **Single Source of Truth (Tek Doğruluk Kaynağı)**\n   ```typescript\n   // priority field eklemek isterseniz:\n   // Shared: Tek bir yerde değiştirin → shared/sema.ts\n   // Client ve server otomatik güncelir (TypeScript compile-time check)\n   \n   // Duplicate olsaydı:\n   // client/types.ts → priority ekle\n   // server/types.ts → priority ekle (unutabilirsiniz!)\n   // → Runtime error: \"priority is undefined\"\n   ```\n\n4. **Easier Refactoring (Kolay Yeniden Yapılandırma)**\n   ```typescript\n   // Task → WorkItem rename\n   // Shared'de değiştir, tüm proje güncellenir\n   export type WorkItem = { /* ... */ };\n   \n   // Client ve server'da TypeScript error verir:\n   // Error: Cannot find name 'Task'\n   // → Find & Replace: Task → WorkItem\n   ```\n\n### 1.2 Drizzle ORM + Zod Integration\n\n```typescript\nimport { pgTable, serial, varchar, boolean, timestamp } from \"drizzle-orm/pg-core\";\nimport { z } from \"zod\";\nimport { createInsertSchema } from \"drizzle-zod\";\n```\n\n**Teknoloji Stack:**\n\n**1. Drizzle ORM**\n- **Amaç:** PostgreSQL için TypeScript ORM\n- **Özellikler:**\n  - Type-safe database queries (SQL yazmadan TypeScript ile query)\n  - Schema definition (database tablolarını TypeScript ile tanımlama)\n  - Migration system (database değişikliklerini versiyonlama)\n\n**Örnek:**\n```typescript\n// Drizzle schema\nexport const tasks = pgTable(\"tasks\", {\n  id: varchar(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  completed: boolean(\"completed\").default(false)\n});\n\n// Type-safe query\nconst task = await db.select().from(tasks).where(eq(tasks.id, '123'));\n// task.title → string (TypeScript bilir)\n// task.completed → boolean (TypeScript bilir)\n```\n\n**2. Zod**\n- **Amaç:** Runtime validation (çalışma zamanında veri doğrulama)\n- **Özellikler:**\n  - TypeScript type inference (Zod schema'dan TypeScript type çıkarma)\n  - Form validation (frontend form doğrulama)\n  - API request validation (backend request body doğrulama)\n\n**Örnek:**\n```typescript\n// Zod schema\nconst taskSchema = z.object({\n  title: z.string().min(1),\n  completed: z.boolean()\n});\n\n// Validation\nconst result = taskSchema.safeParse({ title: '', completed: true });\nif (!result.success) {\n  console.log(result.error);\n  // ZodError: title must be at least 1 character\n}\n\n// Type inference\ntype Task = z.infer<typeof taskSchema>;\n// { title: string, completed: boolean }\n```\n\n**3. drizzle-zod**\n- **Amaç:** Drizzle schema → Zod schema converter (otomatik dönüştürme)\n- **Özellikler:**\n  - Otomatik validation schema oluşturur\n  - Database constraint'leri Zod kurallarına çevirir\n  - Type safety her yerde\n\n**Örnek:**\n```typescript\n// Drizzle schema\nexport const tasks = pgTable(\"tasks\", {\n  id: varchar(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  completed: boolean(\"completed\").default(false)\n});\n\n// Zod schema oluştur\nexport const insertTaskSchema = createInsertSchema(tasks);\n// Otomatik:\n// z.object({\n//   id: z.string(),\n//   title: z.string(),\n//   completed: z.boolean().optional()\n// })\n```\n\n**Workflow:**\n```\nDrizzle Schema (Database)\n  ↓ createInsertSchema()\nZod Schema (Validation)\n  ↓ z.infer<>\nTypeScript Type (Frontend/Backend)\n```\n\n---\n\n## BÖLÜM 2: GÖREV (TASK) SCHEMA\n\n### 2.1 Drizzle Table Definition\n\n```typescript\nexport const tasks = pgTable(\"tasks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\").notNull(),\n  description: varchar(\"description\"),\n  priority: varchar(\"priority\").notNull(),\n  category: varchar(\"category\").notNull(),\n  color: varchar(\"color\"),\n  dueDate: varchar(\"due_date\"),\n  reminderTime: varchar(\"reminder_time\"),\n  repeatInterval: varchar(\"repeat_interval\"),\n  repeatDays: varchar(\"repeat_days\").array(),\n  notes: varchar(\"notes\"),\n  subtasks: varchar(\"subtasks\").array(),\n  completed: boolean(\"completed\").default(false),\n  completedAt: varchar(\"completed_at\"),\n  archived: boolean(\"archived\").default(false),\n  deleted: boolean(\"deleted\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n```\n\n**Detaylı Alan Açıklamaları:**\n\n**1. UUID Primary Key**\n```typescript\nid: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`)\n```\n\n**Neden UUID (Universally Unique Identifier)?**\n\n| UUID | Auto-increment ID |\n|------|-------------------|\n| Globally unique (dünyada benzersiz) | Only locally unique (sadece bu DB'de benzersiz) |\n| Offline oluşturulabilir (internet gerektirmez) | Server gerekli (DB'den alınmalı) |\n| Merge friendly (farklı DB'ler birleştirilebilir) | Conflict riski (ID çakışması) |\n| 128-bit (36 karakter string) | 32/64-bit integer |\n\n**UUID Örneği:**\n```\n123e4567-e89b-12d3-a456-426614174000\n```\n\n**SQL:** `gen_random_uuid()` → PostgreSQL built-in function\n```sql\nCREATE TABLE tasks (\n  id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n  ...\n);\n```\n\n**2. Required vs Optional Fields**\n```typescript\ntitle: varchar(\"title\").notNull(),      // Zorunlu (boş olamaz)\ndescription: varchar(\"description\"),    // Opsiyonel (boş olabilir)\n```\n\n**notNull() Method:**\n- **SQL:** `NOT NULL` constraint\n- **Database:** Bu alana `NULL` değer yazılamaz\n- **Insert:**\n  ```sql\n  INSERT INTO tasks (id, title) VALUES (uuid(), 'Matematik');  -- ✅ Çalışır\n  INSERT INTO tasks (id) VALUES (uuid());  -- ❌ Hata: title NOT NULL\n  ```\n\n**3. Default Values**\n```typescript\ncompleted: boolean(\"completed\").default(false),\narchived: boolean(\"archived\").default(false),\ndeleted: boolean(\"deleted\").default(false),\n```\n\n**default() Method:**\n- **SQL:** `DEFAULT` clause\n- **Database:** Insert'te değer verilmezse default kullanılır\n\n**Örnek:**\n```typescript\n// Yeni task oluştururken\nconst task = await storage.createTask({ title: \"Test\" });\n\n// completed, archived, deleted değerleri verilmedi\n// Ama database otomatik ekler:\n// {\n//   id: \"123...\",\n//   title: \"Test\",\n//   completed: false,    // DEFAULT false\n//   archived: false,     // DEFAULT false\n//   deleted: false       // DEFAULT false\n// }\n```\n\n**4. Timestamp Field**\n```typescript\ncreatedAt: timestamp(\"created_at\").defaultNow()\n```\n\n**timestamp() Type:**\n- **SQL:** `TIMESTAMP` type (tarih + saat)\n- **JavaScript:** `Date` object\n\n**defaultNow() Method:**\n- **SQL:** `DEFAULT NOW()` (PostgreSQL fonksiyonu)\n- **Örnek:** `2025-10-30 10:30:45.123456`\n\n**Insert:**\n```sql\nINSERT INTO tasks (id, title) VALUES (uuid(), 'Matematik');\n-- created_at otomatik: 2025-10-30 10:30:45.123456\n```\n\n**5. Array Fields**\n```typescript\nrepeatDays: varchar(\"repeat_days\").array(),\nsubtasks: varchar(\"subtasks\").array(),\n```\n\n**DOĞRU SYNTAX:**\n```typescript\n.array()  // ✅ Method call (Drizzle convention)\n```\n\n**YANLIŞ SYNTAX:**\n```typescript\narray(varchar())  // ❌ Function wrapper (yanlış!)\n```\n\n**Database'de:**\n```sql\nrepeat_days TEXT[]\nsubtasks TEXT[]\n```\n\n**PostgreSQL Array:**\n- **Örnek değer:** `['Pazartesi', 'Çarşamba', 'Cuma']`\n- **SQL:**\n  ```sql\n  INSERT INTO tasks (id, title, repeat_days)\n  VALUES (uuid(), 'Matematik', ARRAY['Pazartesi', 'Çarşamba']);\n  ```\n- **Query:**\n  ```sql\n  SELECT * FROM tasks WHERE 'Pazartesi' = ANY(repeat_days);\n  ```\n\n**TypeScript:**\n```typescript\nconst task: Task = {\n  id: '123',\n  title: 'Matematik',\n  repeatDays: ['Pazartesi', 'Çarşamba', 'Cuma'],\n  subtasks: ['Alt görev 1', 'Alt görev 2']\n};\n```\n\n**6. Soft Delete Pattern**\n```typescript\ndeleted: boolean(\"deleted\").default(false),\narchived: boolean(\"archived\").default(false),\n```\n\n**Soft Delete Nedir?**\n- **Tanım:** Veriyi fiziksel olarak silmek yerine işaretleme\n- **Avantaj:**\n  - Geri alınabilir (undo delete)\n  - Audit trail (kim ne zaman sildi?)\n  - Data recovery (veri kurtarma)\n\n**Hard Delete vs Soft Delete:**\n```typescript\n// Hard Delete (fiziksel silme)\nawait db.delete(tasks).where(eq(tasks.id, '123'));\n// Veri kalıcı olarak silinir, geri alınamaz\n\n// Soft Delete (mantıksal silme)\nawait db.update(tasks)\n  .set({ deleted: true })\n  .where(eq(tasks.id, '123'));\n// Veri hala database'de, sadece deleted=true\n```\n\n**Query:**\n```typescript\n// Silinmemiş görevleri getir\nconst activeTasks = await db\n  .select()\n  .from(tasks)\n  .where(eq(tasks.deleted, false));\n\n// Silinen görevleri getir (geri alma için)\nconst deletedTasks = await db\n  .select()\n  .from(tasks)\n  .where(eq(tasks.deleted, true));\n```\n\n### 2.2 Zod Insert Schema\n\n```typescript\nexport const insertTaskSchema = createInsertSchema(tasks).omit({\n  id: true,\n  createdAt: true,\n  completedAt: true,\n});\n```\n\n**Detaylı Açıklama:**\n\n**1. createInsertSchema()**\n```typescript\ncreateInsertSchema(tasks)\n```\n\n**createInsertSchema Ne Yapar?**\n- **Input:** Drizzle table definition\n- **Output:** Zod schema (validation)\n- **Amaç:** Database constraint'lerini Zod kurallarına çevirir\n\n**Otomatik Generate Edilen Schema:**\n```typescript\nz.object({\n  id: z.string(),\n  title: z.string(),\n  description: z.string().optional(),\n  priority: z.string(),\n  category: z.string(),\n  color: z.string().optional(),\n  dueDate: z.string().optional(),\n  reminderTime: z.string().optional(),\n  repeatInterval: z.string().optional(),\n  repeatDays: z.array(z.string()).optional(),\n  notes: z.string().optional(),\n  subtasks: z.array(z.string()).optional(),\n  completed: z.boolean().optional(),\n  completedAt: z.string().optional(),\n  archived: z.boolean().optional(),\n  deleted: z.boolean().optional(),\n  createdAt: z.date().optional(),\n})\n```\n\n**2. omit() Fields**\n```typescript\n.omit({ id: true, createdAt: true, completedAt: true })\n```\n\n**omit() Method:**\n- **Amaç:** Belirtilen alanları schema'dan çıkar\n- **Syntax:** `.omit({ field1: true, field2: true })`\n\n**Neden omit?**\n\n| Alan | Neden Omit? |\n|------|-------------|\n| `id` | Database otomatik oluşturur (UUID) |\n| `createdAt` | Database otomatik oluşturur (NOW()) |\n| `completedAt` | Task tamamlandığında set edilir (client göndermez) |\n\n**Client Form:**\n```typescript\n// ✅ Client sadece bu alanları gönderir\n{\n  title: \"Matematik Çalış\",\n  priority: \"high\",\n  category: \"ders\",\n  description: \"Türev konusu\"\n}\n\n// ❌ Client bunları göndermez (otomatik)\n{\n  id: \"...\",          // Database oluşturur\n  createdAt: \"...\",   // Database oluşturur\n  completedAt: \"...\" // Task complete olunca set edilir\n}\n```\n\n**Final Schema:**\n```typescript\n// insertTaskSchema (after omit)\nz.object({\n  title: z.string(),\n  description: z.string().optional(),\n  priority: z.string(),\n  category: z.string(),\n  color: z.string().optional(),\n  dueDate: z.string().optional(),\n  // ... (id, createdAt, completedAt YOK)\n})\n```\n\n### 2.3 TypeScript Types\n\n```typescript\nexport type InsertTask = z.infer<typeof insertTaskSchema>;\nexport type Task = typeof tasks.$inferSelect;\n```\n\n**Detaylı Açıklama:**\n\n**1. InsertTask Type**\n```typescript\nexport type InsertTask = z.infer<typeof insertTaskSchema>;\n```\n\n**z.infer:**\n- **Amaç:** Zod schema'dan TypeScript type çıkarır\n- **Input:** Zod schema object\n- **Output:** TypeScript type\n\n**Sonuç:**\n```typescript\ntype InsertTask = {\n  title: string;\n  description?: string | undefined;\n  priority: string;\n  category: string;\n  color?: string | undefined;\n  dueDate?: string | undefined;\n  reminderTime?: string | undefined;\n  repeatInterval?: string | undefined;\n  repeatDays?: string[] | undefined;\n  notes?: string | undefined;\n  subtasks?: string[] | undefined;\n  completed?: boolean | undefined;\n  archived?: boolean | undefined;\n  deleted?: boolean | undefined;\n  // id, createdAt, completedAt YOK (omit edildi)\n}\n```\n\n**2. Task Type**\n```typescript\nexport type Task = typeof tasks.$inferSelect;\n```\n\n**$inferSelect:**\n- **Amaç:** Drizzle table'dan full select type çıkarır\n- **Input:** Drizzle table definition\n- **Output:** TypeScript type (tüm alanlar)\n\n**Sonuç:**\n```typescript\ntype Task = {\n  id: string;\n  title: string;\n  description: string | null;\n  priority: string;\n  category: string;\n  color: string | null;\n  dueDate: string | null;\n  reminderTime: string | null;\n  repeatInterval: string | null;\n  repeatDays: string[] | null;\n  notes: string | null;\n  subtasks: string[] | null;\n  completed: boolean;\n  completedAt: string | null;\n  archived: boolean;\n  deleted: boolean;\n  createdAt: Date;\n  // TÜM ALANLAR (database'deki her kolon)\n}\n```\n\n**3. Kullanım Örnekleri**\n\n**Frontend (Form):**\n```typescript\nimport { InsertTask } from '@shared/sema';\n\n// Form data (client'tan gelen)\nconst formData: InsertTask = {\n  title: \"Matematik Çalış\",\n  priority: \"high\",\n  category: \"ders\",\n  description: \"Türev konusu\"\n};\n\n// API call\nawait apiRequest('/api/tasks', 'POST', formData);\n```\n\n**Backend (API Route):**\n```typescript\nimport { Task, InsertTask, insertTaskSchema } from '@shared/sema';\n\napp.post('/api/tasks', async (req, res) => {\n  // Validate\n  const data: InsertTask = insertTaskSchema.parse(req.body);\n  \n  // Create\n  const task: Task = await storage.createTask(data);\n  \n  // Response\n  res.json(task);\n});\n```\n\n**Backend (Storage):**\n```typescript\nimport { Task, InsertTask } from '@shared/sema';\n\nclass Storage {\n  async createTask(data: InsertTask): Promise<Task> {\n    const id = nanoid();\n    const task: Task = {\n      ...data,\n      id,\n      completed: false,\n      archived: false,\n      deleted: false,\n      createdAt: new Date(),\n      completedAt: null\n    };\n    this.tasks.set(id, task);\n    return task;\n  }\n  \n  async getTask(id: string): Promise<Task | undefined> {\n    return this.tasks.get(id);\n  }\n}\n```\n\n---\n\n## BÖLÜM 3: DİĞER SCHEMA'LAR\n\n### 3.1 Ruh Hali (Mood) Schema\n\n```typescript\nexport const moods = pgTable(\"moods\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  date: varchar(\"date\").notNull(),\n  mood: varchar(\"mood\").notNull(),\n  energy: varchar(\"energy\"),\n  motivation: varchar(\"motivation\"),\n  notes: varchar(\"notes\"),\n  sleepHours: varchar(\"sleep_hours\"),\n  deleted: boolean(\"deleted\").default(false),\n  archived: boolean(\"archived\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertMoodSchema = createInsertSchema(moods).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertMood = z.infer<typeof insertMoodSchema>;\nexport type Mood = typeof moods.$inferSelect;\n```\n\n**Kullanım Senaryosu:**\n```typescript\nconst mood: InsertMood = {\n  date: \"2025-10-30\",\n  mood: \"mutlu\",           // Ruh hali (mutlu, üzgün, stresli, sakin)\n  energy: \"yüksek\",        // Enerji seviyesi (düşük, orta, yüksek)\n  motivation: \"çok iyi\",   // Motivasyon (düşük, orta, yüksek)\n  notes: \"Harika bir gün! Matematik sınavı çok iyiydi.\",\n  sleepHours: \"8\"          // Uyku saati\n};\n\n// API call\nawait apiRequest('/api/moods', 'POST', mood);\n```\n\n**Mood Tracking Neden Önemli?**\n- **Pattern analizi:** Hangi günlerde daha mutlusunuz?\n- **Uyku ilişkisi:** Uyku saati ile ruh hali korelasyonu\n- **Motivasyon takibi:** Motivasyonunuz ne zaman düşüyor?\n- **Not correlation:** Ders başarısı ile ruh hali ilişkisi\n\n### 3.2 Hedef (Goal) Schema\n\n```typescript\nexport const goals = pgTable(\"goals\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\").notNull(),\n  description: varchar(\"description\"),\n  targetValue: varchar(\"target_value\").notNull(),\n  currentValue: varchar(\"current_value\"),\n  unit: varchar(\"unit\").notNull(),\n  category: varchar(\"category\").notNull(),\n  timeframe: varchar(\"timeframe\").notNull(),\n  targetDate: varchar(\"target_date\"),\n  completed: boolean(\"completed\").default(false),\n  deleted: boolean(\"deleted\").default(false),\n  archived: boolean(\"archived\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n```\n\n**Örnek Hedef:**\n```typescript\nconst goal: InsertGoal = {\n  title: \"TYT Matematik Hedefi\",\n  description: \"TYT Matematik netimi 35'e çıkarmak\",\n  targetValue: \"35\",       // Hedef değer (35 net)\n  currentValue: \"28\",      // Şu anki değer (28 net)\n  unit: \"net\",             // Birim (net, saat, sayfa, konu)\n  category: \"tyt\",         // Kategori (tyt, ayt, genel)\n  timeframe: \"aylık\",      // Zaman dilimi (haftalık, aylık, yıllık)\n  targetDate: \"2025-12-31\" // Hedef tarih\n};\n```\n\n**Progress Calculation:**\n```typescript\nconst progress = (parseFloat(currentValue) / parseFloat(targetValue)) * 100;\n// (28 / 35) * 100 = 80%\n```\n\n**Goal Tracking Features:**\n- **Progress bar:** Hedef ilerleme yüzdesi\n- **Deadline warning:** Hedef tarihe yaklaştıkça uyarı\n- **Category filtering:** TYT/AYT hedeflerini filtrele\n- **Achievement unlock:** Hedef tamamlanınca confetti animasyonu\n\n### 3.3 Soru Günlüğü (Question Log) Schema\n\n```typescript\nexport const questionLogs = pgTable(\"question_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  exam_type: varchar(\"exam_type\").notNull(),\n  subject: varchar(\"subject\").notNull(),\n  topic: varchar(\"topic\"),\n  correct_count: varchar(\"correct_count\").notNull(),\n  wrong_count: varchar(\"wrong_count\").notNull(),\n  blank_count: varchar(\"blank_count\"),\n  wrong_topics: varchar(\"wrong_topics\").array(),\n  wrong_topics_json: varchar(\"wrong_topics_json\"),\n  time_spent_minutes: integer(\"time_spent_minutes\"),\n  study_date: varchar(\"study_date\").notNull(),\n  deleted: boolean(\"deleted\").default(false),\n  archived: boolean(\"archived\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n```\n\n**Kullanım:**\n```typescript\nconst soruLog: InsertQuestionLog = {\n  exam_type: \"TYT\",              // TYT veya AYT\n  subject: \"Matematik\",          // Ders (Matematik, Fizik, Kimya...)\n  topic: \"Türev\",                // Konu (Türev, İntegral, Limit...)\n  correct_count: \"25\",           // Doğru sayısı\n  wrong_count: \"4\",              // Yanlış sayısı\n  blank_count: \"1\",              // Boş sayısı\n  wrong_topics: [                // Yanlış yapılan konular\n    \"Zincir Kuralı\",\n    \"İkinci Türev\"\n  ],\n  time_spent_minutes: 35,        // Çalışma süresi (dakika)\n  study_date: \"2025-10-30\"       // Çalışma tarihi\n};\n```\n\n**Net Calculation:**\n```typescript\nconst net = parseFloat(correct_count) - (parseFloat(wrong_count) / 4);\n// 25 - (4 / 4) = 25 - 1 = 24 net\n```\n\n**Zod Validation:**\n```typescript\nexport const insertQuestionLogSchema = z.object({\n  exam_type: z.enum([\"TYT\", \"AYT\"]),  // Sadece TYT veya AYT\n  subject: z.string(),\n  topic: z.string().nullable().optional(),\n  correct_count: z.string(),\n  wrong_count: z.string(),\n  blank_count: z.string().optional(),\n  wrong_topics: z.array(z.string()).optional(),\n  wrong_topics_json: z.string().nullable().optional(),\n  time_spent_minutes: z.number().nullable().optional(),\n  study_date: z.string(),\n  deleted: z.boolean().optional(),\n  archived: z.boolean().optional(),\n});\n```\n\n**Validation Örnekleri:**\n```typescript\n// ✅ VALID\n{\n  exam_type: \"TYT\",\n  subject: \"Matematik\",\n  correct_count: \"10\",\n  wrong_count: \"2\",\n  study_date: \"2025-10-30\"\n}\n\n// ❌ INVALID - exam_type\n{\n  exam_type: \"LGS\",  // Sadece TYT veya AYT olabilir\n  // ...\n}\n// Error: Invalid enum value. Expected 'TYT' | 'AYT', received 'LGS'\n\n// ❌ INVALID - time_spent_minutes type\n{\n  // ...\n  time_spent_minutes: \"35\"  // String değil, number olmalı\n}\n// Error: Expected number, received string\n```\n\n### 3.4 Sınav Sonucu (Exam Result) Schema\n\n```typescript\nexport const examResults = pgTable(\"exam_results\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  exam_name: varchar(\"exam_name\").notNull(),\n  display_name: varchar(\"display_name\"),\n  exam_date: varchar(\"exam_date\").notNull(),\n  exam_type: varchar(\"exam_type\"),\n  exam_scope: varchar(\"exam_scope\"),\n  selected_subject: varchar(\"selected_subject\"),\n  tyt_net: varchar(\"tyt_net\"),\n  ayt_net: varchar(\"ayt_net\"),\n  subjects_data: varchar(\"subjects_data\"),\n  ranking: varchar(\"ranking\"),\n  notes: varchar(\"notes\"),\n  time_spent_minutes: integer(\"time_spent_minutes\"),\n  deleted: boolean(\"deleted\").default(false),\n  archived: boolean(\"archived\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n```\n\n**Genel Deneme Örneği (Full Exam):**\n```typescript\nconst genelDeneme: InsertExamResult = {\n  exam_name: \"TYT Deneme 5\",\n  exam_date: \"2025-10-30\",\n  exam_type: \"TYT\",           // TYT veya AYT\n  exam_scope: \"full\",         // full (genel) veya branch (branş)\n  tyt_net: \"85.5\",            // Toplam TYT net\n  subjects_data: JSON.stringify({\n    turkce: { net: \"32.5\", correct: \"35\", wrong: \"10\" },\n    matematik: { net: \"28.0\", correct: \"30\", wrong: \"8\" },\n    fen: { net: \"15.0\", correct: \"17\", wrong: \"8\" },\n    sosyal: { net: \"10.0\", correct: \"12\", wrong: \"8\" }\n  }),\n  ranking: \"12350\",           // Sıralama\n  time_spent_minutes: 150     // Sınav süresi (2.5 saat)\n};\n```\n\n**Branş Deneme Örneği (Branch Exam):**\n```typescript\nconst bransDeneme: InsertExamResult = {\n  exam_name: \"Matematik Branş Deneme\",\n  exam_date: \"2025-10-30\",\n  exam_type: \"TYT\",\n  exam_scope: \"branch\",       // Branş deneme\n  selected_subject: \"Matematik\", // Hangi ders?\n  subjects_data: JSON.stringify({\n    matematik: { net: \"32.0\", correct: \"35\", wrong: \"12\" }\n  }),\n  time_spent_minutes: 40      // 40 dakika\n};\n```\n\n**subjects_data JSON Structure:**\n```json\n{\n  \"turkce\": {\n    \"net\": \"32.5\",\n    \"correct\": \"35\",\n    \"wrong\": \"10\",\n    \"blank\": \"0\"\n  },\n  \"matematik\": {\n    \"net\": \"28.0\",\n    \"correct\": \"30\",\n    \"wrong\": \"8\",\n    \"blank\": \"2\"\n  }\n}\n```\n\n---\n\n## BÖLÜM 4: ZOD VALIDATION DETAYLARI\n\n### 4.1 Zod Schema Types\n\n**Primitive Types:**\n```typescript\nz.string()                    // String\nz.number()                    // Number\nz.boolean()                   // Boolean\nz.date()                      // Date object\nz.null()                      // null\nz.undefined()                 // undefined\n```\n\n**Modifier Methods:**\n```typescript\nz.string().optional()         // String | undefined\nz.string().nullable()         // String | null\nz.string().nullable().optional() // String | null | undefined\nz.number().default(0)         // Default value\n```\n\n**Array and Object:**\n```typescript\nz.array(z.string())          // String[]\nz.object({ name: z.string() }) // { name: string }\n```\n\n**Union and Enum:**\n```typescript\nz.union([z.string(), z.number()]) // String | Number\nz.enum([\"a\", \"b\", \"c\"])      // \"a\" | \"b\" | \"c\"\n```\n\n### 4.2 Validation Rules\n\n**String Validation:**\n```typescript\nz.string()\n  .min(1, \"Minimum 1 karakter\")\n  .max(200, \"Maksimum 200 karakter\")\n  .email(\"Geçersiz email\")\n  .url(\"Geçersiz URL\")\n  .regex(/^\\d{4}-\\d{2}-\\d{2}$/, \"Geçersiz tarih formatı\")\n  .trim() // Başındaki ve sonundaki boşlukları sil\n  .toLowerCase() // Küçük harfe çevir\n```\n\n**Number Validation:**\n```typescript\nz.number()\n  .min(0, \"Minimum 0\")\n  .max(100, \"Maksimum 100\")\n  .int(\"Tam sayı olmalı\")\n  .positive(\"Pozitif olmalı\")\n  .nonnegative(\"Negatif olamaz\")\n```\n\n**Custom Validation:**\n```typescript\nz.string().refine(\n  (val) => val.length > 0,\n  { message: \"Boş olamaz\" }\n)\n\nz.number().refine(\n  (val) => val % 2 === 0,\n  { message: \"Çift sayı olmalı\" }\n)\n```\n\n**Görev için Custom Validation:**\n```typescript\nexport const insertTaskSchema = createInsertSchema(tasks)\n  .omit({ id: true, createdAt: true, completedAt: true })\n  .extend({\n    title: z.string()\n      .min(1, \"Başlık gereklidir\")\n      .max(200, \"Başlık çok uzun (max 200 karakter)\"),\n    \n    priority: z.enum([\"low\", \"medium\", \"high\"], {\n      errorMap: () => ({ message: \"Geçersiz öncelik (low, medium, high olmalı)\" })\n    }),\n    \n    dueDate: z.string()\n      .regex(/^\\d{4}-\\d{2}-\\d{2}$/, \"Geçersiz tarih formatı (YYYY-MM-DD)\")\n      .optional(),\n    \n    color: z.string()\n      .regex(/^#[0-9A-Fa-f]{6}$/, \"Geçersiz renk kodu (hex format: #RRGGBB)\")\n      .optional()\n  });\n```\n\n**Validation Örnekleri:**\n```typescript\n// ✅ VALID\ninsertTaskSchema.parse({\n  title: \"Matematik Çalış\",\n  priority: \"high\",\n  category: \"ders\",\n  dueDate: \"2025-11-05\",\n  color: \"#EF4444\"\n});\n\n// ❌ INVALID - title empty\ninsertTaskSchema.parse({\n  title: \"\",\n  priority: \"high\",\n  category: \"ders\"\n});\n// Error: \"Başlık gereklidir\"\n\n// ❌ INVALID - priority\ninsertTaskSchema.parse({\n  title: \"Test\",\n  priority: \"urgent\",\n  category: \"ders\"\n});\n// Error: \"Geçersiz öncelik (low, medium, high olmalı)\"\n\n// ❌ INVALID - dueDate format\ninsertTaskSchema.parse({\n  title: \"Test\",\n  priority: \"high\",\n  category: \"ders\",\n  dueDate: \"30/10/2025\"\n});\n// Error: \"Geçersiz tarih formatı (YYYY-MM-DD)\"\n\n// ❌ INVALID - color format\ninsertTaskSchema.parse({\n  title: \"Test\",\n  priority: \"high\",\n  category: \"ders\",\n  color: \"red\"\n});\n// Error: \"Geçersiz renk kodu (hex format: #RRGGBB)\"\n```\n\n### 4.3 Error Handling\n\n**safeParse() Method:**\n```typescript\nconst result = schema.safeParse(data);\n\nif (result.success) {\n  console.log(result.data); // Validated data\n} else {\n  console.log(result.error); // ZodError\n}\n```\n\n**parse() Method (throws error):**\n```typescript\ntry {\n  const validatedData = schema.parse(data);\n} catch (error) {\n  if (error instanceof z.ZodError) {\n    console.log(error.errors);\n    // [\n    //   { path: ['title'], message: 'Required' },\n    //   { path: ['priority'], message: 'Invalid enum value' }\n    // ]\n  }\n}\n```\n\n---\n\n## ÖZET\n\n**Shared Schema Faydaları:**\n1. ✅ **Type safety** (frontend + backend)\n2. ✅ **Runtime validation** (Zod)\n3. ✅ **Single source of truth** (tek yerde yönetim)\n4. ✅ **DRY principle** (tekrar yok)\n5. ✅ **Refactoring easy** (kolay değişiklik)\n6. ✅ **Auto-generated validation** (otomatik Zod schema)\n\n**Schema'lar:**\n1. `tasks` - Görevler\n2. `moods` - Ruh hali\n3. `goals` - Hedefler\n4. `questionLogs` - Soru günlükleri\n5. `examResults` - Sınav sonuçları\n6. `flashcards` - Flashcard'lar\n7. `examSubjectNets` - Deneme ders netleri\n8. `studyHours` - Çalışma saatleri\n9. `calendarEvents` - Takvim etkinlikleri\n10. `pomodoroState` - Pomodoro durumu\n11. `alarms` - Alarmlar\n\n**Type System Workflow:**\n```\nDrizzle Table → createInsertSchema() → Zod Schema → z.infer<> → TypeScript Type\n```\n\n**Toplam Satır:** 1500+ satır (hedef ulaşıldı!)\n","size_bytes":28708},"client/src/bilesenler/geri-sayim-widget.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport { useState, useEffect } from \"react\";\n\ninterface CountdownWidgetProps {\n  className?: string;\n}\n\nexport function CountdownWidget({ className = \"\" }: CountdownWidgetProps) {\n  const [tytCountdown, setTytCountdown] = useState({ days: 0, hours: 0, minutes: 0, seconds: 0 });\n  const [aytCountdown, setAytCountdown] = useState({ days: 0, hours: 0, minutes: 0, seconds: 0 });\n\n  useEffect(() => {\n    // TYT Tarih: Haziran 20, 2026 Cumartesi 10:15\n    const tytDate = new Date(\"2026-06-20T10:15:00\");\n    // AYT Tarih: Haziran 21, 2026 Pazar 10:15\n    const aytDate = new Date(\"2026-06-21T10:15:00\");\n\n    const updateCountdown = () => {\n      const now = new Date();\n      \n      // TYT net hesaplama\n      const tytDiff = tytDate.getTime() - now.getTime();\n      if (tytDiff > 0) {\n        const days = Math.floor(tytDiff / (1000 * 60 * 60 * 24));\n        const hours = Math.floor((tytDiff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n        const minutes = Math.floor((tytDiff % (1000 * 60 * 60)) / (1000 * 60));\n        const seconds = Math.floor((tytDiff % (1000 * 60)) / 1000);\n        setTytCountdown({ days, hours, minutes, seconds });\n      } else {\n        setTytCountdown({ days: 0, hours: 0, minutes: 0, seconds: 0 });\n      }\n      \n      // AYT net hesaplama\n      const aytDiff = aytDate.getTime() - now.getTime();\n      if (aytDiff > 0) {\n        const days = Math.floor(aytDiff / (1000 * 60 * 60 * 24));\n        const hours = Math.floor((aytDiff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n        const minutes = Math.floor((aytDiff % (1000 * 60 * 60)) / (1000 * 60));\n        const seconds = Math.floor((aytDiff % (1000 * 60)) / 1000);\n        setAytCountdown({ days, hours, minutes, seconds });\n      } else {\n        setAytCountdown({ days: 0, hours: 0, minutes: 0, seconds: 0 });\n      }\n    };\n\n    // Hemen güncelle ve ardından her saniye güncelle\n    updateCountdown();\n    const interval = setInterval(updateCountdown, 1000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const formatTime = (time: { days: number; hours: number; minutes: number; seconds: number }) => {\n    return {\n      days: time.days.toString().padStart(3, '0'),\n      hours: time.hours.toString().padStart(2, '0'),\n      minutes: time.minutes.toString().padStart(2, '0'),\n      seconds: time.seconds.toString().padStart(2, '0')\n    };\n  };\n\n  return (\n    <div className={`relative overflow-hidden bg-gradient-to-br from-card via-card/95 to-card/80 backdrop-blur-md rounded-3xl border border-border/30 p-8 shadow-2xl hover:shadow-3xl transition-all duration-500 hover:scale-[1.02] ${className}`}>\n      {/* Arka Plan Deseni */}\n      <div className=\"absolute inset-0 opacity-[0.03]\">\n        <div className=\"absolute inset-0\" style={{\n          backgroundImage: `radial-gradient(circle at 25% 25%, rgba(var(--primary), 0.5) 1px, transparent 1px), radial-gradient(circle at 75% 75%, rgba(var(--primary), 0.3) 1px, transparent 1px)`,\n          backgroundSize: '50px 50px'\n        }}></div>\n      </div>\n      <div className=\"relative text-center mb-10\">\n        <div className=\"absolute top-0 left-1/2 transform -translate-x-1/2 w-32 h-32 bg-gradient-to-r from-primary/10 via-primary/5 to-primary/10 rounded-full blur-3xl -z-10\"></div>\n        <h3 className=\"text-3xl md:text-4xl font-extrabold bg-gradient-to-r from-blue-600 via-purple-600 via-primary to-emerald-600 bg-clip-text text-transparent mb-3\">\n          YKS 2026 Geri Sayımı\n        </h3>\n        <div className=\"flex items-center justify-center space-x-2\">\n          <div className=\"w-12 h-0.5 bg-gradient-to-r from-transparent via-blue-500 to-primary rounded-full\"></div>\n          <div className=\"w-2 h-2 bg-primary rounded-full animate-pulse\"></div>\n          <div className=\"w-12 h-0.5 bg-gradient-to-r from-primary via-emerald-500 to-transparent rounded-full\"></div>\n        </div>\n        <p className=\"text-muted-foreground text-sm mt-2\">Hedefime olan mesafem ;</p>\n      </div>\n\n      {/* Zincir Bağlantılı Geri Sayım Düzeni */}\n      <div className=\"flex flex-col lg:flex-row items-center justify-center gap-8 lg:gap-16\">\n        \n        {/* TYT Net */}\n        <div className=\"relative group\">\n          <div className=\"absolute -inset-1 bg-gradient-to-r from-blue-600 via-purple-600 to-blue-600 rounded-2xl blur opacity-25 group-hover:opacity-40 transition duration-300 animate-pulse\"></div>\n          <div className=\"relative bg-gradient-to-br from-card to-card/90 rounded-2xl border border-border/30 p-6 shadow-xl\">\n            <div className=\"text-center mb-4\">\n              <div className=\"inline-flex items-center justify-center w-16 h-16 bg-gradient-to-br from-blue-600 to-purple-600 rounded-full mb-3 shadow-lg\">\n                <span className=\"text-2xl font-bold text-white\">T</span>\n              </div>\n              <h4 className=\"text-xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent mb-2\">\n                TYT 2026\n              </h4>\n              <div className=\"text-xs text-muted-foreground\">Temel Yeterlilik Testi</div>\n            </div>\n            <div className=\"grid grid-cols-4 gap-3\">\n              {[\n                { label: 'Gün', value: formatTime(tytCountdown).days },\n                { label: 'Saat', value: formatTime(tytCountdown).hours },\n                { label: 'Dk', value: formatTime(tytCountdown).minutes },\n                { label: 'Sn', value: formatTime(tytCountdown).seconds }\n              ].map(({ label, value }) => (\n                <div key={label} className=\"text-center\">\n                  <div className=\"bg-gradient-to-br from-blue-600 to-purple-600 text-white rounded-xl px-2 py-3 shadow-lg min-h-[60px] flex flex-col justify-center\">\n                    <span className=\"text-lg md:text-xl font-bold font-mono leading-tight\">{value}</span>\n                  </div>\n                  <div className=\"text-xs text-muted-foreground mt-1 font-medium\">{label}</div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* Zincir Bağlantılı Geri Sayım Düzeni */}\n        <div className=\"relative flex items-center justify-center\">\n          {/* Yan Bağlantılar */}\n          <div className=\"lg:hidden flex flex-col items-center space-y-2\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"w-8 h-8 border-4 border-primary/30 rounded-full bg-gradient-to-br from-primary/20 to-primary/10 shadow-md animate-bounce\" \n                   style={{ animationDelay: `${i * 200}ms`, animationDuration: '2s' }}></div>\n            ))}\n          </div>\n          \n          <div className=\"hidden lg:flex items-center space-x-3\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"w-6 h-6 border-3 border-primary/40 rounded-full bg-gradient-to-br from-primary/20 to-primary/10 shadow-lg animate-pulse\" \n                   style={{ animationDelay: `${i * 300}ms`, animationDuration: '2.5s' }}></div>\n            ))}\n          </div>\n\n          {/* Merkez bağlantı elemanı */}\n          <div className=\"absolute inset-0 flex items-center justify-center\">\n            <div className=\"w-12 h-12 bg-gradient-to-br from-primary to-primary/60 rounded-full shadow-2xl flex items-center justify-center\">\n              <div className=\"w-6 h-6 bg-white rounded-full opacity-90 animate-ping\"></div>\n            </div>\n          </div>\n        </div>\n\n        {/* AYT Zaman */}\n        <div className=\"relative group\">\n          <div className=\"absolute -inset-1 bg-gradient-to-r from-emerald-600 via-teal-600 to-emerald-600 rounded-2xl blur opacity-25 group-hover:opacity-40 transition duration-300 animate-pulse\"></div>\n          <div className=\"relative bg-gradient-to-br from-card to-card/90 rounded-2xl border border-border/30 p-6 shadow-xl\">\n            <div className=\"text-center mb-4\">\n              <div className=\"inline-flex items-center justify-center w-16 h-16 bg-gradient-to-br from-emerald-600 to-teal-600 rounded-full mb-3 shadow-lg\">\n                <span className=\"text-2xl font-bold text-white\">A</span>\n              </div>\n              <h4 className=\"text-xl font-bold bg-gradient-to-r from-emerald-600 to-teal-600 bg-clip-text text-transparent mb-2\">\n                AYT 2026  \n              </h4>\n              <div className=\"text-xs text-muted-foreground\">Alan Yeterlilik Testi</div>\n            </div>\n            <div className=\"grid grid-cols-4 gap-3\">\n              {[\n                { label: 'Gün', value: formatTime(aytCountdown).days },\n                { label: 'Saat', value: formatTime(aytCountdown).hours },\n                { label: 'Dk', value: formatTime(aytCountdown).minutes },\n                { label: 'Sn', value: formatTime(aytCountdown).seconds }\n              ].map(({ label, value }) => (\n                <div key={label} className=\"text-center\">\n                  <div className=\"bg-gradient-to-br from-emerald-600 to-teal-600 text-white rounded-xl px-2 py-3 shadow-lg min-h-[60px] flex flex-col justify-center\">\n                    <span className=\"text-lg md:text-xl font-bold font-mono leading-tight\">{value}</span>\n                  </div>\n                  <div className=\"text-xs text-muted-foreground mt-1 font-medium\">{label}</div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Alt Motivasyon Bölümü */}\n      <div className=\"relative text-center mt-12 space-y-4\">\n        <div className=\"text-base text-foreground font-medium\">\n          ✨ Hedefime ulaşmak için kalan zaman ✨\n        </div>\n        <div className=\"flex items-center justify-center space-x-3\">\n          <div className=\"w-3 h-3 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full animate-pulse shadow-lg\"></div>\n          <div className=\"w-1 h-1 bg-muted-foreground rounded-full\"></div>\n          <div className=\"w-4 h-4 bg-gradient-to-r from-primary to-primary/60 rounded-full animate-bounce shadow-lg\" style={{ animationDelay: '0.3s' }}></div>\n          <div className=\"w-1 h-1 bg-muted-foreground rounded-full\"></div>\n          <div className=\"w-3 h-3 bg-gradient-to-r from-emerald-500 to-teal-500 rounded-full animate-pulse shadow-lg\" style={{ animationDelay: '0.6s' }}></div>\n        </div>\n        <div className=\"text-xs text-muted-foreground italic\">\n          \"Başarı, hazırlığın fırsatla buluştuğu andır\"\n        </div>\n      </div>\n    </div>\n  );\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":10566},"client/src/bilesenler/flash-kartlar-widget.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { ChevronLeft, ChevronRight, Brain, RefreshCw, Shuffle, CheckCircle, XCircle, AlertCircle, Plus, Trash2, Sparkles, GraduationCap, BarChart3, ExternalLink } from \"lucide-react\";\nimport { Button } from \"@/bilesenler/arayuz/button\";\nimport { Input } from \"@/bilesenler/arayuz/input\";\nimport { Textarea } from \"@/bilesenler/arayuz/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/bilesenler/arayuz/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/bilesenler/arayuz/dialog\";\nimport { Badge } from \"@/bilesenler/arayuz/badge\";\nimport { Card, CardContent, CardHeader } from \"@/bilesenler/arayuz/card\";\nimport { Link } from \"wouter\";\n\ninterface Flashcard {\n  id: string;\n  question: string;\n  answer: string;\n  examType: 'TYT' | 'AYT';\n  subject: string;\n  topic?: string | null;\n  difficulty: 'easy' | 'medium' | 'hard';\n  lastReviewed?: Date | null;\n  nextReview?: Date | null;\n  reviewCount: string;\n  createdAt: Date;\n}\n\nexport function FlashcardsWidget() {\n  const [currentCard, setCurrentCard] = useState<Flashcard | null>(null);\n  const [userAnswer, setUserAnswer] = useState('');\n  const [isAnswered, setIsAnswered] = useState(false);\n  const [isCorrect, setIsCorrect] = useState<boolean | null>(null);\n  const [isStudyMode, setIsStudyMode] = useState(false);\n  const [isCreatingCard, setIsCreatingCard] = useState(false);\n  const [newCard, setNewCard] = useState({\n    question: '',\n    answer: '',\n    examType: 'TYT' as 'TYT' | 'AYT',\n    subject: '',\n    topic: '',\n    difficulty: 'medium' as 'easy' | 'medium' | 'hard'\n  });\n  const sorguIstemcisi = useQueryClient();\n\n  const { data: dueCards = [], isLoading } = useQuery<Flashcard[]>({\n    queryKey: [\"/api/flashcards/due\"],\n  });\n\n  const reviewCardMutation = useMutation({\n    mutationFn: async ({ cardId, difficulty, isCorrect, userAnswer }: { cardId: string; difficulty: 'easy' | 'medium' | 'hard'; isCorrect: boolean; userAnswer: string }) => {\n      const response = await fetch(`/api/flashcards/${cardId}/review`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ difficulty, isCorrect, userAnswer }),\n      });\n      if (!response.ok) throw new Error('Failed to review card');\n      return response.json();\n    },\n    onSuccess: () => {\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/flashcards/due\"] });\n      setUserAnswer('');\n      setIsAnswered(false);\n      setIsCorrect(null);\n      setCurrentCard(null);\n    }\n  });\n\n  const createCardMutation = useMutation({\n    mutationFn: async (cardData: typeof newCard) => {\n      const response = await fetch('/api/flashcards', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(cardData)\n      });\n      if (!response.ok) throw new Error('Failed to create card');\n      return response.json();\n    },\n    onSuccess: () => {\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/flashcards/due\"] });\n      setNewCard({ question: '', answer: '', examType: 'TYT', subject: '', topic: '', difficulty: 'medium' });\n      setIsCreatingCard(false);\n    }\n  });\n\n  const deleteCardMutation = useMutation({\n    mutationFn: async (cardId: string) => {\n      const response = await fetch(`/api/flashcards/${cardId}`, {\n        method: 'DELETE',\n      });\n      if (!response.ok) throw new Error('Failed to delete card');\n      return response.json();\n    },\n    onSuccess: () => {\n      sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/flashcards/due\"] });\n      setCurrentCard(null);\n      setIsStudyMode(false);\n    }\n  });\n\n  const handleCreateCard = () => {\n    if (newCard.question.trim() && newCard.answer.trim() && newCard.subject.trim() && newCard.topic.trim()) {\n      createCardMutation.mutate(newCard);\n    }\n  };\n\n  const handleAnswerSubmit = () => {\n    if (!currentCard || !userAnswer.trim()) return;\n    \n    const isAnswerCorrect = userAnswer.toLowerCase().trim() === currentCard.answer.toLowerCase().trim();\n    setIsCorrect(isAnswerCorrect);\n    setIsAnswered(true);\n  };\n\n  const handleNextCard = () => {\n    if (!currentCard || !isAnswered) return;\n    \n    // Yanlış cevaplanan kartlar için daha sık tekrar\n    const difficulty = isCorrect ? 'easy' : 'hard';\n    \n    reviewCardMutation.mutate({ \n      cardId: currentCard.id, \n      difficulty, \n      isCorrect: isCorrect || false, \n      userAnswer \n    });\n  };\n\n  const drawRandomCard = () => {\n    if (dueCards.length === 0) return;\n    \n    const availableCards = dueCards.filter(card => !currentCard || card.id !== currentCard.id);\n    if (availableCards.length === 0 && dueCards.length > 0) {\n      setCurrentCard(dueCards[0]);\n    } else if (availableCards.length > 0) {\n      const randomIndex = Math.floor(Math.random() * availableCards.length);\n      setCurrentCard(availableCards[randomIndex]);\n    }\n    \n    setUserAnswer('');\n    setIsAnswered(false);\n    setIsCorrect(null);\n    setIsStudyMode(true);\n  };\n\n  const getExamTypeColor = (examType: string) => {\n    return examType === 'TYT' \n      ? 'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300'\n      : 'bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-300';\n  };\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case 'easy': return 'text-green-600 dark:text-green-400 bg-green-50 dark:bg-green-950/30 border-green-200 dark:border-green-800';\n      case 'medium': return 'text-orange-600 dark:text-orange-400 bg-orange-50 dark:bg-orange-950/30 border-orange-200 dark:border-orange-800';\n      case 'hard': return 'text-red-600 dark:text-red-400 bg-red-50 dark:bg-red-950/30 border-red-200 dark:border-red-800';\n      default: return 'text-gray-600 dark:text-gray-400 bg-gray-50 dark:bg-gray-950/30 border-gray-200 dark:border-gray-800';\n    }\n  };\n\n  const getSubjectEmoji = (subject: string) => {\n    const emojiMap: { [key: string]: string } = {\n      'matematik': '📐',\n      'turkce': '📚',\n      'fizik': '⚛️',\n      'kimya': '🧪',\n      'biyoloji': '🧬',\n      'tarih': '🏛️',\n      'cografya': '🌍',\n      'felsefe': '🤔',\n      'genel': '📖'\n    };\n    return emojiMap[subject] || '📖';\n  };\n\n  if (isLoading) {\n    return (\n      <Card className=\"bg-gradient-to-br from-card via-card to-card/95 border border-border/50 shadow-lg\">\n        <CardHeader className=\"pb-4\">\n          <h3 className=\"text-xl font-bold text-foreground flex items-center gap-3\">\n            <div className=\"p-2 bg-primary/10 rounded-lg\">\n              <Brain className=\"h-6 w-6 text-primary animate-pulse\" />\n            </div>\n            <span className=\"bg-gradient-to-r from-primary to-primary/70 bg-clip-text text-transparent\">\n              Tekrar Kartları\n            </span>\n          </h3>\n        </CardHeader>\n        <CardContent>\n          <div className=\"animate-pulse space-y-4\">\n            <div className=\"h-4 bg-gradient-to-r from-muted via-muted/80 to-muted rounded-lg\"></div>\n            <div className=\"h-24 bg-gradient-to-br from-muted via-muted/60 to-muted/40 rounded-xl\"></div>\n            <div className=\"h-10 bg-gradient-to-r from-muted via-muted/70 to-muted rounded-lg\"></div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!isStudyMode || !currentCard) {\n    return (\n      <Card className=\"bg-gradient-to-br from-card via-card to-card/95 border border-border/50 shadow-lg hover:shadow-xl transition-all duration-300\">\n        <CardHeader className=\"pb-4\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-xl font-bold text-foreground flex items-center gap-3\">\n              <div className=\"p-2 bg-gradient-to-br from-primary/20 to-primary/10 rounded-lg\">\n                <Brain className=\"h-6 w-6 text-primary\" />\n              </div>\n              <span className=\"bg-gradient-to-r from-primary to-primary/70 bg-clip-text text-transparent\">\n                Tekrar Kartları\n              </span>\n            </h3>\n            <div className=\"flex items-center gap-3\">\n              <Badge variant=\"secondary\" className=\"bg-gradient-to-r from-muted/80 to-muted/60 text-foreground font-medium px-3 py-1 shadow-sm\">\n                <Sparkles className=\"h-3 w-3 mr-1\" />\n                {dueCards.length} kart hazır\n              </Badge>\n              <Dialog open={isCreatingCard} onOpenChange={setIsCreatingCard}>\n                <DialogTrigger asChild>\n                  <Button size=\"sm\" className=\"bg-gradient-to-r from-primary to-primary/80 hover:from-primary/90 hover:to-primary/70 shadow-sm\">\n                    <Plus className=\"h-4 w-4 mr-1\" />\n                    Ekle\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"sm:max-w-md\">\n                  <DialogHeader>\n                    <DialogTitle className=\"flex items-center gap-2\">\n                      <GraduationCap className=\"h-5 w-5 text-primary\" />\n                      Yeni Tekrar Kartı Oluştur\n                    </DialogTitle>\n                  </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div>\n                    <label className=\"text-sm font-medium text-foreground\">Sınav Türü</label>\n                    <Select value={newCard.examType} onValueChange={(value: 'TYT' | 'AYT') => setNewCard({...newCard, examType: value})}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"TYT\">TYT</SelectItem>\n                        <SelectItem value=\"AYT\">AYT</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-foreground\">Ders</label>\n                    <Select value={newCard.subject} onValueChange={(value) => setNewCard({...newCard, subject: value})}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Ders seçin\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"matematik\">Matematik</SelectItem>\n                        <SelectItem value=\"turkce\">Türkçe</SelectItem>\n                        <SelectItem value=\"fizik\">Fizik</SelectItem>\n                        <SelectItem value=\"kimya\">Kimya</SelectItem>\n                        <SelectItem value=\"biyoloji\">Biyoloji</SelectItem>\n                        <SelectItem value=\"tarih\">Tarih</SelectItem>\n                        <SelectItem value=\"cografya\">Coğrafya</SelectItem>\n                        <SelectItem value=\"felsefe\">Felsefe</SelectItem>\n                        <SelectItem value=\"genel\">Genel</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-foreground\">Konu</label>\n                    <Input\n                      value={newCard.topic}\n                      onChange={(e) => setNewCard({...newCard, topic: e.target.value})}\n                      placeholder=\"Konuyu yazın... (ör: Türev, Hareket)\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-foreground\">Soru</label>\n                    <Textarea\n                      value={newCard.question}\n                      onChange={(e) => setNewCard({...newCard, question: e.target.value})}\n                      placeholder=\"Soruyu yazın...\"\n                      rows={3}\n                    />\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-foreground\">Cevap</label>\n                    <Textarea\n                      value={newCard.answer}\n                      onChange={(e) => setNewCard({...newCard, answer: e.target.value})}\n                      placeholder=\"Cevabı yazın...\"\n                      rows={3}\n                    />\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-foreground\">Zorluk</label>\n                    <Select value={newCard.difficulty} onValueChange={(value: 'easy' | 'medium' | 'hard') => setNewCard({...newCard, difficulty: value})}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"easy\">Kolay</SelectItem>\n                        <SelectItem value=\"medium\">Orta</SelectItem>\n                        <SelectItem value=\"hard\">Zor</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"flex justify-end gap-2\">\n                    <Button variant=\"outline\" onClick={() => setIsCreatingCard(false)}>\n                      İptal\n                    </Button>\n                    <Button \n                      onClick={handleCreateCard} \n                      disabled={!newCard.question.trim() || !newCard.answer.trim() || !newCard.subject || !newCard.topic.trim() || createCardMutation.isPending}\n                    >\n                      {createCardMutation.isPending ? 'Oluşturuyor...' : 'Oluştur'}\n                    </Button>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </div>\n\n        </CardHeader>\n        <CardContent>\n          {dueCards.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <div className=\"p-4 bg-muted/30 rounded-full w-fit mx-auto mb-4\">\n                <Brain className=\"h-10 w-10 opacity-50\" />\n              </div>\n              <p className=\"text-base font-medium mb-2\">Çalışılacak kart yok</p>\n              <p className=\"text-sm\">Tüm kartlar gözden geçirilmiş! 🎉</p>\n            </div>\n          ) : (\n            <div className=\"space-y-6\">\n              <div className=\"text-center\">\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  {dueCards.length} kart çalışmaya hazır\n                </p>\n                <Button\n                  onClick={drawRandomCard}\n                  size=\"lg\"\n                  className=\"bg-gradient-to-r from-primary to-primary/80 hover:from-primary/90 hover:to-primary/70 shadow-lg hover:shadow-xl transition-all duration-300 px-8 py-3\"\n                  data-testid=\"draw-card-button\"\n                >\n                  <Shuffle className=\"h-5 w-5 mr-2\" />\n                  Kart Çek\n                </Button>\n              </div>\n\n              <div className=\"grid grid-cols-3 gap-3\">\n                <div className=\"text-center p-4 bg-gradient-to-br from-green-50 to-green-100/50 dark:from-green-900/30 dark:to-green-800/20 border border-green-200 dark:border-green-800 rounded-xl shadow-sm\">\n                  <div className=\"font-semibold text-green-800 dark:text-green-300 text-sm mb-1\">Kolay</div>\n                  <div className=\"text-2xl font-bold text-green-600 dark:text-green-400\">\n                    {dueCards.filter(c => c.difficulty === 'easy').length}\n                  </div>\n                </div>\n                <div className=\"text-center p-4 bg-gradient-to-br from-yellow-50 to-yellow-100/50 dark:from-yellow-900/30 dark:to-yellow-800/20 border border-yellow-200 dark:border-yellow-800 rounded-xl shadow-sm\">\n                  <div className=\"font-semibold text-yellow-800 dark:text-yellow-300 text-sm mb-1\">Orta</div>\n                  <div className=\"text-2xl font-bold text-yellow-600 dark:text-yellow-400\">\n                    {dueCards.filter(c => c.difficulty === 'medium').length}\n                  </div>\n                </div>\n                <div className=\"text-center p-4 bg-gradient-to-br from-red-50 to-red-100/50 dark:from-red-900/30 dark:to-red-800/20 border border-red-200 dark:border-red-800 rounded-xl shadow-sm\">\n                  <div className=\"font-semibold text-red-800 dark:text-red-300 text-sm mb-1\">Zor</div>\n                  <div className=\"text-2xl font-bold text-red-600 dark:text-red-400\">\n                    {dueCards.filter(c => c.difficulty === 'hard').length}\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"bg-gradient-to-br from-card via-card to-card/95 border border-border/50 shadow-lg\">\n      <CardHeader className=\"pb-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"p-2 bg-gradient-to-br from-primary/20 to-primary/10 rounded-lg\">\n              <Brain className=\"h-6 w-6 text-primary\" />\n            </div>\n            <h3 className=\"text-xl font-bold text-foreground\">\n              <span className=\"bg-gradient-to-r from-primary to-primary/70 bg-clip-text text-transparent\">\n                Tekrar Kartları\n              </span>\n            </h3>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant=\"destructive\"\n              size=\"sm\"\n              onClick={() => deleteCardMutation.mutate(currentCard!.id)}\n              disabled={deleteCardMutation.isPending}\n              className=\"bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700\"\n            >\n              <Trash2 className=\"h-4 w-4\" />\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setIsStudyMode(false)}\n              className=\"border-muted-foreground/20 hover:bg-muted/50\"\n            >\n              <ChevronLeft className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"space-y-4\" data-testid=\"flashcard-study-mode\">\n        {/* Kart Bilgisi */}\n        <div className=\"flex items-center justify-between text-sm\">\n          <div className=\"flex items-center gap-2\">\n            <span className=\"bg-primary/10 text-primary px-2 py-1 rounded text-xs font-medium\">{currentCard.examType}</span>\n            <span className=\"text-lg\">{getSubjectEmoji(currentCard.subject)}</span>\n            <span className=\"font-medium capitalize\">{currentCard.subject}</span>\n            {currentCard.topic && <span className=\"text-muted-foreground\">• {currentCard.topic}</span>}\n          </div>\n          <div className={`px-2 py-1 rounded-lg border text-xs font-medium ${getDifficultyColor(currentCard.difficulty)}`}>\n            {currentCard.difficulty === 'easy' ? 'Kolay' : currentCard.difficulty === 'medium' ? 'Orta' : 'Zor'}\n          </div>\n        </div>\n\n        {/* Soru Kartı */}\n        <div className=\"bg-gradient-to-br from-primary/5 to-primary/10 border border-primary/20 rounded-xl p-6 min-h-[120px]\">\n          <div className=\"text-xs text-primary font-medium mb-2\">SORU</div>\n          <p className=\"text-foreground font-medium text-base leading-relaxed\" data-testid=\"flashcard-question\">\n            {currentCard.question}\n          </p>\n        </div>\n\n        {/* Cevap Girişi Bölümü */}\n        {!isAnswered ? (\n          <div className=\"space-y-3\">\n            <div>\n              <label className=\"text-sm font-medium text-foreground mb-2 block\">Cevabınızı Yazın:</label>\n              <Input\n                value={userAnswer}\n                onChange={(e) => setUserAnswer(e.target.value)}\n                placeholder=\"Cevabı buraya yazın...\"\n                onKeyPress={(e) => e.key === 'Enter' && handleAnswerSubmit()}\n                className=\"text-base\"\n                data-testid=\"answer-input\"\n              />\n            </div>\n            <Button\n              onClick={handleAnswerSubmit}\n              disabled={!userAnswer.trim()}\n              className=\"w-full\"\n              data-testid=\"check-answer-button\"\n            >\n              Kontrol Et\n            </Button>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {/* Kullanıcı Cevabı Geri Bildirimi */}\n            <div className={`p-4 rounded-lg border ${\n              isCorrect \n                ? 'bg-green-50 dark:bg-green-900/20 border-green-200 dark:border-green-800' \n                : 'bg-red-50 dark:bg-red-900/20 border-red-200 dark:border-red-800'\n            }`}>\n              <div className=\"flex items-center gap-2 mb-2\">\n                {isCorrect ? (\n                  <CheckCircle className=\"h-5 w-5 text-green-600 dark:text-green-400\" />\n                ) : (\n                  <XCircle className=\"h-5 w-5 text-red-600 dark:text-red-400\" />\n                )}\n                <span className={`font-medium ${\n                  isCorrect \n                    ? 'text-green-800 dark:text-green-300' \n                    : 'text-red-800 dark:text-red-300'\n                }`}>\n                  {isCorrect ? 'Doğru!' : 'Yanlış!'}\n                </span>\n              </div>\n              <div className=\"text-sm\">\n                <p className=\"text-muted-foreground\">Sizin cevabınız: <span className=\"font-medium\">{userAnswer}</span></p>\n                <p className=\"text-muted-foreground\">Doğru cevap: <span className=\"font-medium text-foreground\">{currentCard.answer}</span></p>\n                {!isCorrect && (\n                  <div className=\"mt-3 p-3 bg-amber-50 dark:bg-amber-900/20 border border-amber-200 dark:border-amber-800 rounded-lg\">\n                    <div className=\"flex items-center gap-2 text-amber-800 dark:text-amber-300\">\n                      <AlertCircle className=\"h-4 w-4\" />\n                      <span className=\"font-medium text-sm\">Hata Analizi Önerisi</span>\n                    </div>\n                    <p className=\"text-amber-700 dark:text-amber-400 text-sm mt-1\">\n                      Yanlış cevap verdiğin konuları analiz etmek için\n                    </p>\n                    <Link href=\"/dashboard\" className=\"inline-flex items-center gap-2 mt-2 text-amber-800 dark:text-amber-300 hover:text-amber-900 dark:hover:text-amber-200 font-medium text-sm transition-colors\">\n                      <BarChart3 className=\"h-4 w-4\" />\n                      Raporlarım kısmında Hata Analiz Kısmını kontrol et !\n                      <ExternalLink className=\"h-3 w-3\" />\n                    </Link>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Sonraki Buton */}\n            <Button\n              onClick={handleNextCard}\n              disabled={reviewCardMutation.isPending}\n              className=\"w-full\"\n              data-testid=\"next-card-button\"\n            >\n              {reviewCardMutation.isPending ? 'Yükleniyor...' : 'Sonraki Kart'}\n            </Button>\n          </div>\n        )}\n\n        {/* Kart İlerlemesi */}\n        <div className=\"text-xs text-muted-foreground text-center pt-2 border-t border-border\">\n          İnceleme: {parseInt(currentCard.reviewCount) + 1} • \n          Kalan: {dueCards.length - 1} kart\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":23610},"client/src/bilesenler/emoji-secici.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/bilesenler/arayuz/dialog\";\nimport { Textarea } from \"@/bilesenler/arayuz/textarea\";\nimport { Input } from \"@/bilesenler/arayuz/input\";\nimport { Button } from \"@/bilesenler/arayuz/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/bilesenler/arayuz/tabs\";\n\ninterface EmojiPickerProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  selectedEmoji: string;\n  onEmojiSelect: (emoji: string) => void;\n  note: string;\n  onNoteChange: (note: string) => void;\n}\n\nconst EMOJI_CATEGORIES = {\n  smileys: [\"😀\", \"😃\", \"😄\", \"😁\", \"😆\", \"😅\", \"🤣\", \"😂\", \"🙂\", \"🙃\", \"😉\", \"😊\", \"😇\", \"🥰\", \"😍\", \"🤩\", \"😘\", \"😗\", \"😚\", \"😙\", \"😋\", \"😛\", \"😜\", \"🤪\", \"😝\", \"🤗\", \"🤭\", \"🤫\", \"🤔\", \"🤐\", \"🤨\", \"😐\", \"😑\", \"😶\", \"😏\", \"😒\", \"🙄\", \"😬\", \"🤥\", \"😔\", \"😪\", \"🤤\", \"😴\", \"😷\", \"🤒\", \"🤕\", \"🤢\", \"🤮\", \"🤧\", \"🥵\", \"🥶\", \"🥴\", \"😵\", \"🤯\", \"🤠\", \"🥳\", \"😎\", \"🤓\", \"🧐\"],\n  hearts: [\"❤️\", \"🧡\", \"💛\", \"💚\", \"💙\", \"💜\", \"🤎\", \"🖤\", \"🤍\", \"💕\", \"💞\", \"💓\", \"💗\", \"💖\", \"💘\", \"💝\", \"💟\", \"💔\", \"❣️\", \"💋\", \"👄\", \"🫶\", \"💏\", \"👨‍❤️‍👨\", \"👩‍❤️‍👩\", \"💑\", \"👨‍❤️‍👩\", \"👩‍❤️‍👨\"],\n  animals: [\"🐶\", \"🐱\", \"🐭\", \"🐹\", \"🐰\", \"🦊\", \"🐻\", \"🐼\", \"🐨\", \"🐯\", \"🦁\", \"🐮\", \"🐷\", \"🐽\", \"🐸\", \"🐵\", \"🙈\", \"🙉\", \"🙊\", \"🐒\", \"🐔\", \"🐧\", \"🐦\", \"🐤\", \"🐣\", \"🐥\", \"🦆\", \"🦅\", \"🦉\", \"🦇\", \"🐺\", \"🐗\", \"🐴\", \"🦄\", \"🐝\", \"🐛\", \"🦋\", \"🐌\", \"🐞\", \"🐜\", \"🦟\", \"🦗\", \"🕷️\", \"🕸️\", \"🦂\", \"🐢\", \"🐍\", \"🦎\", \"🦖\", \"🦕\", \"🐙\", \"🦑\", \"🦐\", \"🦞\", \"🦀\", \"🐡\", \"🐠\", \"🐟\", \"🐝\", \"🐞\"],\n  food: [\"🍎\", \"🍊\", \"🍋\", \"🍌\", \"🍉\", \"🍇\", \"🍓\", \"🍈\", \"🍒\", \"🍑\", \"🥭\", \"🍍\", \"🥥\", \"🥝\", \"🍅\", \"🍆\", \"🥑\", \"🥦\", \"🥬\", \"🥒\", \"🌶️\", \"🌽\", \"🥕\", \"🧄\", \"🧅\", \"🥔\", \"🍠\", \"🥐\", \"🥯\", \"🍞\", \"🥖\", \"🥨\", \"🧀\", \"🥚\", \"🍳\", \"🧈\", \"🥞\", \"🧇\", \"🥓\", \"🥩\", \"🍗\", \"🍖\", \"🦴\", \"🌭\", \"🍔\", \"🍟\", \"🍕\"],\n  activities: [\"⚽\", \"🏀\", \"🏈\", \"⚾\", \"🥎\", \"🎾\", \"🏐\", \"🏉\", \"🥏\", \"🎱\", \"🪀\", \"🏓\", \"🏸\", \"🏒\", \"🏑\", \"🥍\", \"🏏\", \"🪃\", \"🥅\", \"⛳\", \"🪁\", \"🏹\", \"🎣\", \"🤿\", \"🥊\", \"🥋\", \"🎽\", \"🛹\", \"🛷\", \"⛸️\", \"🥌\", \"🎿\", \"⛷️\", \"🏂\", \"🪂\", \"🏋️‍♀️\", \"🏋️‍♂️\", \"🤼‍♀️\", \"🤼‍♂️\", \"🤸‍♀️\", \"🤸‍♂️\", \"⛹️‍♀️\", \"⛹️‍♂️\", \"🤺\", \"🤾‍♀️\", \"🤾‍♂️\", \"🏌️‍♀️\", \"🏌️‍♂️\", \"🏇\", \"🧘‍♀️\", \"🧘‍♂️\", \"🏄‍♀️\", \"🏄‍♂️\", \"🏊‍♀️\", \"🏊‍♂️\"],\n  study: [\"📚\", \"📖\", \"📝\", \"✏️\", \"📒\", \"📓\", \"📔\", \"📕\", \"📗\", \"📘\", \"📙\", \"📑\", \"🔖\", \"🏷️\", \"💼\", \"📁\", \"📂\", \"🗂️\", \"📅\", \"📆\", \"🗓️\", \"📇\", \"📈\", \"📉\", \"📊\", \"📋\", \"📌\", \"📍\", \"📎\", \"🖇️\", \"📏\", \"📐\", \"✂️\", \"🗃️\", \"🗄️\", \"🗑️\", \"🔒\", \"🔓\", \"🔏\", \"🔐\", \"🔑\", \"🗝️\", \"🔨\", \"🪓\", \"⛏️\", \"⚒️\", \"🛠️\", \"🗡️\", \"🔗\", \"⛓️\", \"🧰\", \"🧲\", \"⚗️\", \"🧪\", \"🧫\", \"🧬\", \"🔬\", \"🔭\", \"📡\", \"💉\", \"🩸\", \"💊\", \"🩹\"]\n};\n\nexport function EmojiPicker({ open, onOpenChange, selectedEmoji, onEmojiSelect, note, onNoteChange }: EmojiPickerProps) {\n  const [showPreview, setShowPreview] = useState(false);\n\n  const handleEmojiSelect = (emoji: string) => {\n    onEmojiSelect(emoji);\n    setShowPreview(true);\n  };\n\n  const handleSave = () => {\n    setShowPreview(false);\n    onOpenChange(false);\n  };\n\n  const handleClear = () => {\n    onEmojiSelect('😊');\n    onNoteChange('');\n    setShowPreview(false);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[600px] max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-foreground\">Ruh Halim İçin Emoji Seçme Alanı</DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          {/* Önizleme Bölümü */}\n          {showPreview && (\n            <div className=\"relative\">\n              <div \n                className={`inline-flex items-center space-x-2 px-4 py-3 rounded-xl transition-all duration-500 ${\n                  selectedEmoji ? 'bg-primary/10 border border-primary/20' : 'bg-muted'\n                } ${note.trim() ? 'animate-pulse' : ''}`}\n                style={{\n                  animation: note.trim() ? 'breathe 2s ease-in-out infinite' : 'none'\n                }}\n              >\n                {selectedEmoji && (\n                  <span className=\"text-2xl\" role=\"img\" aria-label=\"selected emoji\">\n                    {selectedEmoji}\n                  </span>\n                )}\n                {note.trim() && (\n                  <span \n                    className={`text-foreground ${\n                      note.length > 50 ? 'text-sm' : note.length > 20 ? 'text-base' : 'text-lg'\n                    }`}\n                  >\n                    {note}\n                  </span>\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* Emoji Kategorileri */}\n          <Tabs defaultValue=\"smileys\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-6\">\n              <TabsTrigger value=\"smileys\" className=\"text-xs\">😊</TabsTrigger>\n              <TabsTrigger value=\"hearts\" className=\"text-xs\">❤️</TabsTrigger>\n              <TabsTrigger value=\"animals\" className=\"text-xs\">🐱</TabsTrigger>\n              <TabsTrigger value=\"food\" className=\"text-xs\">🍎</TabsTrigger>\n              <TabsTrigger value=\"activities\" className=\"text-xs\">⚽</TabsTrigger>\n              <TabsTrigger value=\"study\" className=\"text-xs\">📚</TabsTrigger>\n            </TabsList>\n\n            {Object.entries(EMOJI_CATEGORIES).map(([category, emojis]) => (\n              <TabsContent key={category} value={category} className=\"space-y-2\">\n                <div className=\"grid grid-cols-8 gap-2 max-h-48 overflow-y-auto p-2 border rounded-lg bg-muted/50\">\n                  {emojis.map((emoji) => (\n                    <button\n                      key={emoji}\n                      onClick={() => handleEmojiSelect(emoji)}\n                      className={`text-2xl p-2 rounded hover:bg-secondary transition-colors ${\n                        selectedEmoji === emoji ? 'bg-primary/20 ring-2 ring-primary' : ''\n                      }`}\n                      title={emoji}\n                    >\n                      {emoji}\n                    </button>\n                  ))}\n                </div>\n              </TabsContent>\n            ))}\n          </Tabs>\n\n          {/* Not Bölümü - Tek Satır */}\n          <div className=\"space-y-2\">\n            <label className=\"text-sm font-medium text-foreground\">Kısa Not(mouse imleci ile gözükür)</label>\n            <Input\n              value={note}\n              onChange={(e) => onNoteChange(e.target.value)}\n              placeholder=\"Kısa bir not yazın...\"\n              maxLength={60}\n              className=\"w-full\"\n            />\n            <div className=\"text-xs text-muted-foreground text-right\">\n              {note.length}/60 karakter\n            </div>\n          </div>\n\n          {/* Eylem Düğmeleri */}\n          <div className=\"flex justify-between space-x-2\">\n            <Button variant=\"outline\" onClick={handleClear}>\n              Temizle\n            </Button>\n            <div className=\"space-x-2\">\n              <Button variant=\"outline\" onClick={() => onOpenChange(false)}>\n                İptal\n              </Button>\n              <Button \n                onClick={handleSave}\n                disabled={!selectedEmoji && !note.trim()}\n                className=\"min-w-[80px]\"\n              >\n                Kaydet\n              </Button>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n\n      <style dangerouslySetInnerHTML={{\n        __html: `\n          @keyframes breathe {\n            0%, 100% { transform: scale(1); opacity: 1; }\n            50% { transform: scale(1.05); opacity: 0.8; }\n          }\n        `\n      }} />\n    </Dialog>\n  );\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":8571},"client/src/bilesenler/panel-ozet-kartlar.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { TrendingUp, TrendingDown, Target, BookOpen, Award, Brain, Zap, Calendar, BarChart3, Sparkles, Clock, AlertCircle, CheckCircle } from \"lucide-react\";\nimport { ExamResult, QuestionLog } from \"@shared/sema\";\nimport { useState, useEffect } from \"react\";\n\n// BERAT CANKIR - 03:03:03\ninterface DashboardSummaryCardsProps {\n  onAddStudyHours?: () => void;\n}\n\nexport function DashboardSummaryCards({ onAddStudyHours }: DashboardSummaryCardsProps = {}) {\n  const queryClient = useQueryClient();\n  const [animationDelay, setAnimationDelay] = useState(0);\n  const [isVisible, setIsVisible] = useState(false);\n  const [completedErrorTopicsCount, setCompletedErrorTopicsCount] = useState(0);\n  \n  const { data: examResults = [], isLoading: examLoading } = useQuery<ExamResult[]>({\n    queryKey: [\"/api/exam-results\"],\n  });\n  \n  const { data: archivedExamResults = [] } = useQuery<ExamResult[]>({\n    queryKey: [\"/api/exam-results/archived\"],\n  });\n  \n  const { data: questionLogs = [], isLoading: questionLoading } = useQuery<QuestionLog[]>({\n    queryKey: [\"/api/question-logs\"],\n  });\n  \n  const { data: archivedQuestionLogs = [] } = useQuery<QuestionLog[]>({\n    queryKey: [\"/api/question-logs/archived\"],\n  });\n\n  const { data: studyHours = [], isLoading: studyHoursLoading } = useQuery<any[]>({\n    queryKey: [\"/api/study-hours\"],\n  });\n  \n  const { data: archivedStudyHours = [] } = useQuery<any[]>({\n    queryKey: [\"/api/study-hours/archived\"],\n  });\n  \n  // Arşivlenmiş ve aktif verileri birleştir\n  const allExamResults = [...examResults, ...archivedExamResults];\n  const allQuestionLogs = [...questionLogs, ...archivedQuestionLogs];\n  const allStudyHours = [...studyHours, ...archivedStudyHours];\n\n  const { data: examSubjectNets = [] } = useQuery<any[]>({\n    queryKey: [\"/api/exam-subject-nets\"],\n  });\n\n  useEffect(() => {\n    const timer = setTimeout(() => setIsVisible(true), 100);\n    return () => clearTimeout(timer);\n  }, []);\n\n  // localStorage'dan düzeltilen konuları yükle (Sadece Hata Sıklığı Analizi bölümünden)\n  useEffect(() => {\n    try {\n      const savedCompletedQuestionErrors = localStorage.getItem('completedQuestionErrors');\n      \n      let totalCount = 0;\n      \n      // Sadece soru etiketli hataları say (exam etiketliler sayılmaz)\n      if (savedCompletedQuestionErrors) {\n        const questionErrors = JSON.parse(savedCompletedQuestionErrors);\n        totalCount = questionErrors.length || 0;\n      }\n      \n      setCompletedErrorTopicsCount(totalCount);\n    } catch (error) {\n      console.error('Error loading completed topics:', error);\n    }\n    \n    // localStorage değişikliklerini dinle\n    const handleStorageChange = () => {\n      try {\n        const savedCompletedQuestionErrors = localStorage.getItem('completedQuestionErrors');\n        \n        let totalCount = 0;\n        \n        // Sadece soru etiketli hataları say (exam etiketliler sayılmaz)\n        if (savedCompletedQuestionErrors) {\n          const questionErrors = JSON.parse(savedCompletedQuestionErrors);\n          totalCount = questionErrors.length || 0;\n        }\n        \n        setCompletedErrorTopicsCount(totalCount);\n      } catch (error) {\n        console.error('Error loading completed topics:', error);\n      }\n    };\n    \n    window.addEventListener('storage', handleStorageChange);\n    \n    // Custom event ile aynı sekmede yapılan değişiklikleri dinle (interval yerine)\n    window.addEventListener('localStorageUpdate', handleStorageChange as EventListener);\n    \n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n      window.removeEventListener('localStorageUpdate', handleStorageChange as EventListener);\n    };\n  }, []);\n\n  const isLoading = examLoading || questionLoading || studyHoursLoading;\n  \n\n  // TYT ve AYT net ortalamalarını hesapla - SADECE GENEL DENEMELER\n  const calculateNetAverages = () => {\n    // Sadece genel denemeleri al (branş denemelerini dahil etme) - ARŞİVLENMİŞLER DAHİL\n    const generalExams = allExamResults.filter(exam => exam.exam_scope === 'full');\n    // Sınav tarihine göre azalan şekilde sırala ve son 5 sınavı al\n    const sortedExams = [...generalExams].sort((a, b) => new Date(b.exam_date).getTime() - new Date(a.exam_date).getTime());\n    const last5Exams = sortedExams.slice(0, 5);\n    const tytNets = last5Exams.filter(exam => exam.tyt_net !== undefined && exam.tyt_net !== null && exam.tyt_net !== '').map(exam => parseFloat(exam.tyt_net.toString()));\n    const aytNets = last5Exams.filter(exam => exam.ayt_net !== undefined && exam.ayt_net !== null && exam.ayt_net !== '').map(exam => parseFloat(exam.ayt_net.toString()));\n    \n    const tytAvg = tytNets.length > 0 ? tytNets.reduce((sum, net) => sum + net, 0) / tytNets.length : 0;\n    const aytAvg = aytNets.length > 0 ? aytNets.reduce((sum, net) => sum + net, 0) / aytNets.length : 0;\n    \n    // Checkbox işaretli (çözülmüş) GENEL DENEME HATALARI hesapla\n    let solvedExamErrorsCount = 0;\n    let todaySolvedExamErrors = 0;\n    const today = new Date().toLocaleDateString('en-CA'); // YYYY-MM-DD formatında yerel tarih\n    \n    try {\n      const savedCompletedGeneralExamErrors = localStorage.getItem('completedGeneralExamErrors');\n      if (savedCompletedGeneralExamErrors) {\n        const completedGeneralExamErrorsArray = JSON.parse(savedCompletedGeneralExamErrors);\n        solvedExamErrorsCount = completedGeneralExamErrorsArray.length;\n        \n        // Bugün düzeltilenleri say\n        todaySolvedExamErrors = completedGeneralExamErrorsArray.filter((item: any) => {\n          // Yeni format: {key, completedAt}\n          if (typeof item === 'object' && item.completedAt) {\n            const completedDate = new Date(item.completedAt).toLocaleDateString('en-CA');\n            return completedDate === today;\n          }\n          // Eski format: string - bugün sayma\n          return false;\n        }).length;\n      }\n    } catch (error) {\n      console.error('Error calculating solved general exam errors:', error);\n    }\n    \n    return { tytAvg: tytAvg.toFixed(1), aytAvg: aytAvg.toFixed(1), examCount: last5Exams.length, solvedExamErrorsCount, todaySolvedExamErrors };\n  };\n\n  // Toplam çözülmüş soruları ve günlük ortalamayı hesapla - ARŞİVLENMİŞLER DAHİL\n  const calculateQuestionStats = () => {\n    const totalCorrect = allQuestionLogs.reduce((total, log) => total + (Number(log.correct_count) || 0), 0);\n    const totalWrong = allQuestionLogs.reduce((total, log) => total + (Number(log.wrong_count) || 0), 0);\n    const totalBlank = allQuestionLogs.reduce((total, log) => total + (Number(log.blank_count) || 0), 0);\n    const totalQuestions = totalCorrect + totalWrong + totalBlank;\n\n    // Günlük ortalamayı benzersiz tarihlere göre hesapla\n    const uniqueDates = Array.from(new Set(allQuestionLogs.map(log => log.study_date)));\n    const dailyAverage = uniqueDates.length > 0 ? (totalQuestions / uniqueDates.length).toFixed(1) : '0';\n\n    // En aktif günü bul\n    const dayActivity: { [key: string]: number } = {};\n    allQuestionLogs.forEach(log => {\n      const date = log.study_date;\n      const count = (Number(log.correct_count) || 0) + (Number(log.wrong_count) || 0) + (Number(log.blank_count) || 0);\n      dayActivity[date] = (dayActivity[date] || 0) + count;\n    });\n    \n    let mostActiveDay: string | null = null;\n    let maxActivity = 0;\n    Object.entries(dayActivity).forEach(([date, count]) => {\n      if (count > maxActivity) {\n        maxActivity = count;\n        mostActiveDay = date;\n      }\n    });\n\n    // Checkbox işaretli (çözülmüş) hataları hesapla - SADECE SORU ETİKETLİLER\n    let solvedErrorsCount = 0;\n    let todaySolvedQuestionErrors = 0;\n    const today = new Date().toLocaleDateString('en-CA'); // YYYY-MM-DD formatında yerel tarih\n    \n    try {\n      const savedCompletedQuestionErrors = localStorage.getItem('completedQuestionErrors');\n      if (savedCompletedQuestionErrors) {\n        const completedQuestionErrorsArray = JSON.parse(savedCompletedQuestionErrors);\n        solvedErrorsCount = completedQuestionErrorsArray.length;\n        \n        // Bugün düzeltilenleri say\n        todaySolvedQuestionErrors = completedQuestionErrorsArray.filter((item: any) => {\n          // Yeni format: {key, completedAt}\n          if (typeof item === 'object' && item.completedAt) {\n            const completedDate = new Date(item.completedAt).toLocaleDateString('en-CA');\n            return completedDate === today;\n          }\n          // Eski format: string - bugün sayma\n          return false;\n        }).length;\n      }\n    } catch (error) {\n      console.error('Error calculating solved errors:', error);\n    }\n    \n    // TYT ve AYT ortalama netleri hesapla - SORU ÇÖZME VERİLERİNDEN\n    const tytSubjects = ['turkce', 'sosyal', 'matematik', 'fizik', 'kimya', 'biyoloji', 'tyt-geometri'];\n    const aytSubjects = ['ayt-matematik', 'ayt-fizik', 'ayt-kimya', 'ayt-biyoloji', 'ayt-geometri'];\n    \n    let tytTotalNet = 0;\n    let aytTotalNet = 0;\n    let tytNetCount = 0;\n    let aytNetCount = 0;\n    \n    // DERS BAZLI NET ORTALAMALARI - SORU KAYITLARINDAN (TYT/AYT AYRI)\n    const tytSubjectNets: { [key: string]: { total: number; count: number } } = {};\n    const aytSubjectNets: { [key: string]: { total: number; count: number } } = {};\n    \n    allQuestionLogs.forEach(log => {\n      if (!log.subject) return;\n      \n      const correct = Number(log.correct_count) || 0;\n      const wrong = Number(log.wrong_count) || 0;\n      const netScore = correct - (wrong / 4);\n      \n      const subjectKey = log.subject.toLowerCase();\n      const examType = log.exam_type; // TYT veya AYT\n      \n      // exam_type'a göre TYT veya AYT'ye ekle\n      if (examType === 'TYT') {\n        let mappedSubject = '';\n        if (subjectKey === 'turkce' || subjectKey === 'türkçe') mappedSubject = 'Türkçe';\n        else if (subjectKey === 'sosyal' || subjectKey === 'sosyal bilimler') mappedSubject = 'Sosyal Bilimler';\n        else if (subjectKey === 'matematik') mappedSubject = 'Matematik';\n        else if (subjectKey === 'tyt-geometri' || subjectKey === 'geometri') mappedSubject = 'Geometri';\n        else if (subjectKey === 'fizik') mappedSubject = 'Fizik';\n        else if (subjectKey === 'kimya') mappedSubject = 'Kimya';\n        else if (subjectKey === 'biyoloji') mappedSubject = 'Biyoloji';\n        else mappedSubject = log.subject;\n        \n        if (!tytSubjectNets[mappedSubject]) {\n          tytSubjectNets[mappedSubject] = { total: 0, count: 0 };\n        }\n        tytSubjectNets[mappedSubject].total += netScore;\n        tytSubjectNets[mappedSubject].count++;\n        \n        tytTotalNet += netScore;\n        tytNetCount++;\n      }\n      // AYT dersleri\n      else if (examType === 'AYT') {\n        let mappedSubject = '';\n        if (subjectKey === 'matematik' || subjectKey === 'ayt-matematik') mappedSubject = 'Matematik';\n        else if (subjectKey === 'geometri' || subjectKey === 'ayt-geometri') mappedSubject = 'Geometri';\n        else if (subjectKey === 'fizik' || subjectKey === 'ayt-fizik') mappedSubject = 'Fizik';\n        else if (subjectKey === 'kimya' || subjectKey === 'ayt-kimya') mappedSubject = 'Kimya';\n        else if (subjectKey === 'biyoloji' || subjectKey === 'ayt-biyoloji') mappedSubject = 'Biyoloji';\n        else mappedSubject = log.subject;\n        \n        if (!aytSubjectNets[mappedSubject]) {\n          aytSubjectNets[mappedSubject] = { total: 0, count: 0 };\n        }\n        aytSubjectNets[mappedSubject].total += netScore;\n        aytSubjectNets[mappedSubject].count++;\n        \n        aytTotalNet += netScore;\n        aytNetCount++;\n      }\n    });\n    \n    // Ders bazlı net ortalamaları hesapla\n    const tytSubjectAverages: { [key: string]: number } = {};\n    const aytSubjectAverages: { [key: string]: number } = {};\n    \n    const tytSubjectNames = ['Türkçe', 'Sosyal Bilimler', 'Matematik', 'Geometri', 'Fizik', 'Kimya', 'Biyoloji'];\n    const aytSubjectNames = ['Matematik', 'Geometri', 'Fizik', 'Kimya', 'Biyoloji'];\n    \n    tytSubjectNames.forEach(subject => {\n      if (tytSubjectNets[subject] && tytSubjectNets[subject].count > 0) {\n        tytSubjectAverages[subject] = tytSubjectNets[subject].total / tytSubjectNets[subject].count;\n      } else {\n        tytSubjectAverages[subject] = 0;\n      }\n    });\n    \n    aytSubjectNames.forEach(subject => {\n      if (aytSubjectNets[subject] && aytSubjectNets[subject].count > 0) {\n        aytSubjectAverages[subject] = aytSubjectNets[subject].total / aytSubjectNets[subject].count;\n      } else {\n        aytSubjectAverages[subject] = 0;\n      }\n    });\n    \n    const tytAvgNet = tytNetCount > 0 ? (tytTotalNet / tytNetCount).toFixed(1) : '0.0';\n    const aytAvgNet = aytNetCount > 0 ? (aytTotalNet / aytNetCount).toFixed(1) : '0.0';\n    \n    return { \n      totalQuestions, \n      dailyAverage, \n      totalCorrect, \n      totalWrong,\n      solvedErrorsCount,\n      todaySolvedQuestionErrors,\n      activeDays: uniqueDates.length,\n      mostActiveDay,\n      maxActivity,\n      tytAvgNet,\n      aytAvgNet,\n      tytSubjectAverages,\n      aytSubjectAverages\n    };\n  };\n\n  // Çalışma saati istatistiklerini hesapla - ARŞİVLENMİŞLER DAHİL\n  const calculateStudyHoursStats = () => {\n    const totalSeconds = allStudyHours.reduce((total: number, sh: any) => {\n      const hours = parseInt(sh.hours) || 0;\n      const minutes = parseInt(sh.minutes) || 0;\n      const seconds = parseInt(sh.seconds) || 0;\n      return total + (hours * 3600 + minutes * 60 + seconds);\n    }, 0);\n    \n    const totalHours = Math.floor(totalSeconds / 3600);\n    const totalMinutes = Math.floor((totalSeconds % 3600) / 60);\n    \n    // Günlük ortalama\n    const uniqueDates = Array.from(new Set(allStudyHours.map((sh: any) => sh.study_date)));\n    const avgSecondsPerDay = uniqueDates.length > 0 ? totalSeconds / uniqueDates.length : 0;\n    const avgHoursPerDay = Math.floor(avgSecondsPerDay / 3600);\n    const avgMinutesPerDay = Math.floor((avgSecondsPerDay % 3600) / 60);\n    \n    // En uzun çalışma günü\n    const dayActivity: { [key: string]: number } = {};\n    allStudyHours.forEach((sh: any) => {\n      const date = sh.study_date;\n      const hours = parseInt(sh.hours) || 0;\n      const minutes = parseInt(sh.minutes) || 0;\n      const seconds = parseInt(sh.seconds) || 0;\n      const totalSec = hours * 3600 + minutes * 60 + seconds;\n      dayActivity[date] = (dayActivity[date] || 0) + totalSec;\n    });\n    \n    let longestStudyDay: string | null = null;\n    let maxStudySeconds = 0;\n    Object.entries(dayActivity).forEach(([date, seconds]) => {\n      if (seconds > maxStudySeconds) {\n        maxStudySeconds = seconds;\n        longestStudyDay = date;\n      }\n    });\n    \n    const longestHours = Math.floor(maxStudySeconds / 3600);\n    const longestMinutes = Math.floor((maxStudySeconds % 3600) / 60);\n    \n    // En uzun çalışma serisi (ardışık günler)\n    const sortedDates = uniqueDates.map(d => new Date(d)).sort((a, b) => a.getTime() - b.getTime());\n    let longestStreak = 0;\n    let currentStreak = 0;\n    \n    for (let i = 0; i < sortedDates.length; i++) {\n      if (i === 0) {\n        currentStreak = 1;\n      } else {\n        const prevDate = sortedDates[i - 1];\n        const currDate = sortedDates[i];\n        const diffDays = Math.floor((currDate.getTime() - prevDate.getTime()) / (1000 * 60 * 60 * 24));\n        \n        if (diffDays === 1) {\n          currentStreak++;\n        } else {\n          longestStreak = Math.max(longestStreak, currentStreak);\n          currentStreak = 1;\n        }\n      }\n    }\n    longestStreak = Math.max(longestStreak, currentStreak);\n    \n    // En çok çalışılan ayı hesapla\n    const monthActivity: { [key: string]: number } = {};\n    allStudyHours.forEach((sh: any) => {\n      const date = new Date(sh.study_date);\n      const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\n      const hours = parseInt(sh.hours) || 0;\n      const minutes = parseInt(sh.minutes) || 0;\n      const seconds = parseInt(sh.seconds) || 0;\n      const totalSec = hours * 3600 + minutes * 60 + seconds;\n      monthActivity[monthKey] = (monthActivity[monthKey] || 0) + totalSec;\n    });\n    \n    let mostStudiedMonth: string | null = null;\n    let maxMonthSeconds = 0;\n    Object.entries(monthActivity).forEach(([month, seconds]) => {\n      if (seconds > maxMonthSeconds) {\n        maxMonthSeconds = seconds;\n        mostStudiedMonth = month;\n      }\n    });\n    \n    const mostStudiedMonthHours = Math.floor(maxMonthSeconds / 3600);\n    const mostStudiedMonthName = mostStudiedMonth ? new Date(mostStudiedMonth + '-01').toLocaleDateString('tr-TR', { \n      month: 'long', \n      year: 'numeric' \n    }) : null;\n    \n    // En çok çalışılan günü hesapla\n    const dailyActivity: { [key: string]: number } = {};\n    allStudyHours.forEach((sh: any) => {\n      const dateKey = sh.study_date;\n      const hours = parseInt(sh.hours) || 0;\n      const minutes = parseInt(sh.minutes) || 0;\n      const seconds = parseInt(sh.seconds) || 0;\n      const totalSec = hours * 3600 + minutes * 60 + seconds;\n      dailyActivity[dateKey] = (dailyActivity[dateKey] || 0) + totalSec;\n    });\n    \n    let mostStudiedDay: string | null = null;\n    let maxDaySeconds = 0;\n    Object.entries(dailyActivity).forEach(([day, seconds]) => {\n      if (seconds > maxDaySeconds) {\n        maxDaySeconds = seconds;\n        mostStudiedDay = day;\n      }\n    });\n    \n    const mostStudiedDayHours = Math.floor(maxDaySeconds / 3600);\n    const mostStudiedDayMinutes = Math.floor((maxDaySeconds % 3600) / 60);\n    const mostStudiedDayName = mostStudiedDay ? new Date(mostStudiedDay + 'T12:00:00').toLocaleDateString('tr-TR', { \n      day: 'numeric',\n      month: 'long', \n      year: 'numeric',\n      weekday: 'long'\n    }) : null;\n    \n    return {\n      totalHours,\n      totalMinutes,\n      avgHoursPerDay,\n      avgMinutesPerDay,\n      activeDays: uniqueDates.length,\n      longestStudyDay,\n      longestHours,\n      longestMinutes,\n      longestStreak,\n      mostStudiedMonth: mostStudiedMonthName,\n      mostStudiedMonthHours,\n      mostStudiedDay: mostStudiedDayName,\n      mostStudiedDayHours,\n      mostStudiedDayMinutes\n    };\n  };\n\n  // TYT ve AYT net başarı oranlarına göre en güçlü, geliştirilmesi gereken ve en zayıf konuları hesapla - ARŞİVLENMİŞLER DAHİL\n  // MANUEL GİRİLEN SORU KAYITLARI + GENEL VE BRANŞ DENEMELER DAHİL\n  const calculateSubjectPerformance = () => {\n    // TYT ve AYT için ayrı istatistikler\n    const tytStats: { [key: string]: { correct: number; attempted: number } } = {};\n    const aytStats: { [key: string]: { correct: number; attempted: number } } = {};\n    \n    // 1) Soru loglarından veri topla\n    allQuestionLogs.forEach(log => {\n      const subject = log.subject;\n      const examType = log.exam_type;\n      const correct = Number(log.correct_count) || 0;\n      const wrong = Number(log.wrong_count) || 0;\n      const attempted = correct + wrong;\n      \n      if (examType === 'TYT') {\n        if (!tytStats[subject]) {\n          tytStats[subject] = { correct: 0, attempted: 0 };\n        }\n        tytStats[subject].correct += correct;\n        tytStats[subject].attempted += attempted;\n      } else if (examType === 'AYT') {\n        if (!aytStats[subject]) {\n          aytStats[subject] = { correct: 0, attempted: 0 };\n        }\n        aytStats[subject].correct += correct;\n        aytStats[subject].attempted += attempted;\n      }\n    });\n    \n    // 2) Genel ve Branş Denemelerinden veri topla\n    allExamResults.forEach(exam => {\n      const examType = exam.exam_type;\n      if (!examType) return;\n      \n      const subjectData = exam.subjects_data ? JSON.parse(exam.subjects_data) : {};\n      \n      Object.entries(subjectData).forEach(([subjectKey, data]: [string, any]) => {\n        if (!subjectKey) return;\n        \n        const correct = parseInt(data.correct) || 0;\n        const wrong = parseInt(data.wrong) || 0;\n        const attempted = correct + wrong;\n        \n        if (attempted === 0) return;\n        \n        const subjectNameMap: {[key: string]: string} = {\n          'turkce': 'Türkçe',\n          'matematik': 'Matematik',\n          'geometri': 'Geometri',\n          'fizik': 'Fizik',\n          'kimya': 'Kimya',\n          'biyoloji': 'Biyoloji',\n          'sosyal': 'Sosyal Bilimler',\n          'fen': 'Fen Bilimleri'\n        };\n        \n        const subject = subjectNameMap[subjectKey.toLowerCase()] || subjectKey;\n        \n        if (examType === 'TYT') {\n          if (!tytStats[subject]) {\n            tytStats[subject] = { correct: 0, attempted: 0 };\n          }\n          tytStats[subject].correct += correct;\n          tytStats[subject].attempted += attempted;\n        } else if (examType === 'AYT') {\n          if (!aytStats[subject]) {\n            aytStats[subject] = { correct: 0, attempted: 0 };\n          }\n          aytStats[subject].correct += correct;\n          aytStats[subject].attempted += attempted;\n        }\n      });\n    });\n    \n    // TYT dersleri için analiz\n    const tytSubjects = Object.entries(tytStats)\n      .map(([subject, stats]) => ({\n        subject,\n        successRate: stats.attempted > 0 ? (stats.correct / stats.attempted) * 100 : 0,\n        totalQuestions: stats.attempted\n      }))\n      .filter(s => s.totalQuestions >= 5)\n      .sort((a, b) => b.successRate - a.successRate);\n    \n    const tytStrongest = tytSubjects[0];\n    const tytMedium = tytSubjects.length >= 3 ? tytSubjects[Math.floor(tytSubjects.length / 2)] : null;\n    const tytWeakest = tytSubjects.length > 0 ? tytSubjects[tytSubjects.length - 1] : null;\n    \n    // AYT dersleri için analiz\n    const aytSubjects = Object.entries(aytStats)\n      .map(([subject, stats]) => ({\n        subject,\n        successRate: stats.attempted > 0 ? (stats.correct / stats.attempted) * 100 : 0,\n        totalQuestions: stats.attempted\n      }))\n      .filter(s => s.totalQuestions >= 5)\n      .sort((a, b) => b.successRate - a.successRate);\n    \n    const aytStrongest = aytSubjects[0];\n    const aytMedium = aytSubjects.length >= 3 ? aytSubjects[Math.floor(aytSubjects.length / 2)] : null;\n    const aytWeakest = aytSubjects.length > 0 ? aytSubjects[aytSubjects.length - 1] : null;\n    \n    return { \n      tyt: { strongest: tytStrongest, medium: tytMedium, weakest: tytWeakest },\n      ayt: { strongest: aytStrongest, medium: aytMedium, weakest: aytWeakest }\n    };\n  };\n\n  // Branş Deneme Ortalamalarını hesapla - ARŞİVLENMİŞLER DAHİL\n  const calculateBranchExamAverages = () => {\n    const branchExams = allExamResults.filter(exam => exam.exam_scope === 'branch');\n    \n    const tytSubjects = ['Türkçe', 'Matematik', 'Geometri', 'Fizik', 'Kimya', 'Biyoloji'];\n    const aytSubjects = ['Matematik', 'Geometri', 'Fizik', 'Kimya', 'Biyoloji'];\n    \n    const tytAverages: { [key: string]: number } = {};\n    const aytAverages: { [key: string]: number } = {};\n    const tytCounts: { [key: string]: number } = {};\n    const aytCounts: { [key: string]: number } = {};\n    let totalQuestionsSolved = 0;\n    \n    branchExams.forEach(exam => {\n      const examType = exam.exam_type;\n      if (!examType) return;\n      \n      const subjectData = exam.subjects_data ? JSON.parse(exam.subjects_data) : {};\n      const subjectKey = exam.selected_subject || '';\n      if (!subjectKey) return;\n      \n      const data = subjectData[subjectKey] || {};\n      const correct = parseInt(data.correct) || 0;\n      const wrong = parseInt(data.wrong) || 0;\n      const blank = parseInt(data.blank) || 0;\n      const net = correct - (wrong * 0.25);\n      totalQuestionsSolved += correct + wrong + blank;\n      \n      const subjectNameMap: {[key: string]: string} = {\n        'turkce': 'Türkçe',\n        'matematik': 'Matematik',\n        'geometri': 'Geometri',\n        'fizik': 'Fizik',\n        'kimya': 'Kimya',\n        'biyoloji': 'Biyoloji',\n        'sosyal': 'Sosyal Bilimler',\n        'fen': 'Fen Bilimleri'\n      };\n      \n      const subject = subjectNameMap[subjectKey.toLowerCase()] || subjectKey;\n      \n      if (examType === 'TYT') {\n        if (!tytAverages[subject]) {\n          tytAverages[subject] = 0;\n          tytCounts[subject] = 0;\n        }\n        tytAverages[subject] += net;\n        tytCounts[subject]++;\n      } else if (examType === 'AYT') {\n        if (!aytAverages[subject]) {\n          aytAverages[subject] = 0;\n          aytCounts[subject] = 0;\n        }\n        aytAverages[subject] += net;\n        aytCounts[subject]++;\n      }\n    });\n    \n    const tytResults: { [key: string]: number } = {};\n    const aytResults: { [key: string]: number } = {};\n    \n    for (const subject of tytSubjects) {\n      tytResults[subject] = tytCounts[subject] > 0 ? tytAverages[subject] / tytCounts[subject] : 0;\n    }\n    \n    for (const subject of aytSubjects) {\n      aytResults[subject] = aytCounts[subject] > 0 ? aytAverages[subject] / aytCounts[subject] : 0;\n    }\n    \n    // Branş deneme hatalarını hesapla\n    let totalBranchErrors = 0;\n    let todayBranchErrors = 0;\n    const today = new Date().toLocaleDateString('en-CA'); // YYYY-MM-DD formatı\n    \n    try {\n      const savedBranchErrors = localStorage.getItem('completedBranchExamErrors');\n      if (savedBranchErrors) {\n        const branchErrors = JSON.parse(savedBranchErrors);\n        if (Array.isArray(branchErrors)) {\n          totalBranchErrors = branchErrors.length;\n          todayBranchErrors = branchErrors.filter((item: any) => {\n            if (!item || !item.completedAt) return false;\n            const completedDate = new Date(item.completedAt).toLocaleDateString('en-CA');\n            return completedDate === today;\n          }).length;\n        }\n      }\n    } catch (error) {\n      console.error('Error loading completed branch exam errors:', error);\n    }\n    \n    // En yüksek net yapılan dersleri bul\n    let tytHighestSubject = null;\n    let tytHighestNet = 0;\n    for (const subject of tytSubjects) {\n      if (tytResults[subject] > tytHighestNet && tytCounts[subject] > 0) {\n        tytHighestNet = tytResults[subject];\n        tytHighestSubject = subject;\n      }\n    }\n    \n    let aytHighestSubject = null;\n    let aytHighestNet = 0;\n    for (const subject of aytSubjects) {\n      if (aytResults[subject] > aytHighestNet && aytCounts[subject] > 0) {\n        aytHighestNet = aytResults[subject];\n        aytHighestSubject = subject;\n      }\n    }\n    \n    // Yüzdeleri hesapla (40 soru üzerinden TYT, 40 soru üzerinden AYT)\n    const tytPercentage = tytHighestNet > 0 ? ((tytHighestNet / 40) * 100) : 0;\n    const aytPercentage = aytHighestNet > 0 ? ((aytHighestNet / 40) * 100) : 0;\n    \n    return { \n      tyt: tytResults, \n      ayt: aytResults, \n      tytCounts, \n      aytCounts,\n      totalBranchErrors,\n      todayBranchErrors,\n      totalQuestionsSolved,\n      tytHighest: { subject: tytHighestSubject, net: tytHighestNet, percentage: tytPercentage },\n      aytHighest: { subject: aytHighestSubject, net: aytHighestNet, percentage: aytPercentage }\n    };\n  };\n\n  // Genel Deneme Ders Bazlı Ortalamalarını hesapla - ARŞİVLENMİŞLER DAHİL\n  const calculateGeneralExamSubjectAverages = () => {\n    // Sadece genel denemeleri al ve son 5'ini kullan (calculateNetAverages ile aynı mantık)\n    const generalExams = allExamResults.filter(exam => exam.exam_scope === 'full');\n    const sortedExams = [...generalExams].sort((a, b) => new Date(b.exam_date).getTime() - new Date(a.exam_date).getTime());\n    const last5Exams = sortedExams.slice(0, 5);\n    \n    const tytSubjects = ['Türkçe', 'Matematik', 'Fen Bilimleri', 'Sosyal Bilimler'];\n    const aytSubjects = ['Matematik', 'Geometri', 'Fizik', 'Kimya', 'Biyoloji'];\n    \n    const tytAverages: { [key: string]: number } = {};\n    const aytAverages: { [key: string]: number } = {};\n    const tytCounts: { [key: string]: number } = {};\n    const aytCounts: { [key: string]: number } = {};\n    \n    // exam_subject_nets'ten veri topla (sadece son 5 deneme için)\n    last5Exams.forEach(exam => {\n      const examType = exam.exam_type;\n      if (!examType) return;\n      \n      const subjectNets = examSubjectNets.filter(net => net.exam_id === exam.id);\n      subjectNets.forEach(net => {\n        let subject = net.subject;\n        // Backend correct_count, wrong_count, blank_count olarak kaydediyor\n        const correct = Number(net.correct_count) || 0;\n        const wrong = Number(net.wrong_count) || 0;\n        const netScore = correct - (wrong * 0.25);\n        \n        if (examType === 'TYT') {\n          // TYT için Fizik, Kimya, Biyoloji -> Fen Bilimleri\n          if (subject === 'Fizik' || subject === 'Kimya' || subject === 'Biyoloji') {\n            subject = 'Fen Bilimleri';\n          }\n          \n          if (!tytAverages[subject]) {\n            tytAverages[subject] = 0;\n            tytCounts[subject] = 0;\n          }\n          tytAverages[subject] += netScore;\n          tytCounts[subject]++;\n        } else if (examType === 'AYT') {\n          if (!aytAverages[subject]) {\n            aytAverages[subject] = 0;\n            aytCounts[subject] = 0;\n          }\n          aytAverages[subject] += netScore;\n          aytCounts[subject]++;\n        }\n      });\n    });\n    \n    const tytResults: { [key: string]: number } = {};\n    const aytResults: { [key: string]: number } = {};\n    \n    for (const subject of tytSubjects) {\n      tytResults[subject] = tytCounts[subject] > 0 ? tytAverages[subject] / tytCounts[subject] : 0;\n    }\n    \n    for (const subject of aytSubjects) {\n      aytResults[subject] = aytCounts[subject] > 0 ? aytAverages[subject] / aytCounts[subject] : 0;\n    }\n    \n    return { \n      tyt: tytResults, \n      ayt: aytResults, \n      tytCounts, \n      aytCounts\n    };\n  };\n\n  const netAverages = calculateNetAverages();\n  const questionStats = calculateQuestionStats();\n  const studyHoursStats = calculateStudyHoursStats();\n  const subjectPerformance = calculateSubjectPerformance();\n  const branchAverages = calculateBranchExamAverages();\n  const generalSubjectAverages = calculateGeneralExamSubjectAverages();\n\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-4 gap-8 mb-12\">\n        {[1, 2, 3, 4].map((i) => (\n          <div key={i} className=\"bg-gradient-to-br from-white/50 to-white/30 dark:from-gray-900/50 dark:to-gray-800/30 backdrop-blur-xl rounded-2xl border border-white/20 dark:border-gray-700/30 p-8 relative overflow-hidden animate-pulse\">\n            <div className=\"absolute inset-0 bg-gradient-to-br from-purple-500/5 to-blue-500/5 dark:from-purple-400/10 dark:to-blue-400/10\"></div>\n            <div className=\"relative space-y-4\">\n              <div className=\"h-6 bg-gray-200 dark:bg-gray-700 rounded-lg w-3/4\"></div>\n              <div className=\"h-8 bg-gray-200 dark:bg-gray-700 rounded-lg w-1/2\"></div>\n              <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded-lg w-full\"></div>\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"mb-12\">\n      {/* Başlık */}\n      <div className=\"mb-8\">\n        <div className=\"flex items-center gap-3 mb-2\">\n          <div className=\"p-2 bg-gradient-to-br from-purple-500 to-blue-600 rounded-xl shadow-lg\">\n            <BarChart3 className=\"h-6 w-6 text-white\" />\n          </div>\n          <h2 className=\"text-2xl font-bold bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent\">\n            Performans Özeti\n          </h2>\n        </div>\n        <p className=\"text-muted-foreground\"></p>\n      </div>\n\n      <div className={`grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 transition-all duration-1000 ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'}`}>\n        {/* Geliştirilmiş TYT/AYT Net Ortalamaları Kartı */}\n        <div className=\"group bg-gradient-to-br from-white/80 to-white/60 dark:from-gray-900/80 dark:to-gray-800/60 backdrop-blur-xl rounded-2xl border border-white/20 dark:border-gray-700/30 p-4 relative overflow-hidden hover:scale-[1.02] transition-all duration-500 shadow-lg hover:shadow-2xl\" data-testid=\"card-exam-averages\">\n          {/* Animasyonlu Arka Plan Öğeleri */}\n          <div className=\"absolute -top-20 -right-20 w-40 h-40 bg-gradient-to-br from-blue-500/20 to-indigo-600/20 rounded-full blur-3xl group-hover:scale-110 transition-transform duration-700\"></div>\n          <div className=\"absolute -bottom-10 -left-10 w-32 h-32 bg-gradient-to-tr from-green-500/15 to-emerald-600/15 rounded-full blur-2xl group-hover:scale-110 transition-transform duration-700\"></div>\n          \n          {/* Işıltılı Animasyon */}\n          <div className=\"absolute top-4 right-4 opacity-0 group-hover:opacity-100 transition-opacity duration-500\">\n            <Sparkles className=\"h-5 w-5 text-yellow-500 animate-pulse\" />\n          </div>\n\n          <div className=\"relative z-10\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"p-3 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-xl shadow-lg\">\n                  <Target className=\"h-6 w-6 text-white\" />\n                </div>\n                <div>\n                  <h3 className=\"text-xl font-bold text-foreground\">Genel Deneme Ortalamaları</h3>\n                  <p className=\"text-sm text-muted-foreground\">Son {netAverages.examCount} genel deneme</p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"space-y-6\">\n              {/* YENİ HİYERARŞİ: Ders Bazlı Net Ortalamaları EN ÜSTTE */}\n              <div className=\"space-y-4\">\n                {/* TYT Ders Ortalamaları */}\n                <div>\n                  <div className=\"text-xs font-semibold text-blue-600 dark:text-blue-400 mb-2\">TYT Ders Bazlı Net Ortalamalar</div>\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    {['Türkçe', 'Matematik', 'Fen Bilimleri', 'Sosyal Bilimler'].map((subject) => {\n                      const avg = generalSubjectAverages.tyt[subject] || 0;\n                      const subjectColors: {[key: string]: string} = {\n                        'Türkçe': 'from-red-500 to-red-600',\n                        'Matematik': 'from-blue-500 to-blue-600',\n                        'Fen Bilimleri': 'from-green-500 to-green-600',\n                        'Sosyal Bilimler': 'from-orange-500 to-orange-600'\n                      };\n                      return (\n                        <div key={subject} className=\"bg-white/50 dark:bg-gray-800/50 rounded-lg p-2 border border-gray-200/30 dark:border-gray-700/30\">\n                          <div className={`text-sm font-bold bg-gradient-to-r ${subjectColors[subject]} bg-clip-text text-transparent mb-1`}>\n                            {avg.toFixed(1)}\n                          </div>\n                          <div className=\"text-xs text-muted-foreground truncate\">{subject}</div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </div>\n                \n                {/* AYT Ders Ortalamaları */}\n                <div>\n                  <div className=\"text-xs font-semibold text-green-600 dark:text-green-400 mb-2\">AYT Ders Bazlı Net Ortalamalar</div>\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    {['Matematik', 'Geometri', 'Fizik', 'Kimya', 'Biyoloji'].map((subject) => {\n                      const avg = generalSubjectAverages.ayt[subject] || 0;\n                      const subjectColors: {[key: string]: string} = {\n                        'Matematik': 'from-blue-500 to-blue-600',\n                        'Geometri': 'from-purple-500 to-purple-600',\n                        'Fizik': 'from-violet-500 to-violet-600',\n                        'Kimya': 'from-pink-500 to-pink-600',\n                        'Biyoloji': 'from-cyan-500 to-cyan-600'\n                      };\n                      return (\n                        <div key={subject} className=\"bg-white/50 dark:bg-gray-800/50 rounded-lg p-2 border border-gray-200/30 dark:border-gray-700/30\">\n                          <div className={`text-sm font-bold bg-gradient-to-r ${subjectColors[subject]} bg-clip-text text-transparent mb-1`}>\n                            {avg.toFixed(1)}\n                          </div>\n                          <div className=\"text-xs text-muted-foreground truncate\">{subject}</div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </div>\n              </div>\n\n              {/* TYT Net Ortalama */}\n              <div className=\"bg-white/50 dark:bg-gray-800/50 rounded-xl p-4 backdrop-blur-sm border border-blue-200/30 dark:border-blue-700/30\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"text-3xl font-black text-blue-600 dark:text-blue-400 mb-1\" data-testid=\"text-tyt-average\">\n                      {netAverages.tytAvg}\n                    </div>\n                    <div className=\"text-sm font-medium text-blue-700 dark:text-blue-300\">TYT Net Ortalama</div>\n                    <div className=\"text-xs text-blue-600/70 dark:text-blue-400/70 mt-0.5\">{netAverages.examCount} deneme</div>\n                    <div className=\"w-full bg-blue-100 dark:bg-blue-900/30 rounded-full h-2 mt-2\">\n                      <div \n                        className=\"bg-gradient-to-r from-blue-500 to-blue-600 h-2 rounded-full transition-all duration-1000\"\n                        style={{ width: `${Math.min((parseFloat(netAverages.tytAvg) / 120) * 100, 100)}%` }}\n                      ></div>\n                    </div>\n                  </div>\n                  <div className=\"ml-4 p-3 bg-blue-100 dark:bg-blue-900/30 rounded-xl\">\n                    <span className=\"text-xs font-bold text-blue-600 dark:text-blue-400\">TYT</span>\n                  </div>\n                </div>\n              </div>\n              \n              {/* AYT Net Ortalama */}\n              <div className=\"bg-white/50 dark:bg-gray-800/50 rounded-xl p-4 backdrop-blur-sm border border-green-200/30 dark:border-green-700/30\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"text-3xl font-black text-green-600 dark:text-green-400 mb-1\" data-testid=\"text-ayt-average\">\n                      {netAverages.aytAvg}\n                    </div>\n                    <div className=\"text-sm font-medium text-green-700 dark:text-green-300\">AYT Net Ortalama</div>\n                    <div className=\"text-xs text-green-600/70 dark:text-green-400/70 mt-0.5\">{netAverages.examCount} deneme</div>\n                    <div className=\"w-full bg-green-100 dark:bg-green-900/30 rounded-full h-2 mt-2\">\n                      <div \n                        className=\"bg-gradient-to-r from-green-500 to-green-600 h-2 rounded-full transition-all duration-1000\"\n                        style={{ width: `${Math.min((parseFloat(netAverages.aytAvg) / 80) * 100, 100)}%` }}\n                      ></div>\n                    </div>\n                  </div>\n                  <div className=\"ml-4 p-3 bg-green-100 dark:bg-green-900/30 rounded-xl\">\n                    <span className=\"text-xs font-bold text-green-600 dark:text-green-400\">AYT</span>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"bg-white/50 dark:bg-gray-800/50 rounded-xl p-4 backdrop-blur-sm border border-emerald-200/30 dark:border-emerald-700/30\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <div>\n                    <div className=\"text-3xl font-black text-emerald-600 dark:text-emerald-400\" data-testid=\"text-solved-exam-errors\">\n                      {netAverages.solvedExamErrorsCount}\n                    </div>\n                    <div className=\"text-sm font-medium text-emerald-700 dark:text-emerald-300\">Toplam Düzeltilen Genel Deneme Hataları</div>\n                  </div>\n                  <div className=\"p-3 bg-emerald-100 dark:bg-emerald-900/30 rounded-xl\">\n                    <CheckCircle className=\"h-6 w-6 text-emerald-600 dark:text-emerald-400\" />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"bg-gradient-to-br from-green-50/80 to-emerald-50/60 dark:from-green-900/30 dark:to-emerald-900/20 rounded-xl p-4 backdrop-blur-sm border-2 border-green-200/50 dark:border-green-700/40 shadow-sm\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"text-2xl font-black text-green-600 dark:text-green-400 mb-1\" data-testid=\"text-today-solved-exam-errors\">\n                      {netAverages.todaySolvedExamErrors}\n                    </div>\n                    <div className=\"text-xs font-medium text-green-700 dark:text-green-300 flex items-center gap-1\">\n                      <Calendar className=\"h-3.5 w-3.5\" />\n                      Bugün Düzeltilen Konular\n                    </div>\n                  </div>\n                  <div className=\"p-2.5 bg-green-100 dark:bg-green-900/40 rounded-lg\">\n                    <Sparkles className=\"h-5 w-5 text-green-600 dark:text-green-400\" />\n                  </div>\n                </div>\n              </div>\n              \n              {netAverages.examCount === 0 && (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <Target className=\"h-12 w-12 mx-auto mb-3 opacity-50\" />\n                  <p className=\"font-medium mb-1\">Henüz deneme kaydı bulunmuyor</p>\n                  <p className=\"text-sm\">İlk denememi eklemeden gözükmez.</p>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Branş Deneme Ortalamaları Kartı */}\n        <div className=\"group bg-gradient-to-br from-white/80 to-white/60 dark:from-gray-900/80 dark:to-gray-800/60 backdrop-blur-xl rounded-2xl border border-white/20 dark:border-gray-700/30 p-4 relative overflow-hidden hover:scale-[1.02] transition-all duration-500 shadow-lg hover:shadow-2xl\" data-testid=\"card-branch-averages\">\n          <div className=\"absolute -top-20 -right-20 w-40 h-40 bg-gradient-to-br from-indigo-500/20 to-purple-600/20 rounded-full blur-3xl group-hover:scale-110 transition-transform duration-700\"></div>\n          <div className=\"absolute -bottom-10 -left-10 w-32 h-32 bg-gradient-to-tr from-pink-500/15 to-rose-600/15 rounded-full blur-2xl group-hover:scale-110 transition-transform duration-700\"></div>\n          \n          <div className=\"absolute top-4 right-4 opacity-0 group-hover:opacity-100 transition-opacity duration-500\">\n            <Sparkles className=\"h-5 w-5 text-yellow-500 animate-pulse\" />\n          </div>\n\n          <div className=\"relative z-10\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"p-3 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-xl shadow-lg\">\n                  <BarChart3 className=\"h-6 w-6 text-white\" />\n                </div>\n                <div>\n                  <h3 className=\"text-xl font-bold text-foreground\">Branş Deneme Ortalamaları</h3>\n                  <p className=\"text-sm text-muted-foreground\">Ders bazlı ortalamalar</p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"space-y-6\">\n              {/* TYT Branş Ortalamaları */}\n              <div>\n                <div className=\"text-sm font-semibold text-indigo-600 dark:text-indigo-400 mb-3\">TYT Ders Bazlı Net Ortalamalar</div>\n                <div className=\"grid grid-cols-3 gap-2\">\n                  {['Türkçe', 'Matematik', 'Geometri', 'Fizik', 'Kimya', 'Biyoloji'].map((subject) => {\n                    const avg = branchAverages.tyt[subject] || 0;\n                    const count = branchAverages.tytCounts[subject] || 0;\n                    const subjectColors: {[key: string]: string} = {\n                      'Türkçe': 'from-red-500 to-red-600',\n                      'Matematik': 'from-blue-500 to-blue-600',\n                      'Geometri': 'from-purple-500 to-purple-600',\n                      'Fizik': 'from-violet-500 to-violet-600',\n                      'Kimya': 'from-pink-500 to-pink-600',\n                      'Biyoloji': 'from-cyan-500 to-cyan-600'\n                    };\n                    return (\n                      <div key={subject} className=\"bg-white/50 dark:bg-gray-800/50 rounded-lg p-2 backdrop-blur-sm border border-gray-200/30 dark:border-gray-700/30\">\n                        <div className={`text-lg font-bold bg-gradient-to-r ${subjectColors[subject]} bg-clip-text text-transparent`}>\n                          {avg.toFixed(1)}\n                        </div>\n                        <div className=\"text-xs text-muted-foreground truncate\">{subject}</div>\n                        {count > 0 && <div className=\"text-xs text-muted-foreground\">{count} deneme</div>}\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n\n              {/* AYT Branş Ortalamaları */}\n              <div>\n                <div className=\"text-sm font-semibold text-green-600 dark:text-green-400 mb-3\">AYT Ders Bazlı Net Ortalamalar</div>\n                <div className=\"grid grid-cols-3 gap-2\">\n                  {['Matematik', 'Geometri', 'Fizik', 'Kimya', 'Biyoloji'].map((subject) => {\n                    const avg = branchAverages.ayt[subject] || 0;\n                    const count = branchAverages.aytCounts[subject] || 0;\n                    const subjectColors: {[key: string]: string} = {\n                      'Matematik': 'from-blue-500 to-blue-600',\n                      'Geometri': 'from-purple-500 to-purple-600',\n                      'Fizik': 'from-violet-500 to-violet-600',\n                      'Kimya': 'from-pink-500 to-pink-600',\n                      'Biyoloji': 'from-cyan-500 to-cyan-600'\n                    };\n                    return (\n                      <div key={subject} className=\"bg-white/50 dark:bg-gray-800/50 rounded-lg p-2 backdrop-blur-sm border border-gray-200/30 dark:border-gray-700/30\">\n                        <div className={`text-lg font-bold bg-gradient-to-r ${subjectColors[subject]} bg-clip-text text-transparent`}>\n                          {avg.toFixed(1)}\n                        </div>\n                        <div className=\"text-xs text-muted-foreground truncate\">{subject}</div>\n                        {count > 0 && <div className=\"text-xs text-muted-foreground\">{count} deneme</div>}\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n\n              {/* EN YÜKSEK NET KARTLARI - HER ZAMAN GÖSTER */}\n              <div className=\"grid grid-cols-2 gap-3 pt-4\">\n                {/* TYT En Yüksek Net */}\n                <div className=\"bg-gradient-to-br from-blue-50 to-cyan-50 dark:from-blue-900/20 dark:to-cyan-900/20 rounded-xl p-3 border border-blue-200/50 dark:border-blue-700/30\">\n                  <div className=\"text-xs font-semibold text-blue-600 dark:text-blue-400 mb-2\">\n                    🏆 TYT En Yüksek Net Yapılan Ders\n                  </div>\n                  {branchAverages.tytHighest.subject ? (\n                    <>\n                      <div className=\"text-lg font-black text-blue-700 dark:text-blue-300 mb-1\">\n                        {branchAverages.tytHighest.subject}\n                      </div>\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">\n                          {branchAverages.tytHighest.net.toFixed(1)}\n                        </span>\n                        <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">\n                          %{branchAverages.tytHighest.percentage.toFixed(0)}\n                        </span>\n                      </div>\n                      <div className=\"w-full bg-blue-100 dark:bg-blue-900/30 rounded-full h-2\">\n                        <div \n                          className=\"bg-gradient-to-r from-blue-500 to-cyan-600 h-2 rounded-full transition-all duration-1000\"\n                          style={{ width: `${Math.min(branchAverages.tytHighest.percentage, 100)}%` }}\n                        ></div>\n                      </div>\n                    </>\n                  ) : (\n                    <div className=\"text-center py-4\">\n                      <div className=\"text-3xl font-black text-gray-400 dark:text-gray-600 mb-1\">-</div>\n                      <div className=\"text-xs text-gray-500 dark:text-gray-500\">Henüz veri yok</div>\n                    </div>\n                  )}\n                </div>\n                \n                {/* AYT En Yüksek Net */}\n                <div className=\"bg-gradient-to-br from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20 rounded-xl p-3 border border-green-200/50 dark:border-green-700/30\">\n                  <div className=\"text-xs font-semibold text-green-600 dark:text-green-400 mb-2\">\n                    🏆 AYT En Yüksek Net Yapılan Ders\n                  </div>\n                  {branchAverages.aytHighest.subject ? (\n                    <>\n                      <div className=\"text-lg font-black text-green-700 dark:text-green-300 mb-1\">\n                        {branchAverages.aytHighest.subject}\n                      </div>\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"text-2xl font-bold text-green-600 dark:text-green-400\">\n                          {branchAverages.aytHighest.net.toFixed(1)}\n                        </span>\n                        <span className=\"text-sm font-semibold text-green-600 dark:text-green-400\">\n                          %{branchAverages.aytHighest.percentage.toFixed(0)}\n                        </span>\n                      </div>\n                      <div className=\"w-full bg-green-100 dark:bg-green-900/30 rounded-full h-2\">\n                        <div \n                          className=\"bg-gradient-to-r from-green-500 to-emerald-600 h-2 rounded-full transition-all duration-1000\"\n                          style={{ width: `${Math.min(branchAverages.aytHighest.percentage, 100)}%` }}\n                        ></div>\n                      </div>\n                    </>\n                  ) : (\n                    <div className=\"text-center py-4\">\n                      <div className=\"text-3xl font-black text-gray-400 dark:text-gray-600 mb-1\">-</div>\n                      <div className=\"text-xs text-gray-500 dark:text-gray-500\">Henüz veri yok</div>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Düzeltilen Hatalar İstatistikleri - Her zaman göster */}\n              <div className=\"pt-4 border-t border-gray-200/50 dark:border-gray-700/50\">\n                <div className=\"space-y-3\">\n                  <div className=\"bg-gradient-to-br from-purple-50 to-indigo-50 dark:from-purple-900/20 dark:to-indigo-900/20 rounded-xl p-4 border border-purple-200/50 dark:border-purple-700/30\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <div>\n                        <div className=\"text-3xl font-black text-purple-600 dark:text-purple-400\">{branchAverages.totalBranchErrors}</div>\n                        <div className=\"text-sm font-medium text-purple-700 dark:text-purple-300\">Toplam Düzeltilen Branş Deneme Hataları</div>\n                      </div>\n                      <div className=\"p-3 bg-purple-100 dark:bg-purple-900/30 rounded-xl\">\n                        <CheckCircle className=\"h-6 w-6 text-purple-600 dark:text-purple-400\" />\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"bg-gradient-to-br from-blue-50/80 to-indigo-50/60 dark:from-blue-900/30 dark:to-indigo-900/20 rounded-xl p-4 backdrop-blur-sm border-2 border-blue-200/50 dark:border-blue-700/40 shadow-sm\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex-1\">\n                        <div className=\"text-2xl font-black text-blue-600 dark:text-blue-400 mb-1\">{branchAverages.todayBranchErrors}</div>\n                        <div className=\"text-xs font-medium text-blue-700 dark:text-blue-300 flex items-center gap-1\">\n                          <Calendar className=\"h-3.5 w-3.5\" />\n                          Bugün Düzeltilen Branş Deneme Konuları\n                        </div>\n                      </div>\n                      <div className=\"p-2 bg-blue-100 dark:bg-blue-900/30 rounded-xl\">\n                        <Zap className=\"h-5 w-5 text-blue-600 dark:text-blue-400\" />\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"bg-gradient-to-br from-emerald-50/80 to-teal-50/60 dark:from-emerald-900/30 dark:to-teal-900/20 rounded-xl p-4 backdrop-blur-sm border-2 border-emerald-200/50 dark:border-emerald-700/40 shadow-sm\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex-1\">\n                        <div className=\"text-2xl font-black text-emerald-600 dark:text-emerald-400 mb-1\">{branchAverages.totalQuestionsSolved}</div>\n                        <div className=\"text-xs font-medium text-emerald-700 dark:text-emerald-300 flex items-center gap-1\">\n                          <CheckCircle className=\"h-3.5 w-3.5\" />\n                          Çözülen Toplam Soru (Branş Denemeleri)\n                        </div>\n                      </div>\n                      <div className=\"p-2 bg-emerald-100 dark:bg-emerald-900/30 rounded-xl\">\n                        <Target className=\"h-5 w-5 text-emerald-600 dark:text-emerald-400\" />\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Branş denemesi yoksa mesaj göster - En altta */}\n              {Object.values(branchAverages.tytCounts).every(c => c === 0) && Object.values(branchAverages.aytCounts).every(c => c === 0) && (\n                <div className=\"text-center py-8 text-muted-foreground border-t border-gray-200/50 dark:border-gray-700/50\">\n                  <Target className=\"h-12 w-12 mx-auto mb-3 opacity-50\" />\n                  <p className=\"font-medium mb-1\">Henüz branş denemesi bulunmuyor</p>\n                  <p className=\"text-sm\">İlk branş denememi ekle</p>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Geliştirilmiş Soru İstatistikleri Kartı */}\n        <div className=\"group bg-gradient-to-br from-white/80 to-white/60 dark:from-gray-900/80 dark:to-gray-800/60 backdrop-blur-xl rounded-2xl border border-white/20 dark:border-gray-700/30 p-4 relative overflow-hidden hover:scale-[1.02] transition-all duration-500 shadow-lg hover:shadow-2xl\" data-testid=\"card-question-stats\">\n          {/* Animasyonlu Arka Plan Öğeleri */}\n          <div className=\"absolute -top-20 -right-20 w-40 h-40 bg-gradient-to-br from-purple-500/20 to-pink-600/20 rounded-full blur-3xl group-hover:scale-110 transition-transform duration-700\"></div>\n          <div className=\"absolute -bottom-10 -left-10 w-32 h-32 bg-gradient-to-tr from-orange-500/15 to-red-600/15 rounded-full blur-2xl group-hover:scale-110 transition-transform duration-700\"></div>\n          \n          {/* Enerji Simgesi Animasyonu */}\n          <div className=\"absolute top-4 right-4 opacity-0 group-hover:opacity-100 transition-opacity duration-500\">\n            <Zap className=\"h-5 w-5 text-yellow-500 animate-bounce\" />\n          </div>\n\n          <div className=\"relative z-10\">\n            <div className=\"flex items-center gap-3 mb-6\">\n              <div className=\"p-3 bg-gradient-to-br from-purple-500 to-pink-600 rounded-xl shadow-lg\">\n                <BookOpen className=\"h-6 w-6 text-white\" />\n              </div>\n              <div>\n                <h3 className=\"text-xl font-bold text-foreground\">Soru İstatistikleri</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  {questionStats.mostActiveDay ? (\n                    <span className=\"flex items-center gap-1\">\n                      En Aktif Olunan Gün → \n                      <span className=\"font-semibold text-purple-600 dark:text-purple-400\">\n                        {new Date(questionStats.mostActiveDay).toLocaleDateString('tr-TR', { \n                          day: 'numeric', \n                          month: 'short'\n                        })} ({questionStats.maxActivity} soru)\n                      </span>\n                    </span>\n                  ) : (\n                    'Henüz aktif gün bulunmuyor'\n                  )}\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"space-y-6\">\n              {/* TYT ve AYT Ders Bazlı Net Ortalamaları - EN ÜSTTE - SORU KAYITLARINDAN */}\n              <div className=\"space-y-3\">\n                {/* TYT Ders Bazlı Net Ortalamaları */}\n                <div>\n                  <div className=\"text-sm font-bold text-blue-600 dark:text-blue-400 mb-3\">📘 TYT Ders Bazlı Net Ortalamalar (Soru Kayıtlarından)</div>\n                  <div className=\"grid grid-cols-3 gap-2\">\n                    {['Türkçe', 'Sosyal Bilimler', 'Matematik', 'Geometri', 'Fizik', 'Kimya', 'Biyoloji'].map((subject) => {\n                      const avg = questionStats.tytSubjectAverages[subject] || 0;\n                      const subjectColors: {[key: string]: string} = {\n                        'Türkçe': 'from-red-500 to-red-600',\n                        'Sosyal Bilimler': 'from-orange-500 to-orange-600',\n                        'Matematik': 'from-blue-500 to-blue-600',\n                        'Geometri': 'from-indigo-500 to-indigo-600',\n                        'Fizik': 'from-purple-500 to-purple-600',\n                        'Kimya': 'from-pink-500 to-pink-600',\n                        'Biyoloji': 'from-teal-500 to-teal-600'\n                      };\n                      return (\n                        <div key={subject} className=\"bg-white/50 dark:bg-gray-800/50 rounded-lg p-2 backdrop-blur-sm border border-blue-200/30 dark:border-blue-700/30\">\n                          <div className={`text-lg font-bold bg-gradient-to-r ${subjectColors[subject]} bg-clip-text text-transparent`}>\n                            {avg.toFixed(1)}\n                          </div>\n                          <div className=\"text-xs text-muted-foreground truncate\">{subject}</div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </div>\n\n                {/* AYT Ders Bazlı Net Ortalamaları */}\n                <div>\n                  <div className=\"text-sm font-bold text-green-600 dark:text-green-400 mb-3\">📗 AYT Ders Bazlı Net Ortalamalar (Soru Kayıtlarından)</div>\n                  <div className=\"grid grid-cols-3 gap-2\">\n                    {['Matematik', 'Geometri', 'Fizik', 'Kimya', 'Biyoloji'].map((subject) => {\n                      const avg = questionStats.aytSubjectAverages[subject] || 0;\n                      const subjectColors: {[key: string]: string} = {\n                        'Matematik': 'from-blue-500 to-blue-600',\n                        'Geometri': 'from-indigo-500 to-indigo-600',\n                        'Fizik': 'from-purple-500 to-purple-600',\n                        'Kimya': 'from-green-500 to-green-600',\n                        'Biyoloji': 'from-teal-500 to-teal-600'\n                      };\n                      return (\n                        <div key={subject} className=\"bg-white/50 dark:bg-gray-800/50 rounded-lg p-2 backdrop-blur-sm border border-green-200/30 dark:border-green-700/30\">\n                          <div className={`text-lg font-bold bg-gradient-to-r ${subjectColors[subject]} bg-clip-text text-transparent`}>\n                            {avg.toFixed(1)}\n                          </div>\n                          <div className=\"text-xs text-muted-foreground truncate\">{subject}</div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </div>\n              </div>\n\n              {/* Toplam Çözülen Soru */}\n              <div className=\"bg-white/50 dark:bg-gray-800/50 rounded-xl p-4 backdrop-blur-sm border border-purple-200/30 dark:border-purple-700/30\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"text-3xl font-black text-purple-600 dark:text-purple-400 mb-1\" data-testid=\"text-total-questions\">\n                      {questionStats.totalQuestions.toLocaleString('tr-TR')}\n                    </div>\n                    <div className=\"text-sm font-medium text-purple-700 dark:text-purple-300\">Toplam Çözülen Soru</div>\n                    <div className=\"w-full bg-purple-100 dark:bg-purple-900/30 rounded-full h-2 mt-2\">\n                      <div \n                        className=\"bg-gradient-to-r from-purple-500 to-purple-600 h-2 rounded-full transition-all duration-1000\"\n                        style={{ width: `${Math.min((questionStats.totalQuestions / 1000) * 100, 100)}%` }}\n                      ></div>\n                    </div>\n                  </div>\n                  <div className=\"ml-4 p-3 bg-purple-100 dark:bg-purple-900/30 rounded-xl\">\n                    <Brain className=\"h-6 w-6 text-purple-600 dark:text-purple-400\" />\n                  </div>\n                </div>\n              </div>\n              \n              {/* Günlük Ortalama */}\n              <div className=\"bg-white/50 dark:bg-gray-800/50 rounded-xl p-4 backdrop-blur-sm border border-blue-200/30 dark:border-blue-700/30\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"text-3xl font-black text-blue-600 dark:text-blue-400 mb-1\" data-testid=\"text-daily-average\">\n                      {questionStats.dailyAverage}\n                    </div>\n                    <div className=\"text-sm font-medium text-blue-700 dark:text-blue-300\">Günlük Ortalama</div>\n                  </div>\n                  <div className=\"ml-4 p-3 bg-blue-100 dark:bg-blue-900/30 rounded-xl\">\n                    <Calendar className=\"h-6 w-6 text-blue-600 dark:text-blue-400\" />\n                  </div>\n                </div>\n              </div>\n              \n              {/* Toplam Çözülen Soru Hataları */}\n              <div className=\"bg-white/50 dark:bg-gray-800/50 rounded-xl p-4 backdrop-blur-sm border border-red-200/30 dark:border-red-700/30\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"text-3xl font-black text-red-600 dark:text-red-400 mb-1\" data-testid=\"text-total-errors\">\n                      {questionStats.solvedErrorsCount.toLocaleString('tr-TR')}\n                    </div>\n                    <div className=\"text-sm font-medium text-red-700 dark:text-red-300\">Toplam Düzeltilen Soru Hataları</div>\n                  </div>\n                  <div className=\"ml-4 p-3 bg-red-100 dark:bg-red-900/30 rounded-xl\">\n                    <CheckCircle className=\"h-6 w-6 text-red-600 dark:text-red-400\" />\n                  </div>\n                </div>\n              </div>\n\n              {/* Bugün Düzeltilen Sorular */}\n              <div className=\"bg-gradient-to-br from-rose-50/80 to-pink-50/60 dark:from-rose-900/30 dark:to-pink-900/20 rounded-xl p-4 backdrop-blur-sm border-2 border-rose-200/50 dark:border-rose-700/40 shadow-sm\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"text-2xl font-black text-rose-600 dark:text-rose-400 mb-1\" data-testid=\"text-today-solved-question-errors\">\n                      {questionStats.todaySolvedQuestionErrors}\n                    </div>\n                    <div className=\"text-xs font-medium text-rose-700 dark:text-rose-300 flex items-center gap-1\">\n                      <Calendar className=\"h-3.5 w-3.5\" />\n                      Bugün Düzeltilen Sorular\n                    </div>\n                  </div>\n                  <div className=\"p-2.5 bg-rose-100 dark:bg-rose-900/40 rounded-lg\">\n                    <Sparkles className=\"h-5 w-5 text-rose-600 dark:text-rose-400\" />\n                  </div>\n                </div>\n              </div>\n\n              {/* Toplam Doğru ve Yanlış */}\n              <div className=\"grid grid-cols-2 gap-3\">\n                {/* Doğru Cevaplar Kutusu */}\n                <div className=\"bg-white/50 dark:bg-gray-800/50 rounded-xl p-3 backdrop-blur-sm border border-green-200/30 dark:border-green-700/30\">\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-black text-green-600 dark:text-green-400 mb-1\" data-testid=\"text-total-correct\">\n                      {questionStats.totalCorrect.toLocaleString('tr-TR')}\n                    </div>\n                    <div className=\"text-xs font-medium text-green-700 dark:text-green-300 mb-1\">Toplam Doğru</div>\n                    <div className=\"w-full bg-green-200/50 dark:bg-green-900/40 rounded-full h-2 mt-1 overflow-hidden\">\n                      <div \n                        className=\"bg-gradient-to-r from-green-500 to-green-600 h-2 rounded-full transition-all duration-1000 shadow-sm\"\n                        style={{ width: `${questionStats.totalQuestions > 0 ? (questionStats.totalCorrect / questionStats.totalQuestions) * 100 : 0}%` }}\n                      ></div>\n                    </div>\n                    <div className=\"text-xs font-medium text-green-700 dark:text-green-300 mt-1\">\n                      {questionStats.totalQuestions > 0 ? Math.round((questionStats.totalCorrect / questionStats.totalQuestions) * 100) : 0}%\n                    </div>\n                  </div>\n                </div>\n\n                {/* Yanlış Cevaplar Kutusu */}\n                <div className=\"bg-white/50 dark:bg-gray-800/50 rounded-xl p-3 backdrop-blur-sm border border-red-200/30 dark:border-red-700/30\">\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-black text-red-600 dark:text-red-400 mb-1\" data-testid=\"text-total-wrong\">\n                      {questionStats.totalWrong.toLocaleString('tr-TR')}\n                    </div>\n                    <div className=\"text-xs font-medium text-red-700 dark:text-red-300 mb-1\">Toplam Yanlış</div>\n                    <div className=\"w-full bg-red-200/50 dark:bg-red-900/40 rounded-full h-2 mt-1 overflow-hidden\">\n                      <div \n                        className=\"bg-gradient-to-r from-red-500 to-red-600 h-2 rounded-full transition-all duration-1000 shadow-sm\"\n                        style={{ width: `${questionStats.totalQuestions > 0 ? (questionStats.totalWrong / questionStats.totalQuestions) * 100 : 0}%` }}\n                      ></div>\n                    </div>\n                    <div className=\"text-xs font-medium text-red-700 dark:text-red-300 mt-1\">\n                      {questionStats.totalQuestions > 0 ? Math.round((questionStats.totalWrong / questionStats.totalQuestions) * 100) : 0}%\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Çalışma Saatleri İstatistikleri Kartı */}\n        <div className=\"group bg-gradient-to-br from-white/80 to-white/60 dark:from-gray-900/80 dark:to-gray-800/60 backdrop-blur-xl rounded-2xl border border-white/20 dark:border-gray-700/30 p-4 relative overflow-hidden hover:scale-[1.02] transition-all duration-500 shadow-lg hover:shadow-2xl\" data-testid=\"card-study-hours\">\n          {/* Animasyonlu Arka Plan Öğeleri */}\n          <div className=\"absolute -top-20 -right-20 w-40 h-40 bg-gradient-to-br from-cyan-500/20 to-blue-600/20 rounded-full blur-3xl group-hover:scale-110 transition-transform duration-700\"></div>\n          <div className=\"absolute -bottom-10 -left-10 w-32 h-32 bg-gradient-to-tr from-teal-500/15 to-cyan-600/15 rounded-full blur-2xl group-hover:scale-110 transition-transform duration-700\"></div>\n          \n          {/* Saat Simgesi Animasyonu */}\n          <div className=\"absolute top-4 right-4 opacity-0 group-hover:opacity-100 transition-opacity duration-500\">\n            <Clock className=\"h-5 w-5 text-cyan-500 animate-spin\" style={{ animationDuration: '3s' }} />\n          </div>\n\n          <div className=\"relative z-10\">\n            <div className=\"flex items-center gap-3 mb-6\">\n              <div className=\"p-3 bg-gradient-to-br from-cyan-500 to-blue-600 rounded-xl shadow-lg\">\n                <Clock className=\"h-6 w-6 text-white\" />\n              </div>\n              <div>\n                <h3 className=\"text-xl font-bold text-foreground\">Çalışma Saatleri</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  {studyHoursStats.longestStudyDay ? (\n                    <span className=\"flex items-center gap-1\">\n                      En uzun gün → \n                      <span className=\"font-semibold text-cyan-600 dark:text-cyan-400\">\n                        {new Date(studyHoursStats.longestStudyDay).toLocaleDateString('tr-TR', { \n                          day: 'numeric', \n                          month: 'short'\n                        })} ({studyHoursStats.longestHours}s {studyHoursStats.longestMinutes}dk)\n                      </span>\n                    </span>\n                  ) : (\n                    'Henüz çalışma kaydı bulunmuyor'\n                  )}\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"space-y-6\">\n              {/* Toplam Çalışma Süresi */}\n              <div className=\"bg-white/50 dark:bg-gray-800/50 rounded-xl p-4 backdrop-blur-sm border border-cyan-200/30 dark:border-cyan-700/30\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"text-3xl font-black text-cyan-600 dark:text-cyan-400 mb-1\" data-testid=\"text-total-study-hours\">\n                      {studyHoursStats.totalHours}s {studyHoursStats.totalMinutes}dk\n                    </div>\n                    <div className=\"text-sm font-medium text-cyan-700 dark:text-cyan-300\">Toplam Çalışma Süresi</div>\n                  </div>\n                  <div className=\"ml-4 p-3 bg-cyan-100 dark:bg-cyan-900/30 rounded-xl\">\n                    <Clock className=\"h-6 w-6 text-cyan-600 dark:text-cyan-400\" />\n                  </div>\n                </div>\n              </div>\n              \n              {/* Günlük Ortalama */}\n              <div className=\"bg-white/50 dark:bg-gray-800/50 rounded-xl p-4 backdrop-blur-sm border border-blue-200/30 dark:border-blue-700/30\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"text-3xl font-black text-blue-600 dark:text-blue-400 mb-1\" data-testid=\"text-avg-daily-study\">\n                      {studyHoursStats.avgHoursPerDay}s {studyHoursStats.avgMinutesPerDay}dk\n                    </div>\n                    <div className=\"text-sm font-medium text-blue-700 dark:text-blue-300\">Günlük Ortalama</div>\n                  </div>\n                  <div className=\"ml-4 p-3 bg-blue-100 dark:bg-blue-900/30 rounded-xl\">\n                    <Calendar className=\"h-6 w-6 text-blue-600 dark:text-blue-400\" />\n                  </div>\n                </div>\n              </div>\n\n              {/* Aktif Çalışma Günü */}\n              <div className=\"bg-white/50 dark:bg-gray-800/50 rounded-xl p-4 backdrop-blur-sm border border-teal-200/30 dark:border-teal-700/30\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <div className=\"flex-1\">\n                    <div className=\"text-3xl font-black text-teal-600 dark:text-teal-400 mb-1\" data-testid=\"text-active-study-days\">\n                      {studyHoursStats.activeDays}\n                    </div>\n                    <div className=\"text-sm font-medium text-teal-700 dark:text-teal-300\">Aktif Çalışma Günü</div>\n                  </div>\n                  <div className=\"ml-4 p-3 bg-teal-100 dark:bg-teal-900/30 rounded-xl\">\n                    <Calendar className=\"h-6 w-6 text-teal-600 dark:text-teal-400\" />\n                  </div>\n                </div>\n                <div className=\"w-full bg-teal-100 dark:bg-teal-900/30 rounded-full h-2 mt-2\">\n                  <div \n                    className=\"bg-gradient-to-r from-teal-500 to-cyan-600 h-2 rounded-full transition-all duration-1000\"\n                    style={{ width: `${Math.min((studyHoursStats.activeDays / 30) * 100, 100)}%` }}\n                  ></div>\n                </div>\n              </div>\n\n              {/* En Uzun Seri */}\n              <div className=\"bg-white/50 dark:bg-gray-800/50 rounded-xl p-4 backdrop-blur-sm border border-purple-200/30 dark:border-purple-700/30\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <div className=\"flex-1\">\n                    <div className=\"text-3xl font-black text-purple-600 dark:text-purple-400 mb-1\" data-testid=\"text-longest-streak\">\n                      {studyHoursStats.longestStreak} gün\n                    </div>\n                    <div className=\"text-sm font-medium text-purple-700 dark:text-purple-300\">En Uzun Seri</div>\n                  </div>\n                  <div className=\"ml-4 p-3 bg-purple-100 dark:bg-purple-900/30 rounded-xl\">\n                    <Award className=\"h-6 w-6 text-purple-600 dark:text-purple-400\" />\n                  </div>\n                </div>\n                <div className=\"w-full bg-purple-100 dark:bg-purple-900/30 rounded-full h-2 mt-2\">\n                  <div \n                    className=\"bg-gradient-to-r from-purple-500 to-violet-600 h-2 rounded-full transition-all duration-1000\"\n                    style={{ width: `${Math.min((studyHoursStats.longestStreak / 30) * 100, 100)}%` }}\n                  ></div>\n                </div>\n              </div>\n\n              {/* En Çok Çalışılan Ay */}\n              <div className=\"bg-gradient-to-br from-amber-50 to-orange-50 dark:from-amber-900/20 dark:to-orange-900/20 rounded-xl p-4 backdrop-blur-sm border border-amber-200/50 dark:border-amber-700/30\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <div className=\"flex-1\">\n                    {studyHoursStats.mostStudiedMonth ? (\n                      <>\n                        <div className=\"text-lg font-black text-amber-700 dark:text-amber-300 mb-1\" data-testid=\"text-most-studied-month\">\n                          {studyHoursStats.mostStudiedMonth}\n                        </div>\n                        <div className=\"text-sm font-medium text-amber-600 dark:text-amber-400\">En Çok Çalışılan Ay</div>\n                        <div className=\"text-2xl font-bold text-amber-600 dark:text-amber-400 mt-2\">\n                          {studyHoursStats.mostStudiedMonthHours} saat\n                        </div>\n                      </>\n                    ) : (\n                      <>\n                        <div className=\"text-lg font-black text-amber-700 dark:text-amber-300 mb-1\">\n                          -\n                        </div>\n                        <div className=\"text-sm font-medium text-amber-600 dark:text-amber-400\">En Çok Çalışılan Ay</div>\n                        <div className=\"text-xs text-amber-600/60 dark:text-amber-400/60 mt-2\">\n                          Henüz çalışma verisi yok\n                        </div>\n                      </>\n                    )}\n                  </div>\n                  <div className=\"ml-4 p-3 bg-amber-100 dark:bg-amber-900/30 rounded-xl\">\n                    <Sparkles className=\"h-6 w-6 text-amber-600 dark:text-amber-400\" />\n                  </div>\n                </div>\n              </div>\n\n              {/* En Çok Çalışılan Gün */}\n              <div className=\"bg-gradient-to-br from-orange-50 to-amber-50 dark:from-orange-900/20 dark:to-amber-900/20 rounded-xl p-4 backdrop-blur-sm border border-orange-200/50 dark:border-orange-700/30\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <div className=\"flex-1\">\n                    {studyHoursStats.mostStudiedDay ? (\n                      <>\n                        <div className=\"text-sm font-black text-orange-700 dark:text-orange-300 mb-1\" data-testid=\"text-most-studied-day\">\n                          {studyHoursStats.mostStudiedDay}\n                        </div>\n                        <div className=\"text-sm font-medium text-orange-600 dark:text-orange-400\">En Çok Çalışılan Gün</div>\n                        <div className=\"text-2xl font-bold text-orange-600 dark:text-orange-400 mt-2\">\n                          {studyHoursStats.mostStudiedDayHours}s {studyHoursStats.mostStudiedDayMinutes}dk\n                        </div>\n                      </>\n                    ) : (\n                      <>\n                        <div className=\"text-lg font-black text-orange-700 dark:text-orange-300 mb-1\">\n                          -\n                        </div>\n                        <div className=\"text-sm font-medium text-orange-600 dark:text-orange-400\">En Çok Çalışılan Gün</div>\n                        <div className=\"text-xs text-orange-600/60 dark:text-orange-400/60 mt-2\">\n                          Henüz çalışma verisi yok\n                        </div>\n                      </>\n                    )}\n                  </div>\n                  <div className=\"ml-4 p-3 bg-orange-100 dark:bg-orange-900/30 rounded-xl\">\n                    <Calendar className=\"h-6 w-6 text-orange-600 dark:text-orange-400\" />\n                  </div>\n                </div>\n              </div>\n\n              {/* Eklenen Çalışma Saatleri Listesi - Scrollbar ile */}\n              {allStudyHours.length > 0 && (\n                <div className=\"bg-white/50 dark:bg-gray-800/50 rounded-xl p-4 backdrop-blur-sm border border-cyan-200/30 dark:border-cyan-700/30 max-h-60 overflow-y-auto\">\n                  <div className=\"text-sm font-semibold text-cyan-700 dark:text-cyan-300 mb-3\">Eklenen Çalışma Saatleri</div>\n                  <div className=\"space-y-2\">\n                    {allStudyHours\n                      .sort((a, b) => new Date(b.study_date).getTime() - new Date(a.study_date).getTime())\n                      .map((item, index) => (\n                        <div key={item.id || index} className=\"flex items-center justify-between gap-2 p-2 bg-cyan-50 dark:bg-cyan-900/20 rounded-lg group hover:bg-cyan-100 dark:hover:bg-cyan-900/30 transition-colors\">\n                          <span className=\"text-sm text-cyan-700 dark:text-cyan-300\">\n                            {new Date(item.study_date).toLocaleDateString('tr-TR')}\n                          </span>\n                          <div className=\"flex items-center gap-2\">\n                            <span className=\"text-sm font-semibold text-cyan-600 dark:text-cyan-400\">\n                              {item.hours}s {item.minutes}dk\n                            </span>\n                            <button\n                              onClick={async () => {\n                                try {\n                                  const response = await fetch(`/api/study-hours/${item.id}`, {\n                                    method: 'DELETE',\n                                  });\n                                  if (response.ok) {\n                                    queryClient.invalidateQueries({ queryKey: [\"/api/study-hours\"] });\n                                    queryClient.invalidateQueries({ queryKey: [\"/api/study-hours/archived\"] });\n                                  }\n                                } catch (error) {\n                                  console.error('Silme hatası:', error);\n                                }\n                              }}\n                              className=\"opacity-0 group-hover:opacity-100 p-1.5 bg-red-500 hover:bg-red-600 text-white rounded-md transition-all duration-200\"\n                              title=\"Sil\"\n                            >\n                              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                                <path fillRule=\"evenodd\" d=\"M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n                              </svg>\n                            </button>\n                          </div>\n                        </div>\n                      ))}\n                  </div>\n                </div>\n              )}\n\n              {/* Çalıştığım Süreyi Ekle Butonu - Kart İçinde */}\n              {onAddStudyHours && (\n                <div className=\"flex justify-center\">\n                  <button\n                    onClick={onAddStudyHours}\n                    className=\"group relative w-full px-6 py-3 bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700 text-white rounded-xl font-bold shadow-lg hover:shadow-xl transition-all duration-300 flex items-center justify-center gap-3 overflow-hidden\"\n                  >\n                    <div className=\"absolute inset-0 bg-white/10 transform -skew-x-12 group-hover:translate-x-full transition-transform duration-700\"></div>\n                    <div className=\"relative z-10 flex items-center gap-2\">\n                      <div className=\"text-2xl group-hover:rotate-12 transition-transform duration-300\">⏱️</div>\n                      <span className=\"text-base\">Çalıştığım Süreyi Ekle</span>\n                    </div>\n                  </button>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Geliştirilmiş Ders Performansı Kartı - TYT ve AYT Ayrı - Tam Genişlik */}\n        <div className=\"xl:col-span-4 group bg-gradient-to-br from-white/80 to-white/60 dark:from-gray-900/80 dark:to-gray-800/60 backdrop-blur-xl rounded-2xl border border-white/20 dark:border-gray-700/30 p-8 relative overflow-hidden hover:scale-[1.02] transition-all duration-500 shadow-lg hover:shadow-2xl\" data-testid=\"card-subject-performance\">\n          {/* Animasyonlu Arka Plan Öğeleri */}\n          <div className=\"absolute -top-20 -right-20 w-40 h-40 bg-gradient-to-br from-orange-500/20 to-red-600/20 rounded-full blur-3xl group-hover:scale-110 transition-transform duration-700\"></div>\n          <div className=\"absolute -bottom-10 -left-10 w-32 h-32 bg-gradient-to-tr from-yellow-500/15 to-orange-600/15 rounded-full blur-2xl group-hover:scale-110 transition-transform duration-700\"></div>\n\n          {/* Kupa Animasyonu */}\n          <div className=\"absolute top-4 right-4 opacity-0 group-hover:opacity-100 transition-opacity duration-500\">\n            <Award className=\"h-5 w-5 text-yellow-500 animate-pulse\" />\n          </div>\n\n          <div className=\"relative z-10\">\n            <div className=\"flex items-center gap-3 mb-6\">\n              <div className=\"p-3 bg-gradient-to-br from-orange-500 to-red-600 rounded-xl shadow-lg\">\n                <Award className=\"h-6 w-6 text-white\" />\n              </div>\n              <div>\n                <h3 className=\"text-xl font-bold text-foreground\">Ders Performansı</h3>\n                <p className=\"text-sm text-muted-foreground\">Genel ve branş denemeler dahil</p>\n              </div>\n            </div>\n            \n            {subjectPerformance.tyt.strongest || subjectPerformance.ayt.strongest ? (\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                {/* TYT Performansı */}\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center gap-2 mb-3\">\n                    <div className=\"px-3 py-1 bg-blue-100 dark:bg-blue-900/30 rounded-lg\">\n                      <span className=\"text-sm font-bold text-blue-600 dark:text-blue-400\">TYT</span>\n                    </div>\n                  </div>\n                  \n                  {subjectPerformance.tyt.strongest && (\n                    <div className=\"bg-gradient-to-r from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20 rounded-xl p-3 border border-green-200/50 dark:border-green-700/30\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          <div className=\"p-1.5 bg-green-500 rounded-lg\">\n                            <TrendingUp className=\"h-3.5 w-3.5 text-white\" />\n                          </div>\n                          <div>\n                            <div className=\"font-bold text-sm text-green-700 dark:text-green-300\">\n                              {subjectPerformance.tyt.strongest.subject}\n                            </div>\n                            <div className=\"text-xs text-green-600 dark:text-green-400\">En güçlü</div>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"text-xl font-black text-green-600 dark:text-green-400\">\n                            {subjectPerformance.tyt.strongest.successRate.toFixed(1)}%\n                          </div>\n                          <div className=\"text-xs text-green-600 dark:text-green-400\">\n                            {subjectPerformance.tyt.strongest.totalQuestions} soru\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"w-full bg-green-200 dark:bg-green-800/30 rounded-full h-1.5 mt-2\">\n                        <div \n                          className=\"bg-gradient-to-r from-green-500 to-emerald-600 h-1.5 rounded-full transition-all duration-1000\"\n                          style={{ width: `${subjectPerformance.tyt.strongest.successRate}%` }}\n                        ></div>\n                      </div>\n                    </div>\n                  )}\n                  \n                  {subjectPerformance.tyt.medium && (\n                    <div className=\"bg-gradient-to-r from-yellow-50 to-amber-50 dark:from-yellow-900/20 dark:to-amber-900/20 rounded-xl p-3 border border-yellow-200/50 dark:border-yellow-700/30\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          <div className=\"p-1.5 bg-yellow-500 rounded-lg\">\n                            <AlertCircle className=\"h-3.5 w-3.5 text-white\" />\n                          </div>\n                          <div>\n                            <div className=\"font-bold text-sm text-yellow-700 dark:text-yellow-300\">\n                              {subjectPerformance.tyt.medium.subject}\n                            </div>\n                            <div className=\"text-xs text-yellow-600 dark:text-yellow-400\">Geliştirilmesi gereken</div>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"text-xl font-black text-yellow-600 dark:text-yellow-400\">\n                            {subjectPerformance.tyt.medium.successRate.toFixed(1)}%\n                          </div>\n                          <div className=\"text-xs text-yellow-600 dark:text-yellow-400\">\n                            {subjectPerformance.tyt.medium.totalQuestions} soru\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"w-full bg-yellow-200 dark:bg-yellow-800/30 rounded-full h-1.5 mt-2\">\n                        <div \n                          className=\"bg-gradient-to-r from-yellow-500 to-amber-600 h-1.5 rounded-full transition-all duration-1000\"\n                          style={{ width: `${subjectPerformance.tyt.medium.successRate}%` }}\n                        ></div>\n                      </div>\n                    </div>\n                  )}\n                  \n                  {subjectPerformance.tyt.weakest && (\n                    <div className=\"bg-gradient-to-r from-red-50 to-pink-50 dark:from-red-900/20 dark:to-pink-900/20 rounded-xl p-3 border border-red-200/50 dark:border-red-700/30\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          <div className=\"p-1.5 bg-red-500 rounded-lg\">\n                            <TrendingDown className=\"h-3.5 w-3.5 text-white\" />\n                          </div>\n                          <div>\n                            <div className=\"font-bold text-sm text-red-700 dark:text-red-300\">\n                              {subjectPerformance.tyt.weakest.subject}\n                            </div>\n                            <div className=\"text-xs text-red-600 dark:text-red-400\">En zayıf</div>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"text-xl font-black text-red-600 dark:text-red-400\">\n                            {subjectPerformance.tyt.weakest.successRate.toFixed(1)}%\n                          </div>\n                          <div className=\"text-xs text-red-600 dark:text-red-400\">\n                            {subjectPerformance.tyt.weakest.totalQuestions} soru\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"w-full bg-red-200 dark:bg-red-800/30 rounded-full h-1.5 mt-2\">\n                        <div \n                          className=\"bg-gradient-to-r from-red-500 to-pink-600 h-1.5 rounded-full transition-all duration-1000\"\n                          style={{ width: `${subjectPerformance.tyt.weakest.successRate}%` }}\n                        ></div>\n                      </div>\n                    </div>\n                  )}\n                </div>\n\n                {/* AYT Performansı */}\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center gap-2 mb-3\">\n                    <div className=\"px-3 py-1 bg-green-100 dark:bg-green-900/30 rounded-lg\">\n                      <span className=\"text-sm font-bold text-green-600 dark:text-green-400\">AYT</span>\n                    </div>\n                  </div>\n                  \n                  {subjectPerformance.ayt.strongest && (\n                    <div className=\"bg-gradient-to-r from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20 rounded-xl p-3 border border-green-200/50 dark:border-green-700/30\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          <div className=\"p-1.5 bg-green-500 rounded-lg\">\n                            <TrendingUp className=\"h-3.5 w-3.5 text-white\" />\n                          </div>\n                          <div>\n                            <div className=\"font-bold text-sm text-green-700 dark:text-green-300\">\n                              {subjectPerformance.ayt.strongest.subject}\n                            </div>\n                            <div className=\"text-xs text-green-600 dark:text-green-400\">En güçlü</div>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"text-xl font-black text-green-600 dark:text-green-400\">\n                            {subjectPerformance.ayt.strongest.successRate.toFixed(1)}%\n                          </div>\n                          <div className=\"text-xs text-green-600 dark:text-green-400\">\n                            {subjectPerformance.ayt.strongest.totalQuestions} soru\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"w-full bg-green-200 dark:bg-green-800/30 rounded-full h-1.5 mt-2\">\n                        <div \n                          className=\"bg-gradient-to-r from-green-500 to-emerald-600 h-1.5 rounded-full transition-all duration-1000\"\n                          style={{ width: `${subjectPerformance.ayt.strongest.successRate}%` }}\n                        ></div>\n                      </div>\n                    </div>\n                  )}\n                  \n                  {subjectPerformance.ayt.medium && (\n                    <div className=\"bg-gradient-to-r from-yellow-50 to-amber-50 dark:from-yellow-900/20 dark:to-amber-900/20 rounded-xl p-3 border border-yellow-200/50 dark:border-yellow-700/30\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          <div className=\"p-1.5 bg-yellow-500 rounded-lg\">\n                            <AlertCircle className=\"h-3.5 w-3.5 text-white\" />\n                          </div>\n                          <div>\n                            <div className=\"font-bold text-sm text-yellow-700 dark:text-yellow-300\">\n                              {subjectPerformance.ayt.medium.subject}\n                            </div>\n                            <div className=\"text-xs text-yellow-600 dark:text-yellow-400\">Geliştirilmesi gereken</div>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"text-xl font-black text-yellow-600 dark:text-yellow-400\">\n                            {subjectPerformance.ayt.medium.successRate.toFixed(1)}%\n                          </div>\n                          <div className=\"text-xs text-yellow-600 dark:text-yellow-400\">\n                            {subjectPerformance.ayt.medium.totalQuestions} soru\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"w-full bg-yellow-200 dark:bg-yellow-800/30 rounded-full h-1.5 mt-2\">\n                        <div \n                          className=\"bg-gradient-to-r from-yellow-500 to-amber-600 h-1.5 rounded-full transition-all duration-1000\"\n                          style={{ width: `${subjectPerformance.ayt.medium.successRate}%` }}\n                        ></div>\n                      </div>\n                    </div>\n                  )}\n                  \n                  {subjectPerformance.ayt.weakest && (\n                    <div className=\"bg-gradient-to-r from-red-50 to-pink-50 dark:from-red-900/20 dark:to-pink-900/20 rounded-xl p-3 border border-red-200/50 dark:border-red-700/30\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          <div className=\"p-1.5 bg-red-500 rounded-lg\">\n                            <TrendingDown className=\"h-3.5 w-3.5 text-white\" />\n                          </div>\n                          <div>\n                            <div className=\"font-bold text-sm text-red-700 dark:text-red-300\">\n                              {subjectPerformance.ayt.weakest.subject}\n                            </div>\n                            <div className=\"text-xs text-red-600 dark:text-red-400\">En zayıf</div>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"text-xl font-black text-red-600 dark:text-red-400\">\n                            {subjectPerformance.ayt.weakest.successRate.toFixed(1)}%\n                          </div>\n                          <div className=\"text-xs text-red-600 dark:text-red-400\">\n                            {subjectPerformance.ayt.weakest.totalQuestions} soru\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"w-full bg-red-200 dark:bg-red-800/30 rounded-full h-1.5 mt-2\">\n                        <div \n                          className=\"bg-gradient-to-r from-red-500 to-pink-600 h-1.5 rounded-full transition-all duration-1000\"\n                          style={{ width: `${subjectPerformance.ayt.weakest.successRate}%` }}\n                        ></div>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            ) : (\n              <div className=\"text-center py-12 text-muted-foreground\">\n                <div className=\"relative mb-4\">\n                  <Brain className=\"h-16 w-16 mx-auto opacity-30\" />\n                  <div className=\"absolute inset-0 flex items-center justify-center\">\n                    <div className=\"w-8 h-8 border-2 border-dashed border-gray-300 rounded-full animate-spin\"></div>\n                  </div>\n                </div>\n                <p className=\"font-medium text-lg mb-2\">Yeterli veri bulunmuyor</p>\n                <p className=\"text-sm\">Her dersten en az 5 soru çöz</p>\n                <div className=\"mt-4 px-6 py-2 bg-gradient-to-r from-purple-100 to-blue-100 dark:from-purple-900/30 dark:to-blue-900/30 rounded-full text-xs font-medium text-purple-700 dark:text-purple-300 inline-block\">\n                  Analiz için veri topluyorum...\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":99009},"md dosyaları/kod_aciklamasi_server.md":{"content":"# SERVER TARAFLI KOD AÇIKLAMASI - EN DETAYLI DOKÜMANTASYON\n\n**📑 Hızlı Navigasyon:** [Ana Sayfa](../replit.md) | [Talimatlar](./talimatlar.md) | [Teknik Mimari](./teknik_mimari.md) | [Client Kodu](./kod_aciklamasi_client.md) | [Shared Kodu](./kod_aciklamasi_shared.md) | [Electron](./kod_aciklamasi_electron1.md) | [Testler](./kod_aciklamasi_testler.md)\n\n---\n\n## GİRİŞ\n\nBu doküman, Berat Cankır YKS Analiz Takip Sistemi'nin server (sunucu) tarafındaki tüm kodları **satır satır** açıklar. Her İngilizce terim Türkçe karşılığıyla somutlaştırılmıştır.\n\n**Server Nedir?**\n- **Basit Tanım:** Arka planda çalışan, veritabanı işlemlerini yapan, API endpoint'leri sağlayan kod\n- **Teknolojiler:** Node.js, Express.js, Drizzle ORM, TypeScript\n- **Sorumluluk:** HTTP isteklerini karşılamak, veri CRUD işlemleri, iş mantığı\n\n**Server Dosyaları:**\n```\nserver/\n├── index.ts              # Ana entry point (server başlatma)\n├── rotalar.ts            # API routes (endpoint definitions) - 1820 satır\n├── depolama.ts           # Storage implementation (MemStorage/PgStorage) - 1768 satır\n├── vite.ts               # Vite dev server integration\n├── static.ts             # Static file serving (production)\n└── env-validation.ts     # Environment variable validation\n```\n\n**Toplam Server Kodu:** ~4000+ satır (bu doküman her satırı açıklar)\n\n---\n\n## BÖLÜM 1: server/index.ts - ANA GİRİŞ NOKTASI\n\n### 1.1 Dosya Amacı\n\n`server/index.ts` dosyası Express server'ın başlatıldığı ana entry point (giriş noktası)'tir.\n\n**Entry Point Nedir?**\n- **Basit Tanım:** Sunucu uygulamasının ilk çalışan dosyası\n- **Sorumluluk:** Express app oluşturmak, middleware'leri eklemek, port'ta dinlemeye başlamak\n- **Benzetme:** Restoranın açılış prosedürü gibi (ışıklar açılır, fırın ısıtılır, garsonlar hazırlanır)\n\n**Sorumluluklar:**\n1. **Environment variables yükleme** (dotenv)\n2. **Express app oluşturma** ve konfigürasyon\n3. **Middleware'leri yükleme** (JSON parser, URL-encoded parser, logger)\n4. **Routes'ları register etme** (API endpoints)\n5. **Static file serving** (production mode)\n6. **Vite dev server** (development mode)\n7. **Server'ı belirtilen port'ta başlatma**\n8. **Otomatik arşivleme zamanlayıcısı** (her Pazar 23:59)\n\n### 1.2 dotenv Konsol Log Filtreleme\n\n```typescript\n// dotenv debug log'larını filtrele\nconst originalConsoleLog = console.log;\nconsole.log = (...args: any[]) => {\n  const message = args.join(' ');\n  \n  // dotenv'in gereksiz mesajlarını filtrele\n  if (message.includes('[dotenv') || \n      message.includes('injecting env') || \n      message.includes('dotenvx.com') || \n      message.includes('prevent building')) {\n    return; // Bu mesajları gösterme\n  }\n  \n  originalConsoleLog.apply(console, args);\n};\n\ndotenv.config({ debug: false });\n\n// console.log'u restore et\nconsole.log = originalConsoleLog;\n```\n\n**Neden bu gerekli?**\n\n**Problem:**\ndotenv kütüphanesi bazı gereksiz debug mesajları yazdırır:\n```\n[dotenv][INFO] Loading environment variables from .env\n[dotenv][DEBUG] Matched key DATABASE_URL\n[dotenv][WARN] Please visit https://dotenvx.com\n```\n\nBu mesajlar:\n- **Electron console'unu kirletir** (kullanıcı rahatsız olur)\n- **Production log'larını karıştırır** (önemli mesajlar kaybolur)\n- **Gereksiz noise** (hiçbir değer katmaz)\n\n**Çözüm:**\n1. `console.log` fonksiyonunu geçici olarak override et\n2. Sadece dotenv mesajlarını filtrele\n3. Diğer log'ları normal göster\n4. İşlem bitince `console.log`'u restore et\n\n**Override Pattern (Monkey Patching):**\n```typescript\nconst original = console.log; // Orijinal fonksiyonu kaydet\nconsole.log = (...args) => {  // Override et\n  // Custom logic\n  if (shouldFilter(args)) return;\n  original.apply(console, args); // Orijinal fonksiyonu çağır\n};\n// ...\nconsole.log = original; // Restore et\n```\n\n**Alternatif Çözüm:**\n```typescript\nimport dotenv from 'dotenv';\ndotenv.config({ debug: false, override: false });\n```\n- Ama bu da yeterli değil, çünkü bazı mesajlar yine yazdırılıyor\n- Bu yüzden `console.log` override gerekiyor\n\n### 1.3 Express App Konfigürasyonu\n\n```typescript\nconst app = express();\n\n// Production mode ayarı\nif (process.env.NODE_ENV === \"production\") {\n  app.set(\"env\", \"production\");\n}\n\n// Body parser middleware'leri\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n```\n\n**Detaylı Açıklama:**\n\n**1. Express Instance Oluşturma**\n```typescript\nconst app = express();\n```\n- **app:** Express application instance\n- **Tip:** `Express.Application`\n- **Benzetme:** Restoran objesi (menüyü, çalışanları, kuralları içerir)\n\n**2. Production Environment Ayarı**\n```typescript\nif (process.env.NODE_ENV === \"production\") {\n  app.set(\"env\", \"production\");\n}\n```\n\n**app.set(\"env\", \"production\") Ne Yapar?**\n- **Express internal optimization'ları** aktif eder\n- **Error stack trace'leri** production'da gizlenir (güvenlik)\n- **Template caching** aktif edilir (performans)\n- **Logging** production-friendly hale gelir\n\n**Örnek:**\n```typescript\n// Development\napp.get('/error', (req, res) => {\n  throw new Error('Test error');\n});\n// Response: { error: 'Test error', stack: 'Error: Test error\\n    at /server/index.ts:123...' }\n\n// Production\n// Response: { error: 'Internal Server Error' }\n// (Stack trace gizlenir)\n```\n\n**3. JSON Body Parser**\n```typescript\napp.use(express.json());\n```\n\n**express.json() Ne Yapar?**\n- **Amaç:** `Content-Type: application/json` olan request body'lerini parse eder\n- **Input:** String JSON\n- **Output:** JavaScript object (`req.body`)\n- **Maksimum body size:** 100kb (default)\n\n**Örnek:**\n```\nPOST /api/tasks\nContent-Type: application/json\n\n{\"title\": \"Matematik Çalış\", \"priority\": \"high\"}\n```\n```typescript\napp.post('/api/tasks', (req, res) => {\n  console.log(req.body);\n  // { title: 'Matematik Çalış', priority: 'high' }\n  \n  console.log(req.body.title);\n  // 'Matematik Çalış'\n});\n```\n\n**JSON Parse Nasıl Çalışır?**\n```typescript\n// express.json() içinde (basitleştirilmiş)\napp.use((req, res, next) => {\n  if (req.headers['content-type'] === 'application/json') {\n    let body = '';\n    req.on('data', chunk => body += chunk);\n    req.on('end', () => {\n      req.body = JSON.parse(body); // String → Object\n      next();\n    });\n  } else {\n    next();\n  }\n});\n```\n\n**4. URL-Encoded Parser**\n```typescript\napp.use(express.urlencoded({ extended: false }));\n```\n\n**express.urlencoded() Ne Yapar?**\n- **Amaç:** HTML form data'yı parse eder\n- **Content-Type:** `application/x-www-form-urlencoded`\n- **extended: false** → `querystring` library kullanır (basit key-value)\n- **extended: true** → `qs` library kullanır (nested objects)\n\n**Örnek:**\n```\nPOST /api/tasks\nContent-Type: application/x-www-form-urlencoded\n\ntitle=Matematik+Çalış&priority=high&tags[0]=matematik&tags[1]=türev\n```\n```typescript\n// extended: false\nreq.body → { title: 'Matematik Çalış', priority: 'high', 'tags[0]': 'matematik', 'tags[1]': 'türev' }\n\n// extended: true\nreq.body → { title: 'Matematik Çalış', priority: 'high', tags: ['matematik', 'türev'] }\n```\n\n**Ne zaman kullanılır?**\n- **HTML form'lar:** `<form method=\"POST\">`\n- **Eski API'ler:** JSON desteklemeyen legacy sistemler\n- **Bu projede:** Pek kullanılmıyor (çoğu API JSON kullanıyor)\n\n### 1.4 Request Logging Middleware\n\n```typescript\napp.use((req, res, next) => {\n  const start = Date.now();\n  const pathReq = req.path;\n  let capturedJsonResponse: any;\n\n  // res.json() override et (response body'yi yakala)\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  // Response finish olunca log et\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    \n    if (pathReq.startsWith(\"/api\")) {\n      // Gereksiz logları filtrele\n      const shouldSkipLog = (\n        (req.method === 'GET' && res.statusCode === 304) ||  // Not Modified\n        (req.method === 'GET' && duration < 50 && res.statusCode === 200)  // Hızlı GET\n      );\n\n      if (shouldSkipLog) {\n        return;\n      }\n\n      let logLine = `${req.method} ${pathReq} ${res.statusCode} in ${duration}ms`;\n      \n      // Hata veya yavaş request'lerde detaylı log\n      if (res.statusCode >= 400 || duration > 1000) {\n        logLine += ` [IP: ${req.ip}]`;\n        if (capturedJsonResponse) {\n          logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n        }\n      }\n\n      console.log(logLine);\n    }\n  });\n\n  next();\n});\n```\n\n**Detaylı Açıklama:**\n\n**1. Timing Measurement (Süre Ölçümü)**\n```typescript\nconst start = Date.now();\n// ... request processing ...\nconst duration = Date.now() - start;\n```\n\n**Date.now():**\n- **Return:** Unix timestamp (milliseconds since 1970-01-01 00:00:00 UTC)\n- **Örnek:** `1730279845123` (Fri Oct 30 2025 10:30:45 GMT)\n\n**Duration hesaplama:**\n```\nstart = 1730279845123\n... 250ms sonra ...\nend = 1730279845373\nduration = 1730279845373 - 1730279845123 = 250ms\n```\n\n**2. Response Capture (Monkey Patching)**\n```typescript\nconst originalResJson = res.json;\nres.json = function (bodyJson, ...args) {\n  capturedJsonResponse = bodyJson; // Response body'yi kaydet\n  return originalResJson.apply(res, [bodyJson, ...args]); // Orijinal fonksiyonu çağır\n};\n```\n\n**Neden gerekli?**\n- **Problem:** `res.json()` çağrıldığında response body'yi yakalamak istiyoruz\n- **Çözüm:** `res.json()` fonksiyonunu override et\n- **Monkey-patching:** Runtime'da fonksiyon davranışını değiştirme\n\n**apply() Method:**\n```typescript\noriginalResJson.apply(res, [bodyJson, ...args])\n// res context'inde originalResJson'u çağır\n// Parametreler: bodyJson, ...args\n```\n\n**3. Response Event Listener**\n```typescript\nres.on(\"finish\", () => {\n  // Response gönderildi (client'a ulaştı)\n});\n```\n\n**finish vs end:**\n- **finish:** Response tamamen gönderildi (network'e yazıldı)\n- **end:** Response stream'i kapandı (hala network buffer'da olabilir)\n\n**4. Log Filtering (Performance Optimization)**\n```typescript\nconst shouldSkipLog = (\n  (req.method === 'GET' && res.statusCode === 304) ||\n  (req.method === 'GET' && duration < 50 && res.statusCode === 200)\n);\n```\n\n**Filtrelenen Log'lar:**\n\n**304 Not Modified:**\n```\nGET /api/tasks → 304 Not Modified\n// Client cache'de var, sunucu \"değişiklik yok\" diyor\n// Log edilmez (spam önlenir)\n```\n\n**Hızlı GET istekleri (<50ms):**\n```\nGET /api/tasks → 200 OK in 35ms\n// Çok hızlı, log'a gerek yok\n```\n\n**Neden filtrele?**\n- **Console spam önlenir:** Her GET request log edilmez\n- **Önemli log'lar kaybolmaz:** Hatalar ve yavaş request'ler görünür\n- **Performance overhead azalır:** Log işlemi de zaman alır\n\n**5. Detailed Logging (Hata/Yavaş Request)**\n```typescript\nif (res.statusCode >= 400 || duration > 1000) {\n  logLine += ` [IP: ${req.ip}]`;\n  if (capturedJsonResponse) {\n    logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n  }\n}\n```\n\n**Error veya yavaş request'lerde:**\n- **IP adresi eklenir:** Debugging için (hangi client'tan geldi?)\n- **Response body log edilir:** Hata detayı görünür\n\n**Örnek Log Çıktıları:**\n\n```\n# Normal request (log edilir)\nPOST /api/tasks 201 in 120ms\n\n# Hızlı GET (log edilmez)\nGET /api/tasks 200 in 35ms\n\n# Hata (detaylı log)\nPOST /api/tasks 400 in 80ms [IP: ::1] :: {\"message\": \"Görev başlığı gereklidir\"}\n\n# Yavaş request (detaylı log)\nGET /api/exam-results 200 in 1250ms [IP: ::1]\n\n# Not Modified (log edilmez)\nGET /api/tasks 304 in 15ms\n```\n\n### 1.5 Route Registration\n\n```typescript\nconst server = await registerRoutes(app);\n```\n\n**registerRoutes() Fonksiyonu:**\n```typescript\n// server/rotalar.ts\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // API endpoints register\n  app.get('/api/tasks', async (req, res) => { /* ... */ });\n  app.post('/api/tasks', async (req, res) => { /* ... */ });\n  // ... 50+ endpoint\n  \n  // HTTP server oluştur\n  return createServer(app);\n}\n```\n\n**Neden async?**\n- **Database bağlantısı** await ediliyor (eğer varsa)\n- **Storage initialization** async olabilir\n\n**Return Value:**\n```typescript\nreturn createServer(app);\n```\n- **createServer:** Node.js built-in HTTP server oluşturur\n- **Return:** `http.Server` instance\n- **Neden return?** WebSocket için gerekebilir (gelecekte)\n\n**Server Instance:**\n```typescript\nimport { createServer } from 'http';\n\nconst server = createServer(app);\n// server.listen(port)\n// server.close()\n// server.on('upgrade', handler) → WebSocket\n```\n\n### 1.6 Error Handler Middleware\n\n```typescript\napp.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n  const status = err.status || err.statusCode || 500;\n  const message = err.message || \"Internal Server Error\";\n\n  console.error(\"Server error:\", err);\n  res.status(status).json({ message });\n});\n```\n\n**Detaylı Açıklama:**\n\n**1. Error Handler Signature**\n```typescript\n(err, req, res, next)\n```\n- **4 parametre:** Error handling middleware (Express convention)\n- **err:** Hata objesi\n- **req, res, next:** Normal middleware parametreleri\n\n**Express Error Handler Convention:**\n```typescript\n// Normal middleware\napp.use((req, res, next) => { /* ... */ });\n\n// Error middleware (4 parametre)\napp.use((err, req, res, next) => { /* ... */ });\n```\n\n**2. Status Code Fallback**\n```typescript\nconst status = err.status || err.statusCode || 500;\n```\n\n**Fallback Chain:**\n```typescript\n// 1. err.status → HTTP errors (404, 403)\nconst notFoundError = { status: 404, message: 'Not found' };\n\n// 2. err.statusCode → Custom errors\nconst customError = { statusCode: 400, message: 'Bad request' };\n\n// 3. 500 → Unknown errors (default)\nconst unknownError = new Error('Something went wrong');\n// status = 500\n```\n\n**3. Error Logging**\n```typescript\nconsole.error(\"Server error:\", err);\n```\n\n**console.error vs console.log:**\n- **console.error:** stderr stream (error output)\n- **console.log:** stdout stream (normal output)\n- **Production'da:** stderr ayrı log dosyasına yazılabilir\n\n**Full Error Stack:**\n```\nServer error: Error: User not found\n    at UserService.getUser (/server/services/user.ts:45:11)\n    at async /server/rotalar.ts:123:20\n    at ... (full stack trace)\n```\n\n**4. Client Response**\n```typescript\nres.status(status).json({ message });\n```\n\n**Güvenlik:**\n- **Client'a:** Sadece error message gönderilir\n- **Stack trace:** GÖNDERİLMEZ (güvenlik riski)\n- **Benzetme:** Hastaya \"Ateşiniz var\" denir, \"Hangi bakteriden\" detayı verilmez\n\n**Örnek Hata:**\n```typescript\n// Server'da\nthrow new Error(\"Database connection failed\");\n\n// Client'a giden response\n{\n  \"message\": \"Database connection failed\"\n}\n\n// Console'da görünen\nServer error: Error: Database connection failed\n    at DatabaseService.connect (/server/database.ts:78:11)\n    at ...\n```\n\n### 1.7 Development vs Production Mode\n\n```typescript\nif (app.get(\"env\") === \"development\") {\n  // Development mode\n  const { setupVite } = await import(\"./vite\");\n  await setupVite(app, server);\n} else {\n  // Production mode\n  serveStatic(app);\n}\n```\n\n**Development Mode:**\n- **Vite dev server başlatılır:**\n  - HMR (Hot Module Replacement) aktif\n  - Source maps mevcut (debugging kolay)\n  - Build step yok (direkt TS dosyaları çalışır)\n  - Instant feedback (<50ms HMR)\n- **Port:** 5000 (frontend + backend aynı port)\n\n**Production Mode:**\n- **Static file serving:**\n  - Build edilmiş dosyalar (dist/ klasörü)\n  - Minified ve optimized kod\n  - Source maps yok\n  - Daha hızlı (no dev overhead)\n- **Port:** 5000 (frontend + backend aynı port)\n\n**Vite Dev Server Avantajları:**\n```\nDevelopment:\n  TypeScript → Vite → ES Modules → Browser (instant HMR)\n  \nProduction:\n  TypeScript → Vite Build → Bundled JS → Browser (optimized)\n```\n\n**serveStatic() Fonksiyonu:**\n```typescript\n// server/static.ts\nexport function serveStatic(app: Express) {\n  // dist/ klasöründeki dosyaları serve et\n  app.use(express.static(path.join(__dirname, '../dist')));\n  \n  // SPA fallback (tüm route'lar index.html'e gider)\n  app.get('*', (req, res) => {\n    res.sendFile(path.join(__dirname, '../dist/index.html'));\n  });\n}\n```\n\n### 1.8 Server Listening\n\n```typescript\nconst port = parseInt(process.env.PORT || \"5000\", 10);\nconst host = process.env.HOST || \"0.0.0.0\";\n\nserver.listen(port, host, () => {\n  log(`Dersime dönebilirim !!! Site Link : http://${host}:${port}`);\n});\n```\n\n**Detaylı Açıklama:**\n\n**1. Port Parsing**\n```typescript\nparseInt(process.env.PORT || \"5000\", 10)\n```\n\n**parseInt(string, radix):**\n- **string:** Parse edilecek string\n- **radix:** Sayı tabanı (10 = decimal, 16 = hexadecimal)\n\n**Örnek:**\n```typescript\nparseInt(\"5000\", 10) → 5000\nparseInt(\"1A\", 16) → 26 (hexadecimal)\nparseInt(\"invalid\", 10) → NaN\n```\n\n**Environment Variable Fallback:**\n```typescript\nprocess.env.PORT || \"5000\"\n// .env dosyasında PORT=3000 → \"3000\"\n// .env dosyasında PORT yok → \"5000\"\n```\n\n**2. Host Binding**\n```typescript\nconst host = \"0.0.0.0\";\n```\n\n**Neden `0.0.0.0` ve `localhost` değil?**\n\n| Host | Erişim |\n|------|--------|\n| `localhost` | Sadece local machine (`http://localhost:5000`) |\n| `127.0.0.1` | Sadece local machine (`http://127.0.0.1:5000`) |\n| `0.0.0.0` | Tüm network interfaces |\n\n**0.0.0.0 Erişim Örnekleri:**\n- **Local machine:** `http://localhost:5000` ✅\n- **LAN (aynı ağdaki başka PC):** `http://192.168.1.100:5000` ✅\n- **Electron:** `http://localhost:5000` ✅\n- **Replit proxy:** Proxy üzerinden erişim ✅\n\n**localhost Problemi:**\n```\nElectron App:\n  → http://localhost:5000 ✅ (çalışır)\n\nAynı ağdaki başka PC:\n  → http://192.168.1.100:5000 ❌ (çalışmaz, localhost sadece local)\n```\n\n**3. Success Log**\n```typescript\nlog(`Dersime dönebilirim !!! Site Link : http://${host}:${port}`);\n```\n\n**Log Çıktısı:**\n```\nDersime dönebilirim !!! Site Link : http://0.0.0.0:5000\n```\n\n**Electron Console'unda:**\n- Bu mesaj Electron main process console'unda görünür\n- Kullanıcıya server'ın hazır olduğunu bildirir\n- Motivasyonel mesaj 😊\n\n### 1.9 Otomatik Arşivleme Zamanlayıcısı\n\n```typescript\nfunction scheduleAutoArchive() {\n  const now = new Date();\n  \n  // Türkiye saati (GMT+3)\n  const turkeyTime = new Date(\n    now.toLocaleString('en-US', { timeZone: 'Europe/Istanbul' })\n  );\n  \n  // Bir sonraki Pazar hesapla\n  const nextSunday = new Date(turkeyTime);\n  const currentDay = nextSunday.getDay(); // 0=Pazar, 1=Pazartesi, ..., 6=Cumartesi\n  const daysUntilSunday = (7 - currentDay) % 7;\n  \n  if (daysUntilSunday === 0) {\n    // Bugün Pazar, bir sonraki Pazar'a git\n    nextSunday.setDate(nextSunday.getDate() + 7);\n  } else {\n    nextSunday.setDate(nextSunday.getDate() + daysUntilSunday);\n  }\n  \n  // Saat 23:59:00.000'a ayarla\n  nextSunday.setHours(23, 59, 0, 0);\n  \n  // Timeout hesapla\n  const msUntilNextSunday = nextSunday.getTime() - turkeyTime.getTime();\n  \n  setTimeout(async () => {\n    try {\n      console.log('🗄️  Otomatik arşivleme başlatılıyor...');\n      await storage.autoArchiveOldData();\n      console.log('✅ Otomatik arşivleme tamamlandı');\n      \n      // Bir sonraki hafta için yeniden schedule et\n      scheduleAutoArchive();\n    } catch (error) {\n      console.error('❌ Otomatik arşivleme hatası:', error);\n      // Hata olsa bile bir sonraki hafta dene\n      scheduleAutoArchive();\n    }\n  }, msUntilNextSunday);\n  \n  console.log(`📅 Bir sonraki otomatik arşivleme: ${nextSunday.toLocaleString('tr-TR')}`);\n}\n\n// Server başlatılınca schedule et\nscheduleAutoArchive();\n```\n\n**Detaylı Açıklama:**\n\n**1. Türkiye Saati Hesaplama**\n```typescript\nconst turkeyTime = new Date(\n  now.toLocaleString('en-US', { timeZone: 'Europe/Istanbul' })\n);\n```\n\n**Neden gerekli?**\n- **Server farklı timezone'da olabilir:** UTC, GMT, PST\n- **Kullanıcı Türkiye'de:** Arşivleme Türkiye saatine göre olmalı\n- **Timezone:** `Europe/Istanbul` → GMT+3\n\n**toLocaleString():**\n```typescript\nconst now = new Date(); // Server timezone (örneğin UTC)\n// Fri Oct 30 2025 07:30:00 GMT+0000 (UTC)\n\nconst turkeyTimeStr = now.toLocaleString('en-US', { timeZone: 'Europe/Istanbul' });\n// \"10/30/2025, 10:30:00 AM\" (GMT+3)\n\nconst turkeyTime = new Date(turkeyTimeStr);\n// Fri Oct 30 2025 10:30:00 GMT+0300 (Turkey Time)\n```\n\n**2. Bir Sonraki Pazar Hesaplama**\n```typescript\nconst currentDay = nextSunday.getDay();\n// 0=Pazar, 1=Pazartesi, 2=Salı, 3=Çarşamba, 4=Perşembe, 5=Cuma, 6=Cumartesi\n\nconst daysUntilSunday = (7 - currentDay) % 7;\n```\n\n**Örnek Hesaplamalar:**\n\n| Bugün | currentDay | 7 - currentDay | (7 - currentDay) % 7 | Sonuç |\n|-------|------------|----------------|----------------------|-------|\n| Pazar | 0 | 7 | 0 | 0 gün sonra (ama if içinde 7'ye çevrilir) |\n| Pazartesi | 1 | 6 | 6 | 6 gün sonra |\n| Salı | 2 | 5 | 5 | 5 gün sonra |\n| Çarşamba | 3 | 4 | 4 | 4 gün sonra |\n| Perşembe | 4 | 3 | 3 | 3 gün sonra |\n| Cuma | 5 | 2 | 2 | 2 gün sonra |\n| Cumartesi | 6 | 1 | 1 | 1 gün sonra |\n\n**3. Bugün Pazar Edge Case**\n```typescript\nif (daysUntilSunday === 0) {\n  // Bugün Pazar, bir sonraki Pazar'a git (7 gün sonra)\n  nextSunday.setDate(nextSunday.getDate() + 7);\n} else {\n  nextSunday.setDate(nextSunday.getDate() + daysUntilSunday);\n}\n```\n\n**Edge Case:**\n- **Bugün Pazar saat 10:00** → Arşivleme bugün 23:59'da olmalı mı?\n- **Hayır:** Bir sonraki Pazar 23:59'da olmalı (7 gün sonra)\n- **Neden?** Arşivleme haftalık, her hafta bir kere\n\n**4. Saat Ayarlama**\n```typescript\nnextSunday.setHours(23, 59, 0, 0);\n// Saat: 23\n// Dakika: 59\n// Saniye: 0\n// Milisaniye: 0\n```\n\n**Neden 23:59?**\n- Hafta sonu (Pazar)\n- Gece geç saatte (kullanıcı uyuyor)\n- Performans etkisi minimal\n\n**5. Timeout Hesaplama**\n```typescript\nconst msUntilNextSunday = nextSunday.getTime() - turkeyTime.getTime();\n```\n\n**getTime():**\n- **Return:** Unix timestamp (milliseconds since 1970)\n- **Örnek:**\n  ```typescript\n  now.getTime() → 1730279845123\n  nextSunday.getTime() → 1730884740000\n  ms差 = 1730884740000 - 1730279845123 = 604894877ms = 7 gün\n  ```\n\n**setTimeout():**\n```typescript\nsetTimeout(callback, ms)\n// ms milisaniye sonra callback çağrılır\n```\n\n**6. Recursive Scheduling**\n```typescript\nsetTimeout(async () => {\n  await storage.autoArchiveOldData();\n  scheduleAutoArchive(); // Bir sonraki hafta için yeniden schedule et\n}, msUntilNextSunday);\n```\n\n**Sonsuz Loop:**\n```\nŞimdi: Pazartesi 10:00\n  ↓ Schedule: 6 gün 13 saat 59 dakika sonra\nPazar 23:59: Arşivleme çalışır\n  ↓ scheduleAutoArchive() çağrılır\nYeni schedule: 7 gün sonra\n  ↓\nBir sonraki Pazar 23:59: Arşivleme çalışır\n  ↓ ... sonsuz loop\n```\n\n**7. Error Handling**\n```typescript\ntry {\n  await storage.autoArchiveOldData();\n} catch (error) {\n  console.error('❌ Otomatik arşivleme hatası:', error);\n  scheduleAutoArchive(); // Hata olsa bile devam et\n}\n```\n\n**Hata Senaryosu:**\n- **Database bağlantısı kesildi** → Hata log edilir, uygulama crash olmaz\n- **Disk dolu** → Hata log edilir, bir sonraki hafta denenecek\n- **Logic hatası** → Hata log edilir, düzeltilene kadar skip edilecek\n\n---\n\n## BÖLÜM 2: server/rotalar.ts - API ENDPOINTS\n\n### 2.1 Dosya Yapısı\n\n`server/rotalar.ts` dosyası **1820 satırdan** oluşur ve tüm API endpoint'lerini içerir.\n\n**Endpoint Kategorileri:**\n1. **Görevler (Tasks)** - CRUD operations (Create, Read, Update, Delete)\n2. **Ruh Hali (Moods)** - Mood tracking\n3. **Hedefler (Goals)** - Goal setting and progress\n4. **Soru Günlükleri (Question Logs)** - Study session tracking\n5. **Sınav Sonuçları (Exam Results)** - Exam score tracking\n6. **Çalışma Saatleri (Study Hours)** - Daily study time\n7. **Flashcards** - Spaced repetition system\n8. **Konu İstatistikleri (Topic Stats)** - Wrong topic analysis\n9. **Takvim (Calendar)** - Event management\n10. **Hava Durumu (Weather)** - OpenWeather API integration\n11. **Pomodoro** - Pomodoro timer state\n12. **Alarms** - Alarm management\n\n**Toplam Endpoint Sayısı:** 50+ endpoint\n\n### 2.2 Activity Logger Helper\n\n```typescript\nfunction logActivity(action: string, description?: string) {\n  const timestamp = new Date().toLocaleString('tr-TR', {\n    day: '2-digit',\n    month: 'long',\n    year: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit'\n  });\n  \n  const message = description \n    ? `[ACTIVITY] ${action} | ${description}`\n    : `[ACTIVITY] ${action}`;\n  \n  console.log(message);\n}\n```\n\n**Amaç:**\nHer önemli işlemde kullanıcı aktivitesi log edilir.\n\n**Log Formatı:**\n```\n[ACTIVITY] Görev Eklendi | Matematik Türev Çalışması\n[ACTIVITY] Deneme Sınav Eklendi | TYT Deneme 5\n[ACTIVITY] Görev Durumu Değiştirildi | Tamamlandı\n```\n\n**Neden `[ACTIVITY]` tag'i?**\n1. **Electron main process** bu tag'i yakalar\n2. **Activity logger**'a ekler\n3. **Activities window**'da gösterir\n4. **Kullanıcı:** Son aktivitelerini görebilir\n\n**Örnek Kullanım:**\n```typescript\napp.post(\"/api/tasks\", async (req, res) => {\n  const task = await storage.createTask(validatedData);\n  logActivity('Görev Eklendi', validatedData.title);\n  res.status(201).json(task);\n});\n```\n\n**Activity Log Window (Electron):**\n```\n📝 Görev Eklendi | Matematik Türev Çalışması (30 Eki 2025, 10:30:45)\n📊 Deneme Sınav Eklendi | TYT Deneme 5 (30 Eki 2025, 11:15:23)\n✅ Görev Durumu Değiştirildi | Tamamlandı (30 Eki 2025, 14:20:10)\n```\n\n### 2.3 Görev (Task) Endpoints\n\n#### GET /api/tasks\n\n```typescript\napp.get(\"/api/tasks\", async (req, res) => {\n  try {\n    const tasks = await storage.getTasks();\n    res.json(tasks);\n  } catch (error) {\n    console.error(\"Error fetching tasks:\", error);\n    res.status(500).json({ message: \"Failed to fetch tasks\" });\n  }\n});\n```\n\n**Açıklama:**\n- **Method:** GET\n- **Path:** `/api/tasks`\n- **Amaç:** Tüm görevleri getirir\n- **Filtre:** `deleted=false`, `archived=false` (storage içinde)\n- **Sıralama:** `createdAt DESC` (en yeni önce)\n\n**Response Örneği:**\n```json\n[\n  {\n    \"id\": \"123e4567-e89b-12d3-a456-426614174000\",\n    \"title\": \"Matematik Türev Çalışması\",\n    \"description\": \"Türev kurallarını ve uygulamalarını çalış\",\n    \"priority\": \"high\",\n    \"category\": \"matematik\",\n    \"color\": \"#EF4444\",\n    \"dueDate\": \"2025-11-05\",\n    \"completed\": false,\n    \"archived\": false,\n    \"createdAt\": \"2025-10-30T10:00:00.000Z\"\n  },\n  {\n    \"id\": \"234f5678-f90c-23e4-b567-537725285111\",\n    \"title\": \"Fizik Optik Konusu\",\n    \"description\": \"Işık kırılması ve yansıması\",\n    \"priority\": \"medium\",\n    \"category\": \"fizik\",\n    \"color\": \"#3B82F6\",\n    \"completed\": false,\n    \"archived\": false,\n    \"createdAt\": \"2025-10-29T15:30:00.000Z\"\n  }\n]\n```\n\n**Storage Implementation:**\n```typescript\n// server/depolama.ts\nasync getTasks(): Promise<Task[]> {\n  const allTasks = Array.from(this.tasks.values());\n  return allTasks\n    .filter(t => !t.deleted && !t.archived)\n    .sort((a, b) => \n      new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n    );\n}\n```\n\n#### POST /api/tasks\n\n```typescript\napp.post(\"/api/tasks\", async (req, res) => {\n  try {\n    // Zod validation\n    const validatedData = insertTaskSchema.parse(req.body);\n    \n    // Storage'a kaydet\n    const task = await storage.createTask(validatedData);\n    \n    // Activity log\n    logActivity('Görev Eklendi', validatedData.title);\n    \n    // Success response\n    res.status(201).json(task);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      // Validation error\n      res.status(400).json({ \n        message: \"Görev verisi geçersiz. Lütfen tüm gerekli alanları kontrol edin.\", \n        errors: error.errors \n      });\n    } else {\n      // Server error\n      console.error(\"Error creating task:\", error);\n      res.status(500).json({ \n        message: \"Görev oluşturulurken bir hata oluştu. Lütfen tekrar deneyin.\" \n      });\n    }\n  }\n});\n```\n\n**Validation (Zod):**\n```typescript\nconst validatedData = insertTaskSchema.parse(req.body);\n```\n\n**insertTaskSchema:**\n```typescript\n// shared/sema.ts\nexport const insertTaskSchema = createInsertSchema(tasks).omit({\n  id: true,\n  createdAt: true,\n  completedAt: true,\n});\n```\n\n**Validation Kuralları:**\n- **title:** Required, string\n- **priority:** Required, enum('low' | 'medium' | 'high')\n- **category:** Required, string\n- **description:** Optional, string\n- **dueDate:** Optional, string (ISO format)\n- **color:** Optional, string (hex color)\n\n**Hata Türleri:**\n\n**1. Validation Error (400 Bad Request)**\n```json\n{\n  \"message\": \"Görev verisi geçersiz. Lütfen tüm gerekli alanları kontrol edin.\",\n  \"errors\": [\n    {\n      \"path\": [\"title\"],\n      \"message\": \"Required\"\n    },\n    {\n      \"path\": [\"priority\"],\n      \"message\": \"Invalid enum value. Expected 'low' | 'medium' | 'high', received 'urgent'\"\n    }\n  ]\n}\n```\n\n**2. Server Error (500 Internal Server Error)**\n```json\n{\n  \"message\": \"Görev oluşturulurken bir hata oluştu. Lütfen tekrar deneyin.\"\n}\n```\n\n**Activity Log:**\n```\n[ACTIVITY] Görev Eklendi | Matematik Türev Çalışması\n```\n\n**Storage Implementation:**\n```typescript\n// server/depolama.ts\nasync createTask(data: InsertTask): Promise<Task> {\n  const id = nanoid(); // Unique ID\n  const now = new Date().toISOString();\n  \n  const task: Task = {\n    ...data,\n    id,\n    completed: false,\n    archived: false,\n    deleted: false,\n    createdAt: now,\n    completedAt: null,\n  };\n  \n  this.tasks.set(id, task); // Map'e ekle\n  await this.saveToFile(); // JSON'a kaydet\n  \n  return task;\n}\n```\n\n#### PATCH /api/tasks/:id/toggle\n\n```typescript\napp.patch(\"/api/tasks/:id/toggle\", async (req, res) => {\n  try {\n    const { id } = req.params;\n    const task = await storage.toggleTaskComplete(id);\n\n    if (!task) {\n      return res.status(404).json({ message: \"Task not found\" });\n    }\n\n    logActivity(\n      'Görev Durumu Değiştirildi', \n      task.completed ? 'Tamamlandı' : 'Beklemede'\n    );\n    \n    res.json(task);\n  } catch (error) {\n    console.error(\"Error toggling task:\", error);\n    res.status(500).json({ message: \"Failed to toggle task completion\" });\n  }\n});\n```\n\n**Açıklama:**\n- **Method:** PATCH\n- **Path:** `/api/tasks/:id/toggle`\n- **Amaç:** Görevin `completed` durumunu toggle eder\n- **Toggle:** `false → true` veya `true → false`\n\n**:id (URL Parameter):**\n```\nPATCH /api/tasks/123e4567-e89b-12d3-a456-426614174000/toggle\n                 ↑\n                 req.params.id\n```\n\n**Storage Implementation:**\n```typescript\nasync toggleTaskComplete(id: string): Promise<Task | undefined> {\n  const task = this.tasks.get(id);\n  if (!task) return undefined;\n  \n  // Toggle completed\n  task.completed = !task.completed;\n  \n  // Update completedAt timestamp\n  task.completedAt = task.completed ? new Date().toISOString() : null;\n  \n  this.tasks.set(id, task);\n  await this.saveToFile();\n  \n  return task;\n}\n```\n\n**Response:**\n```json\n{\n  \"id\": \"123...\",\n  \"title\": \"Matematik Çalış\",\n  \"completed\": true,\n  \"completedAt\": \"2025-10-30T14:20:10.000Z\",\n  ...\n}\n```\n\n---\n\n## BÖLÜM 3: STORAGE IMPLEMENTATION (server/depolama.ts)\n\n### 3.1 Dosya Yapısı\n\n**server/depolama.ts** dosyası **1768 satır** ve uygulamanın tüm veri yönetimini içerir.\n\n**IStorage Interface:**\n```typescript\ninterface IStorage {\n  // Tasks\n  getTasks(): Promise<Task[]>;\n  createTask(data: InsertTask): Promise<Task>;\n  updateTask(id: string, data: Partial<InsertTask>): Promise<Task | undefined>;\n  deleteTask(id: string): Promise<boolean>;\n  toggleTaskComplete(id: string): Promise<Task | undefined>;\n  archiveTask(id: string): Promise<Task | undefined>;\n  \n  // Question Logs\n  getQuestionLogs(): Promise<QuestionLog[]>;\n  createQuestionLog(data: InsertQuestionLog): Promise<QuestionLog>;\n  \n  // Exam Results\n  getExamResults(): Promise<ExamResult[]>;\n  createExamResult(data: InsertExamResult): Promise<ExamResult>;\n  \n  // Study Hours\n  getStudyHours(): Promise<StudyHour[]>;\n  createStudyHour(data: InsertStudyHour): Promise<StudyHour>;\n  \n  // Auto Archive\n  autoArchiveOldData(): Promise<void>;\n}\n```\n\n### 3.2 MemStorage Implementation\n\n**MemStorage Nedir?**\n- **Tanım:** In-memory (RAM'de) veri saklama + JSON file backup\n- **Avantaj:** Çok hızlı (RAM'den okuma), offline çalışır\n- **Dezavantaj:** Restart'ta kaybolur (ama JSON'a yazıldığı için korunur)\n\n**Veri Yapısı:**\n```typescript\nclass MemStorage implements IStorage {\n  private tasks: Map<string, Task> = new Map();\n  private questionLogs: Map<string, QuestionLog> = new Map();\n  private examResults: Map<string, ExamResult> = new Map();\n  private studyHours: Map<string, StudyHour> = new Map();\n  private moods: Map<string, Mood> = new Map();\n  private goals: Map<string, Goal> = new Map();\n  \n  private readonly filePath = path.join(__dirname, '../kayitlar.json');\n  \n  constructor() {\n    this.loadFromFile(); // JSON'dan yükle\n  }\n}\n```\n\n**Map Nedir?**\n- **Tanım:** Key-value store (anahtar-değer deposu)\n- **Key:** Unique ID (string)\n- **Value:** Object (Task, QuestionLog vs.)\n- **Avantaj:** O(1) lookup (anında erişim)\n\n**Örnek:**\n```typescript\n// Map'e ekleme\nthis.tasks.set('123abc', {\n  id: '123abc',\n  title: 'Matematik Çalış',\n  completed: false\n});\n\n// Map'ten okuma\nconst task = this.tasks.get('123abc'); // O(1) - çok hızlı\n\n// Map'ten silme\nthis.tasks.delete('123abc');\n\n// Tüm değerleri alma\nconst allTasks = Array.from(this.tasks.values());\n```\n\n### 3.3 File I/O Operations\n\n**JSON Dosyaya Yazma:**\n```typescript\nprivate async saveToFile(): Promise<void> {\n  const data = {\n    tasks: Array.from(this.tasks.values()),\n    questionLogs: Array.from(this.questionLogs.values()),\n    examResults: Array.from(this.examResults.values()),\n    studyHours: Array.from(this.studyHours.values()),\n    moods: Array.from(this.moods.values()),\n    goals: Array.from(this.goals.values())\n  };\n  \n  await fs.promises.writeFile(\n    this.filePath,\n    JSON.stringify(data, null, 2), // Pretty print (2 space indent)\n    'utf-8'\n  );\n}\n```\n\n**JSON Dosyadan Okuma:**\n```typescript\nprivate async loadFromFile(): Promise<void> {\n  try {\n    // Dosya var mı kontrol et\n    if (!fs.existsSync(this.filePath)) {\n      console.log('kayitlar.json bulunamadı, yeni oluşturuluyor...');\n      await this.saveToFile();\n      return;\n    }\n    \n    // Dosyayı oku\n    const fileContent = await fs.promises.readFile(this.filePath, 'utf-8');\n    const data = JSON.parse(fileContent);\n    \n    // Map'lere yükle\n    data.tasks?.forEach((task: Task) => {\n      this.tasks.set(task.id, task);\n    });\n    \n    data.questionLogs?.forEach((log: QuestionLog) => {\n      this.questionLogs.set(log.id, log);\n    });\n    \n    // ... diğer veriler\n    \n    console.log(`✅ ${this.tasks.size} görev, ${this.questionLogs.size} soru kaydı yüklendi`);\n  } catch (error) {\n    console.error('Veri yükleme hatası:', error);\n    // Hata olursa boş Map'lerle devam et\n  }\n}\n```\n\n**fs.promises Nedir?**\n- **fs:** Node.js File System modülü\n- **promises:** Promise-based API (async/await kullanılabilir)\n- **Alternatif:** `fs.readFileSync()` (sync, blocking - kullanma!)\n\n**Örnek kayitlar.json:**\n```json\n{\n  \"tasks\": [\n    {\n      \"id\": \"abc123\",\n      \"title\": \"Matematik Türev Çalışması\",\n      \"priority\": \"high\",\n      \"category\": \"matematik\",\n      \"completed\": false,\n      \"createdAt\": \"2025-10-30T10:00:00.000Z\"\n    }\n  ],\n  \"questionLogs\": [\n    {\n      \"id\": \"def456\",\n      \"exam_type\": \"TYT\",\n      \"subject\": \"Matematik\",\n      \"correct_count\": \"35\",\n      \"wrong_count\": \"4\",\n      \"study_date\": \"2025-10-30\"\n    }\n  ]\n}\n```\n\n### 3.4 Auto Archive Implementation\n\n**Otomatik Arşivleme Nedir?**\n- **Amaç:** Eski kayıtları arşivleme (30+ gün önceki tamamlanmış görevler)\n- **Zamanlama:** Her Pazar 23:59 (server/index.ts'deki scheduler)\n- **Avantaj:** UI performansı (aktif liste kısa kalır)\n\n**Kod:**\n```typescript\nasync autoArchiveOldData(): Promise<void> {\n  const thirtyDaysAgo = new Date();\n  thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n  \n  let archivedCount = 0;\n  \n  // Görevleri arşivle\n  for (const [id, task] of this.tasks) {\n    if (\n      task.completed &&\n      task.completedAt &&\n      new Date(task.completedAt) < thirtyDaysAgo &&\n      !task.archived\n    ) {\n      task.archived = true;\n      this.tasks.set(id, task);\n      archivedCount++;\n    }\n  }\n  \n  // Soru kayıtlarını arşivle\n  for (const [id, log] of this.questionLogs) {\n    const logDate = new Date(log.study_date);\n    if (logDate < thirtyDaysAgo && !log.archived) {\n      log.archived = true;\n      this.questionLogs.set(id, log);\n      archivedCount++;\n    }\n  }\n  \n  // Dosyaya kaydet\n  await this.saveToFile();\n  \n  console.log(`📦 ${archivedCount} kayıt arşivlendi`);\n}\n```\n\n**Soft Delete vs Archive:**\n- **Delete (Silme):** `deleted: true` (geri alınabilir, 90 gün sonra kalıcı silinir)\n- **Archive (Arşivleme):** `archived: true` (aktif listede görünmez, arşiv sekmesinde görünür)\n\n---\n\n## BÖLÜM 4: WEATHER API INTEGRATION\n\n### 4.1 OpenWeather API\n\n**Endpoint:**\n```\nGET https://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_KEY}&units=metric&lang=tr\n```\n\n**Response Örneği:**\n```json\n{\n  \"weather\": [\n    {\n      \"main\": \"Clear\",\n      \"description\": \"açık\",\n      \"icon\": \"01d\"\n    }\n  ],\n  \"main\": {\n    \"temp\": 18.5,\n    \"feels_like\": 17.8,\n    \"humidity\": 65\n  },\n  \"wind\": {\n    \"speed\": 3.5\n  },\n  \"name\": \"Istanbul\"\n}\n```\n\n**API Route (server/rotalar.ts):**\n```typescript\napp.get('/api/weather/:city', async (req, res) => {\n  const { city } = req.params;\n  const apiKey = process.env.OPENWEATHER_API_KEY;\n  \n  if (!apiKey) {\n    return res.status(500).json({ \n      message: 'OpenWeather API key eksik' \n    });\n  }\n  \n  try {\n    const response = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric&lang=tr`\n    );\n    \n    if (!response.ok) {\n      throw new Error('Hava durumu alınamadı');\n    }\n    \n    const data = await response.json();\n    \n    res.json({\n      temp: data.main.temp,\n      description: data.weather[0].description,\n      humidity: data.main.humidity,\n      windSpeed: data.wind.speed,\n      icon: `https://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`\n    });\n  } catch (error) {\n    console.error('Weather API error:', error);\n    res.status(500).json({ \n      message: 'Hava durumu bilgisi alınamadı' \n    });\n  }\n});\n```\n\n**Frontend Kullanımı:**\n```tsx\nfunction WeatherWidget() {\n  const { data: weather, isLoading } = useQuery({\n    queryKey: ['/api/weather/Istanbul'],\n    refetchInterval: 30 * 60 * 1000 // 30 dakikada bir yenile\n  });\n\n  if (isLoading) return <Skeleton />;\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Cloud className=\"w-5 h-5\" />\n          İstanbul Hava Durumu\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-3xl font-bold\">{weather.temp.toFixed(1)}°C</p>\n            <p className=\"text-muted-foreground\">{weather.description}</p>\n          </div>\n          <img src={weather.icon} alt=\"Weather icon\" className=\"w-16 h-16\" />\n        </div>\n        <div className=\"grid grid-cols-2 gap-2 mt-4 text-sm\">\n          <div>\n            <span className=\"text-muted-foreground\">Nem: </span>\n            <span className=\"font-medium\">{weather.humidity}%</span>\n          </div>\n          <div>\n            <span className=\"text-muted-foreground\">Rüzgar: </span>\n            <span className=\"font-medium\">{weather.windSpeed} m/s</span>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n```\n\n---\n\n## BÖLÜM 5: POSTGRESQL VS MEMSTORAGE\n\n### 5.1 Karşılaştırma\n\n| Özellik | MemStorage | PostgreSQL |\n|---------|------------|------------|\n| **Hız** | Çok hızlı (RAM) ✅ | Orta (disk I/O) |\n| **Offline** | Çalışır ✅ | İnternet gerekir ❌ |\n| **Scalability** | Düşük (JSON file limit) | Yüksek ✅ |\n| **Transaction** | Yok ❌ | Var (ACID) ✅ |\n| **Concurrency** | Tek kullanıcı | Multi-user ✅ |\n| **Backup** | Manuel (JSON file) | Otomatik ✅ |\n| **Search** | Linear scan | Index'li search ✅ |\n| **Relations** | Manuel (join yok) | Foreign key ✅ |\n\n### 5.2 Ne Zaman Hangisini Kullanılır?\n\n**MemStorage Kullan:**\n- ✅ Offline desktop app\n- ✅ Single user\n- ✅ <10,000 kayıt\n- ✅ Basit queries (filter, sort)\n- ✅ Hızlı prototype\n\n**PostgreSQL Kullan:**\n- ✅ Web app (multi-user)\n- ✅ >10,000 kayıt\n- ✅ Complex queries (JOIN, GROUP BY)\n- ✅ Transaction gerekli\n- ✅ Production app\n\n**Bu Projede:**\n- **Development:** MemStorage (hızlı, kolay)\n- **Production (opsiyonel):** PostgreSQL (scalable, güvenli)\n\n---\n\n## ÖZET\n\n**Toplam Satır:** 2000+ satır\n\n**Tamamlanan Bölümler:**\n1. ✅ server/index.ts (Entry point, middleware, auto-archive)\n2. ✅ server/rotalar.ts (API endpoints)\n3. ✅ server/depolama.ts (Storage implementation)\n4. ✅ Weather API Integration\n5. ✅ File I/O Operations\n6. ✅ PostgreSQL vs MemStorage\n\n**Her açıklama içerir:**\n- ✅ Terim açıklaması (ne anlama geliyor?)\n- ✅ Kod açıklaması (ne yapıyor?)\n- ✅ Alternatif karşılaştırmaları\n- ✅ Best practices\n- ✅ Gerçek örnekler\n","size_bytes":41329},"client/src/bilesenler/baslik.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport { Sun, Moon, Clock, Home, CheckSquare, BarChart3, Calculator, Timer, BookOpen, Minus, Square, X, ChevronLeft, ChevronRight, RotateCw } from \"lucide-react\";\nimport { useTheme } from \"./tema-saglayici\";\nimport { useState, useEffect } from \"react\";\nimport { EmojiPicker } from \"./emoji-secici\";\nimport { MotivationalQuote } from \"./motivasyon-sozu\";\nimport { Link, useLocation } from \"wouter\";\n\ninterface HeaderProps {\n  hideClockOnHomepage?: boolean;\n  onReportCounterClick?: () => void;\n}\n\nexport function Header({ hideClockOnHomepage = false, onReportCounterClick }: HeaderProps) {\n  const { theme, toggleTheme } = useTheme();\n  const [location] = useLocation();\n  const [showTooltip, setShowTooltip] = useState(false);\n  const [emojiPickerOpen, setEmojiPickerOpen] = useState(false);\n  const [selectedEmoji, setSelectedEmoji] = useState('😊');\n  const [note, setNote] = useState('');\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  \n  // Yerel depolamadan yükle\n  useEffect(() => {\n    const savedEmoji = localStorage.getItem('userEmoji');\n    const savedNote = localStorage.getItem('userNote');\n    if (savedEmoji) setSelectedEmoji(savedEmoji);\n    if (savedNote) setNote(savedNote);\n  }, []);\n  \n  // Aktivite sayısına göre otomatik emoji güncelleme\n  useEffect(() => {\n    const updateMoodEmoji = () => {\n      // Bugünün aktivitelerini say\n      const today = new Date().toISOString().split('T')[0];\n      \n      // Tamamlanan görevleri say\n      const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\n      const completedToday = tasks.filter((t: any) => \n        t.completedAt && t.completedAt.startsWith(today)\n      ).length;\n      \n      // Soru loglarını say\n      const questionLogs = JSON.parse(localStorage.getItem('questionLogs') || '[]');\n      const questionsToday = questionLogs.filter((q: any) => \n        q.study_date && q.study_date.startsWith(today)\n      ).length;\n      \n      // Deneme sonuçlarını say\n      const examResults = JSON.parse(localStorage.getItem('examResults') || '[]');\n      const examsToday = examResults.filter((e: any) => \n        e.exam_date && e.exam_date.startsWith(today)\n      ).length;\n      \n      const totalActivity = completedToday + questionsToday + examsToday;\n      \n      // Aktivite sayısına göre emoji belirle\n      let newEmoji = '😊'; // Varsayılan\n      if (totalActivity >= 15) newEmoji = '🔥'; // Çok yüksek aktivite\n      else if (totalActivity >= 10) newEmoji = '💪'; // Yüksek aktivite\n      else if (totalActivity >= 7) newEmoji = '⭐'; // İyi aktivite\n      else if (totalActivity >= 4) newEmoji = '😊'; // Normal aktivite\n      else if (totalActivity >= 1) newEmoji = '🙂'; // Az aktivite\n      else newEmoji = '😴'; // Hiç aktivite yok\n      \n      setSelectedEmoji(newEmoji);\n      localStorage.setItem('userEmoji', newEmoji);\n    };\n    \n    // İlk yüklemede güncelle\n    updateMoodEmoji();\n    \n    // localStorage değişikliklerini dinle\n    const handleStorageChange = () => updateMoodEmoji();\n    window.addEventListener('localStorageUpdate', handleStorageChange);\n    window.addEventListener('storage', handleStorageChange);\n    \n    // Her 5 dakikada bir güncelle\n    const interval = setInterval(updateMoodEmoji, 5 * 60 * 1000);\n    \n    return () => {\n      window.removeEventListener('localStorageUpdate', handleStorageChange);\n      window.removeEventListener('storage', handleStorageChange);\n      clearInterval(interval);\n    };\n  }, []);\n  \n  // Yerel depolamaya kaydet\n  useEffect(() => {\n    localStorage.setItem('userEmoji', selectedEmoji);\n  }, [selectedEmoji]);\n  \n  useEffect(() => {\n    localStorage.setItem('userNote', note);\n  }, [note]);\n\n  // Her saniye güncelleme zamanı\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, []);\n\n  // Fullscreen durumunu dinle\n  useEffect(() => {\n    if (typeof window !== 'undefined' && window.electronAPI) {\n      window.electronAPI.onFullscreenChange((fullscreen) => {\n        setIsFullscreen(fullscreen);\n      });\n    }\n  }, []);\n\n  // F11 klavye desteği\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.key === 'F11') {\n        e.preventDefault();\n        if (typeof window !== 'undefined' && window.electronAPI) {\n          window.electronAPI.toggleFullscreen();\n        }\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, []);\n\n  // Sakarya Serdivan (Türkiye saat dilimi) için tarih ve saati biçimlendir\n  const formatDateTime = () => {\n    const options: Intl.DateTimeFormatOptions = {\n      timeZone: 'Europe/Istanbul',\n      weekday: 'long',\n      day: 'numeric', \n      month: 'long',\n      year: 'numeric'\n    };\n    \n    const timeOptions: Intl.DateTimeFormatOptions = {\n      timeZone: 'Europe/Istanbul',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n      hour12: false\n    };\n\n    const dateStr = currentTime.toLocaleDateString('tr-TR', options);\n    const timeStr = currentTime.toLocaleTimeString('tr-TR', timeOptions);\n    \n    return { dateStr, timeStr };\n  };\n\n  const isHomepage = location === '/';\n  const isDashboard = location === '/dashboard';\n\n  // Aylık rapor geri sayım hesaplaması\n  const getMonthlyReportCountdown = () => {\n    const now = new Date();\n    const currentYear = now.getFullYear();\n    const currentMonth = now.getMonth();\n    const lastDayOfMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\n    const currentDay = now.getDate();\n    const daysRemaining = lastDayOfMonth - currentDay;\n    const isLastDay = currentDay === lastDayOfMonth;\n    \n    return { daysRemaining, isLastDay };\n  };\n\n  const { daysRemaining, isLastDay } = getMonthlyReportCountdown();\n\n  return (\n    <header className=\"bg-card border-b border-border shadow-sm transition-colors duration-300\">\n      {/* Custom Title Bar - Electron only, fullscreen'de gizle */}\n      {typeof window !== 'undefined' && window.electronAPI && !isFullscreen && (\n        <div \n          className=\"h-9 bg-background/95 border-b border-border/50 flex items-center justify-between px-2\"\n          style={{ WebkitAppRegion: 'drag' } as React.CSSProperties}\n        >\n          {/* Left - Navigation Controls */}\n          <div className=\"flex items-center space-x-0.5\" style={{ WebkitAppRegion: 'no-drag' } as React.CSSProperties}>\n            <button\n              onClick={() => window.electronAPI?.goBack()}\n              className=\"h-7 w-8 flex items-center justify-center hover:bg-accent transition-colors rounded-md group\"\n              title=\"Geri\"\n            >\n              <ChevronLeft className=\"h-4 w-4 text-muted-foreground group-hover:text-foreground transition-colors\" />\n            </button>\n            <button\n              onClick={() => window.electronAPI?.reload()}\n              className=\"h-7 w-8 flex items-center justify-center hover:bg-accent transition-colors rounded-md group\"\n              title=\"Yenile\"\n            >\n              <RotateCw className=\"h-3.5 w-3.5 text-muted-foreground group-hover:text-foreground transition-colors\" />\n            </button>\n            <button\n              onClick={() => window.electronAPI?.goForward()}\n              className=\"h-7 w-8 flex items-center justify-center hover:bg-accent transition-colors rounded-md group\"\n              title=\"İleri\"\n            >\n              <ChevronRight className=\"h-4 w-4 text-muted-foreground group-hover:text-foreground transition-colors\" />\n            </button>\n          </div>\n          \n          {/* Center - App Logo/Name */}\n          <div className=\"flex items-center space-x-2\">\n            <img \n              src=\"/app-icon.png\" \n              alt=\"Berat Cankır Logo\" \n              className=\"h-5 w-5 rounded-sm\"\n            />\n            <span className=\"text-xs font-semibold text-foreground\">Berat Cankır</span>\n          </div>\n          \n          {/* Right - Window Controls */}\n          <div className=\"flex items-center space-x-0.5\" style={{ WebkitAppRegion: 'no-drag' } as React.CSSProperties}>\n            <button\n              onClick={() => window.electronAPI?.minimizeWindow()}\n              className=\"h-7 w-9 flex items-center justify-center hover:bg-accent transition-colors rounded-sm\"\n              title=\"Küçült\"\n            >\n              <Minus className=\"h-3 w-3\" />\n            </button>\n            <button\n              onClick={() => window.electronAPI?.maximizeWindow()}\n              className=\"h-7 w-9 flex items-center justify-center hover:bg-accent transition-colors rounded-sm\"\n              title=\"Ekranı Kapla\"\n            >\n              <Square className=\"h-3 w-3\" />\n            </button>\n            <button\n              onClick={() => window.electronAPI?.closeWindow()}\n              className=\"h-7 w-9 flex items-center justify-center hover:bg-destructive hover:text-destructive-foreground transition-colors rounded-sm\"\n              title=\"Kapat\"\n            >\n              <X className=\"h-3 w-3\" />\n            </button>\n          </div>\n        </div>\n      )}\n      \n      {/* Motivasyon Sözü - Her sayfada en üstte ortada */}\n      <div className=\"bg-gradient-to-r from-primary/5 to-primary/10 border-b border-border/50\">\n        <div className=\"py-3 px-4\">\n          <div className=\"max-w-7xl mx-auto\">\n            <MotivationalQuote />\n          </div>\n        </div>\n      </div>\n      \n      {/* Saat/Tarih/konum Bölümü - Anasayfa dışındaki sayfalarda gösterilir */}\n      {!isHomepage && (\n      <div className=\"bg-gradient-to-r from-primary/5 to-primary/10 border-b border-border/50\">\n        <div className=\"flex justify-between items-center py-2\">\n          {/* Kompakt Saat ve Tarih Gösterimi - Tamamen Solda Hizalanmış */}\n          <div className=\"flex items-start space-x-3 pl-3\">\n              {/* Saat Simgesi - Daha Büyük */}\n              <div className=\"relative\">\n                <div className=\"relative w-8 h-8 bg-black/10 dark:bg-purple-950/20 backdrop-blur-xl border border-purple-500/20 dark:border-purple-400/20 rounded-lg flex items-center justify-center shadow-md\">\n                  <Clock className=\"h-4 w-4 text-purple-600 dark:text-purple-400 drop-shadow-lg\" />\n                </div>\n              </div>\n              \n              {/* Saat ve Tarih Düzeni - Dikey, daha büyük ekran */}\n              <div className=\"flex flex-col space-y-1\">\n                {/* Saat Simgesi - Daha Büyük */}\n                <div className=\"text-base font-bold bg-gradient-to-r from-purple-600 via-violet-700 to-black dark:from-purple-400 dark:via-violet-500 dark:to-gray-300 bg-clip-text text-transparent font-mono\" data-testid=\"text-time-header\">\n                  {formatDateTime().timeStr}\n                </div>\n                \n                {/* DTarih ve Yer - Yatay düzen, daha büyük metin */}\n                <div className=\"flex items-center space-x-2 text-sm\">\n                  <span className=\"bg-gradient-to-r from-purple-800 to-black dark:from-purple-300 dark:to-gray-200 bg-clip-text text-transparent font-medium\" data-testid=\"text-date-header\">\n                    {formatDateTime().dateStr}\n                  </span>\n                  <span className=\"text-muted-foreground/50\">•</span>\n                  <div className=\"flex items-center space-x-1 text-muted-foreground\">\n                    <span className=\"text-sm\">📍</span>\n                    <span className=\"font-medium bg-gradient-to-r from-purple-600 to-violet-700 dark:from-purple-400 dark:to-violet-500 bg-clip-text text-transparent\">\n                      Sakarya, Serdivan\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            {/* Üst Sağ - Tema ve Profil - Tamamen sağa eğilimli */}\n            <div className=\"flex items-center space-x-2 pr-0\">\n              {/* Tema Değiştirme */}\n              <button \n                onClick={toggleTheme}\n                className=\"p-2 rounded-lg bg-secondary hover:bg-accent transition-colors duration-200\"\n                title=\"Tema Değiştir\"\n                data-testid=\"button-theme-toggle\"\n              >\n                {theme === \"light\" ? (\n                  <Sun className=\"h-4 w-4 text-secondary-foreground\" />\n                ) : (\n                  <Moon className=\"h-4 w-4 text-secondary-foreground\" />\n                )}\n              </button>\n\n              {/* Profil Bölümü */}\n              <div className=\"flex items-center space-x-3\">\n                <span className=\"text-sm text-muted-foreground hidden sm:block\">Hoşgeldiniz</span>\n                <span className=\"font-medium text-foreground hidden sm:block\">Berat Cankır</span>\n                <div className=\"relative\">\n                  <button\n                    onClick={() => setEmojiPickerOpen(true)}\n                    onMouseEnter={() => setShowTooltip(true)}\n                    onMouseLeave={() => setShowTooltip(false)}\n                    className=\"relative w-10 h-10 bg-primary rounded-full flex items-center justify-center text-primary-foreground font-semibold hover:bg-primary/90 transition-all duration-200 hover:scale-105\"\n                    data-testid=\"button-emoji-picker\"\n                  >\n                    {/* Profil Fotoğrafı - Her Zaman 'B' Gösterir */}\n                    <span className=\"text-lg font-bold\">B</span>\n                    \n                    {/* Emoji Balonu - Sağ Üst (Her Zaman emoji seçildiğinde gösterilir) */}\n                    {selectedEmoji && (\n                      <div className=\"absolute -top-1 -right-1 w-5 h-5 bg-white dark:bg-gray-800 rounded-full border-2 border-primary flex items-center justify-center shadow-lg\">\n                        <span className=\"text-xs\">{selectedEmoji}</span>\n                      </div>\n                    )}\n                    \n                    {/* Not Balonu - Alt Sağ */}\n                    {note.trim() && (\n                      <div className=\"absolute -bottom-1 -right-2 bg-yellow-400 text-yellow-900 rounded-full w-4 h-4 flex items-center justify-center shadow-lg\">\n                        <span className=\"text-xs font-bold\">!</span>\n                      </div>\n                    )}\n                    \n                    {/* Araç ipucu - Artık aşağıda gösterilcek */}\n                    {showTooltip && (\n                      <div className=\"absolute top-full left-1/2 mt-2 px-2 py-1 bg-card text-card-foreground text-xs rounded shadow-lg border border-border transform -translate-x-1/2 whitespace-nowrap animate-in fade-in-0 zoom-in-95 z-50\">\n                        Emoji seç & Not bırak\n                        {note.trim() && (\n                          <div className=\"mt-1 text-xs italic text-muted-foreground max-w-40 truncate\">\n                            \"{note.trim()}\"\n                          </div>\n                        )}\n                      </div>\n                    )}\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n      </div>\n      )}\n      \n      {/* Anasayfada Sadece Tema ve Profil - Sağ Üstte */}\n      {isHomepage && (\n        <div className=\"bg-gradient-to-r from-primary/5 to-primary/10 border-b border-border/50\">\n          <div className=\"flex justify-end items-center py-2 pr-4\">\n            {/* Üst Sağ - Tema ve Profil */}\n            <div className=\"flex items-center space-x-2\">\n              {/* Tema Değiştirme */}\n              <button \n                onClick={toggleTheme}\n                className=\"p-2 rounded-lg bg-secondary hover:bg-accent transition-colors duration-200\"\n                title=\"Tema Değiştir\"\n                data-testid=\"button-theme-toggle-homepage\"\n              >\n                {theme === \"light\" ? (\n                  <Sun className=\"h-4 w-4 text-secondary-foreground\" />\n                ) : (\n                  <Moon className=\"h-4 w-4 text-secondary-foreground\" />\n                )}\n              </button>\n\n              {/* Profil Bölümü */}\n              <div className=\"flex items-center space-x-3\">\n                <span className=\"text-sm text-muted-foreground hidden sm:block\">Hoşgeldiniz</span>\n                <span className=\"font-medium text-foreground hidden sm:block\">Berat Cankır</span>\n                <div className=\"relative\">\n                  <button\n                    onClick={() => setEmojiPickerOpen(true)}\n                    onMouseEnter={() => setShowTooltip(true)}\n                    onMouseLeave={() => setShowTooltip(false)}\n                    className=\"relative w-10 h-10 bg-primary rounded-full flex items-center justify-center text-primary-foreground font-semibold hover:bg-primary/90 transition-all duration-200 hover:scale-105\"\n                    data-testid=\"button-emoji-picker-homepage\"\n                  >\n                    {/* Profil Fotoğrafı - Her Zaman 'B' Gösterir */}\n                    <span className=\"text-lg font-bold\">B</span>\n                    \n                    {/* Emoji Balonu - Sağ Üst */}\n                    {selectedEmoji && (\n                      <div className=\"absolute -top-1 -right-1 w-5 h-5 bg-white dark:bg-gray-800 rounded-full border-2 border-primary flex items-center justify-center shadow-lg\">\n                        <span className=\"text-xs\">{selectedEmoji}</span>\n                      </div>\n                    )}\n                    \n                    {/* Not Balonu - Alt Sağ */}\n                    {note.trim() && (\n                      <div className=\"absolute -bottom-1 -right-2 bg-yellow-400 text-yellow-900 rounded-full w-4 h-4 flex items-center justify-center shadow-lg\">\n                        <span className=\"text-xs font-bold\">!</span>\n                      </div>\n                    )}\n                    \n                    {/* Araç ipucu */}\n                    {showTooltip && (\n                      <div className=\"absolute top-full left-1/2 mt-2 px-2 py-1 bg-card text-card-foreground text-xs rounded shadow-lg border border-border transform -translate-x-1/2 whitespace-nowrap animate-in fade-in-0 zoom-in-95 z-50\">\n                        Emoji seç & Not bırak\n                        {note.trim() && (\n                          <div className=\"mt-1 text-xs italic text-muted-foreground max-w-40 truncate\">\n                            \"{note.trim()}\"\n                          </div>\n                        )}\n                      </div>\n                    )}\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n      \n      {/* Navigasyon Bölümü */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-center items-center h-16\">\n          <div className=\"flex items-center space-x-6\">\n            <Link href=\"/\">\n              <button \n                className={`px-6 py-3 rounded-xl font-semibold text-lg transition-all duration-200 flex items-center space-x-2 ${\n                  location === '/' \n                    ? 'bg-primary text-primary-foreground shadow-lg' \n                    : 'bg-secondary text-secondary-foreground hover:bg-accent hover:scale-105'\n                }`}\n                data-testid=\"link-homepage\"\n              >\n                <Home className=\"w-5 h-5\" />\n                <span>Anasayfa</span>\n              </button>\n            </Link>\n            <Link href=\"/tasks\">\n              <button \n                className={`px-6 py-3 rounded-xl font-semibold text-lg transition-all duration-200 flex items-center space-x-2 ${\n                  location === '/tasks' \n                    ? 'bg-primary text-primary-foreground shadow-lg' \n                    : 'bg-secondary text-secondary-foreground hover:bg-accent hover:scale-105'\n                }`}\n                data-testid=\"link-todos\"\n              >\n                <CheckSquare className=\"w-5 h-5\" />\n                <span>Yapılacaklar</span>\n              </button>\n            </Link>\n            <Link href=\"/dashboard\">\n              <button \n                className={`px-6 py-3 rounded-xl font-semibold text-lg transition-all duration-200 flex items-center space-x-2 ${\n                  location === '/dashboard' \n                    ? 'bg-primary text-primary-foreground shadow-lg' \n                    : 'bg-secondary text-secondary-foreground hover:bg-accent hover:scale-105'\n                }`}\n                data-testid=\"link-dashboard\"\n              >\n                <BarChart3 className=\"w-5 h-5\" />\n                <span>Raporlarım</span>\n              </button>\n            </Link>\n            <Link href=\"/net-calculator\">\n              <button \n                className={`px-6 py-3 rounded-xl font-semibold text-lg transition-all duration-200 flex items-center space-x-2 ${\n                  location === '/net-calculator' \n                    ? 'bg-primary text-primary-foreground shadow-lg' \n                    : 'bg-secondary text-secondary-foreground hover:bg-accent hover:scale-105'\n                }`}\n              >\n                <Calculator className=\"w-5 h-5\" />\n                <span>Net Hesapla</span>\n              </button>\n            </Link>\n            <Link href=\"/timer\">\n              <button \n                className={`px-6 py-3 rounded-xl font-semibold text-lg transition-all duration-200 flex items-center space-x-2 ${\n                  location === '/timer' \n                    ? 'bg-primary text-primary-foreground shadow-lg' \n                    : 'bg-secondary text-secondary-foreground hover:bg-accent hover:scale-105'\n                }`}\n                data-testid=\"link-timer\"\n              >\n                <Timer className=\"w-5 h-5\" />\n                <span>Sayaç</span>\n              </button>\n            </Link>\n            <Link href=\"/yks-konular\">\n              <button \n                className={`px-6 py-3 rounded-xl font-semibold text-lg transition-all duration-200 flex items-center space-x-2 ${\n                  location === '/yks-konular' \n                    ? 'bg-primary text-primary-foreground shadow-lg' \n                    : 'bg-secondary text-secondary-foreground hover:bg-accent hover:scale-105'\n                }`}\n                data-testid=\"link-yks-konular\"\n              >\n                <BookOpen className=\"w-5 h-5\" />\n                <span>YKS Konular</span>\n              </button>\n            </Link>\n          </div>\n        </div>\n      </div>\n      \n      {/* eöoji seçme modalı */}\n      <EmojiPicker \n        open={emojiPickerOpen} \n        onOpenChange={setEmojiPickerOpen}\n        selectedEmoji={selectedEmoji}\n        onEmojiSelect={setSelectedEmoji}\n        note={note}\n        onNoteChange={setNote}\n      />\n    </header>\n  );\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":23164},"client/src/bilesenler/tema-saglayici.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ntype ThemeProviderContextType = {\n  theme: Theme;\n  toggleTheme: () => void;\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    const savedTheme = localStorage.getItem(\"theme\") as Theme;\n    return savedTheme || \"dark\";\n  });\n\n  useEffect(() => {\n    const root = document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(prev => prev === \"light\" ? \"dark\" : \"light\");\n  };\n\n  return (\n    <ThemeProviderContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeProviderContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":1252},"client/src/data/yks-konular.ts":{"content":"export interface SubjectTopics {\n  name: string;\n  icon?: string;\n  color: string;\n  topics: Array<{\n    topic: string;\n    years: Record<string, number | string>;\n  }>;\n}\n\nexport const tytTopics: SubjectTopics[] = [\n  {\n    name: \"TYT Türkçe\",\n    icon: \"📕\",\n    color: \"from-red-500 to-red-600\",\n    topics: [\n      {\n        topic: \"Ses Bilgisi\",\n        years: { \"2025\": \"−\", \"2024\": \"−\", \"2023\": 1, \"2022\": \"−\", \"2021\": 1, \"2020\": \"−\", \"2019\": 1, \"2018\": 3 }\n      },\n      {\n        topic: \"Dil Bilgisi\",\n        years: { \"2025\": 3, \"2024\": \"−\", \"2023\": 2, \"2022\": 3, \"2021\": 2, \"2020\": 3, \"2019\": 8, \"2018\": 1 }\n      },\n      {\n        topic: \"Noktalama İşaretleri\",\n        years: { \"2025\": 2, \"2024\": 2, \"2023\": 2, \"2022\": 2, \"2021\": 2, \"2020\": 2, \"2019\": 1, \"2018\": 1 }\n      },\n      {\n        topic: \"Yazım Kuralları\",\n        years: { \"2025\": 2, \"2024\": 2, \"2023\": 2, \"2022\": 2, \"2021\": 2, \"2020\": 2, \"2019\": 2, \"2018\": 2 }\n      },\n      {\n        topic: \"Anlatım Bozukluğu\",\n        years: { \"2025\": \"−\", \"2024\": \"−\", \"2023\": \"−\", \"2022\": \"−\", \"2021\": \"−\", \"2020\": \"−\", \"2019\": \"−\", \"2018\": 1 }\n      },\n      {\n        topic: \"Paragraf\",\n        years: { \"2025\": 26, \"2024\": 26, \"2023\": 26, \"2022\": 26, \"2021\": 25, \"2020\": 26, \"2019\": 22, \"2018\": 22 }\n      },\n      {\n        topic: \"Cümlede Anlam\",\n        years: { \"2025\": 3, \"2024\": 5, \"2023\": 4, \"2022\": 3, \"2021\": 3, \"2020\": 6, \"2019\": 3, \"2018\": 7 }\n      },\n      {\n        topic: \"Sözcükte Anlam\",\n        years: { \"2025\": 4, \"2024\": 5, \"2023\": 3, \"2022\": 4, \"2021\": 5, \"2020\": 1, \"2019\": 3, \"2018\": 3 }\n      }\n    ]\n  },\n  {\n    name: \"TYT Matematik\",\n    icon: \"🔢\",\n    color: \"from-blue-500 to-blue-600\",\n    topics: [\n      {\n        topic: \"Temel Kavramlar\",\n        years: { \"2025\": 3, \"2024\": 1, \"2023\": 2, \"2022\": 3, \"2021\": 3, \"2020\": 1, \"2019\": 4, \"2018\": 4 }\n      },\n      {\n        topic: \"Sayı Basamakları\",\n        years: { \"2025\": 1, \"2024\": 2, \"2023\": 1, \"2022\": 1, \"2021\": 2, \"2020\": 1, \"2019\": 2, \"2018\": 1 }\n      },\n      {\n        topic: \"Bölünebilme Kuralları\",\n        years: { \"2025\": 1, \"2024\": 1, \"2023\": 1, \"2022\": 1, \"2021\": 1, \"2020\": 1, \"2019\": 1, \"2018\": \"−\" }\n      },\n      {\n        topic: \"EBOB-EKOK\",\n        years: { \"2025\": \"−\", \"2024\": 1, \"2023\": \"−\", \"2022\": \"−\", \"2021\": \"−\", \"2020\": \"−\", \"2019\": \"−\", \"2018\": \"−\" }\n      },\n      {\n        topic: \"Rasyonel Sayılar\",\n        years: { \"2025\": 1, \"2024\": 2, \"2023\": 2, \"2022\": 2, \"2021\": \"−\", \"2020\": 3, \"2019\": 1, \"2018\": \"−\" }\n      },\n      {\n        topic: \"Basit Eşitsizlikler\",\n        years: { \"2025\": 1, \"2024\": \"−\", \"2023\": 3, \"2022\": 1, \"2021\": 1, \"2020\": 1, \"2019\": \"−\", \"2018\": 1 }\n      },\n      {\n        topic: \"Mutlak Değer\",\n        years: { \"2025\": 1, \"2024\": 2, \"2023\": 1, \"2022\": 1, \"2021\": 1, \"2020\": 1, \"2019\": 1, \"2018\": 1 }\n      },\n      {\n        topic: \"Üslü Sayılar\",\n        years: { \"2025\": 1, \"2024\": 1, \"2023\": 1, \"2022\": 1, \"2021\": 1, \"2020\": 1, \"2019\": 1, \"2018\": \"−\" }\n      },\n      {\n        topic: \"Köklü Sayılar\",\n        years: { \"2025\": 1, \"2024\": 1, \"2023\": 1, \"2022\": 1, \"2021\": 1, \"2020\": 1, \"2019\": 1, \"2018\": 1 }\n      },\n      {\n        topic: \"Çarpanlara Ayırma\",\n        years: { \"2025\": \"−\", \"2024\": \"−\", \"2023\": \"−\", \"2022\": \"−\", \"2021\": \"−\", \"2020\": \"−\", \"2019\": \"−\", \"2018\": 1 }\n      },\n      {\n        topic: \"Oran-Orantı\",\n        years: { \"2025\": 1, \"2024\": \"−\", \"2023\": 1, \"2022\": 1, \"2021\": 1, \"2020\": 1, \"2019\": \"−\", \"2018\": \"−\" }\n      },\n      {\n        topic: \"Denklem Çözme\",\n        years: { \"2025\": 1, \"2024\": \"−\", \"2023\": 1, \"2022\": \"−\", \"2021\": 2, \"2020\": \"−\", \"2019\": 1, \"2018\": 2 }\n      },\n      {\n        topic: \"Problemler\",\n        years: { \"2025\": 12, \"2024\": 11, \"2023\": 10, \"2022\": 13, \"2021\": 11, \"2020\": 13, \"2019\": 12, \"2018\": 11 }\n      },\n      {\n        topic: \"Kümeler\",\n        years: { \"2025\": 1, \"2024\": 1, \"2023\": 1, \"2022\": 1, \"2021\": 1, \"2020\": 1, \"2019\": 1, \"2018\": 2 }\n      },\n      {\n        topic: \"Mantık\",\n        years: { \"2025\": 1, \"2024\": 1, \"2023\": 1, \"2022\": 1, \"2021\": 1, \"2020\": \"−\", \"2019\": \"−\", \"2018\": \"−\" }\n      },\n      {\n        topic: \"Fonksiyonlar\",\n        years: { \"2025\": 1, \"2024\": 1, \"2023\": 1, \"2022\": 1, \"2021\": 1, \"2020\": 1, \"2019\": 2, \"2018\": 1 }\n      },\n      {\n        topic: \"Polinomlar\",\n        years: { \"2025\": \"−\", \"2024\": \"−\", \"2023\": \"−\", \"2022\": \"−\", \"2021\": 1, \"2020\": \"−\", \"2019\": \"−\", \"2018\": 1 }\n      },\n      {\n        topic: \"Permütasyon-Kombinasyon\",\n        years: { \"2025\": 1, \"2024\": 3, \"2023\": 1, \"2022\": \"−\", \"2021\": \"−\", \"2020\": 2, \"2019\": 1, \"2018\": 1 }\n      },\n      {\n        topic: \"Olasılık\",\n        years: { \"2025\": 1, \"2024\": 1, \"2023\": 1, \"2022\": 1, \"2021\": 1, \"2020\": 1, \"2019\": 1, \"2018\": 2 }\n      },\n      {\n        topic: \"Veri – İstatistik\",\n        years: { \"2025\": 1, \"2024\": 1, \"2023\": 1, \"2022\": 1, \"2021\": 1, \"2020\": \"−\", \"2019\": 1, \"2018\": \"−\" }\n      }\n    ]\n  },\n  {\n    name: \"TYT Geometri\",\n    icon: \"📐\",\n    color: \"from-purple-500 to-purple-600\",\n    topics: [\n      {\n        topic: \"Açılar ve Üçgenler\",\n        years: { \"2025\": 4, \"2024\": 5, \"2023\": 5, \"2022\": 4, \"2021\": 4, \"2020\": 2, \"2019\": 2, \"2018\": 3 }\n      },\n      {\n        topic: \"Çokgenler\",\n        years: { \"2025\": 1, \"2024\": 1, \"2023\": 1, \"2022\": 1, \"2021\": 1, \"2020\": 1, \"2019\": 1, \"2018\": 1 }\n      },\n      {\n        topic: \"Yamuk\",\n        years: { \"2025\": 1, \"2024\": 1, \"2023\": 1, \"2022\": \"−\", \"2021\": \"−\", \"2020\": 2, \"2019\": \"−\", \"2018\": 1 }\n      },\n      {\n        topic: \"Eşkenar Dörtgen\",\n        years: { \"2025\": \"−\", \"2024\": \"−\", \"2023\": \"−\", \"2022\": 1, \"2021\": \"−\", \"2020\": \"−\", \"2019\": \"−\", \"2018\": \"−\" }\n      },\n      {\n        topic: \"Deltoid\",\n        years: { \"2025\": \"−\", \"2024\": \"−\", \"2023\": \"−\", \"2022\": \"−\", \"2021\": 1, \"2020\": \"−\", \"2019\": \"−\", \"2018\": \"−\" }\n      },\n      {\n        topic: \"Kare\",\n        years: { \"2025\": 1, \"2024\": \"−\", \"2023\": \"−\", \"2022\": \"−\", \"2021\": \"−\", \"2020\": 1, \"2019\": 1, \"2018\": 1 }\n      },\n      {\n        topic: \"Dikdörtgen\",\n        years: { \"2025\": 1, \"2024\": 1, \"2023\": 1, \"2022\": 1, \"2021\": 1, \"2020\": 2, \"2019\": 1, \"2018\": 1 }\n      },\n      {\n        topic: \"Çember ve Daire\",\n        years: { \"2025\": \"−\", \"2024\": \"−\", \"2023\": \"−\", \"2022\": \"−\", \"2021\": \"−\", \"2020\": \"−\", \"2019\": 2, \"2018\": 1 }\n      },\n      {\n        topic: \"Analitik Geometri\",\n        years: { \"2025\": \"−\", \"2024\": \"−\", \"2023\": \"−\", \"2022\": 1, \"2021\": 1, \"2020\": \"−\", \"2019\": 1, \"2018\": 1 }\n      },\n      {\n        topic: \"Katı Cisimler\",\n        years: { \"2025\": 2, \"2024\": 2, \"2023\": 2, \"2022\": 2, \"2021\": 2, \"2020\": 2, \"2019\": 2, \"2018\": 2 }\n      }\n    ]\n  },\n  {\n    name: \"TYT Fizik\",\n    icon: \"⚛️\",\n    color: \"from-red-500 to-orange-600\",\n    topics: [\n      {\n        topic: \"Fizik Bilimine Giriş\",\n        years: { \"2025\": \"−\", \"2024\": \"−\", \"2023\": \"−\", \"2022\": \"−\", \"2021\": \"−\", \"2020\": 1, \"2019\": \"−\", \"2018\": 1 }\n      },\n      {\n        topic: \"Madde Ve Özellikleri\",\n        years: { \"2025\": 1, \"2024\": 1, \"2023\": 1, \"2022\": 1, \"2021\": 1, \"2020\": \"−\", \"2019\": 1, \"2018\": \"−\" }\n      },\n      {\n        topic: \"Kuvvet ve Hareket\",\n        years: { \"2025\": 1, \"2024\": 1, \"2023\": 1, \"2022\": 1, \"2021\": 1, \"2020\": 1, \"2019\": 1, \"2018\": 1 }\n      },\n      {\n        topic: \"İş, Güç ve Enerji\",\n        years: { \"2025\": \"−\", \"2024\": \"−\", \"2023\": \"−\", \"2022\": \"−\", \"2021\": \"−\", \"2020\": \"−\", \"2019\": 1, \"2018\": \"−\" }\n      },\n      {\n        topic: \"Isı, Sıcaklık ve Genleşme\",\n        years: { \"2025\": 1, \"2024\": 1, \"2023\": 1, \"2022\": 1, \"2021\": 1, \"2020\": \"−\", \"2019\": 1, \"2018\": 1 }\n      },\n      {\n        topic: \"Elektrostatik\",\n        years: { \"2025\": 1, \"2024\": \"−\", \"2023\": \"−\", \"2022\": 1, \"2021\": \"−\", \"2020\": \"−\", \"2019\": \"−\", \"2018\": 1 }\n      },\n      {\n        topic: \"Elektrik ve Manyetizma\",\n        years: { \"2025\": \"−\", \"2024\": 1, \"2023\": 2, \"2022\": \"−\", \"2021\": 1, \"2020\": 1, \"2019\": 1, \"2018\": \"−\" }\n      },\n      {\n        topic: \"Basınç\",\n        years: { \"2025\": \"−\", \"2024\": \"−\", \"2023\": \"−\", \"2022\": 1, \"2021\": 1, \"2020\": 1, \"2019\": \"−\", \"2018\": \"−\" }\n      },\n      {\n        topic: \"Kaldırma Kuvveti\",\n        years: { \"2025\": 1, \"2024\": 1, \"2023\": \"−\", \"2022\": \"−\", \"2021\": \"−\", \"2020\": 1, \"2019\": \"−\", \"2018\": 1 }\n      },\n      {\n        topic: \"Dalgalar\",\n        years: { \"2025\": 1, \"2024\": 1, \"2023\": \"−\", \"2022\": 1, \"2021\": 1, \"2020\": 1, \"2019\": \"−\", \"2018\": \"−\" }\n      },\n      {\n        topic: \"Optik\",\n        years: { \"2025\": 1, \"2024\": 1, \"2023\": 2, \"2022\": 1, \"2021\": 1, \"2020\": 1, \"2019\": 2, \"2018\": 2 }\n      }\n    ]\n  },\n  {\n    name: \"TYT Kimya\",\n    icon: \"🧪\",\n    color: \"from-green-500 to-green-600\",\n    topics: [\n      {\n        topic: \"Kimya Bilimi\",\n        years: { \"2025\": 1, \"2024\": 1, \"2023\": 1, \"2022\": 1, \"2021\": 1, \"2020\": 1, \"2019\": \"−\", \"2018\": 2 }\n      },\n      {\n        topic: \"Atomun Yapısı\",\n        years: { \"2025\": 1, \"2024\": 1, \"2023\": \"−\", \"2022\": \"−\", \"2021\": \"−\", \"2020\": 1, \"2019\": 1, \"2018\": \"−\" }\n      },\n      {\n        topic: \"Periyodik Tablo\",\n        years: { \"2025\": \"−\", \"2024\": \"−\", \"2023\": 1, \"2022\": 1, \"2021\": 1, \"2020\": \"−\", \"2019\": 1, \"2018\": 1 }\n      },\n      {\n        topic: \"Maddenin Halleri\",\n        years: { \"2025\": 1, \"2024\": 1, \"2023\": 1, \"2022\": 1, \"2021\": 1, \"2020\": 1, \"2019\": 1, \"2018\": 1 }\n      },\n      {\n        topic: \"Kimyasal Türler Arası Etkileşimler\",\n        years: { \"2025\": 1, \"2024\": 1, \"2023\": 1, \"2022\": 1, \"2021\": 1, \"2020\": 1, \"2019\": 1, \"2018\": 1 }\n      },\n      {\n        topic: \"Kimyasal Hesaplamalar\",\n        years: { \"2025\": 1, \"2024\": 1, \"2023\": \"−\", \"2022\": \"−\", \"2021\": 1, \"2020\": 1, \"2019\": \"−\", \"2018\": \"−\" }\n      },\n      {\n        topic: \"Kimyanın Temel Kanunları\",\n        years: { \"2025\": \"−\", \"2024\": \"−\", \"2023\": 1, \"2022\": 1, \"2021\": \"−\", \"2020\": \"−\", \"2019\": \"−\", \"2018\": 1 }\n      },\n      {\n        topic: \"Asit, Baz ve Tuz\",\n        years: { \"2025\": 1, \"2024\": 1, \"2023\": 1, \"2022\": 1, \"2021\": 1, \"2020\": 1, \"2019\": 1, \"2018\": \"−\" }\n      },\n      {\n        topic: \"Karışımlar\",\n        years: { \"2025\": 1, \"2024\": 1, \"2023\": 1, \"2022\": 1, \"2021\": 1, \"2020\": 1, \"2019\": 1, \"2018\": \"−\" }\n      },\n      {\n        topic: \"Kimya Her Yerde\",\n        years: { \"2025\": \"−\", \"2024\": \"−\", \"2023\": \"−\", \"2022\": \"−\", \"2021\": \"−\", \"2020\": \"−\", \"2019\": 1, \"2018\": 1 }\n      }\n    ]\n  },\n  {\n    name: \"TYT Biyoloji\",\n    icon: \"🧬\",\n    color: \"from-teal-500 to-teal-600\",\n    topics: [\n      {\n        topic: \"Canlıların Ortak Özellikleri\",\n        years: { \"2025\": 1, \"2024\": \"−\", \"2023\": \"−\", \"2022\": 1, \"2021\": \"−\", \"2020\": \"−\", \"2019\": 1, \"2018\": \"−\" }\n      },\n      {\n        topic: \"Canlıların Temel Bileşenleri\",\n        years: { \"2025\": \"−\", \"2024\": 1, \"2023\": 1, \"2022\": \"−\", \"2021\": 1, \"2020\": 1, \"2019\": 1, \"2018\": 1 }\n      },\n      {\n        topic: \"Hücre ve Organelleri\",\n        years: { \"2025\": \"−\", \"2024\": 1, \"2023\": 1, \"2022\": 1, \"2021\": 1, \"2020\": 1, \"2019\": \"−\", \"2018\": \"−\" }\n      },\n      {\n        topic: \"Hücre Zarından Madde Geçişi\",\n        years: { \"2025\": 1, \"2024\": \"−\", \"2023\": \"−\", \"2022\": \"−\", \"2021\": \"−\", \"2020\": \"−\", \"2019\": \"−\", \"2018\": 1 }\n      },\n      {\n        topic: \"Canlıların Sınıflandırılması\",\n        years: { \"2025\": 1, \"2024\": 1, \"2023\": 1, \"2022\": 1, \"2021\": 1, \"2020\": 1, \"2019\": 1, \"2018\": 1 }\n      },\n      {\n        topic: \"Hücre Bölünmeleri ve Kalıtım\",\n        years: { \"2025\": 1, \"2024\": 1, \"2023\": 1, \"2022\": 1, \"2021\": 1, \"2020\": 1, \"2019\": 1, \"2018\": 1 }\n      },\n      {\n        topic: \"Kalıtım\",\n        years: { \"2025\": 1, \"2024\": 1, \"2023\": 1, \"2022\": 1, \"2021\": 1, \"2020\": 1, \"2019\": 1, \"2018\": \"−\" }\n      },\n      {\n        topic: \"Ekosistem Ekolojisi\",\n        years: { \"2025\": \"−\", \"2024\": 1, \"2023\": 1, \"2022\": \"−\", \"2021\": 1, \"2020\": \"−\", \"2019\": 1, \"2018\": 1 }\n      },\n      {\n        topic: \"Güncel Çevre Sorunları\",\n        years: { \"2025\": 1, \"2024\": \"−\", \"2023\": \"−\", \"2022\": 1, \"2021\": \"−\", \"2020\": 1, \"2019\": \"−\", \"2018\": 1 }\n      }\n    ]\n  }\n];\n\nexport const aytTopics: SubjectTopics[] = [\n  {\n    name: \"AYT Matematik\",\n    icon: \"📊\",\n    color: \"from-indigo-500 to-indigo-600\",\n    topics: [\n      {\n        topic: \"Temel Kavramlar\",\n        years: { \"2024\": 2, \"2023\": 4, \"2022\": 2, \"2021\": 3, \"2020\": 2, \"2019\": 2, \"2018\": 1 }\n      },\n      {\n        topic: \"Sayı Basamakları\",\n        years: { \"2024\": \"−\", \"2023\": 1, \"2022\": \"−\", \"2021\": \"−\", \"2020\": 3, \"2019\": \"−\", \"2018\": \"−\" }\n      },\n      {\n        topic: \"Bölme ve Bölünebilme\",\n        years: { \"2024\": \"−\", \"2023\": 1, \"2022\": \"−\", \"2021\": \"−\", \"2020\": \"−\", \"2019\": 1, \"2018\": \"−\" }\n      },\n      {\n        topic: \"EBOB – EKOK\",\n        years: { \"2024\": \"−\", \"2023\": \"−\", \"2022\": 1, \"2021\": 1, \"2020\": \"−\", \"2019\": \"−\", \"2018\": \"−\" }\n      },\n      {\n        topic: \"Rasyonel Sayılar\",\n        years: { \"2024\": \"−\", \"2023\": \"−\", \"2022\": \"−\", \"2021\": \"−\", \"2020\": \"−\", \"2019\": \"−\", \"2018\": \"−\" }\n      },\n      {\n        topic: \"Basit Eşitsizlikler\",\n        years: { \"2024\": 1, \"2023\": 1, \"2022\": \"−\", \"2021\": 1, \"2020\": 1, \"2019\": 1, \"2018\": \"−\" }\n      },\n      {\n        topic: \"Mutlak Değer\",\n        years: { \"2024\": \"−\", \"2023\": 1, \"2022\": \"−\", \"2021\": \"−\", \"2020\": 1, \"2019\": 1, \"2018\": \"−\" }\n      },\n      {\n        topic: \"Üslü Sayılar\",\n        years: { \"2024\": \"−\", \"2023\": 1, \"2022\": \"−\", \"2021\": 1, \"2020\": 1, \"2019\": \"−\", \"2018\": \"−\" }\n      },\n      {\n        topic: \"Köklü Sayılar\",\n        years: { \"2024\": \"−\", \"2023\": \"−\", \"2022\": \"−\", \"2021\": \"−\", \"2020\": \"−\", \"2019\": \"−\", \"2018\": \"−\" }\n      },\n      {\n        topic: \"Çarpanlara Ayırma\",\n        years: { \"2024\": 1, \"2023\": \"−\", \"2022\": 1, \"2021\": \"−\", \"2020\": \"−\", \"2019\": \"−\", \"2018\": \"−\" }\n      },\n      {\n        topic: \"Oran Orantı\",\n        years: { \"2024\": \"−\", \"2023\": \"−\", \"2022\": \"−\", \"2021\": \"−\", \"2020\": \"−\", \"2019\": \"−\", \"2018\": \"−\" }\n      },\n      {\n        topic: \"Kümeler\",\n        years: { \"2024\": 1, \"2023\": 1, \"2022\": 1, \"2021\": 1, \"2020\": 2, \"2019\": 1, \"2018\": \"−\" }\n      },\n      {\n        topic: \"Mantık\",\n        years: { \"2024\": 1, \"2023\": 1, \"2022\": 1, \"2021\": 1, \"2020\": \"−\", \"2019\": 1, \"2018\": 4 }\n      },\n      {\n        topic: \"Fonksiyonlar\",\n        years: { \"2024\": 2, \"2023\": 2, \"2022\": 2, \"2021\": 2, \"2020\": 2, \"2019\": 2, \"2018\": 2 }\n      },\n      {\n        topic: \"Polinomlar\",\n        years: { \"2024\": \"−\", \"2023\": 2, \"2022\": 1, \"2021\": 1, \"2020\": 2, \"2019\": 2, \"2018\": 1 }\n      },\n      {\n        topic: \"2.Dereceden Denklemler ve Eşitsizlikler\",\n        years: { \"2024\": 1, \"2023\": 2, \"2022\": 2, \"2021\": 1, \"2020\": 1, \"2019\": \"−\", \"2018\": 1 }\n      },\n      {\n        topic: \"Parabol\",\n        years: { \"2024\": 1, \"2023\": 1, \"2022\": \"−\", \"2021\": 1, \"2020\": 1, \"2019\": 1, \"2018\": 1 }\n      },\n      {\n        topic: \"Permütasyon-Kombinasyon-Olasılık – Binom\",\n        years: { \"2024\": 3, \"2023\": 3, \"2022\": 3, \"2021\": 2, \"2020\": 3, \"2019\": 2, \"2018\": 2 }\n      },\n      {\n        topic: \"Trigonometri\",\n        years: { \"2024\": 5, \"2023\": 5, \"2022\": 4, \"2021\": 5, \"2020\": 4, \"2019\": 3, \"2018\": 3 }\n      },\n      {\n        topic: \"Karmaşık Sayılar\",\n        years: { \"2024\": \"−\", \"2023\": \"−\", \"2022\": \"−\", \"2021\": \"−\", \"2020\": 2, \"2019\": 1, \"2018\": 1 }\n      },\n      {\n        topic: \"Logaritma\",\n        years: { \"2024\": 1, \"2023\": 3, \"2022\": 2, \"2021\": 1, \"2020\": 3, \"2019\": 3, \"2018\": 2 }\n      },\n      {\n        topic: \"Diziler\",\n        years: { \"2024\": 1, \"2023\": 2, \"2022\": 1, \"2021\": 1, \"2020\": 2, \"2019\": 1, \"2018\": 1 }\n      },\n      {\n        topic: \"Limit\",\n        years: { \"2024\": 2, \"2023\": \"−\", \"2022\": 2, \"2021\": 2, \"2020\": \"−\", \"2019\": 2, \"2018\": 2 }\n      },\n      {\n        topic: \"Türev\",\n        years: { \"2024\": 3, \"2023\": \"−\", \"2022\": 4, \"2021\": 3, \"2020\": \"−\", \"2019\": 4, \"2018\": 4 }\n      },\n      {\n        topic: \"İntegral\",\n        years: { \"2024\": 5, \"2023\": \"−\", \"2022\": 4, \"2021\": 4, \"2020\": \"−\", \"2019\": 4, \"2018\": 4 }\n      }\n    ]\n  },\n  {\n    name: \"AYT Geometri\",\n    icon: \"📏\",\n    color: \"from-violet-500 to-violet-600\",\n    topics: [\n      {\n        topic: \"Doğruda ve Üçgende Açı\",\n        years: { \"2024\": 1, \"2023\": 3, \"2022\": 1, \"2021\": \"−\", \"2020\": 1, \"2019\": \"−\", \"2018\": 1 }\n      },\n      {\n        topic: \"Özel Üçgenler\",\n        years: { \"2024\": \"−\", \"2023\": \"−\", \"2022\": \"−\", \"2021\": \"−\", \"2020\": 2, \"2019\": \"−\", \"2018\": 2 }\n      },\n      {\n        topic: \"Açıortay – Kenarortay\",\n        years: { \"2024\": \"−\", \"2023\": \"−\", \"2022\": \"−\", \"2021\": \"−\", \"2020\": \"−\", \"2019\": \"−\", \"2018\": \"−\" }\n      },\n      {\n        topic: \"Üçgende Alan Benzerlik\",\n        years: { \"2024\": \"−\", \"2023\": 1, \"2022\": \"−\", \"2021\": \"−\", \"2020\": \"−\", \"2019\": \"−\", \"2018\": \"−\" }\n      },\n      {\n        topic: \"Açı Kenar Bağıntıları\",\n        years: { \"2024\": \"−\", \"2023\": \"−\", \"2022\": \"−\", \"2021\": \"−\", \"2020\": \"−\", \"2019\": 1, \"2018\": \"−\" }\n      },\n      {\n        topic: \"Çokgenler\",\n        years: { \"2024\": \"−\", \"2023\": \"−\", \"2022\": \"−\", \"2021\": \"−\", \"2020\": 1, \"2019\": 2, \"2018\": 1 }\n      },\n      {\n        topic: \"Özel Dörtgenler\",\n        years: { \"2024\": \"−\", \"2023\": 1, \"2022\": \"−\", \"2021\": \"−\", \"2020\": \"−\", \"2019\": \"−\", \"2018\": 1 }\n      },\n      {\n        topic: \"Çember ve Daire\",\n        years: { \"2024\": 2, \"2023\": 2, \"2022\": 2, \"2021\": 3, \"2020\": 2, \"2019\": 2, \"2018\": 1 }\n      },\n      {\n        topic: \"Noktanın Analitiği\",\n        years: { \"2024\": 1, \"2023\": 1, \"2022\": 1, \"2021\": 2, \"2020\": 1, \"2019\": \"−\", \"2018\": \"−\" }\n      },\n      {\n        topic: \"Doğrunun Analitiği\",\n        years: { \"2024\": 3, \"2023\": \"−\", \"2022\": 1, \"2021\": 2, \"2020\": 1, \"2019\": 1, \"2018\": 2 }\n      },\n      {\n        topic: \"Dönüşüm Geometrisi\",\n        years: { \"2024\": \"−\", \"2023\": 1, \"2022\": 1, \"2021\": \"−\", \"2020\": 1, \"2019\": 1, \"2018\": 1 }\n      },\n      {\n        topic: \"Katı Cisimler\",\n        years: { \"2024\": 1, \"2023\": 1, \"2022\": 2, \"2021\": 1, \"2020\": 1, \"2019\": 1, \"2018\": 1 }\n      },\n      {\n        topic: \"Çemberin Analitiği\",\n        years: { \"2024\": 1, \"2023\": \"−\", \"2022\": 1, \"2021\": 1, \"2020\": \"−\", \"2019\": \"−\", \"2018\": 1 }\n      }\n    ]\n  },\n  {\n    name: \"AYT Fizik\",\n    icon: \"⚡\",\n    color: \"from-rose-500 to-rose-600\",\n    topics: [\n      {\n        topic: \"Vektörler\",\n        years: { \"2024\": \"−\", \"2023\": 1, \"2022\": 1, \"2021\": \"−\", \"2020\": \"−\", \"2019\": \"−\", \"2018\": \"−\" }\n      },\n      {\n        topic: \"Hareket\",\n        years: { \"2024\": 1, \"2023\": 1, \"2022\": \"−\", \"2021\": \"−\", \"2020\": 1, \"2019\": 1, \"2018\": \"−\" }\n      },\n      {\n        topic: \"Newton'un Hareket Yasaları\",\n        years: { \"2024\": 1, \"2023\": 1, \"2022\": 1, \"2021\": \"−\", \"2020\": 1, \"2019\": \"−\", \"2018\": 1 }\n      },\n      {\n        topic: \"Atışlar\",\n        years: { \"2024\": 1, \"2023\": \"−\", \"2022\": \"−\", \"2021\": 1, \"2020\": 1, \"2019\": 1, \"2018\": 1 }\n      },\n      {\n        topic: \"İş, Güç ve Enerji\",\n        years: { \"2024\": 1, \"2023\": 1, \"2022\": \"−\", \"2021\": 1, \"2020\": 1, \"2019\": \"−\", \"2018\": \"−\" }\n      },\n      {\n        topic: \"İtme ve Momentum\",\n        years: { \"2024\": 1, \"2023\": 1, \"2022\": 1, \"2021\": \"−\", \"2020\": 1, \"2019\": 1, \"2018\": 1 }\n      },\n      {\n        topic: \"Kuvvet, Tork ve Denge\",\n        years: { \"2024\": \"−\", \"2023\": \"−\", \"2022\": \"−\", \"2021\": 1, \"2020\": 1, \"2019\": 1, \"2018\": 1 }\n      },\n      {\n        topic: \"Kütle Merkezi\",\n        years: { \"2024\": \"−\", \"2023\": \"−\", \"2022\": \"−\", \"2021\": \"−\", \"2020\": \"−\", \"2019\": \"−\", \"2018\": \"−\" }\n      },\n      {\n        topic: \"Basit Makineler\",\n        years: { \"2024\": \"−\", \"2023\": \"−\", \"2022\": 1, \"2021\": \"−\", \"2020\": \"−\", \"2019\": \"−\", \"2018\": \"−\" }\n      },\n      {\n        topic: \"Elektrik Alan ve Potansiyel\",\n        years: { \"2024\": 1, \"2023\": 1, \"2022\": \"−\", \"2021\": 2, \"2020\": 1, \"2019\": 1, \"2018\": 1 }\n      },\n      {\n        topic: \"Paralel Levhalar ve Sığa\",\n        years: { \"2024\": \"−\", \"2023\": \"−\", \"2022\": \"−\", \"2021\": \"−\", \"2020\": \"−\", \"2019\": \"−\", \"2018\": \"−\" }\n      },\n      {\n        topic: \"Manyetik Alan ve Manyetik Kuvvet\",\n        years: { \"2024\": 1, \"2023\": 1, \"2022\": 1, \"2021\": 1, \"2020\": \"−\", \"2019\": \"−\", \"2018\": \"−\" }\n      },\n      {\n        topic: \"İndüksiyon, Alternatif Akım ve Transformatörler\",\n        years: { \"2024\": 2, \"2023\": 2, \"2022\": 1, \"2021\": 1, \"2020\": 2, \"2019\": 2, \"2018\": 2 }\n      },\n      {\n        topic: \"Düzgün Çembersel Hareket\",\n        years: { \"2024\": \"−\", \"2023\": 1, \"2022\": 1, \"2021\": 1, \"2020\": 2, \"2019\": 1, \"2018\": 1 }\n      },\n      {\n        topic: \"Dönme, Yuvarlanma ve Açısal Momentum\",\n        years: { \"2024\": \"−\", \"2023\": 1, \"2022\": 1, \"2021\": \"−\", \"2020\": 1, \"2019\": 1, \"2018\": \"−\" }\n      },\n      {\n        topic: \"Kütle Çekimi ve Kepler Yasaları\",\n        years: { \"2024\": \"−\", \"2023\": 1, \"2022\": \"−\", \"2021\": 1, \"2020\": \"−\", \"2019\": \"−\", \"2018\": 1 }\n      },\n      {\n        topic: \"Basit Harmonik Hareket\",\n        years: { \"2024\": 1, \"2023\": 1, \"2022\": 1, \"2021\": 1, \"2020\": 1, \"2019\": 1, \"2018\": 1 }\n      },\n      {\n        topic: \"Dalga Mekaniği\",\n        years: { \"2024\": 1, \"2023\": 1, \"2022\": 1, \"2021\": 1, \"2020\": 1, \"2019\": 1, \"2018\": 1 }\n      },\n      {\n        topic: \"Atom Fiziğine Giriş ve Radyoaktivite\",\n        years: { \"2024\": 1, \"2023\": \"−\", \"2022\": 1, \"2021\": 1, \"2020\": \"−\", \"2019\": 1, \"2018\": 1 }\n      },\n      {\n        topic: \"Modern Fizik\",\n        years: { \"2024\": 1, \"2023\": \"−\", \"2022\": 2, \"2021\": 1, \"2020\": \"−\", \"2019\": 1, \"2018\": 1 }\n      },\n      {\n        topic: \"Modern Fiziğin Teknolojideki Uygulamaları\",\n        years: { \"2024\": 1, \"2023\": \"−\", \"2022\": 1, \"2021\": 1, \"2020\": \"−\", \"2019\": 1, \"2018\": 1 }\n      }\n    ]\n  },\n  {\n    name: \"AYT Kimya\",\n    icon: \"🧫\",\n    color: \"from-amber-500 to-amber-600\",\n    topics: [\n      {\n        topic: \"Kimya Bilimi\",\n        years: { \"2024\": \"−\", \"2023\": \"−\", \"2022\": \"−\", \"2021\": \"−\", \"2020\": \"−\", \"2019\": \"−\", \"2018\": \"−\" }\n      },\n      {\n        topic: \"Atom ve Yapısı\",\n        years: { \"2024\": \"−\", \"2023\": \"−\", \"2022\": \"−\", \"2021\": \"−\", \"2020\": \"−\", \"2019\": 1, \"2018\": \"−\" }\n      },\n      {\n        topic: \"Periyodik Sistem\",\n        years: { \"2024\": \"−\", \"2023\": \"−\", \"2022\": \"−\", \"2021\": 1, \"2020\": \"−\", \"2019\": \"−\", \"2018\": 1 }\n      },\n      {\n        topic: \"Kimyasal Türler Arası Etkileşim\",\n        years: { \"2024\": \"−\", \"2023\": \"−\", \"2022\": \"−\", \"2021\": \"−\", \"2020\": \"−\", \"2019\": \"−\", \"2018\": \"−\" }\n      },\n      {\n        topic: \"Kimyasal Hesaplamalar\",\n        years: { \"2024\": \"−\", \"2023\": \"−\", \"2022\": \"−\", \"2021\": \"−\", \"2020\": \"−\", \"2019\": 1, \"2018\": 1 }\n      },\n      {\n        topic: \"Modern Atom Teorisi\",\n        years: { \"2024\": 1, \"2023\": 1, \"2022\": 1, \"2021\": \"−\", \"2020\": 2, \"2019\": \"−\", \"2018\": 1 }\n      },\n      {\n        topic: \"Gazlar\",\n        years: { \"2024\": 1, \"2023\": 2, \"2022\": 1, \"2021\": 1, \"2020\": 1, \"2019\": 1, \"2018\": 1 }\n      },\n      {\n        topic: \"Sıvı Çözeltiler\",\n        years: { \"2024\": 2, \"2023\": 2, \"2022\": 2, \"2021\": 2, \"2020\": 2, \"2019\": 1, \"2018\": 1 }\n      },\n      {\n        topic: \"Kimyasal Tepkimelerde Enerji\",\n        years: { \"2024\": 1, \"2023\": 1, \"2022\": 1, \"2021\": 1, \"2020\": 1, \"2019\": 1, \"2018\": 1 }\n      },\n      {\n        topic: \"Kimyasal Tepkimelerde Hız\",\n        years: { \"2024\": 1, \"2023\": 1, \"2022\": 1, \"2021\": 1, \"2020\": 1, \"2019\": 1, \"2018\": 1 }\n      },\n      {\n        topic: \"Kimyasal Tepkimelerde Denge\",\n        years: { \"2024\": 1, \"2023\": 2, \"2022\": 1, \"2021\": 1, \"2020\": 1, \"2019\": \"−\", \"2018\": \"−\" }\n      },\n      {\n        topic: \"Asit-Baz Dengesi\",\n        years: { \"2024\": 1, \"2023\": \"−\", \"2022\": \"−\", \"2021\": 1, \"2020\": 1, \"2019\": 2, \"2018\": 1 }\n      },\n      {\n        topic: \"Çözünürlük Dengesi\",\n        years: { \"2024\": \"−\", \"2023\": \"−\", \"2022\": 1, \"2021\": \"−\", \"2020\": \"−\", \"2019\": \"−\", \"2018\": \"−\" }\n      },\n      {\n        topic: \"Kimya ve Elektrik\",\n        years: { \"2024\": 2, \"2023\": 3, \"2022\": 2, \"2021\": 2, \"2020\": 3, \"2019\": 2, \"2018\": 2 }\n      },\n      {\n        topic: \"Organik Kimya\",\n        years: { \"2024\": 3, \"2023\": 1, \"2022\": 3, \"2021\": 3, \"2020\": 1, \"2019\": 3, \"2018\": 4 }\n      }\n    ]\n  },\n  {\n    name: \"AYT Biyoloji\",\n    icon: \"🔬\",\n    color: \"from-emerald-500 to-emerald-600\",\n    topics: [\n      {\n        topic: \"Sinir Sistemi\",\n        years: { \"2024\": 1, \"2023\": 1, \"2022\": \"−\", \"2021\": \"−\", \"2020\": \"−\", \"2019\": \"−\", \"2018\": 1 }\n      },\n      {\n        topic: \"Endokrin Sistem\",\n        years: { \"2024\": 1, \"2023\": 2, \"2022\": \"−\", \"2021\": 1, \"2020\": 1, \"2019\": 1, \"2018\": \"−\" }\n      },\n      {\n        topic: \"Duyu Organları\",\n        years: { \"2024\": \"−\", \"2023\": \"−\", \"2022\": 1, \"2021\": \"−\", \"2020\": 1, \"2019\": \"−\", \"2018\": \"−\" }\n      },\n      {\n        topic: \"Destek ve Hareket Sistemi\",\n        years: { \"2024\": \"−\", \"2023\": \"−\", \"2022\": 1, \"2021\": 1, \"2020\": \"−\", \"2019\": \"−\", \"2018\": 1 }\n      },\n      {\n        topic: \"Sindirim Sistemi\",\n        years: { \"2024\": 1, \"2023\": 1, \"2022\": \"−\", \"2021\": \"−\", \"2020\": 1, \"2019\": 1, \"2018\": \"−\" }\n      },\n      {\n        topic: \"Dolaşım Sistemi\",\n        years: { \"2024\": 1, \"2023\": 1, \"2022\": 1, \"2021\": 1, \"2020\": 1, \"2019\": 1, \"2018\": 1 }\n      },\n      {\n        topic: \"Solunum Sistemi\",\n        years: { \"2024\": 1, \"2023\": 1, \"2022\": 1, \"2021\": 1, \"2020\": 1, \"2019\": 1, \"2018\": \"−\" }\n      },\n      {\n        topic: \"Üriner Sistem\",\n        years: { \"2024\": \"−\", \"2023\": 1, \"2022\": \"−\", \"2021\": \"−\", \"2020\": 1, \"2019\": 1, \"2018\": 1 }\n      },\n      {\n        topic: \"Üreme Sistemi ve Embriyonik Gelişim\",\n        years: { \"2024\": \"−\", \"2023\": \"−\", \"2022\": 1, \"2021\": \"−\", \"2020\": \"−\", \"2019\": \"−\", \"2018\": \"−\" }\n      },\n      {\n        topic: \"Komünite ve Popülasyon Ekolojisi\",\n        years: { \"2024\": 2, \"2023\": 2, \"2022\": 2, \"2021\": 2, \"2020\": 2, \"2019\": \"−\", \"2018\": 2 }\n      },\n      {\n        topic: \"Genden Proteine\",\n        years: { \"2024\": 2, \"2023\": 1, \"2022\": 2, \"2021\": 2, \"2020\": 3, \"2019\": 2, \"2018\": 3 }\n      },\n      {\n        topic: \"Canlılık ve Enerji\",\n        years: { \"2024\": 1, \"2023\": 1, \"2022\": 1, \"2021\": \"−\", \"2020\": \"−\", \"2019\": \"−\", \"2018\": \"−\" }\n      },\n      {\n        topic: \"Fotosentez ve Kemosentez\",\n        years: { \"2024\": 1, \"2023\": \"−\", \"2022\": 1, \"2021\": 1, \"2020\": 1, \"2019\": 1, \"2018\": 1 }\n      },\n      {\n        topic: \"Hücresel Solunum\",\n        years: { \"2024\": \"−\", \"2023\": 1, \"2022\": \"−\", \"2021\": 1, \"2020\": 1, \"2019\": \"−\", \"2018\": \"−\" }\n      },\n      {\n        topic: \"Bitki Biyolojisi\",\n        years: { \"2024\": 2, \"2023\": \"−\", \"2022\": 2, \"2021\": 2, \"2020\": \"−\", \"2019\": 3, \"2018\": 2 }\n      },\n      {\n        topic: \"Canlılar ve Çevre\",\n        years: { \"2024\": \"−\", \"2023\": 1, \"2022\": \"−\", \"2021\": 1, \"2020\": \"−\", \"2019\": 1, \"2018\": 1 }\n      }\n    ]\n  }\n];\n","size_bytes":27529},"client/src/kutuphane/sorguIstemcisi.ts":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const sorguIstemcisi = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n      // Yinelenen istekleri önleyin\n      refetchOnMount: false,\n      refetchOnReconnect: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n\n// Belirli veri türleri için optimizasyonlar\nexport const getQueryOptions = (key: string) => {\n  const optimizations: Record<string, any> = {\n    // Hava durumu verileri - 2 dakika önbellek (daha güncel veriler)\n    '/api/weather': {\n      staleTime: 2 * 60 * 1000, // 2 dakika\n      cacheTime: 5 * 60 * 1000, // 5 dakika\n    },\n    // Takvim verileri - 1 dakika önbellek\n    '/api/calendar': {\n      staleTime: 1 * 60 * 1000, // 1 dakika\n      cacheTime: 5 * 60 * 1000, // 5 dakika\n    },\n    // Flashcards - 30 saniye önbellek\n    '/api/flashcards': {\n      staleTime: 30 * 1000, // 30 saniye\n      cacheTime: 2 * 60 * 1000, // 2 dakika\n    },\n    // Analytics verileri - daha agresif önbellekleme\n    '/api/question-logs': {\n      staleTime: 2 * 60 * 1000, // 2 dakika\n      cacheTime: 5 * 60 * 1000, // 5 dakika\n    },\n    '/api/exam-results': {\n      staleTime: 2 * 60 * 1000, // 2 dakika\n      cacheTime: 5 * 60 * 1000, // 5 dakika   \n    },\n  };\n\n  // Eşleşen optimizasyonu bul\n  const matchedKey = Object.keys(optimizations).find(pattern => key.startsWith(pattern));\n  return matchedKey ? optimizations[matchedKey] : {};\n};\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":2732},"client/src/bilesenler/arayuz/progress.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\n\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/kutuphane/yardimcilar\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":907},"client/src/bilesenler/gelismis-grafikler.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport { useQuery } from \"@tanstack/react-query\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Radar, ReferenceLine } from \"recharts\";\nimport { TrendingUp, Target, Brain, AlertTriangle, BarChart3, Book, Calculator, Atom, FlaskConical, Dna, User, Calendar, TrendingDown, Check, CheckCircle, ChevronDown, Filter, X, Trash2 } from \"lucide-react\";\nimport { ExamResult, QuestionLog, SUBJECT_LIMITS } from \"@shared/sema\";\nimport { useMemo, useState, memo, useCallback, useEffect } from \"react\";\nimport { Button } from \"@/bilesenler/arayuz/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/bilesenler/arayuz/card\";\nimport { Checkbox } from \"@/bilesenler/arayuz/checkbox\";\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/bilesenler/arayuz/collapsible\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n} from \"@/bilesenler/arayuz/dialog\";\n\ninterface MissingTopic {\n  topic: string;\n  subject: string;\n  source: 'exam' | 'question';\n  exam_scope?: 'full' | 'branch';\n  exam_type?: 'TYT' | 'AYT';\n  frequency: number;\n  lastSeen: string;\n  createdAt?: string;\n  difficulty?: string;\n  category?: string;\n}\n\ninterface ExamNetData {\n  date: string;\n  examName: string;\n  tytNet: number;\n  aytNet: number;\n  tytTarget: number;\n  aytTarget: number;\n}\n\ninterface SubjectAnalysisData {\n  subject: string;\n  correct: number;\n  wrong: number;\n  totalQuestions: number;\n  netScore: number;\n  color: string;\n}\n\nfunction AdvancedChartsComponent() {\n  const [analysisMode, setAnalysisMode] = useState<'general' | 'branch'>('general');\n  const [includeArchived, setIncludeArchived] = useState<boolean>(false);\n  const [selectedDate, setSelectedDate] = useState<string | null>(null);\n  const [useDateFilter, setUseDateFilter] = useState<boolean>(false);\n  const [selectedDateTopics, setSelectedDateTopics] = useState<string | null>(null);\n  const [useDateFilterTopics, setUseDateFilterTopics] = useState<boolean>(false);\n  const [selectedDateErrors, setSelectedDateErrors] = useState<string | null>(null);\n  const [useDateFilterErrors, setUseDateFilterErrors] = useState<boolean>(false);\n  const [selectedSubjectTopics, setSelectedSubjectTopics] = useState<string>('all');\n  const [selectedTagTopics, setSelectedTagTopics] = useState<string>('all');\n  const [selectedSubjectErrors, setSelectedSubjectErrors] = useState<string>('all');\n  const [selectedTagErrors, setSelectedTagErrors] = useState<string>('all');\n  const [completedTopics, setCompletedTopics] = useState<Set<string>>(new Set());\n  const [celebratingTopics, setCelebratingTopics] = useState<Set<string>>(new Set());\n  const [completedExamErrors, setCompletedExamErrors] = useState<Map<string, string>>(new Map());\n  const [completedQuestionErrors, setCompletedQuestionErrors] = useState<Map<string, string>>(new Map());\n  const [celebratingErrorTopics, setCelebratingErrorTopics] = useState<Set<string>>(new Set());\n  const [removedTopics, setRemovedTopics] = useState<Set<string>>(new Set());\n  const [removedErrorTopics, setRemovedErrorTopics] = useState<Set<string>>(new Set());\n  const [tytTargetNet, setTytTargetNet] = useState<number>(90);\n  const [aytTargetNet, setAytTargetNet] = useState<number>(50);\n  const [isEditingTytTarget, setIsEditingTytTarget] = useState(false);\n  const [isEditingAytTarget, setIsEditingAytTarget] = useState(false);\n  const [tytSummaryExpanded, setTytSummaryExpanded] = useState(false);\n  const [aytSummaryExpanded, setAytSummaryExpanded] = useState(false);\n  const [tytBranchSummaryExpanded, setTytBranchSummaryExpanded] = useState(false);\n  const [aytBranchSummaryExpanded, setAytBranchSummaryExpanded] = useState(false);\n  \n  // Branş hedef netleri\n  const [tytBranchTargetNet, setTytBranchTargetNet] = useState<number>(30);\n  const [aytBranchTargetNet, setAytBranchTargetNet] = useState<number>(20);\n  const [isEditingTytBranchTarget, setIsEditingTytBranchTarget] = useState(false);\n  const [isEditingAytBranchTarget, setIsEditingAytBranchTarget] = useState(false);\n  const { toast } = useToast();\n  \n  // Filtre Modalları için state'ler\n  const [showTopicsFilterModal, setShowTopicsFilterModal] = useState(false);\n  const [showErrorsFilterModal, setShowErrorsFilterModal] = useState(false);\n  const [showCompletedTopicsModal, setShowCompletedTopicsModal] = useState(false);\n  const [completedTopicsRefreshKey, setCompletedTopicsRefreshKey] = useState(0);\n  const [completedTopicsFilter, setCompletedTopicsFilter] = useState<'all' | 'general' | 'branch' | 'question'>('all');\n  const [showCompletedErrorsModal, setShowCompletedErrorsModal] = useState(false);\n  const [completedErrorsRefreshKey, setCompletedErrorsRefreshKey] = useState(0);\n  const [completedErrorsFilter, setCompletedErrorsFilter] = useState<'all' | 'general' | 'branch' | 'question'>('all');\n  \n  // Sıralama state'leri\n  const [topicsSortBy, setTopicsSortBy] = useState<string>('all');\n  const [errorsSortBy, setErrorsSortBy] = useState<string>('all');\n  \n  // Eksik Konular Filtre Ayarları\n  const [topicsFilterEnabled, setTopicsFilterEnabled] = useState({\n    tag: false,\n    subject: false,\n    date: false,\n    wrongQuestions: false\n  });\n  const [topicsFilterValues, setTopicsFilterValues] = useState({\n    tags: [] as string[],\n    subjects: [] as string[],\n    dateFrom: new Date().toISOString().split('T')[0],\n    dateTo: new Date().toISOString().split('T')[0],\n    wrongQuestions: false\n  });\n  \n  // Hata Sıklığı Filtre Ayarları\n  const [errorsFilterEnabled, setErrorsFilterEnabled] = useState({\n    tag: false,\n    subject: false,\n    date: false,\n    wrongQuestions: false\n  });\n  const [errorsFilterValues, setErrorsFilterValues] = useState({\n    tags: [] as string[],\n    subjects: [] as string[],\n    dateFrom: new Date().toISOString().split('T')[0],\n    dateTo: new Date().toISOString().split('T')[0],\n    wrongQuestions: false\n  });\n\n  // localStorage'dan state'leri yükle\n  useEffect(() => {\n    try {\n      const savedRemovedTopics = localStorage.getItem('removedTopics');\n      const savedRemovedErrorTopics = localStorage.getItem('removedErrorTopics');\n      const savedCompletedTopics = localStorage.getItem('completedTopics');\n      const savedCompletedExamErrors = localStorage.getItem('completedExamErrors');\n      const savedCompletedQuestionErrors = localStorage.getItem('completedQuestionErrors');\n      const savedTytTarget = localStorage.getItem('tytTargetNet');\n      const savedAytTarget = localStorage.getItem('aytTargetNet');\n      const savedTytBranchTarget = localStorage.getItem('tytBranchTargetNet');\n      const savedAytBranchTarget = localStorage.getItem('aytBranchTargetNet');\n      \n      if (savedRemovedTopics) {\n        setRemovedTopics(new Set(JSON.parse(savedRemovedTopics)));\n      }\n      if (savedRemovedErrorTopics) {\n        setRemovedErrorTopics(new Set(JSON.parse(savedRemovedErrorTopics)));\n      }\n      if (savedCompletedTopics) {\n        setCompletedTopics(new Set(JSON.parse(savedCompletedTopics)));\n      }\n      if (savedCompletedExamErrors) {\n        const parsed = JSON.parse(savedCompletedExamErrors);\n        // Eski format: Array<string>, Yeni format: Array<{key: string, completedAt: string}>\n        if (Array.isArray(parsed) && parsed.length > 0) {\n          if (typeof parsed[0] === 'string') {\n            // Eski format - string array\n            const map = new Map<string, string>();\n            parsed.forEach(key => map.set(key, new Date().toISOString()));\n            setCompletedExamErrors(map);\n          } else {\n            // Yeni format - object array\n            const map = new Map<string, string>();\n            parsed.forEach((item: any) => map.set(item.key, item.completedAt));\n            setCompletedExamErrors(map);\n          }\n        }\n      }\n      if (savedCompletedQuestionErrors) {\n        const parsed = JSON.parse(savedCompletedQuestionErrors);\n        // Eski format: Array<string>, Yeni format: Array<{key: string, completedAt: string}>\n        if (Array.isArray(parsed) && parsed.length > 0) {\n          if (typeof parsed[0] === 'string') {\n            // Eski format - string array\n            const map = new Map<string, string>();\n            parsed.forEach(key => map.set(key, new Date().toISOString()));\n            setCompletedQuestionErrors(map);\n          } else {\n            // Yeni format - object array\n            const map = new Map<string, string>();\n            parsed.forEach((item: any) => map.set(item.key, item.completedAt));\n            setCompletedQuestionErrors(map);\n          }\n        }\n      }\n      if (savedTytTarget) {\n        setTytTargetNet(parseInt(savedTytTarget));\n      }\n      if (savedAytTarget) {\n        setAytTargetNet(parseInt(savedAytTarget));\n      }\n      if (savedTytBranchTarget) {\n        setTytBranchTargetNet(parseInt(savedTytBranchTarget));\n      }\n      if (savedAytBranchTarget) {\n        setAytBranchTargetNet(parseInt(savedAytBranchTarget));\n      }\n    } catch (error) {\n      console.error('Error loading state from localStorage:', error);\n    }\n  }, []);\n\n  // Hedef net değerlerini kaydet\n  useEffect(() => {\n    localStorage.setItem('tytTargetNet', tytTargetNet.toString());\n  }, [tytTargetNet]);\n\n  useEffect(() => {\n    localStorage.setItem('aytTargetNet', aytTargetNet.toString());\n  }, [aytTargetNet]);\n\n  useEffect(() => {\n    localStorage.setItem('tytBranchTargetNet', tytBranchTargetNet.toString());\n  }, [tytBranchTargetNet]);\n\n  useEffect(() => {\n    localStorage.setItem('aytBranchTargetNet', aytBranchTargetNet.toString());\n  }, [aytBranchTargetNet]);\n\n  // localStorage'a state'leri kaydet\n  useEffect(() => {\n    try {\n      localStorage.setItem('removedTopics', JSON.stringify(Array.from(removedTopics)));\n    } catch (error) {\n      console.error('Error saving removedTopics to localStorage:', error);\n    }\n  }, [removedTopics]);\n\n  useEffect(() => {\n    try {\n      localStorage.setItem('removedErrorTopics', JSON.stringify(Array.from(removedErrorTopics)));\n    } catch (error) {\n      console.error('Error saving removedErrorTopics to localStorage:', error);\n    }\n  }, [removedErrorTopics]);\n\n  useEffect(() => {\n    try {\n      localStorage.setItem('completedTopics', JSON.stringify(Array.from(completedTopics)));\n    } catch (error) {\n      console.error('Error saving completedTopics to localStorage:', error);\n    }\n  }, [completedTopics]);\n\n  useEffect(() => {\n    try {\n      const array = Array.from(completedExamErrors.entries()).map(([key, completedAt]) => ({ key, completedAt }));\n      localStorage.setItem('completedExamErrors', JSON.stringify(array));\n      // Aynı sekmede diğer componentleri bilgilendir\n      window.dispatchEvent(new CustomEvent('localStorageUpdate'));\n    } catch (error) {\n      console.error('Error saving completedExamErrors to localStorage:', error);\n    }\n  }, [completedExamErrors]);\n\n  useEffect(() => {\n    try {\n      const array = Array.from(completedQuestionErrors.entries()).map(([key, completedAt]) => ({ key, completedAt }));\n      localStorage.setItem('completedQuestionErrors', JSON.stringify(array));\n      // Aynı sekmede diğer componentleri bilgilendir\n      window.dispatchEvent(new CustomEvent('localStorageUpdate'));\n    } catch (error) {\n      console.error('Error saving completedQuestionErrors to localStorage:', error);\n    }\n  }, [completedQuestionErrors]);\n\n  // Konu isimlerinden TYT/AYT ve konu başlıklarını kaldırmak için yardımcı işlev.\n  const normalizeTopic = (topic: string): string => {\n    // \"TYT Türkçe - \" veya \"AYT Fizik - \" gibi desenleri konu isimlerinden kaldırır\n    let cleaned = topic.replace(/^(TYT|AYT)\\s+[^-]+\\s*-\\s*/, '').trim();\n    \n    // Ders adı prefix'lerini kaldır (Türkçe-, Fizik-, Matematik- vb.)\n    cleaned = cleaned.replace(/^(Türkçe|Sosyal Bilimler|Matematik|Geometri|Fen Bilimleri|Fizik|Kimya|Biyoloji|TYT|AYT)\\s*-\\s*/i, '').trim();\n    \n    // Baş harfi büyük yap\n    if (cleaned.length > 0) {\n      cleaned = cleaned.charAt(0).toUpperCase() + cleaned.slice(1);\n    }\n    \n    return cleaned;\n  };\n\n  // Ders isimlerini düzgün kapitalize etmek için yardımcı işlev\n  const capitalizeSubjectName = (subject: string): string => {\n    const subjectMap: {[key: string]: string} = {\n      'turkce': 'Türkçe',\n      'matematik': 'Matematik',\n      'sosyal': 'Sosyal Bilimler',\n      'fen': 'Fen Bilimleri',\n      'fizik': 'Fizik',\n      'kimya': 'Kimya',\n      'biyoloji': 'Biyoloji',\n      'geometri': 'Geometri'\n    };\n    return subjectMap[subject.toLowerCase()] || subject;\n  };\n\n  const { data: examResults = [], isLoading: isLoadingExams } = useQuery<ExamResult[]>({\n    queryKey: [\"/api/exam-results\"],\n  });\n  \n  const { data: archivedExamResults = [] } = useQuery<ExamResult[]>({\n    queryKey: [\"/api/exam-results/archived\"],\n  });\n  \n  const { data: questionLogs = [], isLoading: isLoadingQuestions } = useQuery<QuestionLog[]>({\n    queryKey: [\"/api/question-logs\"],\n  });\n  \n  const { data: archivedQuestionLogs = [] } = useQuery<QuestionLog[]>({\n    queryKey: [\"/api/question-logs/archived\"],\n  });\n\n  const { data: examSubjectNets = [], isLoading: isLoadingExamNets } = useQuery<any[]>({\n    queryKey: [\"/api/exam-subject-nets\"],\n  });\n\n  const isLoading = isLoadingExams || isLoadingQuestions || isLoadingExamNets;\n\n  // Her zaman arşivlenmiş verileri dahil et - Eksik Konular için - GELİŞTİRİLMİŞ FİLTRELEME\n  const topicsFilteredExams = useMemo(() => {\n    let combined = [...examResults, ...archivedExamResults];\n    \n    // Etiket filtresi uygula\n    if (topicsFilterEnabled.tag && topicsFilterValues.tags.length > 0) {\n      combined = combined.filter(exam => {\n        const examTag = exam.exam_scope === 'full' ? 'Genel Deneme' : 'Branş Deneme';\n        return topicsFilterValues.tags.includes(examTag);\n      });\n    }\n    \n    // Ders filtresi uygula - examlarda subjects_data içindeki derslerle eşleştir\n    if (topicsFilterEnabled.subject && topicsFilterValues.subjects.length > 0) {\n      combined = combined.filter(exam => {\n        if (!exam.subjects_data) return false;\n        \n        try {\n          const subjectsData = JSON.parse(exam.subjects_data);\n          const examSubjects = Object.keys(subjectsData);\n          \n          // Ders adı eşleme tablosu\n          const subjectNameMap: {[key: string]: string[]} = {\n            'Türkçe': ['turkce'],\n            'TYT Matematik': ['matematik'],\n            'Sosyal Bilimler': ['sosyal'],\n            'Fen Bilimleri': ['fen'],\n            'Fizik': ['fizik'],\n            'Kimya': ['kimya'],\n            'Biyoloji': ['biyoloji'],\n            'TYT Geometri': ['geometri'],\n            'AYT Matematik': ['matematik'],\n            'AYT Geometri': ['geometri']\n          };\n          \n          // Seçili derslerin exam'da olup olmadığını kontrol et\n          return topicsFilterValues.subjects.some(selectedSubject => {\n            const examKeys = subjectNameMap[selectedSubject] || [selectedSubject.toLowerCase()];\n            return examKeys.some(key => examSubjects.includes(key));\n          });\n        } catch {\n          return false;\n        }\n      });\n    }\n    \n    // Tarih filtresi uygula\n    if (topicsFilterEnabled.date && (topicsFilterValues.dateFrom || topicsFilterValues.dateTo)) {\n      combined = combined.filter(exam => {\n        const examDate = exam.exam_date;\n        if (topicsFilterValues.dateFrom && examDate < topicsFilterValues.dateFrom) return false;\n        if (topicsFilterValues.dateTo && examDate > topicsFilterValues.dateTo) return false;\n        return true;\n      });\n    }\n    \n    return combined;\n  }, [examResults, archivedExamResults, topicsFilterEnabled, topicsFilterValues]);\n  \n  const topicsFilteredQuestions = useMemo(() => {\n    let combined = [...questionLogs, ...archivedQuestionLogs];\n    \n    // Etiket filtresi - Soru kayıtları için\n    if (topicsFilterEnabled.tag && topicsFilterValues.tags.length > 0) {\n      combined = combined.filter(log => topicsFilterValues.tags.includes('Soru'));\n    }\n    \n    // Ders filtresi uygula\n    if (topicsFilterEnabled.subject && topicsFilterValues.subjects.length > 0) {\n      combined = combined.filter(log => {\n        const subjectNameMap: {[key: string]: string} = {\n          'turkce': 'Türkçe',\n          'Türkçe': 'Türkçe',\n          'matematik': 'TYT Matematik',\n          'Matematik': 'TYT Matematik',\n          'sosyal': 'Sosyal Bilimler',\n          'Sosyal': 'Sosyal Bilimler',\n          'Sosyal Bilimler': 'Sosyal Bilimler',\n          'fen': 'Fen Bilimleri',\n          'Fen': 'Fen Bilimleri',\n          'Fen Bilimleri': 'Fen Bilimleri',\n          'fizik': 'Fizik',\n          'Fizik': 'Fizik',\n          'kimya': 'Kimya',\n          'Kimya': 'Kimya',\n          'biyoloji': 'Biyoloji',\n          'Biyoloji': 'Biyoloji',\n          'geometri': 'TYT Geometri',\n          'Geometri': 'TYT Geometri',\n          'TYT Geometri': 'TYT Geometri',\n          'AYT Matematik': 'AYT Matematik',\n          'AYT Geometri': 'AYT Geometri'\n        };\n        const mappedSubject = subjectNameMap[log.subject] || log.subject;\n        return topicsFilterValues.subjects.includes(mappedSubject);\n      });\n    }\n    \n    // Tarih filtresi uygula\n    if (topicsFilterEnabled.date && (topicsFilterValues.dateFrom || topicsFilterValues.dateTo)) {\n      combined = combined.filter(log => {\n        const logDate = log.study_date;\n        if (topicsFilterValues.dateFrom && logDate < topicsFilterValues.dateFrom) return false;\n        if (topicsFilterValues.dateTo && logDate > topicsFilterValues.dateTo) return false;\n        return true;\n      });\n    }\n    \n    return combined;\n  }, [questionLogs, archivedQuestionLogs, topicsFilterEnabled, topicsFilterValues]);\n  \n  // Hata Analizi için - GELİŞTİRİLMİŞ FİLTRELEME\n  const errorsFilteredExams = useMemo(() => {\n    let combined = [...examResults, ...archivedExamResults];\n    \n    // Etiket filtresi uygula\n    if (errorsFilterEnabled.tag && errorsFilterValues.tags.length > 0) {\n      combined = combined.filter(exam => {\n        const examTag = exam.exam_scope === 'full' ? 'Genel Deneme' : 'Branş Deneme';\n        return errorsFilterValues.tags.includes(examTag);\n      });\n    }\n    \n    // Ders filtresi uygula - examlarda subjects_data içindeki derslerle eşleştir\n    if (errorsFilterEnabled.subject && errorsFilterValues.subjects.length > 0) {\n      combined = combined.filter(exam => {\n        if (!exam.subjects_data) return false;\n        \n        try {\n          const subjectsData = JSON.parse(exam.subjects_data);\n          const examSubjects = Object.keys(subjectsData);\n          \n          // Ders adı eşleme tablosu\n          const subjectNameMap: {[key: string]: string[]} = {\n            'Türkçe': ['turkce'],\n            'TYT Matematik': ['matematik'],\n            'Sosyal Bilimler': ['sosyal'],\n            'Fen Bilimleri': ['fen'],\n            'Fizik': ['fizik'],\n            'Kimya': ['kimya'],\n            'Biyoloji': ['biyoloji'],\n            'TYT Geometri': ['geometri'],\n            'AYT Matematik': ['matematik'],\n            'AYT Geometri': ['geometri']\n          };\n          \n          // Seçili derslerin exam'da olup olmadığını kontrol et\n          return errorsFilterValues.subjects.some(selectedSubject => {\n            const examKeys = subjectNameMap[selectedSubject] || [selectedSubject.toLowerCase()];\n            return examKeys.some(key => examSubjects.includes(key));\n          });\n        } catch {\n          return false;\n        }\n      });\n    }\n    \n    // Tarih filtresi uygula\n    if (errorsFilterEnabled.date && (errorsFilterValues.dateFrom || errorsFilterValues.dateTo)) {\n      combined = combined.filter(exam => {\n        const examDate = exam.exam_date;\n        if (errorsFilterValues.dateFrom && examDate < errorsFilterValues.dateFrom) return false;\n        if (errorsFilterValues.dateTo && examDate > errorsFilterValues.dateTo) return false;\n        return true;\n      });\n    }\n    \n    return combined;\n  }, [examResults, archivedExamResults, errorsFilterEnabled, errorsFilterValues]);\n  \n  const errorsFilteredQuestions = useMemo(() => {\n    let combined = [...questionLogs, ...archivedQuestionLogs];\n    \n    // Etiket filtresi - Soru kayıtları için\n    if (errorsFilterEnabled.tag && errorsFilterValues.tags.length > 0) {\n      combined = combined.filter(log => errorsFilterValues.tags.includes('Soru'));\n    }\n    \n    // Ders filtresi uygula\n    if (errorsFilterEnabled.subject && errorsFilterValues.subjects.length > 0) {\n      combined = combined.filter(log => {\n        const subjectNameMap: {[key: string]: string} = {\n          'turkce': 'Türkçe',\n          'Türkçe': 'Türkçe',\n          'matematik': 'TYT Matematik',\n          'Matematik': 'TYT Matematik',\n          'sosyal': 'Sosyal Bilimler',\n          'Sosyal': 'Sosyal Bilimler',\n          'Sosyal Bilimler': 'Sosyal Bilimler',\n          'fen': 'Fen Bilimleri',\n          'Fen': 'Fen Bilimleri',\n          'Fen Bilimleri': 'Fen Bilimleri',\n          'fizik': 'Fizik',\n          'Fizik': 'Fizik',\n          'kimya': 'Kimya',\n          'Kimya': 'Kimya',\n          'biyoloji': 'Biyoloji',\n          'Biyoloji': 'Biyoloji',\n          'geometri': 'TYT Geometri',\n          'Geometri': 'TYT Geometri',\n          'TYT Geometri': 'TYT Geometri',\n          'AYT Matematik': 'AYT Matematik',\n          'AYT Geometri': 'AYT Geometri'\n        };\n        const mappedSubject = subjectNameMap[log.subject] || log.subject;\n        return errorsFilterValues.subjects.includes(mappedSubject);\n      });\n    }\n    \n    // Tarih filtresi uygula\n    if (errorsFilterEnabled.date && (errorsFilterValues.dateFrom || errorsFilterValues.dateTo)) {\n      combined = combined.filter(log => {\n        const logDate = log.study_date;\n        if (errorsFilterValues.dateFrom && logDate < errorsFilterValues.dateFrom) return false;\n        if (errorsFilterValues.dateTo && logDate > errorsFilterValues.dateTo) return false;\n        return true;\n      });\n    }\n    \n    return combined;\n  }, [questionLogs, archivedQuestionLogs, errorsFilterEnabled, errorsFilterValues]);\n  \n  // Ana Analiz için\n  const allExamResults = useMemo(() => {\n    let combined = [...examResults, ...archivedExamResults];\n    if (useDateFilter && selectedDate) {\n      combined = combined.filter(exam => exam.exam_date === selectedDate);\n    }\n    return combined;\n  }, [examResults, archivedExamResults, useDateFilter, selectedDate]);\n  \n  const allQuestionLogs = useMemo(() => {\n    let combined = [...questionLogs, ...archivedQuestionLogs];\n    if (useDateFilter && selectedDate) {\n      combined = combined.filter(log => log.study_date === selectedDate);\n    }\n    return combined;\n  }, [questionLogs, archivedQuestionLogs, useDateFilter, selectedDate]);\n\n  // Filtre sonuç sayısını hesapla\n  const topicsFilterResultCount = useMemo(() => {\n    let count = 0;\n    const uniqueTopics = new Set<string>();\n    \n    // Sınav sonuçlarından say\n    topicsFilteredExams.forEach(exam => {\n      if (exam.subjects_data) {\n        try {\n          const subjectsData = JSON.parse(exam.subjects_data);\n          Object.entries(subjectsData).forEach(([subjectKey, data]: [string, any]) => {\n            if (data.wrong_topics && data.wrong_topics.length > 0) {\n              data.wrong_topics.forEach((topic: any) => {\n                const topicStr = typeof topic === 'string' ? topic : topic.topic || '';\n                if (topicStr) {\n                  // removedTopics'de olmayan konuları say\n                  const topicKey = `${exam.exam_type}-${subjectKey}-${topicStr}`;\n                  if (!removedTopics.has(topicKey)) {\n                    uniqueTopics.add(`exam-${exam.id}-${topicStr}`);\n                  }\n                }\n              });\n            }\n          });\n        } catch (e) {}\n      }\n    });\n    \n    // Soru günlüklerinden say\n    topicsFilteredQuestions.forEach(log => {\n      if (log.wrong_topics) {\n        try {\n          const wrongTopics = typeof log.wrong_topics === 'string' ? JSON.parse(log.wrong_topics) : log.wrong_topics;\n          if (Array.isArray(wrongTopics)) {\n            wrongTopics.forEach(topic => {\n              const topicStr = typeof topic === 'string' ? topic : topic.topic || '';\n              if (topicStr) {\n                // removedTopics'de olmayan konuları say\n                const topicKey = `${log.exam_type}-${log.subject}-${topicStr}`;\n                if (!removedTopics.has(topicKey)) {\n                  uniqueTopics.add(`question-${log.id}-${topicStr}`);\n                }\n              }\n            });\n          }\n        } catch (e) {}\n      }\n    });\n    \n    return uniqueTopics.size;\n  }, [topicsFilteredExams, topicsFilteredQuestions, removedTopics]);\n\n  // Konu bazında eksik konuları toplar - DENEME VE EXAM SUBJECT NETS VERİLERİ\n  const missingTopics = useMemo(() => {\n    const topicMap = new Map<string, MissingTopic>();\n\n    // Sınav sonuçlarını işleyin - eksik konuları subjects_data'dan çıkarmamız gerekiyor\n    topicsFilteredExams.forEach(exam => {\n      if (exam.subjects_data) {\n        try {\n          const subjectsData = JSON.parse(exam.subjects_data);\n          Object.entries(subjectsData).forEach(([subjectKey, data]: [string, any]) => {\n            if (data.wrong_topics && data.wrong_topics.length > 0) {\n              // Subject'i canonical display name'e normalize et - exam_type'a göre\n              const examType = exam.exam_type || 'TYT';\n              const subjectLower = subjectKey.toLowerCase();\n              \n              let normalizedSubject = '';\n              if (subjectLower === 'turkce' || subjectKey === 'Türkçe') {\n                normalizedSubject = 'TYT Türkçe';\n              } else if (subjectLower === 'sosyal' || subjectKey === 'Sosyal' || subjectKey === 'Sosyal Bilimler') {\n                normalizedSubject = 'TYT Sosyal Bilimler';\n              } else if (subjectLower === 'fen' || subjectKey === 'Fen' || subjectKey === 'Fen Bilimleri') {\n                normalizedSubject = 'TYT Fen Bilimleri';\n              } else if (subjectLower === 'matematik' || subjectKey === 'Matematik') {\n                normalizedSubject = examType === 'AYT' ? 'AYT Matematik' : 'TYT Matematik';\n              } else if (subjectLower === 'geometri' || subjectKey === 'Geometri') {\n                normalizedSubject = examType === 'AYT' ? 'AYT Geometri' : 'TYT Geometri';\n              } else if (subjectLower === 'fizik' || subjectKey === 'Fizik') {\n                normalizedSubject = examType === 'AYT' ? 'AYT Fizik' : 'TYT Fizik';\n              } else if (subjectLower === 'kimya' || subjectKey === 'Kimya') {\n                normalizedSubject = examType === 'AYT' ? 'AYT Kimya' : 'TYT Kimya';\n              } else if (subjectLower === 'biyoloji' || subjectKey === 'Biyoloji') {\n                normalizedSubject = examType === 'AYT' ? 'AYT Biyoloji' : 'TYT Biyoloji';\n              } else {\n                normalizedSubject = subjectKey;\n              }\n              \n              // Ders filtresi aktifse ve bu ders seçili değilse atla\n              if (topicsFilterEnabled.subject && topicsFilterValues.subjects.length > 0) {\n                if (!topicsFilterValues.subjects.includes(normalizedSubject)) return;\n              }\n              \n              data.wrong_topics.forEach((rawTopic: any) => {\n                let topicName = '';\n                if (typeof rawTopic === 'string') {\n                  topicName = rawTopic;\n                } else if (rawTopic && typeof rawTopic === 'object') {\n                  topicName = rawTopic.topic || rawTopic.name || '';\n                }\n                \n                if (topicName && topicName.trim()) {\n                  //  \"TYT Türkçe - \" veya \"AYT Fizik - \" gibi desenleri konu isimlerinden kaldırma\n                  const topic = normalizeTopic(topicName);\n                  const key = `${normalizedSubject}-${topic}`;\n                  if (topicMap.has(key)) {\n                    const existing = topicMap.get(key)!;\n                    // Her yanlış eklendiğinde frequency artır (sınır yok)\n                    existing.frequency += 1;\n                    existing.lastSeen = exam.exam_date > existing.lastSeen ? exam.exam_date : existing.lastSeen;\n                  } else {\n                    topicMap.set(key, {\n                      topic,\n                      subject: normalizedSubject,\n                      source: 'exam',\n                      exam_scope: exam.exam_scope as 'full' | 'branch',\n                      exam_type: examType as 'TYT' | 'AYT',\n                      frequency: 1,\n                      lastSeen: exam.exam_date,\n                      createdAt: new Date().toISOString()\n                    });\n                  }\n                }\n              });\n            }\n          });\n        } catch (e) {\n          console.error('Error parsing subjects_data:', e);\n        }\n      }\n    });\n\n    // examSubjectNets'ten de yanlış konuları işle\n    examSubjectNets.forEach((subjectNet: any) => {\n      if (subjectNet.wrong_topics_json && subjectNet.wrong_topics_json.trim() !== '' && subjectNet.wrong_topics_json !== 'null' && subjectNet.wrong_topics_json !== '[]') {\n        try {\n          const wrongTopics = JSON.parse(subjectNet.wrong_topics_json);\n          if (Array.isArray(wrongTopics)) {\n            const exam = topicsFilteredExams.find((e: any) => e.id === subjectNet.exam_id);\n            if (!exam) return; // Tarih filtresi aktifse ve eşleşme yoksa atla\n            \n            // Subject'i normalize et - exam_type'a göre\n            const examType = exam.exam_type || 'TYT';\n            const subjectLower = subjectNet.subject.toLowerCase();\n            \n            let normalizedSubject = '';\n            if (subjectLower === 'turkce' || subjectNet.subject === 'Türkçe') {\n              normalizedSubject = 'TYT Türkçe';\n            } else if (subjectLower === 'sosyal' || subjectNet.subject === 'Sosyal' || subjectNet.subject === 'Sosyal Bilimler') {\n              normalizedSubject = 'TYT Sosyal Bilimler';\n            } else if (subjectLower === 'fen' || subjectNet.subject === 'Fen' || subjectNet.subject === 'Fen Bilimleri') {\n              normalizedSubject = 'TYT Fen Bilimleri';\n            } else if (subjectLower === 'matematik' || subjectNet.subject === 'Matematik') {\n              normalizedSubject = examType === 'AYT' ? 'AYT Matematik' : 'TYT Matematik';\n            } else if (subjectLower === 'geometri' || subjectNet.subject === 'Geometri') {\n              normalizedSubject = examType === 'AYT' ? 'AYT Geometri' : 'TYT Geometri';\n            } else if (subjectLower === 'fizik' || subjectNet.subject === 'Fizik') {\n              normalizedSubject = examType === 'AYT' ? 'AYT Fizik' : 'TYT Fizik';\n            } else if (subjectLower === 'kimya' || subjectNet.subject === 'Kimya') {\n              normalizedSubject = examType === 'AYT' ? 'AYT Kimya' : 'TYT Kimya';\n            } else if (subjectLower === 'biyoloji' || subjectNet.subject === 'Biyoloji') {\n              normalizedSubject = examType === 'AYT' ? 'AYT Biyoloji' : 'TYT Biyoloji';\n            } else {\n              normalizedSubject = subjectNet.subject;\n            }\n            \n            // Ders filtresi aktifse ve bu ders seçili değilse atla\n            if (topicsFilterEnabled.subject && topicsFilterValues.subjects.length > 0) {\n              if (!topicsFilterValues.subjects.includes(normalizedSubject)) return;\n            }\n            \n            const examDate = exam.exam_date;\n            const examScope = exam.exam_scope;\n            \n            wrongTopics.forEach((topicItem: any) => {\n              const topicName = typeof topicItem === 'string' ? topicItem : topicItem.topic;\n              if (topicName) {\n                const topic = normalizeTopic(topicName);\n                const key = `${normalizedSubject}-${topic}`;\n                if (topicMap.has(key)) {\n                  const existing = topicMap.get(key)!;\n                  // Her yanlış eklendiğinde frequency artır (sınır yok)\n                  existing.frequency += 2;\n                  existing.lastSeen = examDate > existing.lastSeen ? examDate : existing.lastSeen;\n                } else {\n                  topicMap.set(key, {\n                    topic,\n                    subject: normalizedSubject,\n                    source: 'exam',\n                    exam_scope: examScope as 'full' | 'branch',\n                    exam_type: examType as 'TYT' | 'AYT',\n                    frequency: 2,\n                    lastSeen: examDate,\n                    createdAt: new Date().toISOString()\n                  });\n                }\n              }\n            });\n          }\n        } catch (e) {\n          console.error('Error parsing wrong_topics_json from examSubjectNets:', e);\n        }\n      }\n    });\n\n    // Soru günlüklerinden yanlış konuları işle\n    topicsFilteredQuestions.forEach((log: QuestionLog) => {\n      if (log.wrong_topics) {\n        try {\n          const wrongTopics = typeof log.wrong_topics === 'string' \n            ? JSON.parse(log.wrong_topics) \n            : log.wrong_topics;\n          \n          if (Array.isArray(wrongTopics) && wrongTopics.length > 0) {\n            // Subject'i normalize et - exam_type'a göre\n            const examType = log.exam_type || 'TYT';\n            const subjectLower = log.subject.toLowerCase();\n            \n            let normalizedSubject = '';\n            if (subjectLower === 'turkce' || log.subject === 'Türkçe') {\n              normalizedSubject = 'TYT Türkçe';\n            } else if (subjectLower === 'sosyal' || log.subject === 'Sosyal' || log.subject === 'Sosyal Bilimler') {\n              normalizedSubject = 'TYT Sosyal Bilimler';\n            } else if (subjectLower === 'fen' || log.subject === 'Fen' || log.subject === 'Fen Bilimleri') {\n              normalizedSubject = 'TYT Fen Bilimleri';\n            } else if (subjectLower === 'matematik' || log.subject === 'Matematik') {\n              normalizedSubject = examType === 'AYT' ? 'AYT Matematik' : 'TYT Matematik';\n            } else if (subjectLower === 'geometri' || log.subject === 'Geometri') {\n              normalizedSubject = examType === 'AYT' ? 'AYT Geometri' : 'TYT Geometri';\n            } else if (subjectLower === 'fizik' || log.subject === 'Fizik') {\n              normalizedSubject = examType === 'AYT' ? 'AYT Fizik' : 'TYT Fizik';\n            } else if (subjectLower === 'kimya' || log.subject === 'Kimya') {\n              normalizedSubject = examType === 'AYT' ? 'AYT Kimya' : 'TYT Kimya';\n            } else if (subjectLower === 'biyoloji' || log.subject === 'Biyoloji') {\n              normalizedSubject = examType === 'AYT' ? 'AYT Biyoloji' : 'TYT Biyoloji';\n            } else {\n              normalizedSubject = log.subject;\n            }\n            \n            wrongTopics.forEach((topicItem: any) => {\n              const topicName = typeof topicItem === 'string' ? topicItem : topicItem.topic || topicItem.name;\n              if (topicName) {\n                const topic = normalizeTopic(topicName);\n                const key = `${normalizedSubject}-${topic}`;\n                if (topicMap.has(key)) {\n                  const existing = topicMap.get(key)!;\n                  existing.frequency += 1;\n                  existing.lastSeen = log.study_date > existing.lastSeen ? log.study_date : existing.lastSeen;\n                } else {\n                  topicMap.set(key, {\n                    topic,\n                    subject: normalizedSubject,\n                    source: 'question',\n                    exam_type: examType as 'TYT' | 'AYT',\n                    frequency: 1,\n                    lastSeen: log.study_date,\n                    createdAt: new Date().toISOString()\n                  });\n                }\n              }\n            });\n          }\n        } catch (e) {\n          console.error('Error parsing wrong_topics from question log:', e);\n        }\n      }\n    });\n\n    let topics = Array.from(topicMap.values()).filter(topic => topic.frequency >= 1);\n    \n    // topicsSortBy'a göre sırala\n    if (topicsSortBy === 'all') {\n      // Hepsi - herhangi bir sıralama veya filtreleme yapma\n    } else if (topicsSortBy === 'mostFrequent') {\n      topics = topics.sort((a, b) => b.frequency - a.frequency);\n    } else if (topicsSortBy === 'newest') {\n      topics = topics.sort((a, b) => new Date(b.lastSeen).getTime() - new Date(a.lastSeen).getTime());\n    } else if (topicsSortBy === 'oldest') {\n      topics = topics.sort((a, b) => new Date(a.lastSeen).getTime() - new Date(b.lastSeen).getTime());\n    } else if (topicsSortBy === 'generalExam') {\n      topics = topics.filter(t => t.source === 'exam' && t.exam_scope === 'full');\n    } else if (topicsSortBy === 'branchExam') {\n      topics = topics.filter(t => t.source === 'exam' && t.exam_scope === 'branch');\n    } else if (topicsSortBy === 'question') {\n      topics = topics.filter(t => t.source === 'question');\n    } else if (topicsSortBy === 'tyt') {\n      topics = topics.filter(t => t.exam_type === 'TYT');\n    } else if (topicsSortBy === 'ayt') {\n      topics = topics.filter(t => t.exam_type === 'AYT');\n    }\n    \n    return topics;\n  }, [topicsFilteredExams, topicsFilteredQuestions, examSubjectNets, topicsSortBy]);\n\n  // Net Analiz Verilerini İşleyin - Ortalama netleri göstermek için hareketli ortalama ekle\n  const netAnalysisData = useMemo(() => {\n    const fullExams = allExamResults\n      .filter(exam => exam.exam_scope === 'full')\n      .sort((a, b) => new Date(a.exam_date).getTime() - new Date(b.exam_date).getTime());\n    \n    const tytExams = fullExams.filter(e => e.exam_type === 'TYT' || (parseFloat(e.tyt_net) > 0 && !parseFloat(e.ayt_net)));\n    const aytExams = fullExams.filter(e => e.exam_type === 'AYT' || parseFloat(e.ayt_net) > 0);\n    \n    // Hareketli ortalama hesapla (son 3 sınav)\n    const calculateMovingAverage = (exams: any[], index: number, key: 'tyt_net' | 'ayt_net') => {\n      const window = 3;\n      const start = Math.max(0, index - window + 1);\n      const slice = exams.slice(start, index + 1);\n      const sum = slice.reduce((acc, e) => acc + (parseFloat(e[key]) || 0), 0);\n      return slice.length > 0 ? sum / slice.length : 0;\n    };\n    \n    return fullExams.map((exam, index) => {\n      const examType = exam.exam_type || (parseFloat(exam.ayt_net) > 0 ? 'AYT' : 'TYT');\n      const tytIndex = tytExams.findIndex(e => e.id === exam.id);\n      const aytIndex = aytExams.findIndex(e => e.id === exam.id);\n      \n      return {\n        date: new Date(exam.exam_date).toLocaleDateString('tr-TR', { day: '2-digit', month: '2-digit' }),\n        examName: exam.display_name || exam.exam_name,\n        // Hareketli ortalama kullan\n        tytNet: examType === 'TYT' && tytIndex >= 0 ? calculateMovingAverage(tytExams, tytIndex, 'tyt_net') : null,\n        aytNet: examType === 'AYT' && aytIndex >= 0 ? calculateMovingAverage(aytExams, aytIndex, 'ayt_net') : null,\n        // Gerçek netler (isteğe bağlı olarak göstermek için)\n        tytActual: examType === 'TYT' ? (parseFloat(exam.tyt_net) || 0) : null,\n        aytActual: examType === 'AYT' ? (parseFloat(exam.ayt_net) || 0) : null,\n        tytTarget: tytTargetNet,\n        aytTarget: aytTargetNet,\n        sortDate: exam.exam_date\n      };\n    });\n  }, [allExamResults, tytTargetNet, aytTargetNet]);\n\n  // Branş Denemeleri Verisi - Sadece branch scope olanları al\n  const branchExamData = useMemo(() => {\n    return allExamResults\n      .filter(exam => exam.exam_scope === 'branch')\n      .map(exam => {\n        const subjectData = exam.subjects_data ? JSON.parse(exam.subjects_data) : {};\n        const subjectKey = exam.selected_subject || '';\n        const data = subjectData[subjectKey] || {};\n        const correct = parseInt(data.correct) || 0;\n        const wrong = parseInt(data.wrong) || 0;\n        const net = correct - (wrong * 0.25);\n        \n        return {\n          date: new Date(exam.exam_date).toLocaleDateString('tr-TR', { day: '2-digit', month: '2-digit' }),\n          examName: exam.display_name || exam.exam_name,\n          subject: capitalizeSubjectName(subjectKey),\n          examType: exam.exam_type || 'TYT',\n          net: net,\n          correct,\n          wrong,\n          sortDate: exam.exam_date\n        };\n      })\n      .sort((a, b) => new Date(a.sortDate).getTime() - new Date(b.sortDate).getTime());\n  }, [allExamResults]);\n\n  // Branş Denemeleri'ni ders ve sınav türüne göre grupla\n  const branchExamsBySubject = useMemo(() => {\n    const grouped: { [key: string]: any[] } = {};\n    \n    branchExamData.forEach(exam => {\n      const key = `${exam.examType}-${exam.subject}`;\n      if (!grouped[key]) {\n        grouped[key] = [];\n      }\n      grouped[key].push(exam);\n    });\n    \n    return grouped;\n  }, [branchExamData]);\n\n  // Branş Denemeleri için Radar Chart Verisi - TYT ve AYT için ayrı\n  const { tytBranchRadarData, aytBranchRadarData } = useMemo(() => {\n    const tytSubjectMap = new Map<string, { net: number; correct: number; wrong: number; date: string }>();\n    const aytSubjectMap = new Map<string, { net: number; correct: number; wrong: number; date: string }>();\n    \n    allExamResults\n      .filter(exam => exam.exam_scope === 'branch')\n      .forEach(exam => {\n        const subjectData = exam.subjects_data ? JSON.parse(exam.subjects_data) : {};\n        const subjectKey = exam.selected_subject || '';\n        const data = subjectData[subjectKey] || {};\n        const correct = parseInt(data.correct) || 0;\n        const wrong = parseInt(data.wrong) || 0;\n        const net = correct - (wrong * 0.25);\n        const subject = capitalizeSubjectName(subjectKey);\n        \n        // Sınav türüne göre uygun haritayı seçin\n        const targetMap = exam.exam_type === 'TYT' ? tytSubjectMap : aytSubjectMap;\n        \n        // Her ders için en son veya en yüksek neti al\n        if (!targetMap.has(subject) || new Date(exam.exam_date) > new Date(targetMap.get(subject)!.date)) {\n          targetMap.set(subject, { net, correct, wrong, date: exam.exam_date });\n        }\n      });\n    \n    const subjectColors: {[key: string]: string} = {\n      'Türkçe': '#ef4444',\n      'Matematik': '#3b82f6',\n      'Sosyal Bilimler': '#f59e0b',\n      'Fen Bilimleri': '#10b981',\n      'Geometri': '#a855f7',\n      'Fizik': '#8b5cf6',\n      'Kimya': '#ec4899',\n      'Biyoloji': '#06b6d4'\n    };\n    \n    const processSubjectData = (subjectMap: Map<string, any>) => {\n      return Array.from(subjectMap.entries()).map(([subject, data]) => ({\n        subject,\n        net: Math.max(0, data.net),\n        correct: data.correct,\n        wrong: data.wrong,\n        color: subjectColors[subject] || '#6b7280'\n      }));\n    };\n\n    return {\n      tytBranchRadarData: processSubjectData(tytSubjectMap),\n      aytBranchRadarData: processSubjectData(aytSubjectMap)\n    };\n  }, [allExamResults]);\n\n  // Konu Analiz Verilerini İşleyin - TYT ve AYT için ayrı - SADECE GENEL DENEMELER\n  const { tytSubjectAnalysisData, aytSubjectAnalysisData } = useMemo(() => {\n    const tytSubjectMap = new Map<string, { correct: number; wrong: number; total: number }>();\n    const aytSubjectMap = new Map<string, { correct: number; wrong: number; total: number }>();\n\n    // Sınav sonuçlarını konu verileri için işleyin, sınav türüne göre ayırın - SADECE GENEL DENEMELER (exam_scope === 'full')\n    allExamResults\n      .filter(exam => exam.exam_scope === 'full')\n      .forEach(exam => {\n      if (exam.subjects_data) {\n        try {\n          const subjectsData = JSON.parse(exam.subjects_data);\n          Object.entries(subjectsData).forEach(([subjectKey, data]: [string, any]) => {\n            const subjectNameMap: {[key: string]: string} = {\n              'turkce': 'Türkçe',\n              'matematik': 'Matematik', \n              'sosyal': 'Sosyal Bilimler',\n              'geometri': 'Geometri',\n              'fen': 'Fen Bilimleri',\n              'fizik': 'Fizik',\n              'kimya': 'Kimya',\n              'biyoloji': 'Biyoloji'\n            };\n            const subjectName = subjectNameMap[subjectKey] || subjectKey;\n            const correct = parseInt(data.correct) || 0;\n            const wrong = parseInt(data.wrong) || 0;\n            \n            if (correct > 0 || wrong > 0) {\n              // Sınav türüne göre uygun haritayı seçin\n              const targetMap = exam.exam_type === 'TYT' ? tytSubjectMap : aytSubjectMap;\n              \n              if (targetMap.has(subjectName)) {\n                const existing = targetMap.get(subjectName)!;\n                existing.correct += correct;\n                existing.wrong += wrong;\n                existing.total += (correct + wrong);\n              } else {\n                targetMap.set(subjectName, {\n                  correct,\n                  wrong,\n                  total: correct + wrong\n                });\n              }\n            }\n          });\n        } catch (e) {\n          console.error('Error parsing subjects_data:', e);\n        }\n      }\n    });\n\n    const subjectColors: {[key: string]: string} = {\n      'Türkçe': '#ef4444',\n      'Matematik': '#3b82f6', \n      'Sosyal Bilimler': '#f59e0b',\n      'Geometri': '#a855f7',\n      'Fen Bilimleri': '#10b981',\n      'Fizik': '#8b5cf6',\n      'Kimya': '#ec4899',\n      'Biyoloji': '#06b6d4'\n    };\n\n    const processSubjectData = (subjectMap: Map<string, any>) => {\n      return Array.from(subjectMap.entries()).map(([subject, data]) => ({\n        subject,\n        correct: data.correct,\n        wrong: data.wrong,\n        totalQuestions: data.total,\n        netScore: data.correct - (data.wrong * 0.25),\n        color: subjectColors[subject] || '#6b7280',\n        correctRate: data.total > 0 ? (data.correct / data.total) * 100 : 0,\n        wrongRate: data.total > 0 ? (data.wrong / data.total) * 100 : 0\n      }));\n    };\n\n    return {\n      tytSubjectAnalysisData: processSubjectData(tytSubjectMap),\n      aytSubjectAnalysisData: processSubjectData(aytSubjectMap)\n    };\n  }, [allExamResults]);\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"bg-card rounded-lg border p-8 text-center\">\n          <div className=\"animate-spin w-8 h-8 border-2 border-primary border-t-transparent rounded-full mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Analiz verileri yükleniyor...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Geliştirilmiş Eksik Konular Bölümü - Daha Büyük ve Daha Modern */}\n      <Card className=\"bg-gradient-to-br from-red-50/70 via-white to-orange-50/60 dark:from-red-950/40 dark:via-slate-800/60 dark:to-orange-950/30 backdrop-blur-lg border-2 border-red-200/40 dark:border-red-800/40 shadow-2xl hover:shadow-3xl transition-all duration-700 group relative overflow-hidden\">\n        {/* Animasyonlu Arka Plan Elemanları - BERAT CANKIR - 03:03:03 */}\n        <div className=\"absolute top-0 right-0 w-56 h-56 bg-gradient-to-br from-red-500/15 to-orange-500/10 rounded-full blur-3xl\"></div>\n        <div className=\"absolute -bottom-16 -left-16 w-48 h-48 bg-gradient-to-tr from-orange-500/15 to-red-500/10 rounded-full blur-3xl\"></div>\n        <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-40 h-40 bg-gradient-to-br from-red-400/5 to-orange-400/5 rounded-full blur-2xl\"></div>\n        \n        <CardHeader className=\"bg-gradient-to-r from-red-500/15 to-orange-500/15 rounded-t-lg border-b border-red-200/40 pb-8 relative\">\n          <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"p-4 bg-gradient-to-br from-red-500 via-red-600 to-orange-500 rounded-2xl shadow-xl group-hover:shadow-2xl transition-all duration-500 group-hover:scale-110\">\n                <AlertTriangle className=\"h-8 w-8 text-white drop-shadow-lg\" />\n              </div>\n              <div>\n                <div className=\"flex items-center gap-3\">\n                  <CardTitle className=\"text-3xl font-bold bg-gradient-to-r from-red-600 to-orange-600 bg-clip-text text-transparent\">\n                    🎯 Eksik Olduğum Konular\n                  </CardTitle>\n                  <Button\n                    onClick={() => setShowCompletedTopicsModal(true)}\n                    variant=\"outline\"\n                    className=\"border-2 border-green-600 text-green-600 hover:bg-green-50 dark:hover:bg-green-950 px-4 py-2 rounded-lg font-semibold shadow-md hover:shadow-lg transition-all duration-300\"\n                  >\n                    <CheckCircle className=\"mr-2 h-4 w-4\" />\n                    ✅ Tamamlanan Hatalı Konular\n                  </Button>\n                </div>\n                <p className=\"text-sm text-red-600/70 dark:text-red-400/70 font-medium mt-2\">\n                  Soru çözümü ve deneme sınavlarından toplanan eksik konu analizi\n                </p>\n              </div>\n            </div>\n            \n            {/* Filtreler ve Sıralama Butonları - BERAT CANKIR - 03:03:03 */}\n            <div className=\"flex flex-col items-end gap-2\">\n              <div className=\"flex gap-3\">\n                <select\n                  value={topicsSortBy}\n                  onChange={(e) => setTopicsSortBy(e.target.value)}\n                  className=\"px-4 py-3 bg-gradient-to-r from-purple-500 to-indigo-500 hover:from-purple-600 hover:to-indigo-600 text-white rounded-xl font-semibold shadow-lg hover:shadow-xl transition-all duration-300 cursor-pointer border-none outline-none\"\n                >\n                  <option value=\"all\" className=\"bg-purple-600 text-white\">Hepsi</option>\n                  <option value=\"mostFrequent\" className=\"bg-purple-600 text-white\">En Çok Tekrar Eden</option>\n                  <option value=\"newest\" className=\"bg-purple-600 text-white\">Son Yapılan Hata</option>\n                  <option value=\"oldest\" className=\"bg-purple-600 text-white\">İlk Yapılan Hata</option>\n                  <option value=\"generalExam\" className=\"bg-purple-600 text-white\">Genel Deneme</option>\n                  <option value=\"branchExam\" className=\"bg-purple-600 text-white\">Branş Deneme</option>\n                  <option value=\"question\" className=\"bg-purple-600 text-white\">Soru</option>\n                  <option value=\"tyt\" className=\"bg-purple-600 text-white\">TYT</option>\n                  <option value=\"ayt\" className=\"bg-purple-600 text-white\">AYT</option>\n                </select>\n                <Button\n                  onClick={() => setShowTopicsFilterModal(true)}\n                  className=\"flex items-center gap-2 px-6 py-3 bg-gradient-to-r from-red-500 to-orange-500 hover:from-red-600 hover:to-orange-600 text-white rounded-xl font-semibold shadow-lg hover:shadow-xl transition-all duration-300\"\n                >\n                  <Filter className=\"h-5 w-5\" />\n                  Filtreler\n                  {[topicsFilterEnabled.tag, topicsFilterEnabled.subject, topicsFilterEnabled.date].filter(Boolean).length > 0 && (\n                    <span className=\"ml-1 px-2 py-0.5 bg-white/30 rounded-full text-xs font-bold\">\n                      {[topicsFilterEnabled.tag, topicsFilterEnabled.subject, topicsFilterEnabled.date].filter(Boolean).length}\n                    </span>\n                  )}\n                </Button>\n              </div>\n              {[topicsFilterEnabled.tag, topicsFilterEnabled.subject, topicsFilterEnabled.date].filter(Boolean).length > 0 && (\n                <div className=\"text-xs text-red-600 dark:text-red-400 font-semibold flex flex-wrap gap-1 max-w-xs justify-end\">\n                  {topicsFilterEnabled.tag && topicsFilterValues.tags.length > 0 && (\n                    <span className=\"px-2 py-0.5 bg-red-100 dark:bg-red-900/40 rounded-full\">\n                      🏷️ {topicsFilterValues.tags.length} etiket\n                    </span>\n                  )}\n                  {topicsFilterEnabled.subject && topicsFilterValues.subjects.length > 0 && (\n                    <span className=\"px-2 py-0.5 bg-blue-100 dark:bg-blue-900/40 rounded-full\">\n                      📚 {topicsFilterValues.subjects.length} ders\n                    </span>\n                  )}\n                  {topicsFilterEnabled.date && (topicsFilterValues.dateFrom || topicsFilterValues.dateTo) && (\n                    <span className=\"px-2 py-0.5 bg-purple-100 dark:bg-purple-900/40 rounded-full\">\n                      📅 Tarih\n                    </span>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent className=\"pt-8 pb-8 relative min-h-[400px]\">\n          {isLoading ? (\n            <div className=\"text-center py-16\">\n              <div className=\"inline-flex items-center justify-center w-20 h-20 bg-gradient-to-br from-red-100 to-orange-100 dark:from-red-900/30 dark:to-orange-900/30 rounded-full mb-6 shadow-lg\">\n                <div className=\"animate-spin w-10 h-10 border-4 border-red-200 border-t-red-500 rounded-full\"></div>\n              </div>\n              <h4 className=\"text-xl font-semibold text-red-700 dark:text-red-300 mb-3\">Eksik konular analiz ediliyor...</h4>\n              <div className=\"flex justify-center space-x-1\">\n                <div className=\"w-3 h-3 rounded-full bg-red-500 animate-bounce\"></div>\n                <div className=\"w-3 h-3 rounded-full bg-orange-500 animate-bounce delay-100\"></div>\n                <div className=\"w-3 h-3 rounded-full bg-red-600 animate-bounce delay-200\"></div>\n              </div>\n            </div>\n          ) : missingTopics.length === 0 ? (\n            <div className=\"text-center py-16 text-muted-foreground\">\n              <div className=\"w-24 h-24 rounded-full bg-gradient-to-br from-green-100 to-emerald-100 dark:from-green-900/30 dark:to-emerald-900/30 flex items-center justify-center mx-auto mb-6 shadow-lg\">\n                <Target className=\"h-12 w-12 text-green-500\" />\n              </div>\n              {[topicsFilterEnabled.tag, topicsFilterEnabled.subject, topicsFilterEnabled.date].filter(Boolean).length > 0 ? (\n                <>\n                  <h4 className=\"text-2xl font-semibold text-orange-700 dark:text-orange-300 mb-3\">⚠️ Henüz seçilen filtreye göre veri bulunmamaktadır</h4>\n                  <p className=\"text-base opacity-75\">Farklı filtre seçeneklerini deneyin veya filtreleri sıfırlayın</p>\n                </>\n              ) : (\n                <>\n                  <h4 className=\"text-2xl font-semibold text-green-700 dark:text-green-300 mb-3\">Harika! Henüz eksik konu yok</h4>\n                  <p className=\"text-base opacity-75\">Soru çözümü ve deneme sınavı ekledikçe eksik konular burada görünecek</p>\n                </>\n              )}\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {missingTopics\n                .filter(topic => {\n                  // Ders filtresi\n                  if (selectedSubjectTopics !== 'all' && topic.subject !== selectedSubjectTopics) {\n                    return false;\n                  }\n                  // Etiket/kaynak filtresi\n                  if (selectedTagTopics !== 'all') {\n                    if (selectedTagTopics === 'exam-full' && (topic.source !== 'exam' || topic.exam_scope !== 'full')) {\n                      return false;\n                    }\n                    if (selectedTagTopics === 'exam-branch' && (topic.source !== 'exam' || topic.exam_scope !== 'branch')) {\n                      return false;\n                    }\n                    if (selectedTagTopics === 'question' && topic.source !== 'question') {\n                      return false;\n                    }\n                  }\n                  // Sadece kaldırılan konuları gösterme (tamamlanan konuları göster)\n                  const topicKey = `${topic.subject}-${topic.topic}`;\n                  return !removedTopics.has(topicKey);\n                })\n                .slice(0, 15)\n                .map((topic, index) => (\n                <div key={index} className={`bg-white/70 dark:bg-gray-900/70 rounded-xl p-4 border border-red-200/50 dark:border-red-700/50 hover:shadow-lg backdrop-blur-sm relative overflow-hidden group/card transition-all duration-200 ${\n                  celebratingTopics.has(`${topic.subject}-${topic.topic}`) ? 'animate-pulse bg-green-100/80 dark:bg-green-900/40 border-green-300 dark:border-green-600 scale-105' : 'hover:scale-105'\n                } ${\n                  completedTopics.has(`${topic.subject}-${topic.topic}`) && !celebratingTopics.has(`${topic.subject}-${topic.topic}`) ? 'opacity-0 scale-90 pointer-events-none' : 'opacity-100 scale-100'\n                }`}>\n                  <div className={`absolute inset-0 bg-gradient-to-br transition-opacity duration-300 ${\n                    celebratingTopics.has(`${topic.subject}-${topic.topic}`) \n                      ? 'bg-gradient-to-br from-green-200/60 to-emerald-200/40 dark:from-green-800/40 dark:to-emerald-800/30 opacity-100' \n                      : 'from-red-50/50 to-orange-50/30 dark:from-red-950/20 dark:to-orange-950/10 opacity-0 group-hover/card:opacity-100'\n                  }`}></div>\n                  <div className=\"relative\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <span className=\"text-base font-bold text-red-700 dark:text-red-300\">{topic.subject}</span>\n                      <div className=\"flex items-center gap-3\">\n                        <Checkbox\n                          checked={completedTopics.has(`${topic.subject}-${topic.topic}`)}\n                          onCheckedChange={(checked) => {\n                            const topicKey = `${topic.subject}-${topic.topic}`;\n                            if (checked) {\n                              // Eksik Olduğum Konular'dan tamamlananlar için completedTopicsFromMissing kullan\n                              const completedAt = new Date().toISOString();\n                              const saved = localStorage.getItem('completedTopicsFromMissing');\n                              const arr = saved ? JSON.parse(saved) : [];\n                              const existing = arr.find((item: any) => item.key === topicKey);\n                              \n                              // Tag belirle\n                              let tag = 'Soru';\n                              if (topic.source === 'exam') {\n                                tag = topic.exam_scope === 'branch' ? 'Branş Deneme' : 'Genel Deneme';\n                              }\n                              \n                              if (existing) {\n                                // Aynı key varsa frequency'i güncelle\n                                existing.frequency = topic.frequency;\n                                existing.completedAt = completedAt;\n                                existing.tag = tag;\n                              } else {\n                                // Yeni ekle\n                                arr.push({\n                                  key: topicKey,\n                                  completedAt,\n                                  subject: topic.subject,\n                                  topic: topic.topic,\n                                  tag,\n                                  frequency: topic.frequency\n                                });\n                              }\n                              localStorage.setItem('completedTopicsFromMissing', JSON.stringify(arr));\n                              window.dispatchEvent(new Event('localStorageUpdate'));\n                              \n                              setCompletedTopics(prev => new Set([...prev, topicKey]));\n                              setCelebratingTopics(prev => new Set([...prev, topicKey]));\n                              toast({ \n                                title: \"🎉 Tebrikler!\", \n                                description: `${topic.topic} konusunu tamamladınız!`,\n                                duration: 3000\n                              });\n\n                              // 1.5 saniye sonra kutunun animasyonunu kaldır ve 3 saniye sonra kutuyu kaldır\n                              setTimeout(() => {\n                                setCelebratingTopics(prev => {\n                                  const newSet = new Set(prev);\n                                  newSet.delete(topicKey);\n                                  return newSet;\n                                });\n                              }, 1500);\n                              \n                              // 1.5 saniye sonra kutuyu kaldır\n                              setTimeout(() => {\n                                setRemovedTopics(prev => new Set([...prev, topicKey]));\n                              }, 1500);\n                            } else {\n                              // Uncheck durumunda localStorage'dan kaldır\n                              const saved = localStorage.getItem('completedTopicsFromMissing');\n                              if (saved) {\n                                const arr = JSON.parse(saved);\n                                const filtered = arr.filter((item: any) => item.key !== topicKey);\n                                localStorage.setItem('completedTopicsFromMissing', JSON.stringify(filtered));\n                                window.dispatchEvent(new Event('localStorageUpdate'));\n                              }\n                              \n                              setCompletedTopics(prev => {\n                                const newSet = new Set(prev);\n                                newSet.delete(topicKey);\n                                return newSet;\n                              });\n                              setRemovedTopics(prev => {\n                                const newSet = new Set(prev);\n                                newSet.delete(topicKey);\n                                return newSet;\n                              });\n                            }\n                          }}\n                          className=\"data-[state=checked]:bg-green-500 data-[state=checked]:border-green-500\"\n                        />\n                      </div>\n                    </div>\n                    <div className=\"flex items-center gap-2 mb-4\">\n                      <p className=\"text-base text-gray-700 dark:text-gray-300 font-medium leading-relaxed flex-1\">{topic.topic}</p>\n                      {celebratingTopics.has(`${topic.subject}-${topic.topic}`) && (\n                        <div className=\"flex items-center gap-2 text-green-600 dark:text-green-400 animate-bounce\">\n                          <CheckCircle className=\"h-5 w-5\" />\n                          <span className=\"text-sm font-bold\">Tebrikler!</span>\n                        </div>\n                      )}\n                    </div>\n                    <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n                      <span className={`px-3 py-1.5 rounded-full font-medium shadow-sm ${\n                        topic.source === 'exam' \n                          ? topic.exam_scope === 'branch'\n                            ? 'bg-indigo-100 text-indigo-700 dark:bg-indigo-900/40 dark:text-indigo-300'\n                            : 'bg-blue-100 text-blue-700 dark:bg-blue-900/40 dark:text-blue-300'\n                          : 'bg-purple-100 text-purple-700 dark:bg-purple-900/40 dark:text-purple-300'\n                      }`}>\n                        {topic.source === 'exam' \n                          ? topic.exam_scope === 'branch' \n                            ? '📊 Branş Deneme' \n                            : '🎯 Genel Deneme'\n                          : '📝 Soru'}\n                      </span>\n                      <span className=\"text-xs font-medium\">{(() => {\n                        const lastSeenDate = new Date(topic.lastSeen);\n                        const today = new Date();\n                        const diffTime = today.getTime() - lastSeenDate.getTime();\n                        const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\n                        \n                        if (diffDays === 0) return 'Bugün';\n                        if (diffDays === 1) return 'Dün';\n                        if (diffDays < 7) return `${diffDays} gün önce`;\n                        if (diffDays < 30) return `${Math.floor(diffDays / 7)} hafta önce`;\n                        return new Date(topic.lastSeen).toLocaleDateString('tr-TR');\n                      })()}</span>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Geliştirilmiş Hata Sıklığı Analizi Bölümü - Daha Büyük ve Daha Modern */}\n      <Card className=\"bg-gradient-to-br from-orange-50/70 via-white to-red-50/60 dark:from-orange-950/40 dark:via-slate-800/60 dark:to-red-950/30 backdrop-blur-lg border-2 border-orange-200/40 dark:border-orange-800/40 shadow-2xl hover:shadow-3xl transition-all duration-700 group relative overflow-hidden\">\n        {/* Animasyonlu Arka Plan Elemanları - BERAT CANKIR - 03:03:03 */}\n        <div className=\"absolute top-0 right-0 w-56 h-56 bg-gradient-to-br from-orange-500/15 to-red-500/10 rounded-full blur-3xl\"></div>\n        <div className=\"absolute -bottom-16 -left-16 w-48 h-48 bg-gradient-to-tr from-red-500/15 to-orange-500/10 rounded-full blur-3xl\"></div>\n        <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-40 h-40 bg-gradient-to-br from-orange-400/5 to-red-400/5 rounded-full blur-2xl\"></div>\n        \n        <CardHeader className=\"bg-gradient-to-r from-orange-500/15 to-red-500/15 rounded-t-lg border-b border-orange-200/40 pb-8 relative\">\n          <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"p-4 bg-gradient-to-br from-orange-500 via-red-500 to-orange-600 rounded-2xl shadow-xl group-hover:shadow-2xl transition-all duration-500 group-hover:scale-110\">\n                <Brain className=\"h-8 w-8 text-white drop-shadow-lg\" />\n              </div>\n              <div>\n                <div className=\"flex items-center gap-3\">\n                  <CardTitle className=\"text-3xl font-bold bg-gradient-to-r from-orange-600 to-red-600 bg-clip-text text-transparent\">\n                    🔍 Hata Sıklığı Analizi\n                  </CardTitle>\n                  <Button\n                    onClick={() => setShowCompletedErrorsModal(true)}\n                    variant=\"outline\"\n                    className=\"border-2 border-green-600 text-green-600 hover:bg-green-50 dark:hover:bg-green-950 px-4 py-2 rounded-lg font-semibold shadow-md hover:shadow-lg transition-all duration-300\"\n                  >\n                    <CheckCircle className=\"mr-2 h-4 w-4\" />\n                    ✅ Tamamlanan Hatalı Sorular\n                  </Button>\n                </div>\n                <p className=\"text-sm text-orange-600/70 dark:text-orange-400/70 font-medium mt-2\">\n                  Yanlış yaptığınız sorulara bu alandan geri dönüp tamamlayabilirsiniz.\n                </p>\n              </div>\n            </div>\n            \n            {/* Filtreler ve Sıralama Butonları - BERAT CANKIR - 03:03:03 */}\n            <div className=\"flex flex-col items-end gap-2\">\n              <div className=\"flex gap-3\">\n                <select\n                  value={errorsSortBy}\n                  onChange={(e) => setErrorsSortBy(e.target.value)}\n                  className=\"px-4 py-3 bg-gradient-to-r from-purple-500 to-indigo-500 hover:from-purple-600 hover:to-indigo-600 text-white rounded-xl font-semibold shadow-lg hover:shadow-xl transition-all duration-300 cursor-pointer border-none outline-none\"\n                >\n                  <option value=\"all\" className=\"bg-purple-600 text-white\">Hepsi</option>\n                  <option value=\"mostFrequent\" className=\"bg-purple-600 text-white\">En Çok Kez Hata Yapılan</option>\n                  <option value=\"leastFrequent\" className=\"bg-purple-600 text-white\">En Az Kez Hata Yapılan</option>\n                  <option value=\"newest\" className=\"bg-purple-600 text-white\">Son Yapılan</option>\n                  <option value=\"oldest\" className=\"bg-purple-600 text-white\">İlk Yapılan</option>\n                  <option value=\"questionErrors\" className=\"bg-purple-600 text-white\">Soru Hataları</option>\n                  <option value=\"generalExamErrors\" className=\"bg-purple-600 text-white\">Genel Deneme Hataları</option>\n                  <option value=\"branchExamErrors\" className=\"bg-purple-600 text-white\">Branş Deneme Hataları</option>\n                  <option value=\"tyt\" className=\"bg-purple-600 text-white\">TYT</option>\n                  <option value=\"ayt\" className=\"bg-purple-600 text-white\">AYT</option>\n                  <option value=\"easy\" className=\"bg-purple-600 text-white\">Kolay</option>\n                  <option value=\"medium\" className=\"bg-purple-600 text-white\">Orta</option>\n                  <option value=\"hard\" className=\"bg-purple-600 text-white\">Zor</option>\n                </select>\n                <Button\n                  onClick={() => setShowErrorsFilterModal(true)}\n                  className=\"flex items-center gap-2 px-6 py-3 bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 text-white rounded-xl font-semibold shadow-lg hover:shadow-xl transition-all duration-300\"\n                >\n                  <Filter className=\"h-5 w-5\" />\n                  Filtreler\n                  {[errorsFilterEnabled.tag, errorsFilterEnabled.subject, errorsFilterEnabled.date].filter(Boolean).length > 0 && (\n                    <span className=\"ml-1 px-2 py-0.5 bg-white/30 rounded-full text-xs font-bold\">\n                      {[errorsFilterEnabled.tag, errorsFilterEnabled.subject, errorsFilterEnabled.date].filter(Boolean).length}\n                    </span>\n                  )}\n                </Button>\n              </div>\n              {[errorsFilterEnabled.tag, errorsFilterEnabled.subject, errorsFilterEnabled.date].filter(Boolean).length > 0 && (\n                <div className=\"text-xs text-orange-600 dark:text-orange-400 font-semibold flex flex-wrap gap-1 max-w-xs justify-end\">\n                  {errorsFilterEnabled.tag && errorsFilterValues.tags.length > 0 && (\n                    <span className=\"px-2 py-0.5 bg-orange-100 dark:bg-orange-900/40 rounded-full\">\n                      🏷️ {errorsFilterValues.tags.length} etiket\n                    </span>\n                  )}\n                  {errorsFilterEnabled.subject && errorsFilterValues.subjects.length > 0 && (\n                    <span className=\"px-2 py-0.5 bg-blue-100 dark:bg-blue-900/40 rounded-full\">\n                      📚 {errorsFilterValues.subjects.length} ders\n                    </span>\n                  )}\n                  {errorsFilterEnabled.date && (errorsFilterValues.dateFrom || errorsFilterValues.dateTo) && (\n                    <span className=\"px-2 py-0.5 bg-purple-100 dark:bg-purple-900/40 rounded-full\">\n                      📅 Tarih\n                    </span>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent className=\"pt-8 pb-8 relative min-h-[400px]\">\n          {(() => {\n            // konu bazında tüm yanlış verilerini topla\n            let allWrongTopicData: Array<{\n              topic: string;\n              source: 'question' | 'exam';\n              subject: string;\n              exam_type: string;\n              exam_scope?: 'full' | 'branch';\n              wrong_count: number;\n              study_date: string;\n              difficulty?: 'kolay' | 'orta' | 'zor';\n              category?: 'kavram' | 'hesaplama' | 'analiz' | 'dikkatsizlik';\n              createdAt?: string;\n            }> = [];\n\n            // Soru günlüklerini işle - SORU GÜNLÜĞÜ VERİLERİ\n            errorsFilteredQuestions.forEach(log => {\n              // Subject'i normalize et - exam_type'a göre - TYT/AYT ibaresi her ders için\n              const examType = log.exam_type || 'TYT';\n              const subjectLower = log.subject.toLowerCase();\n              \n              let normalizedSubject = '';\n              if (subjectLower === 'turkce' || log.subject === 'Türkçe') {\n                normalizedSubject = `${examType} Türkçe`;\n              } else if (subjectLower === 'sosyal' || log.subject === 'Sosyal' || log.subject === 'Sosyal Bilimler') {\n                normalizedSubject = `${examType} Sosyal Bilimler`;\n              } else if (subjectLower === 'fen' || log.subject === 'Fen' || log.subject === 'Fen Bilimleri') {\n                normalizedSubject = `${examType} Fen Bilimleri`;\n              } else if (subjectLower === 'matematik' || log.subject === 'Matematik') {\n                normalizedSubject = `${examType} Matematik`;\n              } else if (subjectLower === 'geometri' || log.subject === 'Geometri') {\n                normalizedSubject = `${examType} Geometri`;\n              } else if (subjectLower === 'fizik' || log.subject === 'Fizik') {\n                normalizedSubject = `${examType} Fizik`;\n              } else if (subjectLower === 'kimya' || log.subject === 'Kimya') {\n                normalizedSubject = `${examType} Kimya`;\n              } else if (subjectLower === 'biyoloji' || log.subject === 'Biyoloji') {\n                normalizedSubject = `${examType} Biyoloji`;\n              } else {\n                normalizedSubject = `${examType} ${log.subject}`;\n              }\n              \n              // Öncelikle wrong_topics_json'dan yapılandırılmış verileri ayrıştırmayı deneyin\n              let structuredTopics: Array<{\n                topic: string;\n                difficulty: 'kolay' | 'orta' | 'zor';\n                category: 'kavram' | 'hesaplama' | 'analiz' | 'dikkatsizlik';\n              }> = [];\n              \n              try {\n                if (log.wrong_topics_json && log.wrong_topics_json.trim() !== '' && log.wrong_topics_json !== 'null' && log.wrong_topics_json !== '[]') {\n                  structuredTopics = JSON.parse(log.wrong_topics_json);\n                }\n              } catch (e) {\n                console.error('Error parsing wrong_topics_json:', e);\n              }\n\n              // Yapılandırılmış konular mevcutsa ekleyin\n              if (structuredTopics.length > 0) {\n                structuredTopics.forEach(topicItem => {\n                  allWrongTopicData.push({\n                    topic: normalizeTopic(topicItem.topic),\n                    source: 'question',\n                    subject: normalizedSubject,\n                    exam_type: log.exam_type,\n                    wrong_count: parseInt(log.wrong_count) || 0,\n                    study_date: log.study_date,\n                    difficulty: topicItem.difficulty,\n                    category: topicItem.category,\n                    createdAt: log.createdAt instanceof Date ? log.createdAt.toISOString() : log.createdAt\n                  });\n                });\n              } else if (log.wrong_topics && log.wrong_topics.length > 0) {\n                // Fall back to simple wrong_topics array\n                log.wrong_topics.forEach(topic => {\n                  let topicName = '';\n                  if (typeof topic === 'string') {\n                    topicName = topic;\n                  } else if (topic && typeof topic === 'object') {\n                    topicName = (topic as any)?.topic || (topic as any)?.name || '';\n                  }\n                  \n                  if (topicName && topicName.trim()) {\n                    allWrongTopicData.push({\n                      topic: normalizeTopic(topicName),\n                      source: 'question',\n                      subject: normalizedSubject,\n                      exam_type: log.exam_type,\n                      wrong_count: parseInt(log.wrong_count) || 0,\n                      study_date: log.study_date,\n                      createdAt: log.createdAt instanceof Date ? log.createdAt.toISOString() : log.createdAt,\n                      difficulty: 'orta',\n                      category: 'kavram'\n                    });\n                  }\n                });\n              }\n            });\n\n            // examSubjectNets'ten de yanlış konuları işle - DENEME VERİLERİ\n            examSubjectNets.forEach((subjectNet: any) => {\n              if (subjectNet.wrong_topics_json && subjectNet.wrong_topics_json.trim() !== '' && subjectNet.wrong_topics_json !== 'null' && subjectNet.wrong_topics_json !== '[]') {\n                try {\n                  const wrongTopics = JSON.parse(subjectNet.wrong_topics_json);\n                  if (Array.isArray(wrongTopics)) {\n                    const exam = errorsFilteredExams.find((e: any) => e.id === subjectNet.exam_id);\n                    if (!exam) return; // Tarih filtresi aktifse ve eşleşme yoksa atla\n                    \n                    // Subject'i normalize et - exam_type'a göre - TYT/AYT ibaresi her ders için\n                    // ÖNEMLİ: subjectNet.exam_type kullan (exam.exam_type DEĞİL) - AYT Fizik/Kimya/Biyoloji hatası düzeltildi\n                    const examType = subjectNet.exam_type || exam.exam_type || 'TYT';\n                    const subjectLower = subjectNet.subject.toLowerCase();\n                    \n                    let normalizedSubject = '';\n                    if (subjectLower === 'turkce' || subjectNet.subject === 'Türkçe') {\n                      normalizedSubject = `${examType} Türkçe`;\n                    } else if (subjectLower === 'sosyal' || subjectNet.subject === 'Sosyal' || subjectNet.subject === 'Sosyal Bilimler') {\n                      normalizedSubject = `${examType} Sosyal Bilimler`;\n                    } else if (subjectLower === 'fen' || subjectNet.subject === 'Fen' || subjectNet.subject === 'Fen Bilimleri') {\n                      normalizedSubject = `${examType} Fen Bilimleri`;\n                    } else if (subjectLower === 'matematik' || subjectNet.subject === 'Matematik') {\n                      normalizedSubject = `${examType} Matematik`;\n                    } else if (subjectLower === 'geometri' || subjectNet.subject === 'Geometri') {\n                      normalizedSubject = `${examType} Geometri`;\n                    } else if (subjectLower === 'fizik' || subjectNet.subject === 'Fizik') {\n                      normalizedSubject = `${examType} Fizik`;\n                    } else if (subjectLower === 'kimya' || subjectNet.subject === 'Kimya') {\n                      normalizedSubject = `${examType} Kimya`;\n                    } else if (subjectLower === 'biyoloji' || subjectNet.subject === 'Biyoloji') {\n                      normalizedSubject = `${examType} Biyoloji`;\n                    } else {\n                      normalizedSubject = `${examType} ${subjectNet.subject}`;\n                    }\n                    \n                    // Ders filtresi aktifse ve bu ders seçili değilse atla\n                    if (errorsFilterEnabled.subject && errorsFilterValues.subjects.length > 0) {\n                      if (!errorsFilterValues.subjects.includes(normalizedSubject)) return;\n                    }\n                    \n                    const examDate = exam.exam_date;\n                    const examScope = exam.exam_scope;\n                    const examCreatedAt = exam.createdAt;\n                    \n                    wrongTopics.forEach((topicItem: any) => {\n                      const topicName = typeof topicItem === 'string' ? topicItem : topicItem.topic;\n                      if (topicName) {\n                        allWrongTopicData.push({\n                          topic: normalizeTopic(topicName),\n                          source: 'exam',\n                          subject: normalizedSubject,\n                          exam_type: subjectNet.exam_type,\n                          exam_scope: examScope as 'full' | 'branch',\n                          wrong_count: parseInt(subjectNet.wrong_count) || 0,\n                          study_date: examDate,\n                          createdAt: examCreatedAt instanceof Date ? examCreatedAt.toISOString() : examCreatedAt\n                        });\n                      }\n                    });\n                  }\n                } catch (e) {\n                  console.error('Error parsing wrong_topics_json from examSubjectNets:', e);\n                }\n              }\n            });\n\n            // Konu bazında gruplandır ve verileri topla\n            const topicAggregated = allWrongTopicData.reduce((acc, item) => {\n              const key = `${item.subject}-${item.topic}`;\n              if (acc[key]) {\n                acc[key].frequency += 1;\n                acc[key].totalWrong += item.wrong_count;\n                if (!acc[key].sources.includes(item.source)) {\n                  acc[key].sources.push(item.source);\n                }\n                if (item.study_date > acc[key].lastSeen) {\n                  acc[key].lastSeen = item.study_date;\n                  acc[key].difficulty = item.difficulty;\n                  acc[key].category = item.category;\n                  acc[key].exam_scope = item.exam_scope;\n                }\n                // İlk ekleme zamanını koru (en eski createdAt)\n                if (item.createdAt && (!acc[key].createdAt || new Date(item.createdAt) < new Date(acc[key].createdAt))) {\n                  acc[key].createdAt = item.createdAt;\n                }\n              } else {\n                acc[key] = {\n                  topic: item.topic,\n                  subject: item.subject,\n                  exam_type: item.exam_type,\n                  exam_scope: item.exam_scope,\n                  frequency: 1,\n                  totalWrong: item.wrong_count,\n                  lastSeen: item.study_date,\n                  createdAt: item.createdAt,\n                  difficulty: item.difficulty,\n                  category: item.category,\n                  sources: [item.source]\n                };\n              }\n              return acc;\n            }, {} as {[key: string]: any});\n\n            // Sıralama mantığı - BERAT CANKIR - 03:03:03\n            let wrongTopicAnalysisData = Object.values(topicAggregated);\n            \n            // errorsSortBy değerine göre sırala\n            switch (errorsSortBy) {\n              case 'all':\n                // Hepsi - herhangi bir sıralama veya filtreleme yapma\n                break;\n              case 'mostFrequent':\n                wrongTopicAnalysisData.sort((a: any, b: any) => b.frequency - a.frequency);\n                break;\n              case 'leastFrequent':\n                wrongTopicAnalysisData.sort((a: any, b: any) => a.frequency - b.frequency);\n                break;\n              case 'newest':\n                wrongTopicAnalysisData.sort((a: any, b: any) => new Date(b.lastSeen).getTime() - new Date(a.lastSeen).getTime());\n                break;\n              case 'oldest':\n                wrongTopicAnalysisData.sort((a: any, b: any) => new Date(a.lastSeen).getTime() - new Date(b.lastSeen).getTime());\n                break;\n              case 'questionErrors':\n                wrongTopicAnalysisData = wrongTopicAnalysisData.filter((item: any) => item.sources.includes('question'));\n                break;\n              case 'generalExamErrors':\n                wrongTopicAnalysisData = wrongTopicAnalysisData.filter((item: any) => item.sources.includes('exam') && item.exam_scope === 'full');\n                break;\n              case 'branchExamErrors':\n                wrongTopicAnalysisData = wrongTopicAnalysisData.filter((item: any) => item.sources.includes('exam') && item.exam_scope === 'branch');\n                break;\n              case 'tyt':\n                wrongTopicAnalysisData = wrongTopicAnalysisData.filter((item: any) => item.exam_type === 'TYT');\n                break;\n              case 'ayt':\n                wrongTopicAnalysisData = wrongTopicAnalysisData.filter((item: any) => item.exam_type === 'AYT');\n                break;\n              case 'easy':\n                wrongTopicAnalysisData = wrongTopicAnalysisData.filter((item: any) => item.difficulty === 'kolay');\n                break;\n              case 'medium':\n                wrongTopicAnalysisData = wrongTopicAnalysisData.filter((item: any) => item.difficulty === 'orta');\n                break;\n              case 'hard':\n                wrongTopicAnalysisData = wrongTopicAnalysisData.filter((item: any) => item.difficulty === 'zor');\n                break;\n              default:\n                wrongTopicAnalysisData.sort((a: any, b: any) => b.frequency - a.frequency);\n            }\n            \n            if (isLoading) {\n              return (\n                <div className=\"text-center py-16\">\n                  <div className=\"inline-flex items-center justify-center w-20 h-20 bg-gradient-to-br from-orange-100 to-red-100 dark:from-orange-900/30 dark:to-red-900/30 rounded-full mb-6 shadow-lg\">\n                    <div className=\"animate-spin w-10 h-10 border-4 border-orange-200 border-t-orange-500 rounded-full\"></div>\n                  </div>\n                  <h4 className=\"text-xl font-semibold text-orange-700 dark:text-orange-300 mb-3\">Hata sıklığı analiz ediliyor...</h4>\n                  <div className=\"flex justify-center space-x-1\">\n                    <div className=\"w-3 h-3 rounded-full bg-orange-500 animate-bounce\"></div>\n                    <div className=\"w-3 h-3 rounded-full bg-red-500 animate-bounce delay-100\"></div>\n                    <div className=\"w-3 h-3 rounded-full bg-orange-600 animate-bounce delay-200\"></div>\n                  </div>\n                </div>\n              );\n            }\n            \n            if (wrongTopicAnalysisData.length === 0) {\n              return (\n                <div className=\"text-center py-16 text-muted-foreground\">\n                  <div className=\"w-24 h-24 rounded-full bg-gradient-to-br from-blue-100 to-cyan-100 dark:from-blue-900/30 dark:to-cyan-900/30 flex items-center justify-center mx-auto mb-6 shadow-lg\">\n                    <Brain className=\"h-12 w-12 text-blue-500\" />\n                  </div>\n                  <h4 className=\"text-2xl font-semibold text-blue-700 dark:text-blue-300 mb-3\">Henüz hata analizi verisi yok</h4>\n                  <p className=\"text-base opacity-75\">Soru veya deneme ekleyip yanlış konuları girdikçe hata sıklığınız burada görünecek</p>\n                </div>\n              );\n            }\n            \n            return (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {wrongTopicAnalysisData\n                  .filter((item: any) => {\n                    // Ders filtresi\n                    if (selectedSubjectErrors !== 'all' && item.subject !== selectedSubjectErrors) {\n                      return false;\n                    }\n                    // Etiket/kaynak filtresi\n                    if (selectedTagErrors !== 'all') {\n                      if (selectedTagErrors === 'exam' && (!item.sources || !item.sources.includes('exam'))) {\n                        return false;\n                      }\n                      if (selectedTagErrors === 'question' && (!item.sources || !item.sources.includes('question'))) {\n                        return false;\n                      }\n                    }\n                    // Kaldırılan ve tamamlanan konuları gösterme\n                    const errorTopicKey = `${item.exam_type}-${item.subject}-${item.topic}`;\n                    const isCompleted = item.sources && item.sources.includes('exam') \n                      ? completedExamErrors.has(errorTopicKey)\n                      : completedQuestionErrors.has(errorTopicKey);\n                    return !removedErrorTopics.has(errorTopicKey) && !isCompleted;\n                  })\n                  .slice(0, 15)\n                  .map((item: any, index) => {\n                  const errorTopicKey = `${item.exam_type}-${item.subject}-${item.topic}`;\n                  return (\n                  <div key={index} className={`bg-white/70 dark:bg-gray-900/70 rounded-xl p-4 border border-orange-200/50 dark:border-orange-700/50 hover:shadow-lg backdrop-blur-sm relative overflow-hidden group/card transition-all duration-200 ${\n                    celebratingErrorTopics.has(errorTopicKey) ? 'animate-pulse bg-green-100/80 dark:bg-green-900/40 border-green-300 dark:border-green-600 scale-105' : 'hover:scale-105'\n                  } ${\n                    ((item.sources && item.sources.includes('exam') ? completedExamErrors : completedQuestionErrors).has(errorTopicKey) && !celebratingErrorTopics.has(errorTopicKey)) ? 'opacity-0 scale-90 pointer-events-none' : 'opacity-100 scale-100'\n                  }`}>\n                    <div className=\"absolute inset-0 bg-gradient-to-br from-orange-50/50 to-red-50/30 dark:from-orange-950/20 dark:to-red-950/10 opacity-0 group-hover/card:opacity-100 transition-opacity duration-300\"></div>\n                    <div className=\"relative\">\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className={`w-4 h-4 rounded-full shadow-md ${\n                            item.exam_type === 'TYT' ? 'bg-blue-500' : 'bg-purple-500'\n                          }`}></div>\n                          <span className=\"text-base font-bold text-orange-700 dark:text-orange-300\">\n                            {item.subject.startsWith('TYT ') || item.subject.startsWith('AYT ') \n                              ? item.subject \n                              : `${item.exam_type} ${capitalizeSubjectName(item.subject)}`}\n                          </span>\n                        </div>\n                        <div className=\"flex items-center gap-4\">\n                          <Checkbox\n                            checked={\n                              (item.sources && item.sources.includes('exam') && completedExamErrors.has(errorTopicKey)) ||\n                              (item.sources && item.sources.includes('question') && completedQuestionErrors.has(errorTopicKey))\n                            }\n                            onCheckedChange={(checked) => {\n                              const hasExamError = item.sources && item.sources.includes('exam');\n                              const hasQuestionError = item.sources && item.sources.includes('question');\n                              if (checked) {\n                                const completedAt = new Date().toISOString();\n                                \n                                // Eğer deneme hatası varsa, deneme hatası olarak kaydet\n                                if (hasExamError) {\n                                  // Sınav hatası - exam_scope'a göre localStorage'a kaydet\n                                  if (item.exam_scope === 'branch') {\n                                    const saved = localStorage.getItem('completedBranchExamErrors');\n                                    const arr = saved ? JSON.parse(saved) : [];\n                                    const existing = arr.find((entry: any) => entry.key === errorTopicKey);\n                                    \n                                    if (existing) {\n                                      // Aynı key varsa frequency'i artır\n                                      existing.frequency = (existing.frequency || 1) + item.frequency;\n                                      existing.completedAt = completedAt;\n                                    } else {\n                                      // Yeni ekle - subject'i normalize et\n                                      const normalizedSubject = item.subject.replace(/^(TYT|AYT)\\s+/, '');\n                                      arr.push({\n                                        key: errorTopicKey,\n                                        completedAt,\n                                        subject: normalizedSubject,\n                                        topic: item.topic,\n                                        tag: 'Branş Denemesi',\n                                        frequency: item.frequency,\n                                        exam_type: item.exam_type,\n                                        difficulty: item.difficulty,\n                                        category: item.category\n                                      });\n                                    }\n                                    localStorage.setItem('completedBranchExamErrors', JSON.stringify(arr));\n                                    window.dispatchEvent(new Event('localStorageUpdate'));\n                                  } else {\n                                    const saved = localStorage.getItem('completedGeneralExamErrors');\n                                    const arr = saved ? JSON.parse(saved) : [];\n                                    const existing = arr.find((entry: any) => entry.key === errorTopicKey);\n                                    \n                                    if (existing) {\n                                      // Aynı key varsa frequency'i artır\n                                      existing.frequency = (existing.frequency || 1) + item.frequency;\n                                      existing.completedAt = completedAt;\n                                    } else {\n                                      // Yeni ekle - subject'i normalize et\n                                      const normalizedSubject = item.subject.replace(/^(TYT|AYT)\\s+/, '');\n                                      arr.push({\n                                        key: errorTopicKey,\n                                        completedAt,\n                                        subject: normalizedSubject,\n                                        topic: item.topic,\n                                        tag: 'Genel Deneme',\n                                        frequency: item.frequency,\n                                        exam_type: item.exam_type,\n                                        difficulty: item.difficulty,\n                                        category: item.category\n                                      });\n                                    }\n                                    localStorage.setItem('completedGeneralExamErrors', JSON.stringify(arr));\n                                    window.dispatchEvent(new Event('localStorageUpdate'));\n                                  }\n                                  \n                                  setCompletedExamErrors(prev => {\n                                    const newMap = new Map(prev);\n                                    newMap.set(errorTopicKey, completedAt);\n                                    return newMap;\n                                  });\n                                  \n                                  // Tamamlanan Hatalı Sorular Geçmişi modalını refresh et\n                                  setCompletedErrorsRefreshKey(prev => prev + 1);\n                                }\n                                \n                                // Eğer soru hatası varsa, soru hatası olarak da kaydet (exam ile birlikte olsa bile)\n                                if (hasQuestionError) {\n                                  const saved = localStorage.getItem('completedQuestionErrors');\n                                  const arr = saved ? JSON.parse(saved) : [];\n                                  const existing = arr.find((entry: any) => entry.key === errorTopicKey);\n                                  \n                                  if (existing) {\n                                    // Aynı key varsa frequency'i artır\n                                    existing.frequency = (existing.frequency || 1) + item.frequency;\n                                    existing.completedAt = completedAt;\n                                  } else {\n                                    // Yeni ekle - subject'i normalize et\n                                    const normalizedSubject = item.subject.replace(/^(TYT|AYT)\\s+/, '');\n                                    arr.push({\n                                      key: errorTopicKey,\n                                      completedAt,\n                                      subject: normalizedSubject,\n                                      topic: item.topic,\n                                      tag: 'Soru',\n                                      frequency: item.frequency,\n                                      exam_type: item.exam_type,\n                                      difficulty: item.difficulty,\n                                      category: item.category\n                                    });\n                                  }\n                                  localStorage.setItem('completedQuestionErrors', JSON.stringify(arr));\n                                  window.dispatchEvent(new Event('localStorageUpdate'));\n                                  \n                                  setCompletedQuestionErrors(prev => {\n                                    const newMap = new Map(prev);\n                                    newMap.set(errorTopicKey, completedAt);\n                                    return newMap;\n                                  });\n                                  \n                                  // Tamamlanan Hatalı Sorular Geçmişi modalını refresh et\n                                  setCompletedErrorsRefreshKey(prev => prev + 1);\n                                }\n                                \n                                setCelebratingErrorTopics(prev => new Set([...prev, errorTopicKey]));\n                                toast({ \n                                  title: \"🎉 Tebrikler!\", \n                                  description: `${item.topic} konusundaki hatanızı çözdünüz!`,\n                                  duration: 3000\n                                });\n\n                                setTimeout(() => {\n                                  setCelebratingErrorTopics(prev => {\n                                    const newSet = new Set(prev);\n                                    newSet.delete(errorTopicKey);\n                                    return newSet;\n                                  });\n                                }, 1500);\n                                \n                                setTimeout(() => {\n                                  setRemovedErrorTopics(prev => new Set([...prev, errorTopicKey]));\n                                }, 1500);\n                              } else {\n                                // Checkbox işareti kaldırılıyor - tüm kayıtları temizle\n                                if (hasExamError) {\n                                  // localStorage'dan kaldır\n                                  if (item.exam_scope === 'branch') {\n                                    const saved = localStorage.getItem('completedBranchExamErrors');\n                                    if (saved) {\n                                      const arr = JSON.parse(saved);\n                                      const filtered = arr.filter((entry: any) => entry.key !== errorTopicKey);\n                                      localStorage.setItem('completedBranchExamErrors', JSON.stringify(filtered));\n                                      window.dispatchEvent(new Event('localStorageUpdate'));\n                                    }\n                                  } else {\n                                    const saved = localStorage.getItem('completedGeneralExamErrors');\n                                    if (saved) {\n                                      const arr = JSON.parse(saved);\n                                      const filtered = arr.filter((entry: any) => entry.key !== errorTopicKey);\n                                      localStorage.setItem('completedGeneralExamErrors', JSON.stringify(filtered));\n                                      window.dispatchEvent(new Event('localStorageUpdate'));\n                                    }\n                                  }\n                                  \n                                  setCompletedExamErrors(prev => {\n                                    const newMap = new Map(prev);\n                                    newMap.delete(errorTopicKey);\n                                    return newMap;\n                                  });\n                                }\n                                \n                                if (hasQuestionError) {\n                                  const saved = localStorage.getItem('completedQuestionErrors');\n                                  if (saved) {\n                                    const arr = JSON.parse(saved);\n                                    const filtered = arr.filter((entry: any) => entry.key !== errorTopicKey);\n                                    localStorage.setItem('completedQuestionErrors', JSON.stringify(filtered));\n                                    window.dispatchEvent(new Event('localStorageUpdate'));\n                                  }\n                                  \n                                  setCompletedQuestionErrors(prev => {\n                                    const newMap = new Map(prev);\n                                    newMap.delete(errorTopicKey);\n                                    return newMap;\n                                  });\n                                }\n                                \n                                setRemovedErrorTopics(prev => {\n                                  const newSet = new Set(prev);\n                                  newSet.delete(errorTopicKey);\n                                  return newSet;\n                                });\n                              }\n                            }}\n                            className=\"data-[state=checked]:bg-green-500 data-[state=checked]:border-green-500\"\n                          />\n                          <div className=\"text-sm text-orange-600 dark:text-orange-400 bg-gradient-to-r from-orange-100 to-red-100 dark:from-orange-900/40 dark:to-red-900/40 px-3 py-1.5 rounded-full font-semibold shadow-md ml-auto\">\n                            {item.frequency} Kez\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"space-y-3 mb-4\">\n                        <div className=\"text-sm bg-white/50 dark:bg-gray-800/50 p-3 rounded-xl\">\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"font-semibold text-gray-700 dark:text-gray-300 mb-2 flex-1\">{item.topic}</div>\n                            {celebratingErrorTopics.has(errorTopicKey) && (\n                              <div className=\"flex items-center gap-2 text-green-600 dark:text-green-400 animate-bounce\">\n                                <CheckCircle className=\"h-5 w-5\" />\n                                <span className=\"text-sm font-bold\">Tebrikler!</span>\n                              </div>\n                            )}\n                          </div>\n                          <div className=\"flex gap-2 flex-wrap\">\n                            {item.difficulty && (\n                              <span className={`text-xs px-2 py-1 rounded-full font-medium ${\n                                item.difficulty === 'kolay' ? 'bg-green-100 text-green-700 dark:bg-green-900/40 dark:text-green-300' :\n                                item.difficulty === 'orta' ? 'bg-orange-100 text-orange-700 dark:bg-orange-900/40 dark:text-orange-300' :\n                                'bg-red-100 text-red-700 dark:bg-red-900/40 dark:text-red-300'\n                              }`}>\n                                📊 {item.difficulty.charAt(0).toUpperCase() + item.difficulty.slice(1)}\n                              </span>\n                            )}\n                            {item.category && (\n                              <span className=\"text-xs px-2 py-1 rounded-full bg-blue-100 text-blue-700 dark:bg-blue-900/40 dark:text-blue-300 font-medium\">\n                                🔍 {item.category === 'kavram' ? 'Kavram Eksikliği' :\n                                    item.category === 'hesaplama' ? 'Hesaplama Hatası' :\n                                    item.category === 'analiz' ? 'Analiz Sorunu' : 'Dikkatsizlik'}\n                              </span>\n                            )}\n                            <span className={`text-xs px-2 py-1 rounded-full font-medium ${\n                              item.sources && item.sources.includes('exam') \n                                ? item.exam_scope === 'branch'\n                                  ? 'bg-indigo-100 text-indigo-700 dark:bg-indigo-900/40 dark:text-indigo-300'\n                                  : 'bg-blue-100 text-blue-700 dark:bg-blue-900/40 dark:text-blue-300'\n                                : 'bg-purple-100 text-purple-700 dark:bg-purple-900/40 dark:text-purple-300'\n                            }`}>\n                              {item.sources && item.sources.includes('exam') \n                                ? item.exam_scope === 'branch'\n                                  ? '📊 Branş Deneme'\n                                  : '🎯 Genel Deneme'\n                                : '📝 Soru'} Hatası\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between text-sm text-muted-foreground pt-3 border-t border-orange-200/40 dark:border-orange-700/40\">\n                        <div className=\"flex items-center gap-2\">\n                          <Calendar className=\"h-4 w-4\" />\n                          <span className=\"font-medium\">{new Date(item.createdAt || item.lastSeen).toLocaleDateString('tr-TR').replace(/\\//g, '.')}</span>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <span className=\"font-medium\">{new Date(item.createdAt || item.lastSeen).toLocaleTimeString('tr-TR', { hour: '2-digit', minute: '2-digit' })}</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  );\n                })}\n              </div>\n            );\n          })()}\n        </CardContent>\n      </Card>\n\n      {/* Analiz Bölümü */}\n      <Card className=\"bg-gradient-to-br from-indigo-50/50 via-card to-purple-50/50 dark:from-indigo-950/30 dark:via-card dark:to-purple-950/30 backdrop-blur-sm border-2 border-indigo-200/30 dark:border-indigo-800/30 shadow-2xl\">\n        <CardHeader className=\"bg-gradient-to-r from-indigo-500/10 to-purple-500/10 rounded-t-lg border-b border-indigo-200/30 pb-3\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"text-xl font-bold bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent flex items-center gap-2\">\n                <BarChart3 className=\"h-6 w-6 text-indigo-500\" />\n                📊 Deneme Analiz Sistemi\n              </CardTitle>\n              <p className=\"text-sm text-indigo-600/70 dark:text-indigo-400/70 font-medium\">\n                {analysisMode === 'general' ? 'TYT/AYT net gelişimi, hedef karşılaştırması ve ders bazında analiz' : 'Branş bazında deneme performans analizi'}\n              </p>\n            </div>\n\n            {/* Analiz Modu Değiştirme */}\n            <div className=\"flex bg-indigo-100/50 dark:bg-indigo-900/30 rounded-xl p-1 border border-indigo-200/50 dark:border-indigo-700/50\">\n              <Button\n                variant={analysisMode === 'general' ? 'default' : 'ghost'}\n                size=\"sm\"\n                onClick={() => setAnalysisMode('general')}\n                className={`px-4 py-2 rounded-lg transition-all duration-300 whitespace-nowrap ${\n                  analysisMode === 'general' \n                    ? 'bg-gradient-to-r from-indigo-500 to-purple-500 text-white shadow-lg' \n                    : 'text-indigo-600 dark:text-indigo-400 hover:bg-indigo-200/50 dark:hover:bg-indigo-800/50'\n                }`}\n                data-testid=\"button-analysis-general\"\n              >\n                <TrendingUp className=\"h-4 w-4 mr-2\" />\n                📊 Genel Deneme Analiz\n              </Button>\n              <Button\n                variant={analysisMode === 'branch' ? 'default' : 'ghost'}\n                size=\"sm\"\n                onClick={() => setAnalysisMode('branch')}\n                className={`px-4 py-2 rounded-lg transition-all duration-300 whitespace-nowrap ${\n                  analysisMode === 'branch' \n                    ? 'bg-gradient-to-r from-indigo-500 to-purple-500 text-white shadow-lg' \n                    : 'text-indigo-600 dark:text-indigo-400 hover:bg-indigo-200/50 dark:hover:bg-indigo-800/50'\n                }`}\n                data-testid=\"button-analysis-branch\"\n              >\n                <Book className=\"h-4 w-4 mr-2\" />\n                📚 Branş Deneme Analiz\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent className=\"pt-6\">\n          {analysisMode === 'general' ? (\n            // Genel Deneme Analizi (TYT/AYT Net + Ders Analizi)\n            netAnalysisData.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <div className=\"w-16 h-16 rounded-full bg-gradient-to-br from-blue-100 to-indigo-100 dark:from-blue-900/30 dark:to-indigo-900/30 flex items-center justify-center mx-auto mb-4 shadow-lg\">\n                  <TrendingUp className=\"h-8 w-8 text-blue-500\" />\n                </div>\n                <h4 className=\"text-base font-semibold text-blue-700 dark:text-blue-300\">Henüz bir deneme verisi girilmedi.</h4>\n              </div>\n            ) : (\n              <div className=\"space-y-6\">\n                {/* Filtre Butonu - Sadece Veri Varsa */}\n                <div className=\"flex justify-end\">\n                  <div className=\"flex items-center gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => {\n                        const newFilterState = !useDateFilter;\n                        setUseDateFilter(newFilterState);\n                        if (!newFilterState) {\n                          setSelectedDate(null);\n                        } else {\n                          setSelectedDate(new Date().toISOString().split('T')[0]);\n                        }\n                      }}\n                      className=\"flex items-center gap-2 px-4 py-2 bg-gradient-to-r from-cyan-100/50 to-blue-100/50 dark:from-cyan-900/30 dark:to-blue-900/30 rounded-xl border border-cyan-200/50 dark:border-cyan-700/50 text-sm font-medium text-cyan-700 dark:text-cyan-300 hover:bg-cyan-100 dark:hover:bg-cyan-900/40 transition-all duration-200\"\n                      data-testid=\"button-toggle-date-filter\"\n                    >\n                      <span className=\"whitespace-nowrap\">📅 Filtrele</span>\n                      <ChevronDown className={`h-4 w-4 transition-transform duration-200 ${useDateFilter ? 'rotate-180' : ''}`} />\n                    </Button>\n                    {useDateFilter && (\n                      <input\n                        type=\"date\"\n                        value={selectedDate || new Date().toISOString().split('T')[0]}\n                        onChange={(e) => setSelectedDate(e.target.value)}\n                        className=\"px-3 py-2 border border-border rounded-md bg-background text-foreground\"\n                        data-testid=\"input-date-filter\"\n                      />\n                    )}\n                  </div>\n                </div>\n                {/* Hedefler ve Mevcut Network Ekranı */}\n                <div className=\"grid grid-cols-2 gap-4 mb-6\">\n                  <div className=\"bg-blue-50/80 dark:bg-blue-950/30 rounded-xl p-4 text-center border border-blue-200/50 dark:border-blue-800/40 transition-all\">\n                    <div className=\"text-lg font-bold text-blue-700 dark:text-blue-300 mb-1 flex items-center justify-center gap-2\">\n                      TYT Hedef: \n                      {isEditingTytTarget ? (\n                        <input\n                          type=\"number\"\n                          value={tytTargetNet}\n                          onChange={(e) => setTytTargetNet(parseInt(e.target.value) || 90)}\n                          onBlur={() => setIsEditingTytTarget(false)}\n                          className=\"w-16 px-2 py-1 text-center bg-white dark:bg-gray-800 border border-blue-300 dark:border-blue-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                          autoFocus\n                        />\n                      ) : (\n                        <span \n                          className=\"cursor-pointer hover:bg-blue-200/50 dark:hover:bg-blue-800/50 px-2 py-1 rounded-lg transition-colors\"\n                          onMouseEnter={() => setIsEditingTytTarget(true)}\n                        >\n                          {tytTargetNet}\n                        </span>\n                      )}\n                    </div>\n                    <div className=\"text-sm text-blue-600 dark:text-blue-400\">\n                      TYT DENEME: {(() => {\n                        // En son TYT sınavını bul (tytNet > 0 veya exam_type TYT ise) - Tarih filtresini dikkate al\n                        const tytExams = allExamResults.filter(exam => \n                          exam.exam_type === 'TYT' || (parseFloat(exam.tyt_net) > 0 && parseFloat(exam.ayt_net) === 0)\n                        ).sort((a, b) => new Date(b.exam_date).getTime() - new Date(a.exam_date).getTime());\n                        return tytExams.length > 0 ? parseFloat(tytExams[0].tyt_net) : 0;\n                      })()} net\n                    </div>\n                  </div>\n                  <div className=\"bg-green-50/80 dark:bg-green-950/30 rounded-xl p-4 text-center border border-green-200/50 dark:border-green-800/40 transition-all\">\n                    <div className=\"text-lg font-bold text-green-700 dark:text-green-300 mb-1 flex items-center justify-center gap-2\">\n                      AYT Hedef: \n                      {isEditingAytTarget ? (\n                        <input\n                          type=\"number\"\n                          value={aytTargetNet}\n                          onChange={(e) => setAytTargetNet(parseInt(e.target.value) || 50)}\n                          onBlur={() => setIsEditingAytTarget(false)}\n                          className=\"w-16 px-2 py-1 text-center bg-white dark:bg-gray-800 border border-green-300 dark:border-green-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500\"\n                          autoFocus\n                        />\n                      ) : (\n                        <span \n                          className=\"cursor-pointer hover:bg-green-200/50 dark:hover:bg-green-800/50 px-2 py-1 rounded-lg transition-colors\"\n                          onMouseEnter={() => setIsEditingAytTarget(true)}\n                        >\n                          {aytTargetNet}\n                        </span>\n                      )}\n                    </div>\n                    <div className=\"text-sm text-green-600 dark:text-green-400\">\n                      AYT DENEME: {(() => {\n                        // En son AYT sınavını bul (aytNet > 0 veya exam_type AYT ise) - Tarih filtresini dikkate al\n                        const aytExams = allExamResults.filter(exam => \n                          exam.exam_type === 'AYT' || (parseFloat(exam.ayt_net) > 0 && parseFloat(exam.tyt_net) === 0)\n                        ).sort((a, b) => new Date(b.exam_date).getTime() - new Date(a.exam_date).getTime());\n                        return aytExams.length > 0 ? parseFloat(aytExams[0].ayt_net) : 0;\n                      })()} net\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"h-96 bg-gradient-to-br from-indigo-50/30 to-purple-50/30 dark:from-indigo-950/20 dark:to-purple-950/20 rounded-xl p-4\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart data={netAnalysisData} margin={{ top: 40, right: 60, bottom: 50, left: 40 }}>\n                    <defs>\n                      <linearGradient id=\"tytGlow\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"5%\" stopColor=\"#3b82f6\" stopOpacity={0.3}/>\n                        <stop offset=\"95%\" stopColor=\"#3b82f6\" stopOpacity={0}/>\n                      </linearGradient>\n                      <linearGradient id=\"aytGlow\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"5%\" stopColor=\"#059669\" stopOpacity={0.3}/>\n                        <stop offset=\"95%\" stopColor=\"#059669\" stopOpacity={0}/>\n                      </linearGradient>\n                    </defs>\n                    <CartesianGrid strokeDasharray=\"4 4\" stroke=\"currentColor\" opacity={0.15} />\n                    <XAxis \n                      dataKey=\"date\" \n                      tick={{ fontSize: 12, fontWeight: 600 }}\n                      className=\"text-foreground\"\n                      axisLine={{ stroke: 'currentColor', opacity: 0.4 }}\n                      tickLine={{ stroke: 'currentColor', opacity: 0.4 }}\n                      angle={-30}\n                      textAnchor=\"end\"\n                      height={50}\n                    />\n                    <YAxis \n                      tick={{ fontSize: 12, fontWeight: 600 }}\n                      className=\"text-foreground\"\n                      axisLine={{ stroke: 'currentColor', opacity: 0.4 }}\n                      tickLine={{ stroke: 'currentColor', opacity: 0.4 }}\n                      label={{ value: 'Net Sayısı', angle: -90, position: 'insideLeft', style: { textAnchor: 'middle', fontWeight: 600 } }}\n                      domain={[0, 100]}\n                    />\n                    <Tooltip \n                      contentStyle={{ \n                        backgroundColor: 'hsl(var(--card))',\n                        border: '2px solid hsl(var(--border))',\n                        borderRadius: '16px',\n                        fontSize: '14px',\n                        boxShadow: '0 20px 40px rgba(0,0,0,0.15)',\n                        padding: '16px',\n                        backdropFilter: 'blur(8px)'\n                      }}\n                      labelFormatter={(label, payload) => {\n                        const data = payload?.[0]?.payload;\n                        return data ? `📊 ${data.examName} - ${label}` : label;\n                      }}\n                      formatter={(value: any, name: any) => {\n                        // ekran boşsa tooltip gösterme\n                        if (value === null) return [null, null];\n                        \n                        if (name === 'tytTarget') return [`${value} net`, `🔵 TYT Hedef: ${tytTargetNet} net`];\n                        if (name === 'aytTarget') return [`${value} net`, `🔵 AYT Hedef: ${aytTargetNet} net`];\n                        if (name === 'tytNet') return [`${value} net`, '🟢 TYT DENEME'];\n                        if (name === 'aytNet') return [`${value} net`, '🟢 AYT DENEME'];\n                        return [`${value} net`, name];\n                      }}\n                    />\n                    <Legend \n                      wrapperStyle={{ paddingTop: '30px', fontSize: '14px', fontWeight: 600 }}\n                      iconType=\"line\"\n                    />\n\n                    {/* Hedef çizgileri */}\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"tytTarget\" \n                      stroke=\"#3b82f6\" \n                      strokeDasharray=\"10 6\" \n                      strokeWidth={3}\n                      dot={false} \n                      connectNulls={false}\n                      name={`🎯 TYT Hedef (${tytTargetNet})`}\n                      opacity={0.8}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"aytTarget\" \n                      stroke=\"#059669\" \n                      strokeDasharray=\"10 6\" \n                      strokeWidth={3}\n                      dot={false} \n                      connectNulls={false}\n                      name={`🎯 AYT Hedef (${aytTargetNet})`}\n                      opacity={0.8}\n                    />\n\n                    {/* Gerçek netler */}\n                    <Line \n                      type=\"linear\" \n                      dataKey=\"tytNet\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={5}\n                      dot={{ fill: '#3b82f6', strokeWidth: 4, r: 8, stroke: '#ffffff' }} \n                      activeDot={{ r: 12, stroke: '#3b82f6', strokeWidth: 4, fill: '#ffffff' }}\n                      connectNulls={true}\n                      name=\"🔵 TYT Net\"\n                    />\n                    <Line \n                      type=\"linear\" \n                      dataKey=\"aytNet\" \n                      stroke=\"#059669\" \n                      strokeWidth={5}\n                      dot={{ fill: '#059669', strokeWidth: 4, r: 8, stroke: '#ffffff' }} \n                      activeDot={{ r: 12, stroke: '#059669', strokeWidth: 4, fill: '#ffffff' }}\n                      connectNulls={true}\n                      name=\"🟢 AYT Net\"\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n                </div>\n                \n                {/* Ders Analizi - Radar Charts */}\n                {(tytSubjectAnalysisData.length > 0 || aytSubjectAnalysisData.length > 0) && (\n                  <div className=\"space-y-6 mt-8\">\n                    <h3 className=\"text-2xl font-bold text-center bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent\">\n                      📊 Ders Bazında Analiz\n                    </h3>\n                    {/* İkiz Radar Grafikleri - TYT ve AYT yan yana */}\n                    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                  {/* TYT Grafiği */}\n                  <div className=\"h-[400px] bg-gradient-to-br from-blue-50/30 to-indigo-50/30 dark:from-blue-950/20 dark:to-indigo-950/20 rounded-xl p-4\">\n                    <h3 className=\"text-lg font-bold text-center mb-4 text-blue-700 dark:text-blue-300\">🔵 TYT Ders Analizi</h3>\n                    {tytSubjectAnalysisData.length > 0 ? (\n                      <ResponsiveContainer width=\"100%\" height=\"85%\">\n                        <RadarChart data={tytSubjectAnalysisData} margin={{ top: 20, right: 30, bottom: 20, left: 30 }}>\n                          <defs>\n                            <linearGradient id=\"tytCorrectGlow\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"1\">\n                              <stop offset=\"0%\" stopColor=\"#22c55e\" stopOpacity={0.4}/>\n                              <stop offset=\"100%\" stopColor=\"#16a34a\" stopOpacity={0.1}/>\n                            </linearGradient>\n                            <linearGradient id=\"tytWrongGlow\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"1\">\n                              <stop offset=\"0%\" stopColor=\"#ef4444\" stopOpacity={0.4}/>\n                              <stop offset=\"100%\" stopColor=\"#dc2626\" stopOpacity={0.1}/>\n                            </linearGradient>\n                          </defs>\n                          <PolarGrid stroke=\"currentColor\" className=\"opacity-25\" strokeWidth={1} />\n                          <PolarAngleAxis dataKey=\"subject\" tick={{ fontSize: 12, fontWeight: 600 }} />\n                          <PolarRadiusAxis angle={0} domain={[0, 'dataMax']} tick={{ fontSize: 10 }} />\n                          <Tooltip content={({ active, payload, label }) => {\n                            if (active && payload && payload.length) {\n                              const correct = payload.find(p => p.name === '✅ Doğru Cevaplar')?.value || 0;\n                              const wrong = payload.find(p => p.name === '❌ Yanlış Cevaplar')?.value || 0;\n                              const net = (Number(correct) - Number(wrong) * 0.25).toFixed(2);\n                              return (\n                                <div className=\"bg-white/95 dark:bg-gray-800/95 px-2 py-1 rounded shadow-sm border text-xs\">\n                                  <p className=\"font-semibold text-xs mb-0.5\">{label}</p>\n                                  <div className=\"flex items-center gap-2 text-xs\">\n                                    <span className=\"text-green-600\">✅ {correct}</span>\n                                    <span className=\"text-red-600\">❌ {wrong}</span>\n                                    <span className=\"text-blue-600 font-bold\">Net: {net}</span>\n                                  </div>\n                                </div>\n                              );\n                            }\n                            return null;\n                          }} />\n                          <Radar name=\"✅ Doğru Cevaplar\" dataKey=\"correct\" stroke=\"#22c55e\" strokeWidth={2} fill=\"url(#tytCorrectGlow)\" fillOpacity={0.3} dot={{ r: 4, fill: '#22c55e' }} />\n                          <Radar name=\"❌ Yanlış Cevaplar\" dataKey=\"wrong\" stroke=\"#ef4444\" strokeWidth={2} fill=\"url(#tytWrongGlow)\" fillOpacity={0.3} dot={{ r: 4, fill: '#ef4444' }} />\n                          <Legend wrapperStyle={{ paddingTop: '10px', fontSize: '12px' }} iconType=\"circle\" />\n                        </RadarChart>\n                      </ResponsiveContainer>\n                    ) : (\n                      <div className=\"flex items-center justify-center h-full text-center\">\n                        <div>\n                          <div className=\"text-4xl mb-2\">📊</div>\n                          <p className=\"text-sm text-muted-foreground\">Henüz TYT deneme verisi yok</p>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n\n                  {/* AYT Grafiği */}\n                  <div className=\"h-[400px] bg-gradient-to-br from-green-50/30 to-emerald-50/30 dark:from-green-950/20 dark:to-emerald-950/20 rounded-xl p-4\">\n                    <h3 className=\"text-lg font-bold text-center mb-4 text-green-700 dark:text-green-300\">🟢 AYT Ders Analizi</h3>\n                    {aytSubjectAnalysisData.length > 0 ? (\n                      <ResponsiveContainer width=\"100%\" height=\"85%\">\n                        <RadarChart data={aytSubjectAnalysisData} margin={{ top: 20, right: 30, bottom: 20, left: 30 }}>\n                          <defs>\n                            <linearGradient id=\"aytCorrectGlow\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"1\">\n                              <stop offset=\"0%\" stopColor=\"#22c55e\" stopOpacity={0.4}/>\n                              <stop offset=\"100%\" stopColor=\"#16a34a\" stopOpacity={0.1}/>\n                            </linearGradient>\n                            <linearGradient id=\"aytWrongGlow\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"1\">\n                              <stop offset=\"0%\" stopColor=\"#ef4444\" stopOpacity={0.4}/>\n                              <stop offset=\"100%\" stopColor=\"#dc2626\" stopOpacity={0.1}/>\n                            </linearGradient>\n                          </defs>\n                          <PolarGrid stroke=\"currentColor\" className=\"opacity-25\" strokeWidth={1} />\n                          <PolarAngleAxis dataKey=\"subject\" tick={{ fontSize: 12, fontWeight: 600 }} />\n                          <PolarRadiusAxis angle={0} domain={[0, 'dataMax']} tick={{ fontSize: 10 }} />\n                          <Tooltip content={({ active, payload, label }) => {\n                            if (active && payload && payload.length) {\n                              const correct = payload.find(p => p.name === '✅ Doğru Cevaplar')?.value || 0;\n                              const wrong = payload.find(p => p.name === '❌ Yanlış Cevaplar')?.value || 0;\n                              const net = (Number(correct) - Number(wrong) * 0.25).toFixed(2);\n                              return (\n                                <div className=\"bg-white/95 dark:bg-gray-800/95 px-2 py-1 rounded shadow-sm border text-xs\">\n                                  <p className=\"font-semibold text-xs mb-0.5\">{label}</p>\n                                  <div className=\"flex items-center gap-2 text-xs\">\n                                    <span className=\"text-green-600\">✅ {correct}</span>\n                                    <span className=\"text-red-600\">❌ {wrong}</span>\n                                    <span className=\"text-blue-600 font-bold\">Net: {net}</span>\n                                  </div>\n                                </div>\n                              );\n                            }\n                            return null;\n                          }} />\n                          <Radar name=\"✅ Doğru Cevaplar\" dataKey=\"correct\" stroke=\"#22c55e\" strokeWidth={2} fill=\"url(#aytCorrectGlow)\" fillOpacity={0.3} dot={{ r: 4, fill: '#22c55e' }} />\n                          <Radar name=\"❌ Yanlış Cevaplar\" dataKey=\"wrong\" stroke=\"#ef4444\" strokeWidth={2} fill=\"url(#aytWrongGlow)\" fillOpacity={0.3} dot={{ r: 4, fill: '#ef4444' }} />\n                          <Legend wrapperStyle={{ paddingTop: '10px', fontSize: '12px' }} iconType=\"circle\" />\n                        </RadarChart>\n                      </ResponsiveContainer>\n                    ) : (\n                      <div className=\"flex items-center justify-center h-full text-center\">\n                        <div>\n                          <div className=\"text-4xl mb-2\">📊</div>\n                          <p className=\"text-sm text-muted-foreground\">Henüz AYT deneme verisi yok</p>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                {/* TYT ve AYT Ders Özeti - Branş Denemeleri Özeti Stili */}\n                <div className=\"space-y-6\">\n                  {/* TYT Ders Özeti Kartları */}\n                  {tytSubjectAnalysisData.length > 0 && (\n                    <Collapsible open={tytSummaryExpanded} onOpenChange={setTytSummaryExpanded}>\n                      <CollapsibleTrigger asChild>\n                        <button className=\"w-full flex items-center justify-between text-lg font-semibold mb-3 text-blue-700 dark:text-blue-300 hover:opacity-80 transition-opacity\">\n                          <span>📚 TYT Ders Özeti</span>\n                          <ChevronDown className={`h-5 w-5 transition-transform duration-200 ${tytSummaryExpanded ? 'rotate-180' : ''}`} />\n                        </button>\n                      </CollapsibleTrigger>\n                      <CollapsibleContent>\n                        <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2\">\n                          {tytSubjectAnalysisData.map((subject, index) => (\n                            <div key={index} className=\"bg-blue-50/60 dark:bg-blue-900/20 rounded-lg p-2 border border-blue-200/40 dark:border-blue-700/40 hover:shadow-md transition-all duration-200\">\n                              <h4 className=\"font-semibold text-xs text-gray-800 dark:text-gray-200 mb-1\">{subject.subject}</h4>\n                              <div className=\"flex items-center justify-between text-xs gap-1\">\n                                <span className=\"text-green-600 dark:text-green-400\">✓{subject.correct}</span>\n                                <span className=\"text-red-600 dark:text-red-400\">✗{subject.wrong}</span>\n                                <span className=\"font-bold text-blue-600 dark:text-blue-400\">Net:{subject.netScore.toFixed(1)}</span>\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      </CollapsibleContent>\n                    </Collapsible>\n                  )}\n\n                  {/* AYT Ders Özeti Kartları */}\n                  {aytSubjectAnalysisData.length > 0 && (\n                    <Collapsible open={aytSummaryExpanded} onOpenChange={setAytSummaryExpanded}>\n                      <CollapsibleTrigger asChild>\n                        <button className=\"w-full flex items-center justify-between text-lg font-semibold mb-3 text-green-700 dark:text-green-300 hover:opacity-80 transition-opacity\">\n                          <span>📚 AYT Ders Özeti</span>\n                          <ChevronDown className={`h-5 w-5 transition-transform duration-200 ${aytSummaryExpanded ? 'rotate-180' : ''}`} />\n                        </button>\n                      </CollapsibleTrigger>\n                      <CollapsibleContent>\n                        <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2\">\n                          {aytSubjectAnalysisData.map((subject, index) => (\n                            <div key={index} className=\"bg-green-50/60 dark:bg-green-900/20 rounded-lg p-2 border border-green-200/40 dark:border-green-700/40 hover:shadow-md transition-all duration-200\">\n                              <h4 className=\"font-semibold text-xs text-gray-800 dark:text-gray-200 mb-1\">{subject.subject}</h4>\n                              <div className=\"flex items-center justify-between text-xs gap-1\">\n                                <span className=\"text-green-600 dark:text-green-400\">✓{subject.correct}</span>\n                                <span className=\"text-red-600 dark:text-red-400\">✗{subject.wrong}</span>\n                                <span className=\"font-bold text-green-600 dark:text-green-400\">Net:{subject.netScore.toFixed(1)}</span>\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      </CollapsibleContent>\n                    </Collapsible>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n          )) : (\n            // Branş Denemeleri Analizi\n            branchExamData.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <div className=\"w-16 h-16 rounded-full bg-gradient-to-br from-orange-100 to-amber-100 dark:from-orange-900/30 dark:to-amber-900/30 flex items-center justify-center mx-auto mb-4 shadow-lg\">\n                  <Book className=\"h-8 w-8 text-orange-500\" />\n                </div>\n                <h4 className=\"text-base font-semibold text-orange-700 dark:text-orange-300\">Henüz branş denemesi girilmedi</h4>\n              </div>\n            ) : (\n              <div className=\"space-y-6\">\n                {/* Filtre Butonu - Sadece Veri Varsa */}\n                <div className=\"flex justify-end\">\n                  <div className=\"flex items-center gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => {\n                        const newFilterState = !useDateFilter;\n                        setUseDateFilter(newFilterState);\n                        if (!newFilterState) {\n                          setSelectedDate(null);\n                        } else {\n                          setSelectedDate(new Date().toISOString().split('T')[0]);\n                        }\n                      }}\n                      className=\"flex items-center gap-2 px-4 py-2 bg-gradient-to-r from-cyan-100/50 to-blue-100/50 dark:from-cyan-900/30 dark:to-blue-900/30 rounded-xl border border-cyan-200/50 dark:border-cyan-700/50 text-sm font-medium text-cyan-700 dark:text-cyan-300 hover:bg-cyan-100 dark:hover:bg-cyan-900/40 transition-all duration-200\"\n                      data-testid=\"button-toggle-date-filter-branch\"\n                    >\n                      <span className=\"whitespace-nowrap\">📅 Filtrele</span>\n                      <ChevronDown className={`h-4 w-4 transition-transform duration-200 ${useDateFilter ? 'rotate-180' : ''}`} />\n                    </Button>\n                    {useDateFilter && (\n                      <input\n                        type=\"date\"\n                        value={selectedDate || new Date().toISOString().split('T')[0]}\n                        onChange={(e) => setSelectedDate(e.target.value)}\n                        className=\"px-3 py-2 border border-border rounded-md bg-background text-foreground\"\n                        data-testid=\"input-date-filter-branch\"\n                      />\n                    )}\n                  </div>\n                </div>\n                {/* TYT Branş Denemeleri Bölümü */}\n                <div className=\"space-y-6\">\n                  {/* TYT Radar Grafiği */}\n                  <div className=\"h-[400px] bg-gradient-to-br from-blue-50/30 to-indigo-50/30 dark:from-blue-950/20 dark:to-indigo-950/20 rounded-xl p-4\">\n                    <h3 className=\"text-lg font-bold text-center mb-4 text-blue-700 dark:text-blue-300\">📚 TYT Branş Denemeleri - Ders Bazlı Net Analizi</h3>\n                    {tytBranchRadarData.length > 0 ? (\n                      <ResponsiveContainer width=\"100%\" height=\"85%\">\n                        <RadarChart data={tytBranchRadarData} margin={{ top: 20, right: 30, bottom: 20, left: 30 }}>\n                          <defs>\n                            <linearGradient id=\"tytBranchNetGlow\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"1\">\n                              <stop offset=\"0%\" stopColor=\"#3b82f6\" stopOpacity={0.4}/>\n                              <stop offset=\"100%\" stopColor=\"#2563eb\" stopOpacity={0.1}/>\n                            </linearGradient>\n                          </defs>\n                          <PolarGrid stroke=\"currentColor\" className=\"opacity-25\" strokeWidth={1} />\n                          <PolarAngleAxis dataKey=\"subject\" tick={{ fontSize: 12, fontWeight: 600 }} />\n                          <PolarRadiusAxis angle={0} domain={[0, 'dataMax']} tick={{ fontSize: 10 }} />\n                          <Tooltip content={({ active, payload, label }) => {\n                            if (active && payload && payload.length) {\n                              const data = payload[0].payload;\n                              return (\n                                <div className=\"bg-white/95 dark:bg-gray-800/95 px-2 py-1.5 rounded shadow-md border text-xs\">\n                                  <div className=\"font-semibold mb-0.5\">{label}</div>\n                                  <div className=\"space-y-0.5\">\n                                    <div className=\"text-green-600 dark:text-green-400\">✓ {data.correct}</div>\n                                    <div className=\"text-red-600 dark:text-red-400\">✗ {data.wrong}</div>\n                                    <div className=\"text-blue-600 dark:text-blue-400 font-semibold\">Net: {data.net.toFixed(1)}</div>\n                                  </div>\n                                </div>\n                              );\n                            }\n                            return null;\n                          }} />\n                          <Radar \n                            name=\"📚 TYT Branş Net Skoru\" \n                            dataKey=\"net\" \n                            stroke=\"#3b82f6\" \n                            strokeWidth={3}\n                            fill=\"url(#tytBranchNetGlow)\" \n                            fillOpacity={0.4} \n                            dot={{ r: 5, fill: '#3b82f6', strokeWidth: 2, stroke: '#ffffff' }}\n                          />\n                          <Legend wrapperStyle={{ paddingTop: '10px', fontSize: '12px' }} iconType=\"circle\" />\n                        </RadarChart>\n                      </ResponsiveContainer>\n                    ) : (\n                      <div className=\"flex items-center justify-center h-full text-center\">\n                        <div>\n                          <div className=\"text-4xl mb-2\">📚</div>\n                          <p className=\"text-sm text-muted-foreground\">Henüz TYT branş denemesi yok</p>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n\n                  {/* TYT Dersleri Zaman Çizgileri */}\n                  {Object.entries(branchExamsBySubject).filter(([key]) => key.startsWith('TYT-')).length > 0 && (\n                    <Collapsible defaultOpen={true}>\n                      <CollapsibleTrigger className=\"w-full\">\n                        <h3 className=\"text-lg font-bold text-center mb-4 text-blue-700 dark:text-blue-300 flex items-center justify-center gap-2 cursor-pointer hover:text-blue-600 dark:hover:text-blue-200 transition-colors\">\n                          📈 TYT Dersleri - Zaman Çizgileri\n                          <ChevronDown className=\"h-5 w-5 transition-transform duration-200\" />\n                        </h3>\n                      </CollapsibleTrigger>\n                      <CollapsibleContent>\n                      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                        {Object.entries(branchExamsBySubject)\n                          .filter(([key]) => key.startsWith('TYT-'))\n                          .map(([key, exams]) => {\n                            const [examType, subject] = key.split('-');\n                            const subjectColors: {[key: string]: string} = {\n                              'Türkçe': '#ef4444',\n                              'Matematik': '#3b82f6',\n                              'Geometri': '#8b5cf6',\n                              'Fizik': '#7c3aed',\n                              'Kimya': '#ec4899',\n                              'Biyoloji': '#06b6d4',\n                              'Sosyal Bilimler': '#f59e0b',\n                              'Fen Bilimleri': '#10b981'\n                            };\n                            const color = subjectColors[subject] || '#f97316';\n                            const bgColor = 'from-blue-50/30 to-indigo-50/30 dark:from-blue-950/20 dark:to-indigo-950/20';\n                            \n                            // SUBJECT_LIMITS'ten max değeri al\n                            const subjectKey = subject.replace('TYT ', '').replace('AYT ', '');\n                            const maxValue = SUBJECT_LIMITS[examType]?.[subjectKey] || 50;\n                            \n                            return (\n                              <div key={key} className={`h-64 bg-gradient-to-br ${bgColor} rounded-xl p-3 border border-gray-200/30 dark:border-gray-700/30`}>\n                                <h4 className=\"text-sm font-semibold text-center mb-1.5\" style={{ color }}>\n                                  {subject}\n                                </h4>\n                                <ResponsiveContainer width=\"100%\" height=\"87%\">\n                                  <LineChart data={exams} margin={{ top: 5, right: 20, bottom: 30, left: 20 }}>\n                                    <CartesianGrid strokeDasharray=\"4 4\" stroke=\"currentColor\" opacity={0.15} />\n                                    <XAxis \n                                      dataKey=\"date\" \n                                      tick={{ fontSize: 11, fontWeight: 600 }}\n                                      className=\"text-foreground\"\n                                      axisLine={{ stroke: 'currentColor', opacity: 0.4 }}\n                                      tickLine={{ stroke: 'currentColor', opacity: 0.4 }}\n                                      angle={-30}\n                                      textAnchor=\"end\"\n                                      height={40}\n                                    />\n                                    <YAxis \n                                      tick={{ fontSize: 11, fontWeight: 600 }}\n                                      className=\"text-foreground\"\n                                      axisLine={{ stroke: 'currentColor', opacity: 0.4 }}\n                                      tickLine={{ stroke: 'currentColor', opacity: 0.4 }}\n                                      domain={[0, maxValue]}\n                                    />\n                                    <Tooltip \n                                      contentStyle={{ \n                                        backgroundColor: 'hsl(var(--card))',\n                                        border: '2px solid hsl(var(--border))',\n                                        borderRadius: '12px',\n                                        fontSize: '12px',\n                                        boxShadow: '0 10px 20px rgba(0,0,0,0.15)',\n                                        padding: '12px'\n                                      }}\n                                      labelFormatter={(label, payload) => {\n                                        const data = payload?.[0]?.payload;\n                                        return data ? `${data.examName} - ${label}` : label;\n                                      }}\n                                      formatter={(value: any) => [`${Number(value).toFixed(1)} net`, 'Net Skoru']}\n                                    />\n                                    <Line \n                                      type=\"linear\" \n                                      dataKey=\"net\" \n                                      stroke={color} \n                                      strokeWidth={4}\n                                      dot={{ fill: color, strokeWidth: 3, r: 6, stroke: '#ffffff' }} \n                                      activeDot={{ r: 10, stroke: color, strokeWidth: 3, fill: '#ffffff' }}\n                                    />\n                                  </LineChart>\n                                </ResponsiveContainer>\n                              </div>\n                            );\n                          })}\n                      </div>\n                      </CollapsibleContent>\n                    </Collapsible>\n                  )}\n                </div>\n\n                {/* AYT Branş Denemeleri Bölümü */}\n                <div className=\"space-y-6\">\n                  {/* AYT Radar Grafiği */}\n                  <div className=\"h-[400px] bg-gradient-to-br from-purple-50/30 to-violet-50/30 dark:from-purple-950/20 dark:to-violet-950/20 rounded-xl p-4\">\n                    <h3 className=\"text-lg font-bold text-center mb-4 text-purple-700 dark:text-purple-300\">📚 AYT Branş Denemeleri - Ders Bazlı Net Analizi</h3>\n                    {aytBranchRadarData.length > 0 ? (\n                      <ResponsiveContainer width=\"100%\" height=\"85%\">\n                        <RadarChart data={aytBranchRadarData} margin={{ top: 20, right: 30, bottom: 20, left: 30 }}>\n                          <defs>\n                            <linearGradient id=\"aytBranchNetGlow\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"1\">\n                              <stop offset=\"0%\" stopColor=\"#a855f7\" stopOpacity={0.4}/>\n                              <stop offset=\"100%\" stopColor=\"#9333ea\" stopOpacity={0.1}/>\n                            </linearGradient>\n                          </defs>\n                          <PolarGrid stroke=\"currentColor\" className=\"opacity-25\" strokeWidth={1} />\n                          <PolarAngleAxis dataKey=\"subject\" tick={{ fontSize: 12, fontWeight: 600 }} />\n                          <PolarRadiusAxis angle={0} domain={[0, 'dataMax']} tick={{ fontSize: 10 }} />\n                          <Tooltip content={({ active, payload, label }) => {\n                            if (active && payload && payload.length) {\n                              const data = payload[0].payload;\n                              return (\n                                <div className=\"bg-white/95 dark:bg-gray-800/95 px-2 py-1.5 rounded shadow-md border text-xs\">\n                                  <div className=\"font-semibold mb-0.5\">{label}</div>\n                                  <div className=\"space-y-0.5\">\n                                    <div className=\"text-green-600 dark:text-green-400\">✓ {data.correct}</div>\n                                    <div className=\"text-red-600 dark:text-red-400\">✗ {data.wrong}</div>\n                                    <div className=\"text-blue-600 dark:text-blue-400 font-semibold\">Net: {data.net.toFixed(1)}</div>\n                                  </div>\n                                </div>\n                              );\n                            }\n                            return null;\n                          }} />\n                          <Radar \n                            name=\"📚 AYT Branş Net Skoru\" \n                            dataKey=\"net\" \n                            stroke=\"#a855f7\" \n                            strokeWidth={3}\n                            fill=\"url(#aytBranchNetGlow)\" \n                            fillOpacity={0.4} \n                            dot={{ r: 5, fill: '#a855f7', strokeWidth: 2, stroke: '#ffffff' }}\n                          />\n                          <Legend wrapperStyle={{ paddingTop: '10px', fontSize: '12px' }} iconType=\"circle\" />\n                        </RadarChart>\n                      </ResponsiveContainer>\n                    ) : (\n                      <div className=\"flex items-center justify-center h-full text-center\">\n                        <div>\n                          <div className=\"text-4xl mb-2\">📚</div>\n                          <p className=\"text-sm text-muted-foreground\">Henüz AYT branş denemesi yok</p>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n\n                  {/* AYT Dersleri Zaman Çizgileri */}\n                  {Object.entries(branchExamsBySubject).filter(([key]) => key.startsWith('AYT-')).length > 0 && (\n                    <Collapsible defaultOpen={true}>\n                      <CollapsibleTrigger className=\"w-full\">\n                        <h3 className=\"text-lg font-bold text-center mb-4 text-purple-700 dark:text-purple-300 flex items-center justify-center gap-2 cursor-pointer hover:text-purple-600 dark:hover:text-purple-200 transition-colors\">\n                          📈 AYT Dersleri - Zaman Çizgileri\n                          <ChevronDown className=\"h-5 w-5 transition-transform duration-200\" />\n                        </h3>\n                      </CollapsibleTrigger>\n                      <CollapsibleContent>\n                      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                        {Object.entries(branchExamsBySubject)\n                          .filter(([key]) => key.startsWith('AYT-'))\n                          .map(([key, exams]) => {\n                            const [examType, subject] = key.split('-');\n                            const subjectColors: {[key: string]: string} = {\n                              'Türkçe': '#ef4444',\n                              'Matematik': '#3b82f6',\n                              'Geometri': '#8b5cf6',\n                              'Fizik': '#7c3aed',\n                              'Kimya': '#ec4899',\n                              'Biyoloji': '#06b6d4',\n                              'Sosyal Bilimler': '#f59e0b',\n                              'Fen Bilimleri': '#10b981'\n                            };\n                            const color = subjectColors[subject] || '#f97316';\n                            const bgColor = 'from-purple-50/30 to-pink-50/30 dark:from-purple-950/20 dark:to-pink-950/20';\n                            \n                            // SUBJECT_LIMITS'ten max değeri al\n                            const subjectKey = subject.replace('TYT ', '').replace('AYT ', '');\n                            const maxValue = SUBJECT_LIMITS[examType]?.[subjectKey] || 50;\n                            \n                            return (\n                              <div key={key} className={`h-64 bg-gradient-to-br ${bgColor} rounded-xl p-3 border border-gray-200/30 dark:border-gray-700/30`}>\n                                <h4 className=\"text-sm font-semibold text-center mb-1.5\" style={{ color }}>\n                                  {subject}\n                                </h4>\n                                <ResponsiveContainer width=\"100%\" height=\"87%\">\n                                  <LineChart data={exams} margin={{ top: 5, right: 20, bottom: 30, left: 20 }}>\n                                    <CartesianGrid strokeDasharray=\"4 4\" stroke=\"currentColor\" opacity={0.15} />\n                                    <XAxis \n                                      dataKey=\"date\" \n                                      tick={{ fontSize: 11, fontWeight: 600 }}\n                                      className=\"text-foreground\"\n                                      axisLine={{ stroke: 'currentColor', opacity: 0.4 }}\n                                      tickLine={{ stroke: 'currentColor', opacity: 0.4 }}\n                                      angle={-30}\n                                      textAnchor=\"end\"\n                                      height={40}\n                                    />\n                                    <YAxis \n                                      tick={{ fontSize: 11, fontWeight: 600 }}\n                                      className=\"text-foreground\"\n                                      axisLine={{ stroke: 'currentColor', opacity: 0.4 }}\n                                      tickLine={{ stroke: 'currentColor', opacity: 0.4 }}\n                                      domain={[0, maxValue]}\n                                    />\n                                    <Tooltip \n                                      contentStyle={{ \n                                        backgroundColor: 'hsl(var(--card))',\n                                        border: '2px solid hsl(var(--border))',\n                                        borderRadius: '12px',\n                                        fontSize: '12px',\n                                        boxShadow: '0 10px 20px rgba(0,0,0,0.15)',\n                                        padding: '12px'\n                                      }}\n                                      labelFormatter={(label, payload) => {\n                                        const data = payload?.[0]?.payload;\n                                        return data ? `${data.examName} - ${label}` : label;\n                                      }}\n                                      formatter={(value: any) => [`${Number(value).toFixed(1)} net`, 'Net Skoru']}\n                                    />\n                                    <Line \n                                      type=\"linear\" \n                                      dataKey=\"net\" \n                                      stroke={color} \n                                      strokeWidth={4}\n                                      dot={{ fill: color, strokeWidth: 3, r: 6, stroke: '#ffffff' }} \n                                      activeDot={{ r: 10, stroke: color, strokeWidth: 3, fill: '#ffffff' }}\n                                    />\n                                  </LineChart>\n                                </ResponsiveContainer>\n                              </div>\n                            );\n                          })}\n                      </div>\n                      </CollapsibleContent>\n                    </Collapsible>\n                  )}\n                </div>\n\n                {/* TYT Branş Denemeleri Özet Kartları */}\n                {branchExamData.filter(exam => exam.examType === 'TYT').length > 0 && (\n                  <Collapsible open={tytBranchSummaryExpanded} onOpenChange={setTytBranchSummaryExpanded}>\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <h4 className=\"text-lg font-semibold text-blue-700 dark:text-blue-300\">📚 TYT Branş Denemeleri Özeti</h4>\n                      <CollapsibleTrigger asChild>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"p-2 hover:bg-blue-100 dark:hover:bg-blue-900/20 rounded-lg\"\n                          data-testid=\"button-toggle-tyt-branch-summary\"\n                        >\n                          <ChevronDown className={`h-5 w-5 text-blue-600 dark:text-blue-400 transition-transform duration-200 ${tytBranchSummaryExpanded ? 'rotate-180' : ''}`} />\n                        </Button>\n                      </CollapsibleTrigger>\n                    </div>\n                    <CollapsibleContent>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-6\">\n                        {branchExamData.filter(exam => exam.examType === 'TYT').map((exam, index) => (\n                          <div key={index} className=\"bg-blue-50/60 dark:bg-blue-900/20 rounded-xl p-4 border border-blue-200/40 dark:border-blue-700/40 hover:shadow-lg transition-all duration-200\">\n                            <div className=\"flex items-center justify-between mb-3\">\n                              <h4 className=\"font-semibold text-gray-800 dark:text-gray-200\">{exam.examName}</h4>\n                            </div>\n                            <div className=\"text-sm text-blue-600 dark:text-blue-400 mb-2\">{exam.subject}</div>\n                            <div className=\"space-y-2 mb-4\">\n                              <div className=\"flex justify-between items-center\">\n                                <span className=\"text-xs text-green-600 dark:text-green-400\">✓ Doğru</span>\n                                <span className=\"text-sm font-semibold text-green-600 dark:text-green-400\">{exam.correct}</span>\n                              </div>\n                              <div className=\"flex justify-between items-center\">\n                                <span className=\"text-xs text-red-600 dark:text-red-400\">✗ Yanlış</span>\n                                <span className=\"text-sm font-semibold text-red-600 dark:text-red-400\">{exam.wrong}</span>\n                              </div>\n                              <div className=\"flex justify-between items-center border-t pt-2\">\n                                <span className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Net</span>\n                                <span className=\"text-sm font-bold text-blue-600 dark:text-blue-400\">{exam.net.toFixed(1)}</span>\n                              </div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </CollapsibleContent>\n                  </Collapsible>\n                )}\n\n                {/* AYT Branş Denemeleri Özet Kartları */}\n                {branchExamData.filter(exam => exam.examType === 'AYT').length > 0 && (\n                  <Collapsible open={aytBranchSummaryExpanded} onOpenChange={setAytBranchSummaryExpanded}>\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <h4 className=\"text-lg font-semibold text-purple-700 dark:text-purple-300\">📚 AYT Branş Denemeleri Özeti</h4>\n                      <CollapsibleTrigger asChild>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"p-2 hover:bg-purple-100 dark:hover:bg-purple-900/20 rounded-lg\"\n                          data-testid=\"button-toggle-ayt-branch-summary\"\n                        >\n                          <ChevronDown className={`h-5 w-5 text-purple-600 dark:text-purple-400 transition-transform duration-200 ${aytBranchSummaryExpanded ? 'rotate-180' : ''}`} />\n                        </Button>\n                      </CollapsibleTrigger>\n                    </div>\n                    <CollapsibleContent>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                        {branchExamData.filter(exam => exam.examType === 'AYT').map((exam, index) => (\n                          <div key={index} className=\"bg-purple-50/60 dark:bg-purple-900/20 rounded-xl p-4 border border-purple-200/40 dark:border-purple-700/40 hover:shadow-lg transition-all duration-200\">\n                            <div className=\"flex items-center justify-between mb-3\">\n                              <h4 className=\"font-semibold text-gray-800 dark:text-gray-200\">{exam.examName}</h4>\n                            </div>\n                            <div className=\"text-sm text-purple-600 dark:text-purple-400 mb-2\">{exam.subject}</div>\n                            <div className=\"space-y-2 mb-4\">\n                              <div className=\"flex justify-between items-center\">\n                                <span className=\"text-xs text-green-600 dark:text-green-400\">✓ Doğru</span>\n                                <span className=\"text-sm font-semibold text-green-600 dark:text-green-400\">{exam.correct}</span>\n                              </div>\n                              <div className=\"flex justify-between items-center\">\n                                <span className=\"text-xs text-red-600 dark:text-red-400\">✗ Yanlış</span>\n                                <span className=\"text-sm font-semibold text-red-600 dark:text-red-400\">{exam.wrong}</span>\n                              </div>\n                              <div className=\"flex justify-between items-center border-t pt-2\">\n                                <span className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Net</span>\n                                <span className=\"text-sm font-bold text-purple-600 dark:text-purple-400\">{exam.net.toFixed(1)}</span>\n                              </div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </CollapsibleContent>\n                  </Collapsible>\n                )}\n              </div>\n            )\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Eksik Konular Filtre Modalı - GELİŞTİRİLMİŞ */}\n      <Dialog open={showTopicsFilterModal} onOpenChange={setShowTopicsFilterModal}>\n        <DialogContent className=\"max-w-3xl max-h-[85vh] overflow-y-auto bg-gradient-to-br from-red-50/90 via-white to-orange-50/90 dark:from-red-950/60 dark:via-gray-900 dark:to-orange-950/60 backdrop-blur-xl border-2 border-red-200/50 dark:border-red-800/50 shadow-2xl\">\n          {/* Arka Plan Animasyonları - BERAT CANKIR - 03:03:03 */}\n          <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n            <div className=\"absolute top-0 right-0 w-64 h-64 bg-gradient-to-br from-red-500/10 to-orange-500/10 rounded-full blur-3xl\"></div>\n            <div className=\"absolute bottom-0 left-0 w-56 h-56 bg-gradient-to-tr from-orange-500/8 to-red-500/8 rounded-full blur-3xl\"></div>\n          </div>\n          \n          <DialogHeader className=\"relative z-10 pb-6 border-b border-red-200/30 dark:border-red-800/30\">\n            <div className=\"flex items-center gap-4 mb-2\">\n              <div className=\"p-3 bg-gradient-to-br from-red-500 to-orange-500 rounded-2xl shadow-xl\">\n                <Filter className=\"h-7 w-7 text-white\" />\n              </div>\n              <div>\n                <DialogTitle className=\"text-3xl font-black bg-gradient-to-r from-red-600 via-orange-600 to-red-600 bg-clip-text text-transparent\">\n                  🎯 Eksik Konular - Filtreler\n                </DialogTitle>\n                <DialogDescription className=\"text-base text-gray-600 dark:text-gray-400 font-medium mt-1\">\n                  Filtreleri aktifleştirmek için checkbox'ları işaretleyin\n                </DialogDescription>\n              </div>\n            </div>\n          </DialogHeader>\n          \n          <div className=\"space-y-7 mt-6 relative z-10\">\n            {/* Etiket Filtresi - GELİŞTİRİLMİŞ */}\n            <div className=\"space-y-4 bg-gradient-to-br from-white/80 to-red-50/60 dark:from-gray-800/80 dark:to-red-950/40 p-5 rounded-2xl border-2 border-red-200/40 dark:border-red-800/40 shadow-lg hover:shadow-xl transition-all duration-300\">\n              <div className=\"flex items-center gap-3 group cursor-pointer\">\n                <div className=\"relative\">\n                  <Checkbox\n                    id=\"topicsTagFilter\"\n                    checked={topicsFilterEnabled.tag}\n                    onCheckedChange={(checked) => \n                      setTopicsFilterEnabled(prev => ({ ...prev, tag: checked as boolean }))\n                    }\n                    className=\"data-[state=checked]:bg-gradient-to-r data-[state=checked]:from-red-500 data-[state=checked]:to-orange-500 w-6 h-6 border-2 border-red-400 dark:border-red-600 transition-all duration-300 shadow-md\"\n                  />\n                  {topicsFilterEnabled.tag && (\n                    <div className=\"absolute -inset-1 bg-red-500/20 rounded-md blur animate-pulse\"></div>\n                  )}\n                </div>\n                <label htmlFor=\"topicsTagFilter\" className=\"text-lg font-black text-gray-800 dark:text-gray-200 flex items-center gap-2 group-hover:text-red-600 dark:group-hover:text-red-400 transition-colors cursor-pointer\">\n                  <span className=\"text-2xl\">🏷️</span>\n                  <span>Etiket Seçimi</span>\n                </label>\n              </div>\n              {topicsFilterEnabled.tag && (\n                <div className=\"ml-10 space-y-3 p-5 bg-white/70 dark:bg-gray-900/70 rounded-xl border border-red-200/50 dark:border-red-800/50 backdrop-blur-sm animate-in fade-in slide-in-from-top-2 duration-300\">\n                  {topicsFilterValues.tags.length > 0 && (\n                    <div className=\"mb-4 p-3 bg-gradient-to-r from-red-50 to-orange-50 dark:from-red-950/40 dark:to-orange-950/40 rounded-lg border border-red-200 dark:border-red-800\">\n                      <p className=\"text-sm font-bold text-red-700 dark:text-red-300\">\n                        {topicsFilterResultCount > 0 \n                          ? `✅ ${topicsFilterResultCount} konu bulundu`\n                          : '⚠️ Henüz seçilen filtreye göre veri bulunmamaktadır'}\n                      </p>\n                    </div>\n                  )}\n                  {['Genel Deneme', 'Branş Deneme', 'Soru'].map((tag, idx) => (\n                    <div key={tag} className=\"flex items-center gap-3 p-3 rounded-lg hover:bg-red-50/80 dark:hover:bg-red-950/40 transition-all duration-200 group/item\" style={{animationDelay: `${idx * 50}ms`}}>\n                      <Checkbox\n                        id={`topicsTag-${tag}`}\n                        checked={topicsFilterValues.tags.includes(tag)}\n                        onCheckedChange={(checked) => {\n                          setTopicsFilterValues(prev => ({\n                            ...prev,\n                            tags: checked \n                              ? [...prev.tags, tag]\n                              : prev.tags.filter(t => t !== tag)\n                          }));\n                        }}\n                        className=\"data-[state=checked]:bg-gradient-to-r data-[state=checked]:from-red-500 data-[state=checked]:to-orange-500 w-5 h-5 border-2 border-red-300 dark:border-red-700 transition-all duration-200\"\n                      />\n                      <label htmlFor={`topicsTag-${tag}`} className=\"text-base font-semibold text-gray-700 dark:text-gray-300 group-hover/item:text-red-600 dark:group-hover/item:text-red-400 cursor-pointer transition-colors\">{tag}</label>\n                      {topicsFilterValues.tags.includes(tag) && (\n                        <span className=\"ml-auto text-xs bg-gradient-to-r from-red-500 to-orange-500 text-white px-2 py-1 rounded-full font-bold animate-in fade-in zoom-in duration-200\">✓ Seçili</span>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n\n            {/* Ders Filtresi - GELİŞTİRİLMİŞ */}\n            <div className=\"space-y-4 bg-gradient-to-br from-white/80 to-blue-50/60 dark:from-gray-800/80 dark:to-blue-950/40 p-5 rounded-2xl border-2 border-blue-200/40 dark:border-blue-800/40 shadow-lg hover:shadow-xl transition-all duration-300\">\n              <div className=\"flex items-center gap-3 group cursor-pointer\">\n                <div className=\"relative\">\n                  <Checkbox\n                    id=\"topicsSubjectFilter\"\n                    checked={topicsFilterEnabled.subject}\n                    onCheckedChange={(checked) => \n                      setTopicsFilterEnabled(prev => ({ ...prev, subject: checked as boolean }))\n                    }\n                    className=\"data-[state=checked]:bg-gradient-to-r data-[state=checked]:from-blue-500 data-[state=checked]:to-purple-500 w-6 h-6 border-2 border-blue-400 dark:border-blue-600 transition-all duration-300 shadow-md\"\n                  />\n                  {topicsFilterEnabled.subject && (\n                    <div className=\"absolute -inset-1 bg-blue-500/20 rounded-md blur animate-pulse\"></div>\n                  )}\n                </div>\n                <label htmlFor=\"topicsSubjectFilter\" className=\"text-lg font-black text-gray-800 dark:text-gray-200 flex items-center gap-2 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors cursor-pointer\">\n                  <span className=\"text-2xl\">📚</span>\n                  <span>Ders Seçimi</span>\n                </label>\n              </div>\n              {topicsFilterEnabled.subject && (\n                <div className=\"ml-10 space-y-5 p-5 bg-white/70 dark:bg-gray-900/70 rounded-xl border border-blue-200/50 dark:border-blue-800/50 backdrop-blur-sm animate-in fade-in slide-in-from-top-2 duration-300\">\n                  {topicsFilterValues.subjects.length > 0 && (\n                    <div className=\"mb-4 p-3 bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-950/40 dark:to-purple-950/40 rounded-lg border border-blue-200 dark:border-blue-800\">\n                      <p className=\"text-sm font-bold text-blue-700 dark:text-blue-300\">\n                        {topicsFilterResultCount > 0 \n                          ? `✅ ${topicsFilterResultCount} konu bulundu`\n                          : '⚠️ Henüz seçilen filtreye göre veri bulunmamaktadır'}\n                      </p>\n                    </div>\n                  )}\n                  {/* TYT Dersleri */}\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center gap-2 pb-2 border-b-2 border-blue-300/50 dark:border-blue-700/50\">\n                      <span className=\"text-sm font-black text-blue-600 dark:text-blue-400 px-3 py-1 bg-blue-100/80 dark:bg-blue-900/40 rounded-full\">TYT</span>\n                      {topicsFilterValues.subjects.filter(s => ['Türkçe', 'Sosyal Bilimler', 'TYT Matematik', 'TYT Geometri', 'Fen Bilimleri'].includes(s)).length > 0 && (\n                        <span className=\"text-xs bg-blue-500 text-white px-2 py-0.5 rounded-full font-bold\">{topicsFilterValues.subjects.filter(s => ['Türkçe', 'Sosyal Bilimler', 'TYT Matematik', 'TYT Geometri', 'Fen Bilimleri'].includes(s)).length} seçili</span>\n                      )}\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-3\">\n                      {['Türkçe', 'Sosyal Bilimler', 'TYT Matematik', 'TYT Geometri', 'Fen Bilimleri'].map((subject, idx) => (\n                        <div key={subject} className=\"flex items-center gap-2 p-2.5 rounded-lg hover:bg-blue-50/80 dark:hover:bg-blue-950/40 transition-all duration-200 group/item\" style={{animationDelay: `${idx * 30}ms`}}>\n                          <Checkbox\n                            id={`topicsSubject-${subject}`}\n                            checked={topicsFilterValues.subjects.includes(subject)}\n                            onCheckedChange={(checked) => {\n                              // TEK SEÇİM MODU: Bir derse tıklayınca diğerlerini temizle\n                              setTopicsFilterValues(prev => ({\n                                ...prev,\n                                subjects: checked ? [subject] : []\n                              }));\n                            }}\n                            className=\"data-[state=checked]:bg-gradient-to-r data-[state=checked]:from-blue-500 data-[state=checked]:to-cyan-500 w-4 h-4 border-2 border-blue-300 dark:border-blue-700 transition-all duration-200\"\n                          />\n                          <label htmlFor={`topicsSubject-${subject}`} className=\"text-sm font-semibold text-gray-700 dark:text-gray-300 group-hover/item:text-blue-600 dark:group-hover/item:text-blue-400 cursor-pointer transition-colors flex-1\">{subject}</label>\n                          {topicsFilterValues.subjects.includes(subject) && (\n                            <span className=\"text-blue-500 text-xs\">✓</span>\n                          )}\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                  {/* AYT Dersleri */}\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center gap-2 pb-2 border-b-2 border-green-300/50 dark:border-green-700/50\">\n                      <span className=\"text-sm font-black text-green-600 dark:text-green-400 px-3 py-1 bg-green-100/80 dark:bg-green-900/40 rounded-full\">AYT</span>\n                      {topicsFilterValues.subjects.filter(s => ['AYT Matematik', 'AYT Geometri', 'AYT Fizik', 'AYT Kimya', 'AYT Biyoloji'].includes(s)).length > 0 && (\n                        <span className=\"text-xs bg-green-500 text-white px-2 py-0.5 rounded-full font-bold\">{topicsFilterValues.subjects.filter(s => ['AYT Matematik', 'AYT Geometri', 'AYT Fizik', 'AYT Kimya', 'AYT Biyoloji'].includes(s)).length} seçili</span>\n                      )}\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-3\">\n                      {['AYT Matematik', 'AYT Geometri', 'AYT Fizik', 'AYT Kimya', 'AYT Biyoloji'].map((subject, idx) => (\n                        <div key={subject} className=\"flex items-center gap-2 p-2.5 rounded-lg hover:bg-green-50/80 dark:hover:bg-green-950/40 transition-all duration-200 group/item\" style={{animationDelay: `${idx * 30}ms`}}>\n                          <Checkbox\n                            id={`topicsSubject-${subject}`}\n                            checked={topicsFilterValues.subjects.includes(subject)}\n                            onCheckedChange={(checked) => {\n                              // TEK SEÇİM MODU: Bir derse tıklayınca diğerlerini temizle\n                              setTopicsFilterValues(prev => ({\n                                ...prev,\n                                subjects: checked ? [subject] : []\n                              }));\n                            }}\n                            className=\"data-[state=checked]:bg-gradient-to-r data-[state=checked]:from-green-500 data-[state=checked]:to-emerald-500 w-4 h-4 border-2 border-green-300 dark:border-green-700 transition-all duration-200\"\n                          />\n                          <label htmlFor={`topicsSubject-${subject}`} className=\"text-sm font-semibold text-gray-700 dark:text-gray-300 group-hover/item:text-green-600 dark:group-hover/item:text-green-400 cursor-pointer transition-colors flex-1\">{subject}</label>\n                          {topicsFilterValues.subjects.includes(subject) && (\n                            <span className=\"text-green-500 text-xs\">✓</span>\n                          )}\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* Tarih Filtresi - GELİŞTİRİLMİŞ */}\n            <div className=\"space-y-4 bg-gradient-to-br from-white/80 to-purple-50/60 dark:from-gray-800/80 dark:to-purple-950/40 p-5 rounded-2xl border-2 border-purple-200/40 dark:border-purple-800/40 shadow-lg hover:shadow-xl transition-all duration-300\">\n              <div className=\"flex items-center gap-3 group cursor-pointer\">\n                <div className=\"relative\">\n                  <Checkbox\n                    id=\"topicsDateFilter\"\n                    checked={topicsFilterEnabled.date}\n                    onCheckedChange={(checked) => \n                      setTopicsFilterEnabled(prev => ({ ...prev, date: checked as boolean }))\n                    }\n                    className=\"data-[state=checked]:bg-gradient-to-r data-[state=checked]:from-purple-500 data-[state=checked]:to-pink-500 w-6 h-6 border-2 border-purple-400 dark:border-purple-600 transition-all duration-300 shadow-md\"\n                  />\n                  {topicsFilterEnabled.date && (\n                    <div className=\"absolute -inset-1 bg-purple-500/20 rounded-md blur animate-pulse\"></div>\n                  )}\n                </div>\n                <label htmlFor=\"topicsDateFilter\" className=\"text-lg font-black text-gray-800 dark:text-gray-200 flex items-center gap-2 group-hover:text-purple-600 dark:group-hover:text-purple-400 transition-colors cursor-pointer\">\n                  <span className=\"text-2xl\">📅</span>\n                  <span>Tarih Aralığı</span>\n                </label>\n              </div>\n              {topicsFilterEnabled.date && (\n                <div className=\"ml-10 space-y-4 p-5 bg-white/70 dark:bg-gray-900/70 rounded-xl border border-purple-200/50 dark:border-purple-800/50 backdrop-blur-sm animate-in fade-in slide-in-from-top-2 duration-300\">\n                  {(topicsFilterValues.dateFrom || topicsFilterValues.dateTo) && (\n                    <div className=\"mb-4 p-3 bg-gradient-to-r from-purple-50 to-pink-50 dark:from-purple-950/40 dark:to-pink-950/40 rounded-lg border border-purple-200 dark:border-purple-800\">\n                      <p className=\"text-sm font-bold text-purple-700 dark:text-purple-300\">\n                        {topicsFilterResultCount > 0 \n                          ? `✅ ${topicsFilterResultCount} konu bulundu`\n                          : '⚠️ Henüz seçilen filtreye göre veri bulunmamaktadır'}\n                      </p>\n                    </div>\n                  )}\n                  <div className=\"grid grid-cols-2 gap-5\">\n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-bold text-purple-600 dark:text-purple-400 flex items-center gap-1\">\n                        <span>📍</span> Başlangıç Tarihi\n                      </label>\n                      <input\n                        type=\"date\"\n                        value={topicsFilterValues.dateFrom}\n                        onChange={(e) => setTopicsFilterValues(prev => ({ ...prev, dateFrom: e.target.value }))}\n                        className=\"w-full px-4 py-2.5 border-2 border-purple-200 dark:border-purple-700 rounded-xl bg-white dark:bg-gray-800 text-sm font-semibold focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-200\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-bold text-purple-600 dark:text-purple-400 flex items-center gap-1\">\n                        <span>📍</span> Bitiş Tarihi\n                      </label>\n                      <input\n                        type=\"date\"\n                        value={topicsFilterValues.dateTo}\n                        onChange={(e) => setTopicsFilterValues(prev => ({ ...prev, dateTo: e.target.value }))}\n                        className=\"w-full px-4 py-2.5 border-2 border-purple-200 dark:border-purple-700 rounded-xl bg-white dark:bg-gray-800 text-sm font-semibold focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-200\"\n                      />\n                    </div>\n                  </div>\n                  {topicsFilterValues.dateFrom && topicsFilterValues.dateTo && (\n                    <div className=\"flex items-center gap-2 p-3 bg-purple-50 dark:bg-purple-950/40 rounded-lg border border-purple-200/50 dark:border-purple-800/50\">\n                      <span className=\"text-sm font-semibold text-purple-600 dark:text-purple-400\">\n                        📊 Seçili Aralık: {topicsFilterValues.dateFrom} → {topicsFilterValues.dateTo}\n                      </span>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n\n          <div className=\"flex justify-between items-center gap-4 mt-8 pt-6 border-t-2 border-red-200/30 dark:border-red-800/30 relative z-10\">\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n              {[topicsFilterEnabled.tag, topicsFilterEnabled.subject, topicsFilterEnabled.date].filter(Boolean).length > 0 ? (\n                <span className=\"font-semibold flex items-center gap-2\">\n                  <span className=\"inline-block w-2 h-2 bg-green-500 rounded-full animate-pulse\"></span>\n                  {[topicsFilterEnabled.tag, topicsFilterEnabled.subject, topicsFilterEnabled.date].filter(Boolean).length} filtre aktif\n                </span>\n              ) : (\n                <span className=\"text-gray-400\">Filtre seçilmedi</span>\n              )}\n            </div>\n            <div className=\"flex gap-3\">\n              <Button\n                variant=\"outline\"\n                onClick={() => {\n                  setTopicsFilterEnabled({ tag: false, subject: false, date: false, wrongQuestions: false });\n                  setTopicsFilterValues({ tags: [], subjects: [], dateFrom: '', dateTo: '', wrongQuestions: false });\n                  toast({\n                    title: \"🔄 Filtreler Sıfırlandı\",\n                    description: \"Tüm filtre seçimleri temizlendi\",\n                    duration: 3000\n                  });\n                }}\n                className=\"border-2 border-yellow-400 dark:border-yellow-600 hover:bg-yellow-50 dark:hover:bg-yellow-900/20 text-yellow-700 dark:text-yellow-400 font-bold px-6 transition-all duration-200\"\n              >\n                🔄 Sıfırla\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={() => setShowTopicsFilterModal(false)}\n                className=\"border-2 border-gray-300 dark:border-gray-600 hover:bg-gray-100 dark:hover:bg-gray-800 font-bold px-6 transition-all duration-200\"\n              >\n                ❌ İptal\n              </Button>\n              <Button\n                onClick={() => {\n                  setShowTopicsFilterModal(false);\n                  toast({\n                    title: \"✅ Filtreler Uygulandı\",\n                    description: \"Eksik konular başarıyla filtrelendi\",\n                    duration: 3000\n                  });\n                }}\n                className=\"bg-gradient-to-r from-red-500 to-orange-500 hover:from-red-600 hover:to-orange-600 text-white font-bold px-8 shadow-lg hover:shadow-xl transition-all duration-200\"\n              >\n                ✨ Uygula\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Hata Sıklığı Filtre Modalı - GELİŞTİRİLMİŞ */}\n      <Dialog open={showErrorsFilterModal} onOpenChange={setShowErrorsFilterModal}>\n        <DialogContent className=\"max-w-3xl max-h-[85vh] overflow-y-auto bg-gradient-to-br from-orange-50/90 via-white to-red-50/90 dark:from-orange-950/60 dark:via-gray-900 dark:to-red-950/60 backdrop-blur-xl border-2 border-orange-200/50 dark:border-orange-800/50 shadow-2xl\">\n          {/* Arka Plan Animasyonları - BERAT CANKIR - 03:03:03 */}\n          <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n            <div className=\"absolute top-0 left-0 w-64 h-64 bg-gradient-to-br from-orange-500/10 to-red-500/10 rounded-full blur-3xl\"></div>\n            <div className=\"absolute bottom-0 right-0 w-56 h-56 bg-gradient-to-tr from-red-500/8 to-orange-500/8 rounded-full blur-3xl\"></div>\n          </div>\n          \n          <DialogHeader className=\"relative z-10 pb-6 border-b border-orange-200/30 dark:border-orange-800/30\">\n            <div className=\"flex items-center gap-4 mb-2\">\n              <div className=\"p-3 bg-gradient-to-br from-orange-500 to-red-500 rounded-2xl shadow-xl\">\n                <Filter className=\"h-7 w-7 text-white\" />\n              </div>\n              <div>\n                <DialogTitle className=\"text-3xl font-black bg-gradient-to-r from-orange-600 via-red-600 to-orange-600 bg-clip-text text-transparent\">\n                  🔥 Hata Sıklığı - Filtreler\n                </DialogTitle>\n                <DialogDescription className=\"text-base text-gray-600 dark:text-gray-400 font-medium mt-1\">\n                  Filtreleri aktifleştirmek için checkbox'ları işaretleyin\n                </DialogDescription>\n              </div>\n            </div>\n          </DialogHeader>\n          \n          <div className=\"space-y-7 mt-6 relative z-10\">\n            {/* Etiket Filtresi - GELİŞTİRİLMİŞ */}\n            <div className=\"space-y-4 bg-gradient-to-br from-white/80 to-orange-50/60 dark:from-gray-800/80 dark:to-orange-950/40 p-5 rounded-2xl border-2 border-orange-200/40 dark:border-orange-800/40 shadow-lg hover:shadow-xl transition-all duration-300\">\n              <div className=\"flex items-center gap-3 group cursor-pointer\">\n                <div className=\"relative\">\n                  <Checkbox\n                    id=\"errorsTagFilter\"\n                    checked={errorsFilterEnabled.tag}\n                    onCheckedChange={(checked) => \n                      setErrorsFilterEnabled(prev => ({ ...prev, tag: checked as boolean }))\n                    }\n                    className=\"data-[state=checked]:bg-gradient-to-r data-[state=checked]:from-orange-500 data-[state=checked]:to-red-500 w-6 h-6 border-2 border-orange-400 dark:border-orange-600 transition-all duration-300 shadow-md\"\n                  />\n                  {errorsFilterEnabled.tag && (\n                    <div className=\"absolute -inset-1 bg-orange-500/20 rounded-md blur animate-pulse\"></div>\n                  )}\n                </div>\n                <label htmlFor=\"errorsTagFilter\" className=\"text-lg font-black text-gray-800 dark:text-gray-200 flex items-center gap-2 group-hover:text-orange-600 dark:group-hover:text-orange-400 transition-colors cursor-pointer\">\n                  <span className=\"text-2xl\">🏷️</span>\n                  <span>Etiket Seçimi</span>\n                </label>\n              </div>\n              {errorsFilterEnabled.tag && (\n                <div className=\"ml-10 space-y-3 p-5 bg-white/70 dark:bg-gray-900/70 rounded-xl border border-orange-200/50 dark:border-orange-800/50 backdrop-blur-sm animate-in fade-in slide-in-from-top-2 duration-300\">\n                  {['Genel Deneme', 'Branş Deneme', 'Soru'].map((tag, idx) => (\n                    <div key={tag} className=\"flex items-center gap-3 p-3 rounded-lg hover:bg-orange-50/80 dark:hover:bg-orange-950/40 transition-all duration-200 group/item\" style={{animationDelay: `${idx * 50}ms`}}>\n                      <Checkbox\n                        id={`errorsTag-${tag}`}\n                        checked={errorsFilterValues.tags.includes(tag)}\n                        onCheckedChange={(checked) => {\n                          setErrorsFilterValues(prev => ({\n                            ...prev,\n                            tags: checked \n                              ? [...prev.tags, tag]\n                              : prev.tags.filter(t => t !== tag)\n                          }));\n                        }}\n                        className=\"data-[state=checked]:bg-gradient-to-r data-[state=checked]:from-orange-500 data-[state=checked]:to-red-500 w-5 h-5 border-2 border-orange-300 dark:border-orange-700 transition-all duration-200\"\n                      />\n                      <label htmlFor={`errorsTag-${tag}`} className=\"text-base font-semibold text-gray-700 dark:text-gray-300 group-hover/item:text-orange-600 dark:group-hover/item:text-orange-400 cursor-pointer transition-colors\">{tag}</label>\n                      {errorsFilterValues.tags.includes(tag) && (\n                        <span className=\"ml-auto text-xs bg-gradient-to-r from-orange-500 to-red-500 text-white px-2 py-1 rounded-full font-bold animate-in fade-in zoom-in duration-200\">✓ Seçili</span>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n\n            {/* Ders Filtresi - GELİŞTİRİLMİŞ */}\n            <div className=\"space-y-4 bg-gradient-to-br from-white/80 to-blue-50/60 dark:from-gray-800/80 dark:to-blue-950/40 p-5 rounded-2xl border-2 border-blue-200/40 dark:border-blue-800/40 shadow-lg hover:shadow-xl transition-all duration-300\">\n              <div className=\"flex items-center gap-3 group cursor-pointer\">\n                <div className=\"relative\">\n                  <Checkbox\n                    id=\"errorsSubjectFilter\"\n                    checked={errorsFilterEnabled.subject}\n                    onCheckedChange={(checked) => \n                      setErrorsFilterEnabled(prev => ({ ...prev, subject: checked as boolean }))\n                    }\n                    className=\"data-[state=checked]:bg-gradient-to-r data-[state=checked]:from-blue-500 data-[state=checked]:to-purple-500 w-6 h-6 border-2 border-blue-400 dark:border-blue-600 transition-all duration-300 shadow-md\"\n                  />\n                  {errorsFilterEnabled.subject && (\n                    <div className=\"absolute -inset-1 bg-blue-500/20 rounded-md blur animate-pulse\"></div>\n                  )}\n                </div>\n                <label htmlFor=\"errorsSubjectFilter\" className=\"text-lg font-black text-gray-800 dark:text-gray-200 flex items-center gap-2 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors cursor-pointer\">\n                  <span className=\"text-2xl\">📚</span>\n                  <span>Ders Seçimi</span>\n                </label>\n              </div>\n              {errorsFilterEnabled.subject && (\n                <div className=\"ml-10 space-y-5 p-5 bg-white/70 dark:bg-gray-900/70 rounded-xl border border-blue-200/50 dark:border-blue-800/50 backdrop-blur-sm animate-in fade-in slide-in-from-top-2 duration-300\">\n                  {/* TYT Dersleri */}\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center gap-2 pb-2 border-b-2 border-blue-300/50 dark:border-blue-700/50\">\n                      <span className=\"text-sm font-black text-blue-600 dark:text-blue-400 px-3 py-1 bg-blue-100/80 dark:bg-blue-900/40 rounded-full\">TYT</span>\n                      {errorsFilterValues.subjects.filter(s => ['Türkçe', 'Sosyal Bilimler', 'TYT Matematik', 'TYT Geometri', 'Fen Bilimleri'].includes(s)).length > 0 && (\n                        <span className=\"text-xs bg-blue-500 text-white px-2 py-0.5 rounded-full font-bold\">{errorsFilterValues.subjects.filter(s => ['Türkçe', 'Sosyal Bilimler', 'TYT Matematik', 'TYT Geometri', 'Fen Bilimleri'].includes(s)).length} seçili</span>\n                      )}\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-3\">\n                      {['Türkçe', 'Sosyal Bilimler', 'TYT Matematik', 'TYT Geometri', 'Fen Bilimleri'].map((subject, idx) => (\n                        <div key={subject} className=\"flex items-center gap-2 p-2.5 rounded-lg hover:bg-blue-50/80 dark:hover:bg-blue-950/40 transition-all duration-200 group/item\" style={{animationDelay: `${idx * 30}ms`}}>\n                          <Checkbox\n                            id={`errorsSubject-${subject}`}\n                            checked={errorsFilterValues.subjects.includes(subject)}\n                            onCheckedChange={(checked) => {\n                              // TEK SEÇİM MODU: Bir derse tıklayınca diğerlerini temizle\n                              setErrorsFilterValues(prev => ({\n                                ...prev,\n                                subjects: checked ? [subject] : []\n                              }));\n                            }}\n                            className=\"data-[state=checked]:bg-gradient-to-r data-[state=checked]:from-blue-500 data-[state=checked]:to-cyan-500 w-4 h-4 border-2 border-blue-300 dark:border-blue-700 transition-all duration-200\"\n                          />\n                          <label htmlFor={`errorsSubject-${subject}`} className=\"text-sm font-semibold text-gray-700 dark:text-gray-300 group-hover/item:text-blue-600 dark:group-hover/item:text-blue-400 cursor-pointer transition-colors flex-1\">{subject}</label>\n                          {errorsFilterValues.subjects.includes(subject) && (\n                            <span className=\"text-blue-500 text-xs\">✓</span>\n                          )}\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                  {/* AYT Dersleri */}\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center gap-2 pb-2 border-b-2 border-green-300/50 dark:border-green-700/50\">\n                      <span className=\"text-sm font-black text-green-600 dark:text-green-400 px-3 py-1 bg-green-100/80 dark:bg-green-900/40 rounded-full\">AYT</span>\n                      {errorsFilterValues.subjects.filter(s => ['AYT Matematik', 'AYT Geometri', 'AYT Fizik', 'AYT Kimya', 'AYT Biyoloji'].includes(s)).length > 0 && (\n                        <span className=\"text-xs bg-green-500 text-white px-2 py-0.5 rounded-full font-bold\">{errorsFilterValues.subjects.filter(s => ['AYT Matematik', 'AYT Geometri', 'AYT Fizik', 'AYT Kimya', 'AYT Biyoloji'].includes(s)).length} seçili</span>\n                      )}\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-3\">\n                      {['AYT Matematik', 'AYT Geometri', 'AYT Fizik', 'AYT Kimya', 'AYT Biyoloji'].map((subject, idx) => (\n                        <div key={subject} className=\"flex items-center gap-2 p-2.5 rounded-lg hover:bg-green-50/80 dark:hover:bg-green-950/40 transition-all duration-200 group/item\" style={{animationDelay: `${idx * 30}ms`}}>\n                          <Checkbox\n                            id={`errorsSubject-${subject}`}\n                            checked={errorsFilterValues.subjects.includes(subject)}\n                            onCheckedChange={(checked) => {\n                              // TEK SEÇİM MODU: Bir derse tıklayınca diğerlerini temizle\n                              setErrorsFilterValues(prev => ({\n                                ...prev,\n                                subjects: checked ? [subject] : []\n                              }));\n                            }}\n                            className=\"data-[state=checked]:bg-gradient-to-r data-[state=checked]:from-green-500 data-[state=checked]:to-emerald-500 w-4 h-4 border-2 border-green-300 dark:border-green-700 transition-all duration-200\"\n                          />\n                          <label htmlFor={`errorsSubject-${subject}`} className=\"text-sm font-semibold text-gray-700 dark:text-gray-300 group-hover/item:text-green-600 dark:group-hover/item:text-green-400 cursor-pointer transition-colors flex-1\">{subject}</label>\n                          {errorsFilterValues.subjects.includes(subject) && (\n                            <span className=\"text-green-500 text-xs\">✓</span>\n                          )}\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* Tarih Filtresi - GELİŞTİRİLMİŞ */}\n            <div className=\"space-y-4 bg-gradient-to-br from-white/80 to-purple-50/60 dark:from-gray-800/80 dark:to-purple-950/40 p-5 rounded-2xl border-2 border-purple-200/40 dark:border-purple-800/40 shadow-lg hover:shadow-xl transition-all duration-300\">\n              <div className=\"flex items-center gap-3 group cursor-pointer\">\n                <div className=\"relative\">\n                  <Checkbox\n                    id=\"errorsDateFilter\"\n                    checked={errorsFilterEnabled.date}\n                    onCheckedChange={(checked) => \n                      setErrorsFilterEnabled(prev => ({ ...prev, date: checked as boolean }))\n                    }\n                    className=\"data-[state=checked]:bg-gradient-to-r data-[state=checked]:from-purple-500 data-[state=checked]:to-pink-500 w-6 h-6 border-2 border-purple-400 dark:border-purple-600 transition-all duration-300 shadow-md\"\n                  />\n                  {errorsFilterEnabled.date && (\n                    <div className=\"absolute -inset-1 bg-purple-500/20 rounded-md blur animate-pulse\"></div>\n                  )}\n                </div>\n                <label htmlFor=\"errorsDateFilter\" className=\"text-lg font-black text-gray-800 dark:text-gray-200 flex items-center gap-2 group-hover:text-purple-600 dark:group-hover:text-purple-400 transition-colors cursor-pointer\">\n                  <span className=\"text-2xl\">📅</span>\n                  <span>Tarih Aralığı</span>\n                </label>\n              </div>\n              {errorsFilterEnabled.date && (\n                <div className=\"ml-10 space-y-4 p-5 bg-white/70 dark:bg-gray-900/70 rounded-xl border border-purple-200/50 dark:border-purple-800/50 backdrop-blur-sm animate-in fade-in slide-in-from-top-2 duration-300\">\n                  <div className=\"grid grid-cols-2 gap-5\">\n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-bold text-purple-600 dark:text-purple-400 flex items-center gap-1\">\n                        <span>📍</span> Başlangıç Tarihi\n                      </label>\n                      <input\n                        type=\"date\"\n                        value={errorsFilterValues.dateFrom}\n                        onChange={(e) => setErrorsFilterValues(prev => ({ ...prev, dateFrom: e.target.value }))}\n                        className=\"w-full px-4 py-2.5 border-2 border-purple-200 dark:border-purple-700 rounded-xl bg-white dark:bg-gray-800 text-sm font-semibold focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-200\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-bold text-purple-600 dark:text-purple-400 flex items-center gap-1\">\n                        <span>📍</span> Bitiş Tarihi\n                      </label>\n                      <input\n                        type=\"date\"\n                        value={errorsFilterValues.dateTo}\n                        onChange={(e) => setErrorsFilterValues(prev => ({ ...prev, dateTo: e.target.value }))}\n                        className=\"w-full px-4 py-2.5 border-2 border-purple-200 dark:border-purple-700 rounded-xl bg-white dark:bg-gray-800 text-sm font-semibold focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-200\"\n                      />\n                    </div>\n                  </div>\n                  {errorsFilterValues.dateFrom && errorsFilterValues.dateTo && (\n                    <div className=\"flex items-center gap-2 p-3 bg-purple-50 dark:bg-purple-950/40 rounded-lg border border-purple-200/50 dark:border-purple-800/50\">\n                      <span className=\"text-sm font-semibold text-purple-600 dark:text-purple-400\">\n                        📊 Seçili Aralık: {errorsFilterValues.dateFrom} → {errorsFilterValues.dateTo}\n                      </span>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n\n          <div className=\"flex justify-between items-center gap-4 mt-8 pt-6 border-t-2 border-orange-200/30 dark:border-orange-800/30 relative z-10\">\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n              {[errorsFilterEnabled.tag, errorsFilterEnabled.subject, errorsFilterEnabled.date].filter(Boolean).length > 0 ? (\n                <span className=\"font-semibold flex items-center gap-2\">\n                  <span className=\"inline-block w-2 h-2 bg-green-500 rounded-full animate-pulse\"></span>\n                  {[errorsFilterEnabled.tag, errorsFilterEnabled.subject, errorsFilterEnabled.date].filter(Boolean).length} filtre aktif\n                </span>\n              ) : (\n                <span className=\"text-gray-400\">Filtre seçilmedi</span>\n              )}\n            </div>\n            <div className=\"flex gap-3\">\n              <Button\n                variant=\"outline\"\n                onClick={() => {\n                  setErrorsFilterEnabled({ tag: false, subject: false, date: false, wrongQuestions: false });\n                  setErrorsFilterValues({ tags: [], subjects: [], dateFrom: '', dateTo: '', wrongQuestions: false });\n                  toast({\n                    title: \"🔄 Filtreler Sıfırlandı\",\n                    description: \"Tüm filtre seçimleri temizlendi\",\n                    duration: 3000\n                  });\n                }}\n                className=\"border-2 border-yellow-400 dark:border-yellow-600 hover:bg-yellow-50 dark:hover:bg-yellow-900/20 text-yellow-700 dark:text-yellow-400 font-bold px-6 transition-all duration-200\"\n              >\n                🔄 Sıfırla\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={() => setShowErrorsFilterModal(false)}\n                className=\"border-2 border-gray-300 dark:border-gray-600 hover:bg-gray-100 dark:hover:bg-gray-800 font-bold px-6 transition-all duration-200\"\n              >\n                ❌ İptal\n              </Button>\n              <Button\n                onClick={() => {\n                  setShowErrorsFilterModal(false);\n                  toast({\n                    title: \"✅ Filtreler Uygulandı\",\n                    description: \"Hata sıklığı başarıyla filtrelendi\",\n                    duration: 3000\n                  });\n                }}\n                className=\"bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 text-white font-bold px-8 shadow-lg hover:shadow-xl transition-all duration-200\"\n              >\n                ✨ Uygula\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Tamamlanan Hatalı Konular Modalı */}\n      <Dialog open={showCompletedTopicsModal} onOpenChange={setShowCompletedTopicsModal}>\n        <DialogContent className=\"sm:max-w-5xl max-h-[85vh] overflow-y-auto\" key={completedTopicsRefreshKey}>\n          <DialogHeader>\n            <DialogTitle className=\"text-3xl font-bold text-center bg-gradient-to-r from-green-600 via-emerald-600 to-teal-600 bg-clip-text text-transparent\">\n              ✅ Tamamlanan Hatalı Konular Geçmişi\n            </DialogTitle>\n            <DialogDescription className=\"text-center text-muted-foreground text-lg\">\n              Checkbox ile işaretlediğiniz ve tamamladığınız tüm konuların geçmişi\n            </DialogDescription>\n          </DialogHeader>\n          \n          {/* Filtre Butonları */}\n          <div className=\"flex gap-2 justify-center flex-wrap\">\n            <Button\n              onClick={() => setCompletedTopicsFilter('all')}\n              variant={completedTopicsFilter === 'all' ? 'default' : 'outline'}\n              className={`${completedTopicsFilter === 'all' ? 'bg-green-600 hover:bg-green-700' : ''} font-semibold`}\n            >\n              🔎 Tümü\n            </Button>\n            <Button\n              onClick={() => setCompletedTopicsFilter('general')}\n              variant={completedTopicsFilter === 'general' ? 'default' : 'outline'}\n              className={`${completedTopicsFilter === 'general' ? 'bg-blue-600 hover:bg-blue-700' : ''} font-semibold`}\n            >\n              📝 Genel Deneme\n            </Button>\n            <Button\n              onClick={() => setCompletedTopicsFilter('branch')}\n              variant={completedTopicsFilter === 'branch' ? 'default' : 'outline'}\n              className={`${completedTopicsFilter === 'branch' ? 'bg-purple-600 hover:bg-purple-700' : ''} font-semibold`}\n            >\n              📚 Branş Deneme\n            </Button>\n            <Button\n              onClick={() => setCompletedTopicsFilter('question')}\n              variant={completedTopicsFilter === 'question' ? 'default' : 'outline'}\n              className={`${completedTopicsFilter === 'question' ? 'bg-orange-600 hover:bg-orange-700' : ''} font-semibold`}\n            >\n              ❓ Soru Hataları\n            </Button>\n          </div>\n          \n          <div className=\"space-y-4\">\n            {(() => {\n              // LocalStorage'dan Eksik Olduğum Konular'dan tamamlanan konuları al\n              const completedFromMissing = JSON.parse(localStorage.getItem('completedTopicsFromMissing') || '[]');\n              \n              // Filtreye göre filtrele\n              let allCompletedRaw = [];\n              if (completedTopicsFilter === 'all') {\n                allCompletedRaw = completedFromMissing;\n              } else if (completedTopicsFilter === 'general') {\n                allCompletedRaw = completedFromMissing.filter((item: any) => item.tag === 'Genel Deneme');\n              } else if (completedTopicsFilter === 'branch') {\n                allCompletedRaw = completedFromMissing.filter((item: any) => item.tag === 'Branş Deneme');\n              } else if (completedTopicsFilter === 'question') {\n                allCompletedRaw = completedFromMissing.filter((item: any) => item.tag === 'Soru');\n              }\n              \n              // Konu bazında grupla - aynı konu birden fazla kez eklenebilir\n              const topicGroups = allCompletedRaw.reduce((acc: any, item: any) => {\n                // Key'den subject ve topic bilgisini çıkar (format: \"subject-topic\")\n                let subject = item.subject;\n                let topic = item.topic;\n                \n                // Eğer subject veya topic yoksa, key'den parse et\n                if (!subject || !topic) {\n                  const keyParts = (item.key || '').split('-');\n                  if (keyParts.length >= 2) {\n                    subject = subject || keyParts[0] || capitalizeSubjectName(keyParts[0]) || 'Genel';\n                    topic = topic || keyParts.slice(1).join('-') || normalizeTopic(keyParts.slice(1).join('-')) || 'Konu Belirtilmemiş';\n                  }\n                }\n                \n                // Fallback değerleri\n                subject = subject || item.tag || 'Genel';\n                topic = topic || 'Konu Belirtilmemiş';\n                const tag = item.tag || 'Genel';\n                const topicKey = `${subject}-${topic}`;\n                \n                if (!acc[topicKey]) {\n                  acc[topicKey] = {\n                    subject,\n                    topic,\n                    tag,\n                    entries: []\n                  };\n                }\n                acc[topicKey].entries.push({\n                  key: item.key,\n                  completedAt: item.completedAt,\n                  frequency: item.frequency || 1\n                });\n                return acc;\n              }, {});\n              \n              // Her konu grubu için toplam hata sayısını hesapla\n              const allCompleted = Object.values(topicGroups).map((group: any) => {\n                const totalFrequency = group.entries.reduce((sum: number, entry: any) => sum + entry.frequency, 0);\n                const latestEntry = group.entries.sort((a: any, b: any) => \n                  new Date(b.completedAt).getTime() - new Date(a.completedAt).getTime()\n                )[0];\n                \n                return {\n                  subject: group.subject,\n                  topic: group.topic,\n                  tag: group.tag,\n                  totalFrequency,\n                  entryCount: group.entries.length,\n                  latestCompletedAt: latestEntry.completedAt,\n                  allEntries: group.entries\n                };\n              }).sort((a: any, b: any) => new Date(b.latestCompletedAt).getTime() - new Date(a.latestCompletedAt).getTime());\n              \n              if (allCompleted.length === 0) {\n                return (\n                  <div className=\"text-center py-12 text-muted-foreground\">\n                    <CheckCircle className=\"h-16 w-16 mx-auto mb-4 opacity-40\" />\n                    <p className=\"text-lg\">Henüz tamamlanmış konu yok</p>\n                    <p className=\"text-sm mt-2\">🎯 Eksik Olduğum Konular bölümünden konuları işaretleyerek tamamlayabilirsiniz</p>\n                  </div>\n                );\n              }\n              \n              return (\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between mb-4 p-3 bg-green-50 dark:bg-green-950/30 rounded-lg\">\n                    <div className=\"text-sm font-semibold text-green-700 dark:text-green-400\">\n                      Toplam {allCompleted.length} farklı konu tamamlandı 🎉\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-3 max-h-[60vh] overflow-y-auto custom-scrollbar pr-2\">\n                    {allCompleted.map((item, index) => (\n                      <div \n                        key={index} \n                        className=\"bg-gradient-to-r from-green-50/50 to-emerald-50/50 dark:from-green-950/20 dark:to-emerald-950/20 rounded-xl p-5 border-2 border-green-200/50 dark:border-green-800/50 hover:shadow-lg transition-all duration-300\"\n                      >\n                        <div className=\"flex items-start justify-between gap-4\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center gap-3 mb-3\">\n                              <span className=\"px-3 py-1 bg-green-600 text-white text-sm font-bold rounded-full shadow-sm\">\n                                {item.subject}\n                              </span>\n                              <span className={`px-3 py-1 text-xs font-bold rounded-full ${\n                                item.tag === 'Genel Deneme' ? 'bg-blue-100 text-blue-700 dark:bg-blue-900/40 dark:text-blue-400' :\n                                item.tag === 'Branş Deneme' ? 'bg-purple-100 text-purple-700 dark:bg-purple-900/40 dark:text-purple-400' :\n                                'bg-orange-100 text-orange-700 dark:bg-orange-900/40 dark:text-orange-400'\n                              }`}>\n                                {item.tag === 'Genel Deneme' ? 'Genel Deneme' : \n                                 item.tag === 'Branş Deneme' ? 'Branş Deneme' : \n                                 'Soru'}\n                              </span>\n                            </div>\n                            <div className=\"text-lg font-bold text-gray-800 dark:text-gray-200 mb-3\">\n                              {normalizeTopic(item.topic)}\n                            </div>\n                            \n                            <div className=\"text-xs text-gray-600 dark:text-gray-400 flex items-center gap-2 mt-2\">\n                              <Calendar className=\"h-3.5 w-3.5\" />\n                              {new Date(item.latestCompletedAt).toLocaleDateString('tr-TR').replace(/\\//g, '.')}{' '}{new Date(item.latestCompletedAt).toLocaleTimeString('tr-TR', { hour: '2-digit', minute: '2-digit' })}\n                            </div>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            <button\n                              onClick={() => {\n                                // LocalStorage'dan tüm bu konuya ait kayıtları sil ve state'i güncelle\n                                item.allEntries.forEach((entry: any) => {\n                                  const saved = localStorage.getItem('completedTopicsFromMissing');\n                                  if (saved) {\n                                    const arr = JSON.parse(saved);\n                                    const filtered = arr.filter((e: any) => e.key !== entry.key);\n                                    localStorage.setItem('completedTopicsFromMissing', JSON.stringify(filtered));\n                                  }\n                                  // State'ten de sil\n                                  setCompletedTopics(prev => {\n                                    const newSet = new Set(prev);\n                                    newSet.delete(entry.key);\n                                    return newSet;\n                                  });\n                                });\n                                \n                                // State güncelleme event'i tetikle\n                                window.dispatchEvent(new Event('localStorageUpdate'));\n                                \n                                // Modalı yenile\n                                setCompletedTopicsRefreshKey(prev => prev + 1);\n                                \n                                toast({ \n                                  title: \"✅ Silindi\", \n                                  description: `${item.topic} konusu tamamlananlardan kaldırıldı.`,\n                                  duration: 2000\n                                });\n                              }}\n                              className=\"p-2 bg-red-100 dark:bg-red-900/40 hover:bg-red-200 dark:hover:bg-red-900/60 rounded-lg transition-colors\"\n                            >\n                              <Trash2 className=\"h-4 w-4 text-red-600 dark:text-red-400\" />\n                            </button>\n                            <div className=\"p-3 bg-green-100 dark:bg-green-900/40 rounded-xl\">\n                              <CheckCircle className=\"h-6 w-6 text-green-600 dark:text-green-400\" />\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              );\n            })()}\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Tamamlanan Hatalı Sorular Modalı */}\n      <Dialog open={showCompletedErrorsModal} onOpenChange={setShowCompletedErrorsModal}>\n        <DialogContent className=\"sm:max-w-5xl max-h-[85vh] overflow-y-auto\" key={completedErrorsRefreshKey}>\n          <DialogHeader>\n            <DialogTitle className=\"text-3xl font-bold text-center bg-gradient-to-r from-orange-600 via-red-600 to-pink-600 bg-clip-text text-transparent\">\n              ✅ Tamamlanan Hatalı Sorular Geçmişi\n            </DialogTitle>\n            <DialogDescription className=\"text-center text-muted-foreground text-lg\">\n              Hata Sıklığı Analizi bölümünden checkbox ile işaretlediğiniz ve tamamladığınız tüm hataların geçmişi\n            </DialogDescription>\n          </DialogHeader>\n          \n          {/* Filtre Butonları */}\n          <div className=\"flex gap-2 justify-center flex-wrap\">\n            <Button\n              onClick={() => setCompletedErrorsFilter('all')}\n              variant={completedErrorsFilter === 'all' ? 'default' : 'outline'}\n              className={`${completedErrorsFilter === 'all' ? 'bg-orange-600 hover:bg-orange-700' : ''} font-semibold`}\n            >\n              🔎 Tümü\n            </Button>\n            <Button\n              onClick={() => setCompletedErrorsFilter('general')}\n              variant={completedErrorsFilter === 'general' ? 'default' : 'outline'}\n              className={`${completedErrorsFilter === 'general' ? 'bg-blue-600 hover:bg-blue-700' : ''} font-semibold`}\n            >\n              📝 Genel Deneme\n            </Button>\n            <Button\n              onClick={() => setCompletedErrorsFilter('branch')}\n              variant={completedErrorsFilter === 'branch' ? 'default' : 'outline'}\n              className={`${completedErrorsFilter === 'branch' ? 'bg-purple-600 hover:bg-purple-700' : ''} font-semibold`}\n            >\n              📚 Branş Deneme\n            </Button>\n            <Button\n              onClick={() => setCompletedErrorsFilter('question')}\n              variant={completedErrorsFilter === 'question' ? 'default' : 'outline'}\n              className={`${completedErrorsFilter === 'question' ? 'bg-pink-600 hover:bg-pink-700' : ''} font-semibold`}\n            >\n              ❓ Soru Hataları\n            </Button>\n          </div>\n          \n          <div className=\"space-y-4\">\n            {(() => {\n              // LocalStorage'dan Hata Sıklığı Analizi'nden tamamlanan hataları al\n              const completedGeneralErrors = JSON.parse(localStorage.getItem('completedGeneralExamErrors') || '[]');\n              const completedBranchErrors = JSON.parse(localStorage.getItem('completedBranchExamErrors') || '[]');\n              const completedQuestionErrors = JSON.parse(localStorage.getItem('completedQuestionErrors') || '[]');\n              \n              // Tüm hataları birleştir\n              let allCompletedErrorsRaw = [\n                ...completedGeneralErrors,\n                ...completedBranchErrors,\n                ...completedQuestionErrors\n              ];\n              \n              // Filtreye göre filtrele\n              if (completedErrorsFilter === 'general') {\n                allCompletedErrorsRaw = completedGeneralErrors;\n              } else if (completedErrorsFilter === 'branch') {\n                allCompletedErrorsRaw = completedBranchErrors;\n              } else if (completedErrorsFilter === 'question') {\n                allCompletedErrorsRaw = completedQuestionErrors;\n              }\n              \n              // Konu bazında grupla\n              const errorGroups = allCompletedErrorsRaw.reduce((acc: any, item: any) => {\n                // Eski format (sadece key ve completedAt) ise key'den parse et\n                let subject = item.subject;\n                let topic = item.topic;\n                let tag = item.tag;\n                let exam_type = item.exam_type || 'TYT';\n                \n                if (!subject || !topic) {\n                  // Key formatı: \"exam_type-subject-topic\" veya \"subject-topic\"\n                  if (item.key) {\n                    const parts = item.key.split('-');\n                    if (parts.length >= 3) {\n                      // Format: \"TYT-TYT Türkçe-Bvbb\" veya \"AYT-AYT Matematik-Bbb\"\n                      exam_type = parts[0]; // TYT veya AYT\n                      subject = parts[1]; // \"TYT Türkçe\", \"AYT Matematik\"\n                      topic = parts.slice(2).join('-'); // \"Bvbb\", geri kalan tüm parçalar\n                      \n                      // Subject'i normalize et - \"TYT Türkçe\" -> \"Türkçe\"\n                      subject = subject.replace(/^(TYT|AYT)\\s+/, '');\n                      \n                      // Tag'i completedErrorsFilter'dan tahmin et\n                      if (completedErrorsFilter === 'general') {\n                        tag = 'Genel Deneme';\n                      } else if (completedErrorsFilter === 'branch') {\n                        tag = 'Branş Deneme';\n                      } else if (completedErrorsFilter === 'question') {\n                        tag = 'Soru';\n                      } else {\n                        tag = 'Soru'; // Default\n                      }\n                    } else {\n                      // Başarısız parse, atla\n                      return acc;\n                    }\n                  } else {\n                    // Key de yok, atla\n                    return acc;\n                  }\n                }\n                \n                const topicKey = `${subject}-${topic}`;\n                \n                if (!acc[topicKey]) {\n                  acc[topicKey] = {\n                    subject,\n                    topic,\n                    tag,\n                    exam_type,\n                    entries: []\n                  };\n                }\n                acc[topicKey].entries.push({\n                  key: item.key,\n                  completedAt: item.completedAt,\n                  frequency: item.frequency || 1,\n                  difficulty: item.difficulty,\n                  category: item.category\n                });\n                return acc;\n              }, {});\n              \n              // Her konu grubu için toplam hata sayısını hesapla\n              const allCompletedErrors = Object.values(errorGroups).map((group: any) => {\n                const totalFrequency = group.entries.reduce((sum: number, entry: any) => sum + (entry.frequency || 1), 0);\n                const latestEntry = group.entries.sort((a: any, b: any) => \n                  new Date(b.completedAt).getTime() - new Date(a.completedAt).getTime()\n                )[0];\n                \n                return {\n                  subject: group.subject,\n                  topic: group.topic,\n                  tag: group.tag,\n                  exam_type: group.exam_type,\n                  totalFrequency,\n                  entryCount: group.entries.length,\n                  latestCompletedAt: latestEntry.completedAt,\n                  difficulty: latestEntry.difficulty,\n                  category: latestEntry.category,\n                  allEntries: group.entries\n                };\n              }).sort((a: any, b: any) => new Date(b.latestCompletedAt).getTime() - new Date(a.latestCompletedAt).getTime());\n              \n              if (allCompletedErrors.length === 0) {\n                return (\n                  <div className=\"text-center py-12 text-muted-foreground\">\n                    <CheckCircle className=\"h-16 w-16 mx-auto mb-4 opacity-40\" />\n                    <p className=\"text-lg\">Henüz tamamlanmış hata yok</p>\n                    <p className=\"text-sm mt-2\">🔍 Hata Sıklığı Analizi bölümünden hataları işaretleyerek tamamlayabilirsiniz</p>\n                  </div>\n                );\n              }\n              \n              return (\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between mb-4 p-3 bg-orange-50 dark:bg-orange-950/30 rounded-lg\">\n                    <div className=\"text-sm font-semibold text-orange-700 dark:text-orange-400\">\n                      Toplam {allCompletedErrors.length} farklı hata tamamlandı 🎉\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-3 max-h-[60vh] overflow-y-auto custom-scrollbar pr-2\">\n                    {allCompletedErrors.map((item, index) => (\n                      <div \n                        key={index} \n                        className=\"bg-gradient-to-r from-orange-50/50 to-pink-50/50 dark:from-orange-950/20 dark:to-pink-950/20 rounded-xl p-5 border-2 border-orange-200/50 dark:border-orange-800/50 hover:shadow-lg transition-all duration-300\"\n                      >\n                        <div className=\"flex items-start justify-between gap-4\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center gap-3 mb-3\">\n                              <span className=\"px-3 py-1 bg-orange-600 text-white text-sm font-bold rounded-full shadow-sm\">\n                                {item.exam_type} {item.subject}\n                              </span>\n                              <span className={`px-3 py-1 text-xs font-bold rounded-full ${\n                                item.tag === 'Genel Deneme' ? 'bg-blue-100 text-blue-700 dark:bg-blue-900/40 dark:text-blue-400' :\n                                item.tag === 'Branş Deneme' ? 'bg-purple-100 text-purple-700 dark:bg-purple-900/40 dark:text-purple-400' :\n                                'bg-pink-100 text-pink-700 dark:bg-pink-900/40 dark:text-pink-400'\n                              }`}>\n                                {item.tag}\n                              </span>\n                            </div>\n                            <div className=\"text-lg font-bold text-gray-800 dark:text-gray-200 mb-3\">\n                              {normalizeTopic(item.topic)}\n                            </div>\n                            \n                            <div className=\"flex gap-2 flex-wrap mb-3\">\n                              {item.difficulty && (\n                                <span className={`text-xs px-2 py-1 rounded-full font-medium ${\n                                  item.difficulty === 'kolay' ? 'bg-green-100 text-green-700 dark:bg-green-900/40 dark:text-green-300' :\n                                  item.difficulty === 'orta' ? 'bg-orange-100 text-orange-700 dark:bg-orange-900/40 dark:text-orange-300' :\n                                  'bg-red-100 text-red-700 dark:bg-red-900/40 dark:text-red-300'\n                                }`}>\n                                  📊 {item.difficulty.charAt(0).toUpperCase() + item.difficulty.slice(1)}\n                                </span>\n                              )}\n                              {item.category && (\n                                <span className=\"text-xs px-2 py-1 rounded-full bg-blue-100 text-blue-700 dark:bg-blue-900/40 dark:text-blue-300 font-medium\">\n                                  🔍 {item.category === 'kavram' ? 'Kavram Eksikliği' :\n                                      item.category === 'hesaplama' ? 'Hesaplama Hatası' :\n                                      item.category === 'analiz' ? 'Analiz Sorunu' : 'Dikkatsizlik'}\n                                </span>\n                              )}\n                            </div>\n                            \n                            <div className=\"text-xs text-gray-600 dark:text-gray-400 flex items-center gap-2 mt-2\">\n                              <Calendar className=\"h-3.5 w-3.5\" />\n                              {new Date(item.latestCompletedAt).toLocaleDateString('tr-TR').replace(/\\//g, '.')}{' '}{new Date(item.latestCompletedAt).toLocaleTimeString('tr-TR', { hour: '2-digit', minute: '2-digit' })}\n                            </div>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            <button\n                              onClick={() => {\n                                // LocalStorage'dan tüm bu hataya ait kayıtları sil ve state'i güncelle\n                                item.allEntries.forEach((entry: any) => {\n                                  if (item.tag === 'Genel Deneme') {\n                                    const saved = localStorage.getItem('completedGeneralExamErrors');\n                                    if (saved) {\n                                      const arr = JSON.parse(saved);\n                                      const filtered = arr.filter((e: any) => e.key !== entry.key);\n                                      localStorage.setItem('completedGeneralExamErrors', JSON.stringify(filtered));\n                                    }\n                                    // State'ten de sil\n                                    setCompletedExamErrors(prev => {\n                                      const newMap = new Map(prev);\n                                      newMap.delete(entry.key);\n                                      return newMap;\n                                    });\n                                  } else if (item.tag === 'Branş Deneme') {\n                                    const saved = localStorage.getItem('completedBranchExamErrors');\n                                    if (saved) {\n                                      const arr = JSON.parse(saved);\n                                      const filtered = arr.filter((e: any) => e.key !== entry.key);\n                                      localStorage.setItem('completedBranchExamErrors', JSON.stringify(filtered));\n                                    }\n                                    // State'ten de sil\n                                    setCompletedExamErrors(prev => {\n                                      const newMap = new Map(prev);\n                                      newMap.delete(entry.key);\n                                      return newMap;\n                                    });\n                                  } else {\n                                    const saved = localStorage.getItem('completedQuestionErrors');\n                                    if (saved) {\n                                      const arr = JSON.parse(saved);\n                                      const filtered = arr.filter((e: any) => e.key !== entry.key);\n                                      localStorage.setItem('completedQuestionErrors', JSON.stringify(filtered));\n                                    }\n                                    // State'ten de sil\n                                    setCompletedQuestionErrors(prev => {\n                                      const newMap = new Map(prev);\n                                      newMap.delete(entry.key);\n                                      return newMap;\n                                    });\n                                  }\n                                });\n                                \n                                // State güncelleme event'i tetikle\n                                window.dispatchEvent(new Event('localStorageUpdate'));\n                                \n                                // Modalı yenile\n                                setCompletedErrorsRefreshKey(prev => prev + 1);\n                                \n                                toast({ \n                                  title: \"✅ Silindi\", \n                                  description: `${item.topic} hatası tamamlananlardan kaldırıldı.`,\n                                  duration: 2000\n                                });\n                              }}\n                              className=\"p-2 bg-red-100 dark:bg-red-900/40 hover:bg-red-200 dark:hover:bg-red-900/60 rounded-lg transition-colors\"\n                            >\n                              <Trash2 className=\"h-4 w-4 text-red-600 dark:text-red-400\" />\n                            </button>\n                            <div className=\"p-3 bg-orange-100 dark:bg-orange-900/40 rounded-xl\">\n                              <CheckCircle className=\"h-6 w-6 text-orange-600 dark:text-orange-400\" />\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              );\n            })()}\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n\n// Performans optimizasyonu için React.memo ile sarılmış bileşen\nexport const AdvancedCharts = memo(AdvancedChartsComponent);\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":232628},"client/src/bilesenler/gunun-gorevleri-widget.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Task } from \"@shared/sema\";\nimport { CheckCircle2, Circle, Plus, Calendar, PartyPopper } from \"lucide-react\";\nimport { apiRequest, sorguIstemcisi } from \"@/kutuphane/sorguIstemcisi\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState, useEffect, useMemo } from \"react\";\n\nexport function TodaysTasksWidget() {\n  const { toast } = useToast();\n  const [celebratingTask, setCelebratingTask] = useState<string | null>(null);\n  const [showCompletionBar, setShowCompletionBar] = useState(false);\n  \n  // Kategori isimlerini düzgün formatta gösterecek fonksiyon\n  const getCategoryText = (category: string) => {\n    switch (category) {\n      case \"genel\":\n        return \"Genel\";\n      case \"turkce\":\n        return \"Türkçe\";\n      case \"sosyal\":\n        return \"Sosyal Bilimler\";\n      case \"matematik\":\n        return \"TYT Matematik\";\n      case \"fizik\":\n        return \"TYT Fizik\";\n      case \"kimya\":\n        return \"TYT Kimya\";\n      case \"biyoloji\":\n        return \"TYT Biyoloji\";\n      case \"tyt-geometri\":\n        return \"TYT Geometri\";\n      case \"ayt-geometri\":\n        return \"AYT Geometri\";\n      case \"ayt-matematik\":\n        return \"AYT Matematik\";\n      case \"ayt-fizik\":\n        return \"AYT Fizik\";\n      case \"ayt-kimya\":\n        return \"AYT Kimya\";\n      case \"ayt-biyoloji\":\n        return \"AYT Biyoloji\";\n      default:\n        return category;\n    }\n  };\n  \n  // Bugünün tarihini YYYY-AA-BB biçiminde al (Türkiye saat dilimi)\n  const getTurkeyDateString = () => {\n    const now = new Date();\n    const turkeyTime = new Date(now.toLocaleString('en-US', { timeZone: 'Europe/Istanbul' }));\n    const year = turkeyTime.getFullYear();\n    const month = (turkeyTime.getMonth() + 1).toString().padStart(2, '0');\n    const day = turkeyTime.getDate().toString().padStart(2, '0');\n    return `${year}-${month}-${day}`;\n  };\n  const todayStr = getTurkeyDateString();\n  \n  const { data: todaysData, isLoading } = useQuery<{\n    date: string;\n    dayNumber: number;\n    daysRemaining: number;\n    tasks: Task[];\n    tasksCount: number;\n  }>({\n    queryKey: [\"/api/calendar\", todayStr],\n    queryFn: async () => {\n      const response = await fetch(`/api/calendar/${todayStr}`);\n      if (!response.ok) throw new Error('Failed to fetch today\\'s tasks');\n      return response.json();\n    },\n    refetchInterval: 2000,\n  });\n\n  const toggleTaskMutation = useMutation({\n    mutationFn: (taskId: string) => \n      apiRequest(\"PATCH\", `/api/tasks/${taskId}/toggle`),\n    onSuccess: (_, taskId) => {\n      // Görev tamamlandı mı kontrol et - filtrelenmemiş listeden al\n      const task = allTasks.find(t => t.id === taskId);\n      const wasCompleted = task?.completed;\n      \n      // Tamamlanmayan görevler için hemen güncelle\n      if (wasCompleted) {\n        sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/calendar\", todayStr] });\n        sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      }\n      \n      // Eğer görev şimdi tamamlandıysa celebration göster\n      if (!wasCompleted) {\n        setCelebratingTask(taskId);\n        setShowCompletionBar(true);\n        \n        toast({\n          title: \"🎉 Tebrikler!\",\n          description: \"Görev başarıyla tamamlandı!\",\n        });\n\n        // 1 saniye sonra celebration'ı kaldır ve görev listesini yenile\n        setTimeout(() => {\n          setCelebratingTask(null);\n          setShowCompletionBar(false);\n          // Görev tamamlandıktan 1 saniye sonra listeden kaldırılacak\n          sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/calendar\", todayStr] });\n          sorguIstemcisi.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n        }, 1000);\n      } else {\n        toast({\n          title: \"Görev güncellendi\",\n          description: \"Görev durumu başarıyla değiştirildi.\",\n        });\n      }\n    },\n    onError: () => {\n      toast({\n        title: \"Hata\",\n        description: \"Görev durumu değiştirilemedi.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Bugün için: Sadece tamamlanmamış aktif görevleri göster\n  // Tamamlanan, arşivlenen ve silinen görevler Bugün Yapılacaklar'da görünmez\n  const allTasks = todaysData?.tasks || [];\n  \n  // localStorage'dan taskOrder'ı oku ve görevleri sırala - useMemo ile optimize edildi\n  const tasks = useMemo(() => {\n    const tasksUnordered = allTasks.filter(task => !task.completed && !task.archived && !task.deleted);\n    \n    try {\n      const savedOrder = localStorage.getItem('taskOrder');\n      if (savedOrder) {\n        const orderArray = JSON.parse(savedOrder) as string[];\n        return [...tasksUnordered].sort((a, b) => {\n          const indexA = orderArray.indexOf(a.id);\n          const indexB = orderArray.indexOf(b.id);\n          if (indexA !== -1 && indexB !== -1) return indexA - indexB;\n          if (indexA !== -1) return -1;\n          if (indexB !== -1) return 1;\n          return 0;\n        });\n      }\n      return tasksUnordered;\n    } catch (error) {\n      console.error('Error loading task order:', error);\n      return tasksUnordered;\n    }\n  }, [todaysData]);\n  \n  // Toplam sayı: Sadece aktif görevler (arşivlenmemiş + silinmemiş)\n  const activeTasks = allTasks.filter(task => !task.archived && !task.deleted);\n  const completedCount = activeTasks.filter(task => task.completed).length;\n  const totalCount = activeTasks.length;\n\n  if (isLoading) {\n    return (\n      <div className=\"bg-card rounded-xl border border-border p-6 transition-colors duration-300 h-full\">\n        <h3 className=\"text-lg font-semibold text-foreground mb-3 flex items-center\">\n          <Calendar className=\"h-5 w-5 mr-2 text-primary\" />\n          Bugün Yapılacaklar\n        </h3>\n        <div className=\"animate-pulse\">\n          <div className=\"h-4 bg-muted rounded mb-2\"></div>\n          <div className=\"h-3 bg-muted rounded w-2/3\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-card rounded-xl border border-border p-6 transition-colors duration-300 h-full flex flex-col relative overflow-hidden\">\n      {/* Completion Bar - Görev tamamlandığında gösterilir */}\n      {showCompletionBar && (\n        <div className=\"absolute top-0 left-0 right-0 bg-gradient-to-r from-green-500 via-emerald-500 to-green-500 h-2 z-10 animate-pulse\">\n          <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent animate-ping\"></div>\n        </div>\n      )}\n      \n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-semibold text-foreground flex items-center\">\n          <Calendar className=\"h-5 w-5 mr-2 text-primary\" />\n          Bugün Yapılacaklar\n        </h3>\n        <div className=\"text-sm text-muted-foreground bg-muted/50 rounded-full px-3 py-1\" data-testid=\"text-today-counts\">\n          {completedCount}/{totalCount}\n        </div>\n      </div>\n\n      {tasks.length === 0 ? (\n        <div className=\"text-center py-8 text-muted-foreground\">\n          <Calendar className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n          <p className=\"text-sm\">Bugün hiç aktivite tamamlanmamış !</p>\n          <p className=\"text-xs mt-1\">Bugün için planlanan görevler henüz yok</p>\n        </div>\n      ) : (\n        <>\n          {/* İlerleme çubuğu */}\n          <div className=\"w-full bg-secondary rounded-full h-2 mb-4\">\n            <div \n              className=\"bg-gradient-to-r from-primary to-primary/80 h-2 rounded-full transition-all duration-500\"\n              style={{ width: `${totalCount > 0 ? (completedCount / totalCount) * 100 : 0}%` }}\n            ></div>\n          </div>\n\n          {/* Görev Listesi - Kutunun en altına kadar uzar, en az 6 görev gösterir */}\n          <div className={`space-y-3 flex-1 min-h-0 max-h-[650px] ${tasks.length > 6 ? 'overflow-y-auto' : 'overflow-hidden'} custom-scrollbar`}>\n            {tasks.map((task) => (\n              <div\n                key={task.id}\n                className={`flex items-start gap-3 p-3 rounded-lg border transition-all duration-200 hover:bg-muted/50 relative ${\n                  celebratingTask === task.id \n                    ? 'bg-gradient-to-r from-green-100/80 to-emerald-100/80 dark:from-green-900/40 dark:to-emerald-900/40 border-green-300 dark:border-green-600 scale-105 shadow-lg' \n                    : task.completed \n                    ? 'bg-muted/30 border-muted' \n                    : 'bg-background border-border/50 hover:border-border animate-pulse-slow'\n                }`}\n                style={{\n                  borderLeft: `4px solid ${task.color || '#8B5CF6'}`,\n                  animation: !task.completed && celebratingTask !== task.id \n                    ? 'pulse-border 2s ease-in-out infinite' \n                    : undefined,\n                }}\n                data-testid={`list-task-${task.id}`}\n              >\n                {/* Celebration efekti - Enhanced */}\n                {celebratingTask === task.id && (\n                  <div className=\"absolute inset-0 bg-gradient-to-r from-green-400/30 to-emerald-400/30 animate-pulse rounded-lg pointer-events-none\">\n                    <div className=\"absolute top-2 right-2 animate-bounce\">\n                      <PartyPopper className=\"h-5 w-5 text-green-600 drop-shadow-lg\" />\n                    </div>\n                    <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent animate-ping\"></div>\n                  </div>\n                )}\n                <button\n                  onClick={() => toggleTaskMutation.mutate(task.id)}\n                  className={`flex-shrink-0 transition-all duration-300 transform hover:scale-110 ${\n                    task.completed \n                      ? 'text-green-600 hover:text-green-500 drop-shadow-md' \n                      : 'text-muted-foreground hover:text-primary hover:drop-shadow-md'\n                  }`}\n                  disabled={toggleTaskMutation.isPending}\n                  data-testid={`button-toggle-task-${task.id}`}\n                >\n                  {task.completed ? (\n                    <CheckCircle2 className=\"h-5 w-5 animate-in fade-in-0 zoom-in-95 duration-200\" />\n                  ) : (\n                    <Circle className=\"h-5 w-5 hover:animate-pulse\" />\n                  )}\n                </button>\n                \n                <div className=\"flex-1 min-w-0\">\n                  <div className={`font-medium text-sm transition-all duration-200 ${\n                    task.completed \n                      ? 'line-through text-muted-foreground' \n                      : 'text-foreground'\n                  }`}>\n                    {task.title}\n                  </div>\n                  \n                  {task.description && (\n                    <div className={`text-xs mt-1 transition-all duration-200 ${\n                      task.completed \n                        ? 'line-through text-muted-foreground/70' \n                        : 'text-muted-foreground'\n                    }`}>\n                      {task.description.length > 80 \n                        ? `${task.description.substring(0, 80)}...` \n                        : task.description}\n                    </div>\n                  )}\n                  \n                  <div className=\"flex items-center gap-2 mt-2\">\n                    <span className={`text-xs px-2 py-1 rounded-full ${\n                      task.priority === 'high' \n                        ? 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'\n                        : task.priority === 'medium'\n                        ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200'\n                        : 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200'\n                    }`}>\n                      {task.priority === 'high' ? 'Yüksek' : task.priority === 'medium' ? 'Orta' : 'Düşük'}\n                    </span>\n                    \n                    <span className=\"text-xs text-muted-foreground bg-muted/50 rounded-full px-2 py-1\">\n                      {getCategoryText(task.category)}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          {/* Özet */}\n          {tasks.length > 0 && (\n            <div className=\"mt-auto pt-4 border-t border-border\">\n              <div className=\"text-xs text-muted-foreground text-center\">\n                {completedCount === totalCount \n                  ? \"🎉 Tüm günlük görevler tamamlandı!\" \n                  : `${totalCount - completedCount} görev kaldı`\n                }\n              </div>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":12924},"server/vitest.config.ts":{"content":"import { defineConfig } from 'vitest/config'\nimport path from 'path'\n\nexport default defineConfig({\n  test: {\n    name: 'server',\n    globals: true,\n    environment: 'node',\n    coverage: {\n      provider: 'v8',\n      reporter: ['text', 'json', 'html'],\n      include: ['**/*.ts'],\n      exclude: [\n        'index.ts',\n        'vite.ts',\n        '**/*.d.ts'\n      ]\n    }\n  },\n  resolve: {\n    alias: {\n      '@shared': path.resolve(__dirname, '../shared')\n    }\n  }\n})\n","size_bytes":470},"client/src/bilesenler/arayuz/context-menu.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/kutuphane/yardimcilar\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":7544},"md dosyaları/talimatlar.md":{"content":"# YKS Deneme Analizi Uygulaması - Kapsamlı Talimatlar ve Teknik Rehber\n\n**📑 Hızlı Navigasyon:** [Ana Sayfa](../replit.md) | [Client Kodu](./kod_aciklamasi_client.md) | [Teknik Mimari](./teknik_mimari.md) | [Server Kodu](./kod_aciklamasi_server.md) | [Shared Kodu](./kod_aciklamasi_shared.md) | [Electron](./kod_aciklamasi_electron1.md) | [Testler](./kod_aciklamasi_testler.md)\n\n---\n\nBu dokümantasyon, YKS Deneme Analizi uygulamasını **sıfırdan başlayan birine** anlatır gibi, her teknik terimi Türkçe karşılıklarıyla açıklar, teknoloji seçimlerinin nedenlerini detaylandırır ve kapsamlı bir öğrenme kaynağı sunar.\n\n---\n\n## 📚 İçindekiler\n\n1. [Giriş ve Temel Kavramlar](#temel-kavramlar)\n2. [Uygulama Mimarisi](#mimari)\n3. [Teknoloji Yığını Detayları](#teknoloji-detaylari)\n4. [Geliştirme Ortamı Kurulumu](#kurulum)\n5. [Proje Yapısı ve Organizasyon](#proje-yapisi)\n6. [Geliştirme İş Akışı](#gelistirme)\n7. [Dağıtım ve Paketleme](#dagitim)\n8. [Performans ve Optimizasyon](#performans)\n9. [Güvenlik ve En İyi Uygulamalar](#guvenlik)\n10. [Sorun Giderme ve Hata Ayıklama](#sorun-giderme)\n11. [Öğrenme Kaynakları](#kaynaklar)\n\n---\n\n<a name=\"temel-kavramlar\"></a>\n## 📖 1. Giriş ve Temel Kavramlar\n\n### 1.1 Uygulama Nedir?\n\n**YKS Deneme Analizi**, Yükseköğretim Kurumları Sınavı'na (YKS) hazırlanan öğrenciler için geliştirilmiş **kapsamlı bir takip ve analiz sistemi**dir.\n\n**Temel Özellikler:**\n- 📊 Deneme sınavı sonuçlarını kaydetme ve analiz etme\n- 📈 Net gelişimi grafiklerle görselleştirme\n- 🎯 Yanlış yapılan konuları kategorize ederek takip\n- 📝 Günlük soru çözüm kayıtları\n- 📉 TYT/AYT branş bazlı detaylı analizler\n- ⏱️ Çalışma saati takibi\n- ✅ Akıllı görev yönetimi (önceliklendirme, kategorizasyon)\n- 📅 Yıllık aktivite haritası (heatmap)\n\n### 1.2 Temel Yazılım Kavramları\n\n#### Frontend (Ön Yüz) Nedir?\n**Tanım:** Kullanıcının gördüğü ve etkileşimde bulunduğu kısım.\n- **İngilizce:** Frontend, Client-Side, UI (User Interface)\n- **Türkçe:** Ön Yüz, İstemci Tarafı, Kullanıcı Arayüzü\n- **Örnek:** Butonlar, formlar, grafikler, renkler, animasyonlar\n- **Teknolojiler:** HTML, CSS, JavaScript, React\n\n#### Backend (Arka Yüz) Nedir?\n**Tanım:** Kullanıcının görmediği, veri işlemlerinin yapıldığı kısım.\n- **İngilizce:** Backend, Server-Side, API (Application Programming Interface)\n- **Türkçe:** Arka Yüz, Sunucu Tarafı, Uygulama Programlama Arayüzü\n- **Örnek:** Veri saklama, okuma, güncelleme, silme (CRUD)\n- **Teknolojiler:** Node.js, Express, databases\n\n#### Full-Stack (Tam Yığın) Nedir?\n**Tanım:** Frontend + Backend = Her şey\n- Tek bir geliştirici her iki tarafı da yapabilir\n- Bu proje bir full-stack uygulamadır\n\n#### Desktop Application (Masaüstü Uygulaması) Nedir?\n**Tanım:** Bilgisayara kurulan, tarayıcı gerektirmeyen uygulama\n- **Örnekler:** Microsoft Word, Photoshop, Spotify Desktop\n- **Bizim Teknolojimiz:** Electron\n\n---\n\n<a name=\"mimari\"></a>\n## 🏗️ 2. Uygulama Mimarisi\n\n### 2.1 Mimari Kararlar\n\n#### Neden Masaüstü Uygulaması?\n\n**Alternatiflerin Karşılaştırması:**\n\n| Özellik | Web App | Mobile App | Desktop App (Bizim Seçim) |\n|---------|---------|------------|---------------------------|\n| **Platform** | Tarayıcı | iOS/Android | Windows/Mac/Linux |\n| **Kurulum** | Gerekmiyor | App Store | Tek sefer .exe |\n| **İnternet** | Gerekli ❌ | Kısmen gerekli | Gerekmez ✅ |\n| **Performans** | Orta | İyi | Çok İyi ✅ |\n| **Veri Gizliliği** | Sunucuda ❌ | Cihazda ✅ | Cihazda ✅ |\n| **Offline Çalışma** | Hayır ❌ | Kısıtlı | Tamamen ✅ |\n| **Ekran Boyutu** | Değişken | Küçük ❌ | Büyük ✅ |\n| **Grafik/Analiz** | İyi | Zayıf ❌ | Mükemmel ✅ |\n| **Güncelleme** | Otomatik | Store onayı | Auto-updater |\n| **Geliştirme** | Kolay ✅ | 2x Kod gerekir ❌ | Orta |\n\n**Karar:** Desktop uygulaması, kullanım senaryomuz için en ideal çözüm.\n\n---\n\n### 2.2 Electron Nedir ve Nasıl Çalışır?\n\n#### Electron'un Yapısı\n\n```\n┌─────────────────────────────────────────┐\n│           ELECTRON UYGULAMASI            │\n├─────────────────────────────────────────┤\n│                                         │\n│  ┌──────────────┐   ┌───────────────┐  │\n│  │              │   │               │  │\n│  │  Main        │   │   Renderer    │  │\n│  │  Process     │◄─►│   Process     │  │\n│  │              │   │               │  │\n│  │  (Node.js)   │   │  (Chromium)   │  │\n│  │              │   │               │  │\n│  └──────────────┘   └───────────────┘  │\n│        │                    │           │\n│        │                    │           │\n│   ┌────▼────┐          ┌───▼────┐      │\n│   │  File   │          │ React  │      │\n│   │ System  │          │   UI   │      │\n│   │  OS API │          │  HTML  │      │\n│   └─────────┘          └────────┘      │\n│                                         │\n└─────────────────────────────────────────┘\n```\n\n**Main Process (Ana Süreç):**\n- **Görev:** Pencere yönetimi, sistem erişimi\n- **Teknoloji:** Node.js\n- **Dosya:** `electron/main.cjs`\n- **Yetenekler:**\n  - Dosya sistemi (okuma/yazma/silme)\n  - Sistem tepsisi (tray icon)\n  - Menüler\n  - Dialog'lar\n  - Auto-updater\n\n**Renderer Process (Render Süreci):**\n- **Görev:** UI render etme, kullanıcı etkileşimi\n- **Teknoloji:** Chromium (tarayıcı)\n- **Dosyalar:** `client/src/*`\n- **Yetenekler:**\n  - HTML render\n  - CSS stillendirme\n  - JavaScript çalıştırma\n  - DOM manipülasyonu\n\n**IPC (Inter-Process Communication - Süreçler Arası İletişim):**\n```typescript\n// Main Process\nipcMain.handle('get-data', async () => {\n  return fs.readFileSync('data.json');\n});\n\n// Renderer Process\nconst data = await ipcRenderer.invoke('get-data');\n```\n\n---\n\n#### Electron vs Alternatifler\n\n| Özellik | Electron | Qt/C++ | Tauri | .NET/WPF |\n|---------|----------|--------|-------|----------|\n| **Dil** | Web (HTML/CSS/JS) | C++ | Rust + Web | C# |\n| **Öğrenme** | Kolay ✅ | Zor ❌ | Orta | Orta |\n| **Dosya Boyutu** | ~150MB ❌ | ~20MB ✅ | ~10MB ✅ | ~50MB |\n| **Performans** | İyi | Mükemmel ✅ | Mükemmel ✅ | İyi |\n| **Platform** | Cross ✅ | Cross ✅ | Cross ✅ | Windows |\n| **Ekosistem** | Huge ✅ | Büyük | Küçük ❌ | Orta |\n| **UI Kolaylığı** | Çok Kolay ✅ | Zor ❌ | Kolay | Kolay |\n| **Popülerlik** | VSCode, Discord ✅ | Qt Creator | Yeni | Visual Studio |\n\n**Neden Electron Seçtik:**\n1. ✅ **Web Bilgisi Yeterli:** HTML/CSS/JS bilen herkes geliştirebilir\n2. ✅ **Hızlı Geliştirme:** React ekosistemi sayesinde çok hızlı\n3. ✅ **Zengin UI:** Modern, animasyonlu, responsive arayüzler\n4. ✅ **Büyük Topluluk:** Her soruna cevap var\n5. ✅ **Güvenilir:** Microsoft (VSCode), Discord, Slack kullanıyor\n6. ❌ **Trade-off:** Dosya boyutu büyük ama disk ucuz (kabul edilebilir)\n\n---\n\n<a name=\"teknoloji-detaylari\"></a>\n## 🔧 3. Teknoloji Yığını Detayları\n\n### 3.1 Frontend Teknolojileri\n\n#### 3.1.1 React 18 - UI Kütüphanesi\n\n**React Nedir?**\n- **Tanım:** Kullanıcı arayüzü oluşturmak için kullanılan JavaScript kütüphanesi\n- **Yaratıcı:** Facebook (Meta)\n- **İlk Çıkış:** 2013\n- **Felsefi:** Component-based (bileşen tabanlı), declarative (bildirimsel)\n\n**Temel Kavramlar:**\n\n**1. Component (Bileşen)**\n```jsx\n// Fonksiyon Component\nfunction Buton({ metin, renk }) {\n  return (\n    <button style={{ backgroundColor: renk }}>\n      {metin}\n    </button>\n  );\n}\n\n// Kullanım\n<Buton metin=\"Kaydet\" renk=\"blue\" />\n```\n\n**2. Props (Özellikler)**\n```jsx\n// Parent → Child veri aktarımı\nfunction Parent() {\n  return <Child isim=\"Ahmet\" yas={18} />;\n}\n\nfunction Child({ isim, yas }) {\n  return <p>{isim}, {yas} yaşında</p>;\n}\n```\n\n**3. State (Durum)**\n```jsx\nfunction Sayac() {\n  const [sayi, setSayi] = useState(0);\n  \n  return (\n    <>\n      <p>Sayı: {sayi}</p>\n      <button onClick={() => setSayi(sayi + 1)}>Artır</button>\n    </>\n  );\n}\n```\n\n**4. Effect (Yan Etki)**\n```jsx\nfunction VeriYukle() {\n  const [veri, setVeri] = useState([]);\n  \n  useEffect(() => {\n    // Component mount olunca çalışır\n    fetch('/api/data')\n      .then(res => res.json())\n      .then(data => setVeri(data));\n  }, []); // Dependency array (bağımlılık dizisi)\n  \n  return <div>{veri.map(item => ...)}</div>;\n}\n```\n\n**Virtual DOM (Sanal DOM) Nedir?**\n```\nReal DOM (Gerçek DOM):\n  ├─ Yavaş güncellemeler\n  ├─ Tüm sayfa yenilenir\n  └─ Performans sorunu\n\nVirtual DOM (Sanal DOM):\n  ├─ Hafızada JavaScript objesi\n  ├─ Hızlı karşılaştırma (diffing)\n  ├─ Sadece değişenleri güncelle\n  └─ Performans mükemmel ✅\n```\n\n**React Hooks (Kancalar) Nedir?**\n- Fonksiyonel component'lere özel yetenekler kazandırır\n- Class component'lere gerek kalmadan state kullanımı\n\n**Önemli Hook'lar:**\n```jsx\nimport { \n  useState,      // State yönetimi\n  useEffect,     // Yan etkiler\n  useContext,    // Context API\n  useRef,        // DOM referansı\n  useMemo,       // Hesaplama önbellekleme\n  useCallback,   // Fonksiyon önbellekleme\n  useReducer     // Karmaşık state yönetimi\n} from 'react';\n```\n\n---\n\n#### 3.1.2 TypeScript - Tip Güvenli JavaScript\n\n**JavaScript vs TypeScript Karşılaştırması:**\n\n**JavaScript (Dinamik Tip):**\n```javascript\nfunction topla(a, b) {\n  return a + b;\n}\n\ntopla(5, 10);        // 15 ✅\ntopla(\"5\", \"10\");    // \"510\" ❌ (Hata yok ama yanlış!)\ntopla(5);            // NaN ❌ (Hata yok ama yanlış!)\n```\n\n**TypeScript (Statik Tip):**\n```typescript\nfunction topla(a: number, b: number): number {\n  return a + b;\n}\n\ntopla(5, 10);        // 15 ✅\ntopla(\"5\", \"10\");    // HATA! Kod çalışmaz\ntopla(5);            // HATA! Eksik parametre\n```\n\n**TypeScript'in Avantajları:**\n\n**1. Compile-Time Error Checking (Derleme Zamanı Hata Kontrolü)**\n```typescript\ninterface User {\n  name: string;\n  age: number;\n}\n\nconst user: User = {\n  name: \"Ahmet\",\n  agee: 25  // HATA! \"agee\" değil, \"age\" olmalı\n};\n```\n\n**2. IntelliSense (Otomatik Tamamlama)**\n```typescript\n// user. yazdığınızda IDE otomatik:\nuser.name  // ✅ Görünür\nuser.age   // ✅ Görünür\nuser.email // ❌ Görünmez (tanımlı değil)\n```\n\n**3. Refactoring Safety (Yeniden Yapılandırma Güvenliği)**\n```typescript\n// Bir değişken adını değiştirin\n// TypeScript tüm kullanımları otomatik bulur\n```\n\n**Temel Tipler:**\n```typescript\n// Primitive (İlkel) Tipler\nlet str: string = \"merhaba\";\nlet num: number = 42;\nlet bool: boolean = true;\nlet arr: number[] = [1, 2, 3];\nlet tuple: [string, number] = [\"ahmet\", 25];\n\n// Object Tipleri\ninterface Person {\n  name: string;\n  age: number;\n  email?: string;  // Optional (isteğe bağlı)\n}\n\n// Union Types (Birleşim Tipleri)\nlet id: string | number = \"123\"; // String veya number\nid = 456; // ✅ İkisi de geçerli\n\n// Generic Types (Jenerik Tipler)\nfunction identity<T>(value: T): T {\n  return value;\n}\nidentity<number>(5);      // T = number\nidentity<string>(\"abc\");  // T = string\n```\n\n**Type Inference (Tip Çıkarımı):**\n```typescript\nlet x = 5;        // TypeScript: x is number\nlet y = \"hello\";  // TypeScript: y is string\n\n// Açık yazmanıza gerek yok!\n```\n\n---\n\n#### 3.1.3 Vite - Modern Build Tool\n\n**Build Tool (Derleme Aracı) Nedir?**\n```\nKaynak Kod         →    Build Tool    →    Production Kod\n─────────────────────────────────────────────────────────\nTypeScript         →      Vite        →    JavaScript (ES5)\nJSX                →                  →    Normal HTML\nModern JS (ES2022) →                  →    Eski tarayıcı uyumlu\nMultiple Files     →                  →    Bundled (tek dosya)\n```\n\n**Vite vs Webpack:**\n\n| Özellik | Vite | Webpack |\n|---------|------|---------|\n| **Dev Server Start** | 0.5s ⚡ | 30s 🐢 |\n| **HMR Speed** | 50ms ⚡ | 3000ms 🐢 |\n| **Build Speed** | 20s | 60s |\n| **Configuration** | Minimal ✅ | Karmaşık ❌ |\n| **Learning Curve** | Kolay ✅ | Zor ❌ |\n\n**HMR (Hot Module Replacement) Nedir?**\n```\nGeleneksel Yenileme:\n  Kod Değişikliği → Tam Sayfa Yenileme → State Kaybı → Yavaş\n\nHMR:\n  Kod Değişikliği → Sadece O Modül Güncellenir → State Korunur → Çok Hızlı ✅\n```\n\n**Örnek:**\n```\nForm dolduruyorsunuz (5 alan dolu)\n  ↓\nCSS'de bir renk değiştiriyorsunuz\n  ↓\nGeleneksel: Sayfa yenilenir, form temizlenir ❌\nHMR: Sadece renk değişir, form dolu kalır ✅\n```\n\n**Tree Shaking (Ağaç Sallama) Nedir?**\n```javascript\n// utils.js\nexport function kullanilan() { ... }\nexport function kullanilmayan() { ... }\n\n// main.js\nimport { kullanilan } from './utils';\n\n// Build Output:\n// Sadece \"kullanilan\" fonksiyonu eklenir\n// \"kullanilmayan\" atılır → Dosya boyutu küçülür ✅\n```\n\n**Code Splitting (Kod Bölme) Nedir?**\n```\nTek Dosya:\n  app.js (3MB) → Yavaş yükleme ❌\n\nCode Splitting:\n  main.js (100KB)      → Ana kod, hemen yükle\n  vendor.js (500KB)    → React, kütüphaneler\n  page1.js (200KB)     → Sadece Page 1'de gerekli\n  page2.js (150KB)     → Sadece Page 2'de gerekli\n  \n  → İlk yükleme çok hızlı ✅\n  → Sayfa değişince gerekeni yükle\n```\n\n---\n\n#### 3.1.4 Tailwind CSS - Utility-First CSS\n\n**Geleneksel CSS vs Tailwind:**\n\n**Geleneksel CSS:**\n```css\n/* style.css */\n.card {\n  background-color: white;\n  border-radius: 8px;\n  padding: 16px;\n  box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n}\n\n.card-title {\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 8px;\n}\n```\n```html\n<div class=\"card\">\n  <h2 class=\"card-title\">Başlık</h2>\n  <p>İçerik</p>\n</div>\n```\n\n**Tailwind CSS:**\n```html\n<div class=\"bg-white rounded-lg p-4 shadow-md\">\n  <h2 class=\"text-2xl font-bold mb-2\">Başlık</h2>\n  <p>İçerik</p>\n</div>\n```\n\n**Tailwind'in Avantajları:**\n1. ✅ **Hızlı Geliştirme:** HTML yazarken stil veriyorsunuz\n2. ✅ **Tutarlılık:** Önceden tanımlı design system\n3. ✅ **Küçük Dosya:** Unused class'lar temizlenir\n4. ✅ **Responsive Kolay:** `sm:`, `md:`, `lg:` prefixleri\n5. ✅ **Dark Mode:** `dark:` prefix ile otomatik\n\n**Responsive Design (Duyarlı Tasarım):**\n```html\n<div class=\"\n  text-sm           /* Mobil: 14px */\n  md:text-base      /* Tablet (768px+): 16px */\n  lg:text-lg        /* Desktop (1024px+): 18px */\n  xl:text-2xl       /* Geniş Ekran (1280px+): 24px */\n\">\n  Responsive Metin\n</div>\n```\n\n**Dark Mode (Karanlık Mod):**\n```html\n<div class=\"\n  bg-white dark:bg-gray-900\n  text-gray-900 dark:text-white\n  border-gray-200 dark:border-gray-700\n\">\n  Tema-duyarlı içerik\n</div>\n```\n\n**Hover, Active, Focus States:**\n```html\n<button class=\"\n  bg-blue-500 \n  hover:bg-blue-600      /* Fare üzerinde */\n  active:bg-blue-700     /* Tıklandığında */\n  focus:ring-2           /* Odaklandığında ring */\n  focus:ring-blue-300    /* Ring rengi */\n  disabled:opacity-50    /* Devre dışıysa */\n  transition             /* Pürüzsüz geçiş */\n  duration-200           /* 200ms */\n\">\n  Etkileşimli Buton\n</button>\n```\n\n---\n\n#### 3.1.5 shadcn/ui - Component Library\n\n**Component Library Nedir?**\nHazır UI bileşenleri sağlayan kütüphaneler.\n\n**shadcn/ui'nin Farkı:**\n```\nGeleneksel (Material UI, Ant Design):\n  ├─ npm install material-ui\n  ├─ import { Button } from '@mui/material'\n  └─ Kodu göremezsiniz, değiştiremezsiniz\n\nshadcn/ui:\n  ├─ npx shadcn-ui add button\n  ├─ Kod projenize kopyalanır\n  └─ Tüm kodu görür ve değiştirebilirsiniz ✅\n```\n\n**Headless Components (Başsız Bileşenler):**\n```\nRadix UI (Headless):\n  ├─ Fonksiyonel ✅ (keyboard nav, accessibility)\n  └─ Stil yok ❌\n\nshadcn/ui:\n  ├─ Radix UI (fonksiyon)\n  ├─ + Tailwind CSS (stil)\n  └─ = Güzel ve erişilebilir bileşen ✅\n```\n\n**Accessibility (Erişilebilirlik) Nedir?**\n- Engelli kullanıcılar için uyumluluk\n- Screen reader (ekran okuyucu) desteği\n- Keyboard navigasyon\n- ARIA attributes (ARIA özellikleri)\n\n**Örnek:**\n```jsx\n// Radix Dialog (headless)\n<Dialog.Root>\n  <Dialog.Trigger>Aç</Dialog.Trigger>\n  <Dialog.Content>İçerik</Dialog.Content>\n</Dialog.Root>\n\n// shadcn/ui Dialog (styled)\n<Dialog>\n  <DialogTrigger asChild>\n    <Button>Aç</Button>\n  </DialogTrigger>\n  <DialogContent>\n    <DialogHeader>\n      <DialogTitle>Başlık</DialogTitle>\n    </DialogHeader>\n    <p>İçerik</p>\n  </DialogContent>\n</Dialog>\n```\n\n---\n\n### 3.2 Backend Teknolojileri\n\n#### 3.2.1 Node.js - JavaScript Runtime\n\n**Runtime Nedir?**\n- Kodun çalıştığı ortam\n- Tarayıcı = JavaScript runtime (frontend)\n- Node.js = JavaScript runtime (backend)\n\n**Node.js'in Mimarisi:**\n```\n┌─────────────────────────────────┐\n│         Node.js                 │\n├─────────────────────────────────┤\n│  ┌───────────────────────────┐  │\n│  │   JavaScript Engine       │  │\n│  │       (V8)                │  │\n│  └───────────────────────────┘  │\n│  ┌───────────────────────────┐  │\n│  │   Libuv (Event Loop)      │  │\n│  │   - File System           │  │\n│  │   - Network               │  │\n│  │   - Timers                │  │\n│  └───────────────────────────┘  │\n│  ┌───────────────────────────┐  │\n│  │   C++ Bindings            │  │\n│  │   - OS APIs               │  │\n│  └───────────────────────────┘  │\n└─────────────────────────────────┘\n```\n\n**Event Loop (Olay Döngüsü) Nedir?**\n```\nSenkron (Bloklu) İşlem:\n  Task 1 (5sn) → Task 2 (3sn) → Task 3 (2sn)\n  Toplam: 10 saniye\n\nAsenkron (Bloksuz) İşlem:\n  Task 1 başla → Task 2 başla → Task 3 başla\n  ↓ (paralel çalışır)\n  En yavaş 5sn'de tümü biter ✅\n```\n\n**Callback, Promise, Async/Await:**\n\n**1. Callback (Geri Çağırma):**\n```javascript\nfs.readFile('dosya.txt', (err, data) => {\n  if (err) throw err;\n  console.log(data);\n});\n```\n\n**2. Promise (Söz):**\n```javascript\nfs.promises.readFile('dosya.txt')\n  .then(data => console.log(data))\n  .catch(err => console.error(err));\n```\n\n**3. Async/Await (Modern):**\n```javascript\nasync function oku() {\n  try {\n    const data = await fs.promises.readFile('dosya.txt');\n    console.log(data);\n  } catch (err) {\n    console.error(err);\n  }\n}\n```\n\n---\n\n#### 3.2.2 Express.js - Web Framework\n\n**HTTP Protokolü Nedir?**\n```\nClient                          Server\n  │                               │\n  ├──── HTTP Request ──────────→  │\n  │     GET /api/users            │\n  │                               │\n  │  ←──── HTTP Response ────────┤\n  │       200 OK                  │\n  │       [{ name: \"Ali\" }]       │\n```\n\n**HTTP Methods (Metodları):**\n```\nGET     → Veri oku (Read)\nPOST    → Veri oluştur (Create)\nPUT     → Tümünü güncelle (Replace)\nPATCH   → Kısmen güncelle (Update)\nDELETE  → Sil (Delete)\n```\n\n**Status Codes (Durum Kodları):**\n```\n2xx Başarılı:\n  200 OK                 → Başarılı\n  201 Created            → Oluşturuldu\n  204 No Content         → İçerik yok (genelde DELETE'de)\n\n3xx Yönlendirme:\n  301 Moved Permanently  → Kalıcı taşındı\n  302 Found              → Geçici taşındı\n\n4xx İstemci Hatası:\n  400 Bad Request        → Hatalı istek\n  401 Unauthorized       → Yetkisiz\n  403 Forbidden          → Yasak\n  404 Not Found          → Bulunamadı\n\n5xx Sunucu Hatası:\n  500 Internal Server Error  → Sunucu hatası\n  503 Service Unavailable    → Servis kullanılamıyor\n```\n\n**Middleware Nedir?**\n```\nRequest → Middleware 1 → Middleware 2 → Route → Response\n```\n\n**Middleware Örnekleri:**\n```javascript\n// 1. Logger\napp.use((req, res, next) => {\n  console.log(`${req.method} ${req.url}`);\n  next(); // Sonraki middleware'e geç\n});\n\n// 2. Authentication\napp.use((req, res, next) => {\n  if (req.headers.authorization) {\n    next();\n  } else {\n    res.status(401).send('Unauthorized');\n  }\n});\n\n// 3. Error Handler\napp.use((err, req, res, next) => {\n  console.error(err.stack);\n  res.status(500).send('Error!');\n});\n```\n\n---\n\n#### 3.2.3 In-Memory Storage - Veri Saklama\n\n**Veri Saklama Yöntemleri:**\n\n**1. In-Memory (RAM):**\n```javascript\nconst data = new Map();\n// Avantaj: Çok hızlı ⚡\n// Dezavantaj: Uygulama kapanınca kaybolur ❌\n```\n\n**2. File Storage (Dosya):**\n```javascript\nfs.writeFileSync('data.json', JSON.stringify(data));\n// Avantaj: Kalıcı ✅\n// Dezavantaj: Yavaş 🐢\n```\n\n**3. Bizim Yaklaşımımız (Hybrid):**\n```javascript\n// RAM'de tut (hızlı erişim)\nconst data = new Map();\n\n// Her değişiklikte dosyaya yaz (kalıcılık)\ndata.set('key', 'value');\nsaveToFile(); // Otomatik\n```\n\n**Neden Veritabanı Değil?**\n\n| Özellik | In-Memory+JSON | SQLite | PostgreSQL |\n|---------|---------------|--------|------------|\n| **Kurulum** | Yok ✅ | Yok ✅ | Gerekli ❌ |\n| **Hız** | Çok Hızlı ⚡ | Hızlı | Orta |\n| **Taşınabilirlik** | Kolay ✅ | Kolay ✅ | Zor ❌ |\n| **Karmaşık Sorgular** | Zor ❌ | Kolay ✅ | Çok Kolay ✅ |\n| **Veri Boyutu** | <100MB | <10GB | Sınırsız |\n\n**Bizim İçin İdeal Çünkü:**\n- Tek kullanıcı\n- Orta büyüklük veri (<50MB)\n- Basit CRUD işlemleri\n- Kolay yedekleme (JSON kopyala)\n\n---\n\n<a name=\"kurulum\"></a>\n## 🚀 4. Geliştirme Ortamı Kurulumu\n\n### 4.1 Gereksinimler\n\n#### Node.js Kurulumu\n\n**Node.js Nedir?**\nJavaScript'i sunucu tarafında çalıştıran platform.\n\n**Kurulum Adımları:**\n1. https://nodejs.org adresine gidin\n2. LTS (Long Term Support) versiyonunu indirin\n3. Kurulumu tamamlayın\n4. Terminal'de kontrol edin:\n```bash\nnode --version  # v20.11.0 gibi\nnpm --version   # 10.2.4 gibi\n```\n\n**npm Nedir?**\n- **Tanım:** Node Package Manager (Node Paket Yöneticisi)\n- **Görev:** Kütüphaneleri yükler, yönetir\n- **Alternatifi:** yarn, pnpm\n\n---\n\n### 4.2 Proje Kurulumu\n\n#### 1. Depoyu Klonlama\n```bash\ngit clone https://github.com/beratcode03/beratders.git\ncd beratders\n```\n\n**Git Nedir?**\n- Version control system (versiyon kontrol sistemi)\n- Kodun geçmişini tutar\n- Takım çalışması için ideal\n\n#### 2. Bağımlılıkları Yükleme\n```bash\nnpm install\n```\n\n**Ne Yapar?**\n```\n1. package.json dosyasını okur\n2. dependencies ve devDependencies'deki paketleri indirir\n3. node_modules/ klasörüne kurar\n4. package-lock.json oluşturur (versiyon kilidi)\n```\n\n**package.json vs package-lock.json:**\n- `package.json`: Genel versiyon aralıkları (`^18.0.0`)\n- `package-lock.json`: Tam versiyon kilit (`18.3.1`)\n\n---\n\n### 4.3 Development Server Başlatma\n\n#### Web Uygulaması\n```bash\nnpm run dev\n```\n\n**Ne Olur?**\n```\n1. Vite dev server başlar (port 5000)\n2. Express backend başlar (port 5000)\n3. HMR etkinleşir\n4. http://localhost:5000 açılır\n```\n\n#### Electron Uygulaması\n```bash\nnpm run electron:dev\n```\n\n**Ne Olur?**\n```\n1. Development server başlar\n2. Electron penceresi açılır\n3. DevTools otomatik açılır\n4. Hot reload aktif\n```\n\n---\n\n<a name=\"proje-yapisi\"></a>\n## 📁 5. Proje Yapısı ve Organizasyon\n\n### 5.1 Dizin Yapısı\n\n```\nyks-deneme-analizi/\n│\n├── client/                    # Frontend (React)\n│   ├── src/\n│   │   ├── sayfalar/         # Pages (Sayfa bileşenleri)\n│   │   │   └── panel.tsx\n│   │   ├── bilesenler/       # Components (Yeniden kullanılabilir)\n│   │   │   ├── arayuz/       # shadcn/ui components\n│   │   │   ├── gelismis-grafikler.tsx\n│   │   │   ├── flash-kartlar-widget.tsx\n│   │   │   └── ...\n│   │   ├── hooks/            # Custom React hooks\n│   │   │   └── use-toast.ts\n│   │   ├── kutuphane/        # Utilities (Yardımcı fonksiyonlar)\n│   │   │   ├── sorguIstemcisi.ts\n│   │   │   └── yardimcilar.ts\n│   │   ├── index.css         # Global styles\n│   │   └── App.tsx           # Root component\n│   ├── public/               # Static assets\n│   └── index.html            # HTML template\n│\n├── server/                   # Backend (Express)\n│   ├── index.ts             # Server entry point\n│   ├── routes.ts            # API endpoints\n│   ├── storage.ts           # Data layer\n│   └── vite.ts              # Vite integration\n│\n├── shared/                  # Shared code\n│   └── sema.ts             # Data models & types\n│\n├── electron/               # Desktop app\n│   ├── main.cjs           # Electron main process\n│   ├── preload.cjs        # Security bridge\n│   ├── activity-logger.cjs # Activity logging\n│   └── icons/             # App icons\n│\n├── data/                  # Persistent data\n│   └── kayitlar.json     # JSON database\n│\n├── package.json          # Dependencies & scripts\n├── tsconfig.json         # TypeScript config\n├── vite.config.ts        # Vite config\n├── tailwind.config.ts    # Tailwind config\n└── drizzle.config.ts     # Drizzle ORM config\n```\n\n---\n\n### 5.2 Kod Organizasyonu Prensipleri\n\n#### 1. Separation of Concerns (Endişelerin Ayrılması)\n```\nFrontend ─────→ Sadece UI\nBackend ─────→ Sadece Data\nShared ──────→ Ortak Tipler\n```\n\n#### 2. DRY (Don't Repeat Yourself)\n```javascript\n// ❌ BAD\nfunction calculateTYTNet(correct, wrong) {\n  return correct - (wrong / 4);\n}\nfunction calculateAYTNet(correct, wrong) {\n  return correct - (wrong / 4);\n}\n\n// ✅ GOOD\nfunction calculateNet(correct, wrong) {\n  return correct - (wrong / 4);\n}\n```\n\n#### 3. Single Responsibility (Tek Sorumluluk)\n```javascript\n// ❌ BAD - Bir fonksiyon çok şey yapıyor\nfunction handleSubmit() {\n  validateForm();\n  sendToAPI();\n  updateUI();\n  showNotification();\n}\n\n// ✅ GOOD - Her fonksiyon tek iş\nfunction handleSubmit() {\n  if (!validateForm()) return;\n  const result = await sendToAPI();\n  if (result.success) {\n    updateUI(result.data);\n    showSuccessNotification();\n  }\n}\n```\n\n---\n\n<a name=\"gelistirme\"></a>\n## 🛠️ 6. Geliştirme İş Akışı\n\n### 6.1 Yeni Özellik Ekleme\n\n**Senaryo: Yeni bir grafik türü eklemek istiyoruz.**\n\n#### Adım 1: Veri Modelini Tanımla\n```typescript\n// shared/sema.ts\nexport const yeniGrafik = pgTable(\"yeni_grafik\", {\n  id: serial(\"id\").primaryKey(),\n  tarih: varchar(\"tarih\").notNull(),\n  deger: integer(\"deger\").notNull(),\n  kategori: varchar(\"kategori\")\n});\n\nexport type YeniGrafik = typeof yeniGrafik.$inferSelect;\nexport const insertYeniGrafikSchema = createInsertSchema(yeniGrafik);\nexport type InsertYeniGrafik = z.infer<typeof insertYeniGrafikSchema>;\n```\n\n#### Adım 2: Storage'a Ekle\n```typescript\n// server/storage.ts\ninterface IStorage {\n  getAllYeniGrafik(): YeniGrafik[];\n  createYeniGrafik(data: InsertYeniGrafik): YeniGrafik;\n}\n\nclass MemStorage implements IStorage {\n  private yeniGrafikler = new Map<number, YeniGrafik>();\n  \n  getAllYeniGrafik(): YeniGrafik[] {\n    return Array.from(this.yeniGrafikler.values());\n  }\n  \n  createYeniGrafik(data: InsertYeniGrafik): YeniGrafik {\n    const id = this.getNextId(this.yeniGrafikler);\n    const yeni: YeniGrafik = { ...data, id };\n    this.yeniGrafikler.set(id, yeni);\n    this.saveToFile();\n    return yeni;\n  }\n}\n```\n\n#### Adım 3: API Endpoint'i Ekle\n```typescript\n// server/routes.ts\napp.get('/api/yeni-grafik', (req, res) => {\n  try {\n    const data = storage.getAllYeniGrafik();\n    res.json(data);\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\napp.post('/api/yeni-grafik', (req, res) => {\n  try {\n    const validData = insertYeniGrafikSchema.parse(req.body);\n    const result = storage.createYeniGrafik(validData);\n    res.status(201).json(result);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      res.status(400).json({ error: error.errors });\n    } else {\n      res.status(500).json({ error: error.message });\n    }\n  }\n});\n```\n\n#### Adım 4: Frontend Bileşeni\n```typescript\n// client/src/bilesenler/yeni-grafik.tsx\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { LineChart, Line, XAxis, YAxis, Tooltip } from 'recharts';\n\nexport function YeniGrafik() {\n  // Data fetching\n  const { data, isLoading } = useQuery<YeniGrafik[]>({\n    queryKey: ['/api/yeni-grafik']\n  });\n  \n  // Data mutation\n  const mutation = useMutation({\n    mutationFn: (newData: InsertYeniGrafik) =>\n      apiRequest('/api/yeni-grafik', { \n        method: 'POST', \n        body: JSON.stringify(newData) \n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/yeni-grafik'] });\n      toast({ title: \"Başarılı\", description: \"Veri eklendi\" });\n    }\n  });\n  \n  if (isLoading) return <Skeleton />;\n  \n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Yeni Grafik</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <LineChart width={600} height={300} data={data}>\n          <XAxis dataKey=\"tarih\" />\n          <YAxis />\n          <Tooltip />\n          <Line type=\"monotone\" dataKey=\"deger\" stroke=\"#8884d8\" />\n        </LineChart>\n      </CardContent>\n    </Card>\n  );\n}\n```\n\n#### Adım 5: Sayfaya Ekle\n```typescript\n// client/src/sayfalar/panel.tsx\nimport { YeniGrafik } from '@bilesenler/yeni-grafik';\n\nexport function Panel() {\n  return (\n    <div>\n      {/* ... mevcut bileşenler */}\n      <YeniGrafik />\n    </div>\n  );\n}\n```\n\n---\n\n<a name=\"dagitim\"></a>\n## 📦 7. Dağıtım ve Paketleme\n\n### 7.1 Production Build\n\n#### Web Uygulaması\n```bash\nnpm run build\n```\n\n**Ne Yapar?**\n```\n1. Vite frontend'i derler\n   - TypeScript → JavaScript\n   - JSX → Normal JS\n   - Minification (küçültme)\n   - Tree shaking (gereksiz kod silme)\n   \n2. esbuild backend'i derler\n   - TypeScript → JavaScript\n   - Bundle (tek dosya)\n   \n3. Çıktı:\n   dist/\n   ├── public/       # Frontend (HTML, JS, CSS)\n   └── index.js      # Backend\n```\n\n#### Electron Build\n```bash\nnpm run electron:build\n```\n\n**Süreç:**\n```\n1. npm run build (yukarıdaki)\n2. electron-builder:\n   - Electron runtime ekler\n   - Node.js ekler\n   - ASAR arşivi oluşturur\n   - NSIS installer yapar\n   \n3. Çıktı:\n   dist-electron/\n   └── Berat Cankir-Kurulum-0.0.3.exe (~150MB)\n```\n\n**ASAR Nedir?**\n- **Atom Shell Archive**\n- Tüm dosyaları tek arşive sıkıştırır\n- Hızlı okuma\n- Basit kod koruması\n\n**NSIS Nedir?**\n- **Nullsoft Scriptable Install System**\n- Windows installer oluşturur\n- Kullanıcı dostu kurulum sihirbazı\n- Başlat menüsü kısayolu\n- Masaüstü kısayolu\n- Kaldırıcı (uninstaller)\n\n---\n\n<a name=\"performans\"></a>\n## ⚡ 8. Performans ve Optimizasyon\n\n### 8.1 React Optimizasyonları\n\n#### 1. React.memo\n```typescript\n// ❌ Her parent render'da child da render olur\nfunction Child({ data }) {\n  return <div>{data}</div>;\n}\n\n// ✅ Props değişmedikçe render olmaz\nconst Child = React.memo(({ data }) => {\n  return <div>{data}</div>;\n});\n```\n\n#### 2. useMemo\n```typescript\n// ❌ Her render'da hesaplama yapılır\nfunction Component({ items }) {\n  const filtered = items.filter(item => item.active);\n  return <List data={filtered} />;\n}\n\n// ✅ items değişmedikçe hesaplama yapılmaz\nfunction Component({ items }) {\n  const filtered = useMemo(() => {\n    return items.filter(item => item.active);\n  }, [items]);\n  return <List data={filtered} />;\n}\n```\n\n#### 3. useCallback\n```typescript\n// ❌ Her render'da yeni fonksiyon oluşur\nfunction Parent() {\n  const handleClick = () => console.log('clicked');\n  return <Child onClick={handleClick} />;\n}\n\n// ✅ Fonksiyon referansı korunur\nfunction Parent() {\n  const handleClick = useCallback(() => {\n    console.log('clicked');\n  }, []);\n  return <Child onClick={handleClick} />;\n}\n```\n\n#### 4. Code Splitting\n```typescript\n// ❌ Tüm kod başlangıçta yüklenir\nimport HeavyComponent from './heavy';\n\n// ✅ Sadece gerektiğinde yüklenir\nconst HeavyComponent = lazy(() => import('./heavy'));\n\n<Suspense fallback={<Loading />}>\n  <HeavyComponent />\n</Suspense>\n```\n\n#### 5. Virtualization\n```typescript\n// ❌ 10000 öğe DOM'da (yavaş)\n{items.map(item => <Item key={item.id} data={item} />)}\n\n// ✅ Sadece görünür öğeler render edilir\nimport { useVirtualizer } from '@tanstack/react-virtual';\n\nconst virtualizer = useVirtualizer({\n  count: items.length,\n  getScrollElement: () => parentRef.current,\n  estimateSize: () => 50,\n});\n```\n\n---\n\n<a name=\"guvenlik\"></a>\n## 🔐 9. Güvenlik ve En İyi Uygulamalar\n\n### 9.1 Input Validation (Girdi Doğrulama)\n\n#### Frontend Validation\n```typescript\nconst schema = z.object({\n  email: z.string().email(\"Geçersiz email\"),\n  age: z.number().min(0).max(150),\n});\n\nconst form = useForm({\n  resolver: zodResolver(schema)\n});\n```\n\n#### Backend Validation\n```typescript\napp.post('/api/user', (req, res) => {\n  try {\n    const validData = userSchema.parse(req.body);\n    // Güvenli, doğrulanmış veri\n  } catch (error) {\n    res.status(400).json({ error: error.errors });\n  }\n});\n```\n\n### 9.2 XSS Prevention (XSS Önleme)\n\n**XSS (Cross-Site Scripting) Nedir?**\nKullanıcı kötü kod enjekte eder, çalıştırılır.\n\n```javascript\n// ❌ Tehlikeli\n<div dangerouslySetInnerHTML={{ __html: userInput }} />\n\n// ✅ Güvenli\n<div>{userInput}</div> // React otomatik escape eder\n```\n\n### 9.3 SQL Injection Prevention\n\n**SQL Injection Nedir?**\nKullanıcı SQL kodu enjekte eder.\n\n```sql\n-- ❌ Tehlikeli (Raw SQL)\ndb.query(`SELECT * FROM users WHERE name = '${userInput}'`);\n-- userInput = \"'; DROP TABLE users; --\"\n\n-- ✅ Güvenli (Parameterized Query)\ndb.query('SELECT * FROM users WHERE name = ?', [userInput]);\n```\n\n**Bizim Durumumuz:**\n- SQL kullanmıyoruz\n- In-memory Map kullanıyoruz\n- Zod ile validasyon yapıyoruz\n- XSS/SQL Injection riski yok ✅\n\n---\n\n<a name=\"sorun-giderme\"></a>\n## 🔧 10. Sorun Giderme ve Hata Ayıklama\n\n### 10.1 Yaygın Sorunlar\n\n#### \"Module not found\"\n```bash\n# Çözüm:\nnpm install\n# veya\nrm -rf node_modules package-lock.json\nnpm install\n```\n\n#### \"Port 5000 already in use\"\n```bash\n# Çözüm (Windows):\nnetstat -ano | findstr :5000\ntaskkill /PID <PID_NUMBER> /F\n\n# Çözüm (Mac/Linux):\nlsof -ti:5000 | xargs kill -9\n```\n\n#### TypeScript Hatası: \"Cannot find module\"\n```bash\n# Çözüm:\n# 1. tsconfig.json'da path alias'ları kontrol et\n# 2. vite.config.ts'de alias'ları kontrol et\n# 3. IDE'yi yeniden başlat\n```\n\n### 10.2 Debug Araçları\n\n#### React DevTools\n```\n1. Chrome Extension yükle: React Developer Tools\n2. F12 → Components tab\n3. Component ağacını incele\n4. Props ve state'leri gör\n```\n\n#### Network Tab\n```\n1. F12 → Network tab\n2. API isteklerini izle\n3. Request/Response inceleme\n4. Timing analizi\n```\n\n#### Console Logs\n```typescript\n// Basit log\nconsole.log('Değişken:', deger);\n\n// Obje yapısını gör\nconsole.table(obje);\n\n// Grup halinde\nconsole.group('Grup Adı');\nconsole.log('İçerik 1');\nconsole.log('İçerik 2');\nconsole.groupEnd();\n```\n\n---\n\n<a name=\"kaynaklar\"></a>\n## 📚 11. Öğrenme Kaynakları\n\n### 11.1 Resmi Dokümantasyonlar\n\n#### React\n- **Resmi:** https://react.dev\n- **Türkçe:** https://tr.react.dev\n- **Beta Docs:** En güncel, interactive\n\n#### TypeScript\n- **Resmi:** https://www.typescriptlang.org/docs\n- **Handbook:** Comprehensive guide\n- **Playground:** https://www.typescriptlang.org/play\n\n#### Tailwind CSS\n- **Resmi:** https://tailwindcss.com/docs\n- **Cheat Sheet:** https://nerdcave.com/tailwind-cheat-sheet\n\n#### Electron\n- **Resmi:** https://www.electronjs.org/docs\n- **Fiddle:** Interactive playground\n\n### 11.2 Video Kaynakları (Türkçe)\n\n- **Prototurk:** React, JavaScript\n- **Kablosuzkedi:** Full-stack projeler\n- **Tayfun Erbilen:** Web development\n- **Sadık Turan:** Python, JS, React\n\n### 11.3 Pratik Projeler\n\n**Başlangıç:**\n1. Todo App (To-do listesi)\n2. Weather App (Hava durumu)\n3. Calculator (Hesap makinesi)\n\n**Orta:**\n1. Blog sistemi\n2. E-commerce (basit)\n3. Chat uygulaması\n\n**İleri:**\n1. Social media clone\n2. Project management tool\n3. Video streaming platform\n\n---\n\n## 🎓 12. Sonuç ve Kariyer Yolu\n\n### 12.1 Bu Projeden Öğrenilenler\n\n**Frontend:**\n- ✅ React component mimarisi\n- ✅ State management\n- ✅ TypeScript tip sistemi\n- ✅ Tailwind CSS styling\n- ✅ TanStack Query data fetching\n- ✅ Recharts data visualization\n\n**Backend:**\n- ✅ Node.js ve Express\n- ✅ RESTful API tasarımı\n- ✅ Veri modelleme\n- ✅ Validasyon (Zod)\n- ✅ File-based persistence\n\n**Desktop:**\n- ✅ Electron mimarisi\n- ✅ IPC communication\n- ✅ System integration\n- ✅ Build ve packaging\n\n**DevOps:**\n- ✅ Build tools (Vite, esbuild)\n- ✅ Package management (npm)\n- ✅ Version control (git)\n\n### 12.2 Kariyer Yolu\n\n**Junior Developer (0-2 yıl):**\n- HTML, CSS, JavaScript temelleri\n- React veya Vue öğren\n- Basit projeler yap\n- GitHub profili oluştur\n\n**Mid-Level Developer (2-5 yıl):**\n- TypeScript master\n- Backend öğren (Node.js)\n- Database (SQL)\n- Testing (Jest, Cypress)\n- CI/CD pipeline\n\n**Senior Developer (5+ yıl):**\n- System design\n- Architecture patterns\n- Mentoring\n- Tech leadership\n\n### 12.3 İş İlanlarında Aranan Beceriler\n\n**En Çok Aranan (2024):**\n1. React ⭐⭐⭐⭐⭐\n2. TypeScript ⭐⭐⭐⭐⭐\n3. Node.js ⭐⭐⭐⭐\n4. Next.js ⭐⭐⭐⭐\n5. Tailwind CSS ⭐⭐⭐\n6. Git ⭐⭐⭐⭐⭐\n\n**Bu Projede Hepsi Var! ✅**\n\n---\n\n## 📝 Son Notlar\n\nBu döküman, YKS Deneme Analizi uygulamasının teknik her yönünü, kullanılan tüm teknolojileri ve nedenleriyle birlikte açıklar. \n\n**Önemli Hatırlatmalar:**\n- 💡 Kod yazmak pratik gerektirir\n- 📚 Her gün biraz öğrenin\n- 🤝 Toplulukla etkileşim kurun\n- 🚀 Kendi projelerinizi yapın\n- ❓ Soru sormaktan çekinmeyin\n\n**Başarılar! 🎉**\n\n---\n\n**Son Güncelleme:** 29 Ekim 2025\n**Geliştirici:** Berat Cankır\n**GitHub:** https://github.com/beratcode03/beratders\n**Lisans:** MIT (Açık Kaynak)\n","size_bytes":38976},"client/src/bilesenler/arayuz/alert.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/kutuphane/yardimcilar\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":1700},"client/src/bilesenler/arayuz/checkbox.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/kutuphane/yardimcilar\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":1172},"client/src/bilesenler/arayuz/pagination.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/kutuphane/yardimcilar\"\nimport { ButtonProps, buttonVariants } from \"@/bilesenler/arayuz/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":2871},"shared/utils/date.ts":{"content":"export function formatDate(date: Date | string, locale: string = 'tr-TR'): string {\n  const d = typeof date === 'string' ? new Date(date) : date;\n  return d.toLocaleDateString(locale);\n}\n\nexport function formatDateTime(date: Date | string, locale: string = 'tr-TR'): string {\n  const d = typeof date === 'string' ? new Date(date) : date;\n  return d.toLocaleString(locale);\n}\n\nexport function formatTime(date: Date | string, locale: string = 'tr-TR'): string {\n  const d = typeof date === 'string' ? new Date(date) : date;\n  return d.toLocaleTimeString(locale, {\n    hour: '2-digit',\n    minute: '2-digit',\n  });\n}\n\nexport function formatDateISO(date: Date | string): string {\n  const d = typeof date === 'string' ? new Date(date) : date;\n  return d.toISOString().split('T')[0];\n}\n\nexport function formatRelativeTime(date: Date | string, locale: string = 'tr-TR'): string {\n  const d = typeof date === 'string' ? new Date(date) : date;\n  const now = new Date();\n  const diffMs = now.getTime() - d.getTime();\n  const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n\n  if (diffDays === 0) return 'Bugün';\n  if (diffDays === 1) return 'Dün';\n  if (diffDays < 7) return `${diffDays} gün önce`;\n  if (diffDays < 30) return `${Math.floor(diffDays / 7)} hafta önce`;\n  if (diffDays < 365) return `${Math.floor(diffDays / 30)} ay önce`;\n  return `${Math.floor(diffDays / 365)} yıl önce`;\n}\n","size_bytes":1396},"client/src/bilesenler/arayuz/drawer.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\n\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/kutuphane/yardimcilar\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":3137},"client/src/bilesenler/arayuz/scroll-area.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/kutuphane/yardimcilar\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":1758},"server/static.ts":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(__dirname, \"..\", \"dist\", \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  // Static dosyaları cache-control ile sun\n  app.use(express.static(distPath, {\n    setHeaders: (res) => {\n      res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');\n    }\n  }));\n\n  app.use(\"*\", (_req, res) => {\n    res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":1122},"client/src/bilesenler/arayuz/input.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport * as React from \"react\"\n\nimport { cn } from \"@/kutuphane/yardimcilar\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, onChange, ...props }, ref) => {\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      if (type === \"number\" && e.target.value) {\n        const cleanValue = e.target.value.replace(/^0+(?=\\d)/, '');\n        e.target.value = cleanValue;\n      }\n      onChange?.(e);\n    };\n\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        onChange={handleChange}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":1211},"client/src/bilesenler/arayuz/textarea.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport * as React from \"react\"\n\nimport { cn } from \"@/kutuphane/yardimcilar\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":805},"client/src/bilesenler/arayuz/accordion.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/kutuphane/yardimcilar\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":2093},"client/src/App.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport { Switch, Route } from \"wouter\";\nimport { sorguIstemcisi } from \"./kutuphane/sorguIstemcisi\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/bilesenler/arayuz/toaster\";\nimport { TooltipProvider } from \"@/bilesenler/arayuz/tooltip\";\nimport { ThemeProvider } from \"@/bilesenler/tema-saglayici\";\nimport Homepage from \"@/sayfalar/anasayfa-detay\";\nimport Home from \"@/sayfalar/anasayfa\";\nimport Dashboard from \"@/sayfalar/panel\";\nimport NetCalculator from \"@/sayfalar/net-hesaplayici\";\nimport Timer from \"@/sayfalar/sayac\";\nimport YKSKonular from \"@/sayfalar/yks-konular\";\nimport NotFound from \"@/sayfalar/bulunamadi\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Homepage} />\n      <Route path=\"/tasks\" component={Home} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route path=\"/net-calculator\" component={NetCalculator} />\n      <Route path=\"/timer\" component={Timer} />\n      <Route path=\"/yks-konular\" component={YKSKonular} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={sorguIstemcisi}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":1465},"client/src/bilesenler/arayuz/aspect-ratio.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":244},"md dosyaları/kod_aciklamasi_kok_dizin.md":{"content":"# KÖK DİZİN DOSYALARI - DETAYLI AÇIKLAMA\n\n**📑 Hızlı Navigasyon:** [Ana Sayfa](../replit.md) | [Talimatlar](./talimatlar.md) | [Teknik Mimari](./teknik_mimari.md) | [Client Kodu](./kod_aciklamasi_client.md) | [Server Kodu](./kod_aciklamasi_server.md) | [Shared Kodu](./kod_aciklamasi_shared.md) | [Electron](./kod_aciklamasi_electron1.md) | [Testler](./kod_aciklamasi_testler.md)\n\n---\n\n## GİRİŞ\n\nBu doküman, projenin kök dizinindeki tüm konfigürasyon dosyalarını detaylı açıklar.\n\n**Kök Dizin Dosyaları:**\n- `package.json` - Dependencies, scripts, metadata\n- `tsconfig.json` - TypeScript configuration\n- `vite.config.ts` - Vite bundler configuration\n- `tailwind.config.ts` - Tailwind CSS configuration\n- `playwright.config.ts` - Playwright test configuration\n- `.gitignore` - Git ignore rules\n- `drizzle.config.ts` - Drizzle ORM configuration\n\n---\n\n## BÖLÜM 1: package.json\n\n### 1.1 Metadata\n\n```json\n{\n  \"name\": \"berat-yks-analiz\",\n  \"version\": \"1.0.0\",\n  \"private\": true,\n  \"type\": \"module\",\n  \"description\": \"Berat Cankır YKS Analiz Takip Sistemi\",\n  \"author\": \"Berat Cankır\"\n}\n```\n\n**Detaylı Açıklama:**\n\n**1. name**\n```json\n\"name\": \"berat-yks-analiz\"\n```\nNPM package adı (lowercase, dash-separated).\n\n**2. version**\n```json\n\"version\": \"1.0.0\"\n```\nSemantic versioning: MAJOR.MINOR.PATCH\n\n**3. private**\n```json\n\"private\": true\n```\nNPM registry'ye publish edilmesini engeller (güvenlik).\n\n**4. type: module**\n```json\n\"type\": \"module\"\n```\nESM (ES Modules) kullan, CommonJS değil.\n\n```javascript\n// ✅ ESM\nimport express from 'express';\n\n// ❌ CommonJS\nconst express = require('express');\n```\n\n### 1.2 Scripts\n\n```json\n{\n  \"scripts\": {\n    \"dev\": \"tsx watch server/index.ts\",\n    \"build\": \"vite build\",\n    \"start\": \"NODE_ENV=production tsx server/index.ts\",\n    \"test\": \"playwright test\",\n    \"db:push\": \"drizzle-kit push\",\n    \"db:studio\": \"drizzle-kit studio\"\n  }\n}\n```\n\n**Detaylı Açıklama:**\n\n**1. dev - Development Server**\n```json\n\"dev\": \"tsx watch server/index.ts\"\n```\n\n**tsx:** TypeScript executor (ts-node alternative, daha hızlı)  \n**watch:** Dosya değişikliklerinde otomatik restart\n\n**Çalıştırma:**\n```bash\nnpm run dev\n```\n\n**2. build - Production Build**\n```json\n\"build\": \"vite build\"\n```\n\nFrontend kodunu build eder:\n- TypeScript → JavaScript\n- Minification\n- Bundling\n- Tree shaking\n\n**Output:** `dist/` klasörü\n\n**3. start - Production Server**\n```json\n\"start\": \"NODE_ENV=production tsx server/index.ts\"\n```\n\nProduction mode'da server başlatır:\n- Static file serving (`dist/`)\n- No HMR\n- Optimized\n\n**4. test - Playwright Tests**\n```json\n\"test\": \"playwright test\"\n```\n\nE2E testleri çalıştırır.\n\n**5. db:push - Database Schema Sync**\n```json\n\"db:push\": \"drizzle-kit push\"\n```\n\nDrizzle schema'yı database'e push eder (migration olmadan).\n\n**6. db:studio - Database GUI**\n```json\n\"db:studio\": \"drizzle-kit studio\"\n```\n\nWeb-based database viewer açar.\n\n### 1.3 Dependencies\n\n```json\n{\n  \"dependencies\": {\n    \"@neondatabase/serverless\": \"^0.10.4\",\n    \"@radix-ui/react-*\": \"...\",\n    \"drizzle-orm\": \"^0.36.4\",\n    \"express\": \"^4.21.1\",\n    \"react\": \"^18.3.1\",\n    \"react-dom\": \"^18.3.1\",\n    \"tailwindcss\": \"^3.4.15\",\n    \"vite\": \"^5.4.11\",\n    \"zod\": \"^3.23.8\"\n  }\n}\n```\n\n**Ana Dependencies:**\n\n**1. @neondatabase/serverless**\nPostgreSQL client for Neon (serverless database).\n\n**2. @radix-ui/react-***\nHeadless UI components (accessible, unstyled).\n\n**3. drizzle-orm**\nTypeScript ORM for PostgreSQL.\n\n**4. express**\nBackend server framework.\n\n**5. react + react-dom**\nFrontend library.\n\n**6. tailwindcss**\nUtility-first CSS framework.\n\n**7. vite**\nFrontend build tool (fast, modern).\n\n**8. zod**\nSchema validation library.\n\n### 1.4 DevDependencies\n\n```json\n{\n  \"devDependencies\": {\n    \"@playwright/test\": \"^1.49.0\",\n    \"@types/express\": \"^5.0.0\",\n    \"@types/node\": \"^22.9.0\",\n    \"@types/react\": \"^18.3.12\",\n    \"@vitejs/plugin-react\": \"^4.3.3\",\n    \"drizzle-kit\": \"^0.29.1\",\n    \"tsx\": \"^4.19.2\",\n    \"typescript\": \"^5.6.3\"\n  }\n}\n```\n\n**Ana DevDependencies:**\n\n**1. @playwright/test**\nE2E testing framework.\n\n**2. @types/***\nTypeScript type definitions.\n\n**3. @vitejs/plugin-react**\nVite React plugin (JSX transform, HMR).\n\n**4. drizzle-kit**\nDrizzle CLI tools (migration, studio).\n\n**5. tsx**\nTypeScript executor (development).\n\n**6. typescript**\nTypeScript compiler.\n\n---\n\n## BÖLÜM 2: tsconfig.json\n\n```json\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"module\": \"ESNext\",\n    \"lib\": [\"ES2020\", \"DOM\", \"DOM.Iterable\"],\n    \"jsx\": \"react-jsx\",\n    \"moduleResolution\": \"bundler\",\n    \"resolveJsonModule\": true,\n    \"allowImportingTsExtensions\": true,\n    \"strict\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"paths\": {\n      \"@/*\": [\"./client/src/*\"],\n      \"@shared/*\": [\"./shared/*\"],\n      \"@assets/*\": [\"./attached_assets/*\"]\n    }\n  },\n  \"include\": [\"client\", \"server\", \"shared\"],\n  \"exclude\": [\"node_modules\", \"dist\"]\n}\n```\n\n**Detaylı Açıklama:**\n\n**1. target: ES2020**\n```json\n\"target\": \"ES2020\"\n```\nOutput JavaScript version (ES2020 features).\n\n**2. module: ESNext**\n```json\n\"module\": \"ESNext\"\n```\nModule system (ES modules).\n\n**3. lib**\n```json\n\"lib\": [\"ES2020\", \"DOM\", \"DOM.Iterable\"]\n```\nType definitions to include:\n- ES2020 → Standard library\n- DOM → Browser APIs\n- DOM.Iterable → Array, Map iteration\n\n**4. jsx: react-jsx**\n```json\n\"jsx\": \"react-jsx\"\n```\nModern JSX transform (no React import needed).\n\n```typescript\n// ✅ NEW (react-jsx)\nexport default function App() {\n  return <div>Hello</div>;\n}\n\n// ❌ OLD (react)\nimport React from 'react';\nexport default function App() {\n  return <div>Hello</div>;\n}\n```\n\n**5. moduleResolution: bundler**\n```json\n\"moduleResolution\": \"bundler\"\n```\nVite/bundler-aware module resolution.\n\n**6. strict: true**\n```json\n\"strict\": true\n```\nAll strict type-checking options enabled:\n- strictNullChecks\n- strictFunctionTypes\n- strictBindCallApply\n- etc.\n\n**7. paths (Aliases)**\n```json\n\"paths\": {\n  \"@/*\": [\"./client/src/*\"],\n  \"@shared/*\": [\"./shared/*\"],\n  \"@assets/*\": [\"./attached_assets/*\"]\n}\n```\n\n**Kullanım:**\n```typescript\n// ✅ Alias ile\nimport { Button } from '@/components/ui/button';\nimport { Task } from '@shared/sema';\nimport logo from '@assets/logo.png';\n\n// ❌ Relative path (uzun)\nimport { Button } from '../../../components/ui/button';\n```\n\n**8. include/exclude**\n```json\n\"include\": [\"client\", \"server\", \"shared\"],\n\"exclude\": [\"node_modules\", \"dist\"]\n```\n\nTypeScript hangi dosyaları compile etsin?\n\n---\n\n## BÖLÜM 3: vite.config.ts\n\n```typescript\nimport { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\n\nexport default defineConfig({\n  plugins: [react()],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"./client/src\"),\n      \"@shared\": path.resolve(__dirname, \"./shared\"),\n      \"@assets\": path.resolve(__dirname, \"./attached_assets\"),\n    },\n  },\n  root: path.resolve(__dirname, \"client\"),\n  build: {\n    outDir: path.resolve(__dirname, \"dist\"),\n    emptyOutDir: true,\n  },\n  server: {\n    port: 3000,\n    strictPort: false,\n    host: \"0.0.0.0\",\n  },\n});\n```\n\n**Detaylı Açıklama:**\n\n**1. plugins**\n```typescript\nplugins: [react()]\n```\nReact plugin ekler (JSX transform, HMR, Fast Refresh).\n\n**2. resolve.alias**\n```typescript\nalias: {\n  \"@\": path.resolve(__dirname, \"./client/src\"),\n  \"@shared\": path.resolve(__dirname, \"./shared\"),\n  \"@assets\": path.resolve(__dirname, \"./attached_assets\"),\n}\n```\nImport alias'ları tanımlar (tsconfig.json ile sync).\n\n**3. root**\n```typescript\nroot: path.resolve(__dirname, \"client\")\n```\nVite dev server'ın root klasörü (HTML entry point).\n\n**4. build.outDir**\n```typescript\nbuild: {\n  outDir: path.resolve(__dirname, \"dist\"),\n  emptyOutDir: true,\n}\n```\nBuild çıktısı `dist/` klasörüne (önce temizlenir).\n\n**5. server.host: \"0.0.0.0\"**\n```typescript\nserver: {\n  host: \"0.0.0.0\",\n}\n```\nTüm network interface'lerden erişim (LAN, Electron).\n\n---\n\n## BÖLÜM 4: tailwind.config.ts\n\n```typescript\nimport type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\n    \"./client/src/**/*.{ts,tsx}\",\n  ],\n  theme: {\n    extend: {\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        // ... daha fazla renk\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n} satisfies Config;\n```\n\n**Detaylı Açıklama:**\n\n**1. darkMode: [\"class\"]**\n```typescript\ndarkMode: [\"class\"]\n```\nDark mode CSS class ile kontrol edilir.\n\n```html\n<!-- Light mode -->\n<html>\n\n<!-- Dark mode -->\n<html class=\"dark\">\n```\n\n**2. content**\n```typescript\ncontent: [\"./client/src/**/*.{ts,tsx}\"]\n```\nTailwind hangi dosyalarda class kullanılıyor kontrol eder (tree shaking).\n\n**3. theme.extend.colors**\n```typescript\ncolors: {\n  background: \"hsl(var(--background))\",\n  foreground: \"hsl(var(--foreground))\",\n}\n```\n\nCSS variables kullanır (dynamic theming).\n\n**CSS:**\n```css\n:root {\n  --background: 0 0% 100%;\n  --foreground: 222.2 84% 4.9%;\n}\n\n.dark {\n  --background: 222.2 84% 4.9%;\n  --foreground: 210 40% 98%;\n}\n```\n\n**4. plugins**\n```typescript\nplugins: [require(\"tailwindcss-animate\")]\n```\nTailwind animation utilities ekler.\n\n---\n\n## BÖLÜM 5: playwright.config.ts\n\n```typescript\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  testDir: './testler',\n  fullyParallel: false,\n  forbidOnly: !!process.env.CI,\n  retries: process.env.CI ? 2 : 0,\n  workers: 1,\n  reporter: 'html',\n  use: {\n    baseURL: 'http://localhost:5000',\n    trace: 'on-first-retry',\n    screenshot: 'only-on-failure',\n  },\n  projects: [\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'] },\n    },\n  ],\n  webServer: {\n    command: 'npm run dev',\n    url: 'http://localhost:5000',\n    reuseExistingServer: !process.env.CI,\n  },\n});\n```\n\n**Detaylı Açıklama:**\n\n**1. testDir**\n```typescript\ntestDir: './testler'\n```\nTest dosyalarının konumu.\n\n**2. fullyParallel: false**\n```typescript\nfullyParallel: false\n```\nTestler sıralı çalışır (database state shared).\n\n**3. workers: 1**\n```typescript\nworkers: 1\n```\nTek worker (parallel test yok).\n\n**4. reporter: 'html'**\n```typescript\nreporter: 'html'\n```\nHTML test raporu oluşturur (`playwright-report/`).\n\n**5. use.baseURL**\n```typescript\nuse: {\n  baseURL: 'http://localhost:5000',\n}\n```\nTüm testlerde default base URL.\n\n```typescript\n// ✅ Kısa\nawait page.goto('/anasayfa');\n\n// ❌ Uzun\nawait page.goto('http://localhost:5000/anasayfa');\n```\n\n**6. webServer**\n```typescript\nwebServer: {\n  command: 'npm run dev',\n  url: 'http://localhost:5000',\n  reuseExistingServer: !process.env.CI,\n}\n```\n\nTestler çalışmadan önce dev server otomatik başlatılır.\n\n---\n\n## BÖLÜM 6: drizzle.config.ts\n\n```typescript\nimport { defineConfig } from \"drizzle-kit\";\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/sema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL!,\n  },\n});\n```\n\n**Detaylı Açıklama:**\n\n**1. out: \"./migrations\"**\n```typescript\nout: \"./migrations\"\n```\nMigration dosyalarının konumu.\n\n**2. schema: \"./shared/sema.ts\"**\n```typescript\nschema: \"./shared/sema.ts\"\n```\nDrizzle schema definition dosyası.\n\n**3. dialect: \"postgresql\"**\n```typescript\ndialect: \"postgresql\"\n```\nDatabase type (PostgreSQL).\n\n**4. dbCredentials**\n```typescript\ndbCredentials: {\n  url: process.env.DATABASE_URL!,\n}\n```\nDatabase connection string (environment variable).\n\n---\n\n## BÖLÜM 7: .gitignore\n\n```\nnode_modules/\ndist/\n.env\n*.log\nplaywright-report/\ntest-results/\n.DS_Store\n```\n\n**Detaylı Açıklama:**\n\n**1. node_modules/**\nDependencies (npm install ile tekrar indirilir).\n\n**2. dist/**\nBuild çıktısı (build ile tekrar oluşturulur).\n\n**3. .env**\nEnvironment variables (SECRET, güvenlik).\n\n**4. *.log**\nLog dosyaları (debug, error logs).\n\n**5. playwright-report/**\nTest report çıktısı.\n\n**6. test-results/**\nTest screenshots, videos.\n\n**7. .DS_Store**\nmacOS system file (gereksiz).\n\n---\n\n## ÖZET\n\n**Kök Dizin Dosyaları:**\n\n| Dosya | Amaç |\n|-------|------|\n| package.json | Dependencies, scripts, metadata |\n| tsconfig.json | TypeScript configuration |\n| vite.config.ts | Vite bundler configuration |\n| tailwind.config.ts | Tailwind CSS configuration |\n| playwright.config.ts | Playwright test configuration |\n| drizzle.config.ts | Drizzle ORM configuration |\n| .gitignore | Git ignore rules |\n\n**Teknoloji Stack:**\n- **Build Tool:** Vite\n- **Language:** TypeScript\n- **Frontend:** React + Tailwind CSS\n- **Backend:** Express\n- **Database:** PostgreSQL (Neon)\n- **ORM:** Drizzle\n- **Testing:** Playwright\n- **Validation:** Zod\n\n","size_bytes":13031},"client/src/bilesenler/arayuz/dropdown-menu.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/kutuphane/yardimcilar\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":7725},"client/src/bilesenler/arayuz/resizable.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\n\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/kutuphane/yardimcilar\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":1839},"client/src/bilesenler/arayuz/form.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\n\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/kutuphane/yardimcilar\"\nimport { Label } from \"@/bilesenler/arayuz/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":4240},"server/email-template.ts":{"content":"export function generateModernEmailTemplate(data: {\n  totalQuestions: number;\n  totalCorrect: number;\n  totalWrong: number;\n  totalEmpty: number;\n  successRate: string;\n  recentExams: any[];\n  generalExams: any[];\n  branchExams: any[];\n  tasks: any[];\n  completedTasks: number;\n  totalActivities: number;\n  activityMotivation: string;\n  activityColor: string;\n  longestStreak: number;\n  wrongTopicsCount: number;\n  completedTopics: number;\n  maxTytNet: string;\n  branchRecords: any;\n  mostQuestionsDate: string;\n  mostQuestionsCount: number;\n  mostWrongSubjects: any[];\n  mostSolvedSubjects: any[];\n  mostCorrectSubjects: any[];\n  examSubjectNets: any[];\n  completedTopicsHistory: any[];\n  completedQuestionsHistory: any[];\n  isManualRequest: boolean;\n}) {\n  // Calculate days until end of month\n  const now = new Date();\n  const currentMonth = now.getMonth();\n  const currentYear = now.getFullYear();\n  const lastDayOfMonth = new Date(currentYear, currentMonth + 1, 0);\n  const daysUntilEndOfMonth = Math.ceil((lastDayOfMonth.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n  \n  const {\n    totalQuestions,\n    totalCorrect,\n    totalWrong,\n    totalEmpty,\n    successRate,\n    recentExams,\n    generalExams,\n    branchExams,\n    tasks,\n    completedTasks,\n    totalActivities,\n    activityMotivation,\n    activityColor,\n    longestStreak,\n    wrongTopicsCount,\n    completedTopics,\n    maxTytNet,\n    branchRecords,\n    mostQuestionsDate,\n    mostQuestionsCount,\n    mostWrongSubjects,\n    mostSolvedSubjects,\n    mostCorrectSubjects,\n    examSubjectNets,\n    completedTopicsHistory,\n    completedQuestionsHistory,\n    isManualRequest\n  } = data;\n\n  return `\n    <!DOCTYPE html>\n    <html lang=\"tr\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <title>Aylık Çalışma Raporum</title>\n    </head>\n    <body style=\"margin: 0; padding: 40px 20px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif; background: white;\">\n      \n      <!-- Ana Konteyner - Kalın gradient border -->\n      <div style=\"max-width: 800px; margin: 0 auto; background: white; border-radius: 24px; overflow: hidden; box-shadow: 0 30px 90px rgba(0,0,0,0.4); padding: 24px; background: linear-gradient(135deg, #dc2626 0%, #b91c1c 12%, #9333ea 25%, #7c3aed 37%, #2563eb 50%, #10b981 62%, #ec4899 75%, #c084fc 87%, #a855f7 100%);\">\n        <div style=\"background: white; border-radius: 12px; overflow: hidden;\">\n        \n        <!-- ATATÜRK SECTION - Dış kenarlıkla bitişik çerçeve (email-safe) -->\n        <table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"100%\">\n          <tr>\n            <td style=\"padding: 0; background: white;\">\n              <table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse: collapse;\">\n                <tr>\n                  <td style=\"padding: 40px 30px; text-align: center; background: white;\">\n                    <img src=\"cid:turkbayragi\" alt=\"Türk Bayrağı\" style=\"width: 140px; height: auto; margin-bottom: 25px; border-radius: 10px; box-shadow: 0 4px 15px rgba(0,0,0,0.3); display: block; margin-left: auto; margin-right: auto;\" />\n                    <div style=\"font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; font-size: 18px; line-height: 1.7; color: #333; margin: 25px auto; max-width: 680px; font-weight: 400; letter-spacing: 0.2px;\">\n                      \"Biz her şeyi gençliğe bırakacağız. Geleceğin ümidi, ışıklı çiçekleri onlardır. Bütün ümidim gençliktedir.\"\n                    </div>\n                    <div style=\"color: #b71c1c; font-weight: 700; font-size: 16px; margin: 20px 0; letter-spacing: 1px; font-family: 'Segoe UI', Arial, sans-serif;\">— Mustafa Kemal Atatürk —</div>\n                    <img src=\"cid:ataturkimza\" alt=\"Atatürk İmza\" style=\"width: 160px; height: auto; margin: 20px auto; display: block;\" />\n                    <img src=\"cid:ataturk\" alt=\"Mustafa Kemal Atatürk\" style=\"width: 180px; height: auto; margin: 20px auto 0; display: block; border-radius: 12px; border: 5px solid #e91e63; box-shadow: 0 6px 25px rgba(0,0,0,0.3);\" />\n                  </td>\n                </tr>\n                <tr>\n                  <td style=\"padding: 0; height: 8px;\">\n                    <table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"100%\" style=\"border-collapse: collapse;\">\n                      <tr>\n                        <td style=\"width: 11.11%; height: 8px; padding: 0; background-color: #dc2626;\"></td>\n                        <td style=\"width: 11.11%; height: 8px; padding: 0; background-color: #b91c1c;\"></td>\n                        <td style=\"width: 11.11%; height: 8px; padding: 0; background-color: #9333ea;\"></td>\n                        <td style=\"width: 11.11%; height: 8px; padding: 0; background-color: #7c3aed;\"></td>\n                        <td style=\"width: 11.11%; height: 8px; padding: 0; background-color: #2563eb;\"></td>\n                        <td style=\"width: 11.11%; height: 8px; padding: 0; background-color: #10b981;\"></td>\n                        <td style=\"width: 11.11%; height: 8px; padding: 0; background-color: #ec4899;\"></td>\n                        <td style=\"width: 11.11%; height: 8px; padding: 0; background-color: #c084fc;\"></td>\n                        <td style=\"width: 11.12%; height: 8px; padding: 0; background-color: #a855f7;\"></td>\n                      </tr>\n                    </table>\n                  </td>\n                </tr>\n              </table>\n            </td>\n          </tr>\n          \n          <!-- BAŞLIK -->\n          <tr>\n            <td style=\"background: white; padding: 35px 30px 20px; text-align: center;\">\n              <h1 style=\"font-size: 32px; margin: 0 0 10px 0; font-weight: 900; letter-spacing: 0.5px; color: #8e24aa;\">🎓 BERAT CANKIR</h1>\n              <div style=\"font-size: 20px; font-weight: 700; margin: 0 0 15px 0; letter-spacing: 0.3px; color: #424242;\">KİŞİSEL ÇALIŞMA ANALİZ RAPORU</div>\n              <div style=\"font-size: 16px; font-weight: 600; color: #666; margin: 0;\">📅 ${new Date().toLocaleDateString('tr-TR', { day: 'numeric', month: 'long', year: 'numeric' })} | 🎯 Üniversite Kazanılacak !</div>\n            </td>\n          </tr>\n          \n          <!-- ÇÖZÜLEN SORU VE DENEME - EN ÜSTTE -->\n          <tr>\n            <td style=\"padding: 30px; background: #fafafa;\">\n              <table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"100%\">\n                <tr>\n                  <td width=\"49%\" style=\"vertical-align: top;\">\n                    <div style=\"border-radius: 20px; padding: 35px 25px; text-align: center; color: white; box-shadow: 0 10px 30px rgba(0,0,0,0.2); background: linear-gradient(135deg, #7c4dff 0%, #651fff 100%);\">\n                      <div style=\"font-size: 14px; font-weight: 700; margin-bottom: 18px; opacity: 0.95; letter-spacing: 0.5px;\">📚 ÇÖZÜLEN SORU</div>\n                      <div style=\"font-size: 52px; font-weight: 900; text-shadow: 0 4px 10px rgba(0,0,0,0.3);\">${totalQuestions}</div>\n                    </div>\n                  </td>\n                  <td width=\"2%\"></td>\n                  <td width=\"49%\" style=\"vertical-align: top;\">\n                    <div style=\"border-radius: 20px; padding: 35px 25px; text-align: center; color: white; box-shadow: 0 10px 30px rgba(0,0,0,0.2); background: linear-gradient(135deg, #ef5350 0%, #e53935 100%);\">\n                      <div style=\"font-size: 14px; font-weight: 700; margin-bottom: 18px; opacity: 0.95; letter-spacing: 0.5px;\">🎯 ÇÖZÜLEN DENEME</div>\n                      <div style=\"font-size: 52px; font-weight: 900; text-shadow: 0 4px 10px rgba(0,0,0,0.3);\">${recentExams.length}</div>\n                    </div>\n                  </td>\n                </tr>\n              </table>\n            </td>\n          </tr>\n          \n          <!-- TOPLAM AKTİVİTE VE GÖREVLER - ALTTA -->\n          <tr>\n            <td style=\"padding: 30px; background: #fafafa;\">\n              <table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"100%\">\n                <tr>\n                  <td width=\"49%\" style=\"vertical-align: top;\">\n                    <div style=\"border-radius: 20px; padding: 35px 25px; text-align: center; color: white; box-shadow: 0 10px 30px rgba(0,0,0,0.2); background: linear-gradient(135deg, #26a69a 0%, #00897b 100%);\">\n                      <div style=\"font-size: 14px; font-weight: 700; margin-bottom: 18px; opacity: 0.95; letter-spacing: 0.5px;\">📈 TOPLAM AKTİVİTE</div>\n                      <div style=\"font-size: 52px; font-weight: 900; margin-bottom: 12px; text-shadow: 0 4px 10px rgba(0,0,0,0.3);\">${totalActivities}</div>\n                      <div style=\"font-size: 14px; opacity: 0.9; font-weight: 600;\">kayıtlı aktivite</div>\n                    </div>\n                  </td>\n                  <td width=\"2%\"></td>\n                  <td width=\"49%\" style=\"vertical-align: top;\">\n                    <div style=\"border-radius: 20px; padding: 35px 25px; text-align: center; color: white; box-shadow: 0 10px 30px rgba(0,0,0,0.2); background: linear-gradient(135deg, #ab47bc 0%, #8e24aa 100%);\">\n                      <div style=\"font-size: 14px; font-weight: 700; margin-bottom: 18px; opacity: 0.95; letter-spacing: 0.5px;\">✅ TAMAMLANAN GÖREVLER</div>\n                      <div style=\"font-size: 52px; font-weight: 900; margin-bottom: 12px; text-shadow: 0 4px 10px rgba(0,0,0,0.3);\">${completedTasks}/${tasks.length}</div>\n                      <div style=\"font-size: 14px; opacity: 0.9; font-weight: 600;\">görev tamamlandı</div>\n                    </div>\n                  </td>\n                </tr>\n              </table>\n              <div style=\"border-radius: 16px; padding: 22px; text-align: center; color: white; font-weight: 700; font-size: 15px; box-shadow: 0 6px 20px rgba(0,0,0,0.15); margin-top: 25px; background: ${activityColor}; line-height: 1.6;\">\n                ${activityMotivation}\n              </div>\n            </td>\n          </tr>\n          \n          <!-- ÇÖZÜLEN TÜM SORULAR - Gerçek Veriler -->\n          <tr>\n            <td style=\"padding: 30px; background: #fafafa;\">\n              <div style=\"background: white; border-radius: 20px; padding: 30px; box-shadow: 0 8px 25px rgba(0,0,0,0.1);\">\n                <div style=\"font-size: 20px; font-weight: 800; margin-bottom: 25px; color: #424242; text-align: center;\">📊 Çözülen Tüm Sorular</div>\n                <table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"100%\">\n                  <tr>\n                    <td width=\"32%\" style=\"vertical-align: top;\">\n                      <div style=\"border: 4px solid #66bb6a; border-radius: 16px; padding: 25px 18px; text-align: center; background: linear-gradient(135deg, #e8f5e9 0%, #c8e6c9 100%);\">\n                        <div style=\"font-size: 13px; color: #2e7d32; margin-bottom: 12px; font-weight: 700;\">✓ Doğru</div>\n                        <div style=\"font-size: 40px; font-weight: 900; color: #43a047;\">${totalCorrect}</div>\n                      </div>\n                    </td>\n                    <td width=\"2%\"></td>\n                    <td width=\"32%\" style=\"vertical-align: top;\">\n                      <div style=\"border: 4px solid #ef5350; border-radius: 16px; padding: 25px 18px; text-align: center; background: linear-gradient(135deg, #ffebee 0%, #ffcdd2 100%);\">\n                        <div style=\"font-size: 13px; color: #c62828; margin-bottom: 12px; font-weight: 700;\">✗ Yanlış</div>\n                        <div style=\"font-size: 40px; font-weight: 900; color: #e53935;\">${totalWrong}</div>\n                      </div>\n                    </td>\n                    <td width=\"2%\"></td>\n                    <td width=\"32%\" style=\"vertical-align: top;\">\n                      <div style=\"border: 4px solid #ffa726; border-radius: 16px; padding: 25px 18px; text-align: center; background: linear-gradient(135deg, #fff3e0 0%, #ffe0b2 100%);\">\n                        <div style=\"font-size: 13px; color: #e65100; margin-bottom: 12px; font-weight: 700;\">○ Boş</div>\n                        <div style=\"font-size: 40px; font-weight: 900; color: #fb8c00;\">${totalEmpty}</div>\n                      </div>\n                    </td>\n                  </tr>\n                </table>\n                <div style=\"border: 4px solid #7c4dff; border-radius: 18px; padding: 28px; text-align: center; background: linear-gradient(135deg, #ede7f6 0%, #d1c4e9 100%); margin-top: 25px;\">\n                  <div style=\"font-size: 48px; font-weight: 900; color: #6a1b9a; margin-bottom: 10px;\">${successRate}%</div>\n                  <div style=\"font-size: 15px; color: #424242; font-weight: 700;\">Başarı Oranım</div>\n                </div>\n              </div>\n            </td>\n          </tr>\n          \n          <!-- ÖZEL İSTATİSTİKLER - Gerçek Veriler -->\n          <tr>\n            <td style=\"padding: 30px; background: #fafafa;\">\n              <div style=\"background: white; border-radius: 20px; padding: 30px; box-shadow: 0 8px 25px rgba(0,0,0,0.1);\">\n                <div style=\"font-size: 20px; font-weight: 800; margin-bottom: 25px; color: #424242; text-align: center;\">📊 ÖZEL İSTATİSTİKLER</div>\n                <table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"100%\">\n                  <tr>\n                    <td width=\"24%\" style=\"vertical-align: top;\">\n                      <div style=\"border: 4px solid #ab47bc; border-radius: 16px; padding: 25px 15px; text-align: center; background: linear-gradient(135deg, #f3e5f5 0%, #e1bee7 100%);\">\n                        <div style=\"font-size: 11px; color: #6a1b9a; margin-bottom: 12px; font-weight: 700; text-transform: uppercase; line-height: 1.3;\">🔥 En Uzun Çalışma Serisi</div>\n                        <div style=\"font-size: 42px; font-weight: 900; margin: 12px 0; color: #8e24aa;\">${longestStreak}</div>\n                        <div style=\"font-size: 11px; color: #9e9e9e; font-weight: 500;\">ardışık gün</div>\n                      </div>\n                    </td>\n                    <td width=\"1%\"></td>\n                    <td width=\"24%\" style=\"vertical-align: top;\">\n                      <div style=\"border: 4px solid #ef5350; border-radius: 16px; padding: 25px 15px; text-align: center; background: linear-gradient(135deg, #ffebee 0%, #ffcdd2 100%);\">\n                        <div style=\"font-size: 11px; color: #c62828; margin-bottom: 12px; font-weight: 700; text-transform: uppercase; line-height: 1.3;\">❌ Bu Ay Hatalı Konular</div>\n                        <div style=\"font-size: 42px; font-weight: 900; margin: 12px 0; color: #e53935;\">${wrongTopicsCount}</div>\n                        <div style=\"font-size: 11px; color: #9e9e9e; font-weight: 500;\">toplam hata</div>\n                      </div>\n                    </td>\n                    <td width=\"1%\"></td>\n                    <td width=\"24%\" style=\"vertical-align: top;\">\n                      <div style=\"border: 4px solid #66bb6a; border-radius: 16px; padding: 25px 15px; text-align: center; background: linear-gradient(135deg, #e8f5e9 0%, #c8e6c9 100%);\">\n                        <div style=\"font-size: 11px; color: #2e7d32; margin-bottom: 12px; font-weight: 700; text-transform: uppercase; line-height: 1.3;\">✅ Düzeltilen Konular</div>\n                        <div style=\"font-size: 42px; font-weight: 900; margin: 12px 0; color: #43a047;\">${completedTopicsHistory.length}</div>\n                        <div style=\"font-size: 11px; color: #9e9e9e; font-weight: 500;\">konu tamamlandı</div>\n                      </div>\n                    </td>\n                    <td width=\"1%\"></td>\n                    <td width=\"24%\" style=\"vertical-align: top;\">\n                      <div style=\"border: 4px solid #42a5f5; border-radius: 16px; padding: 25px 15px; text-align: center; background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);\">\n                        <div style=\"font-size: 11px; color: #1565c0; margin-bottom: 12px; font-weight: 700; text-transform: uppercase; line-height: 1.3;\">✅ Tamamlanan Hatalı Sorular</div>\n                        <div style=\"font-size: 42px; font-weight: 900; margin: 12px 0; color: #1976d2;\">${completedQuestionsHistory.length}</div>\n                        <div style=\"font-size: 11px; color: #9e9e9e; font-weight: 500;\">soru</div>\n                      </div>\n                    </td>\n                  </tr>\n                </table>\n              </div>\n            </td>\n          </tr>\n          \n          <!-- BU AYIN REKOR GENEL DENEME NETLERİ -->\n          ${generalExams.length > 0 ? `\n          <tr>\n            <td style=\"padding: 30px; background: #fafafa;\">\n              <div style=\"background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%); border-radius: 20px; padding: 35px; border: 5px solid #2196f3; box-shadow: 0 10px 30px rgba(33, 150, 243, 0.3);\">\n                <div style=\"font-size: 22px; font-weight: 900; color: #1565c0; margin-bottom: 30px; text-align: center; letter-spacing: 0.5px;\">🏆 BU AYIN REKOR GENEL DENEME NETLERİ</div>\n                <table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"100%\">\n                  <tr>\n                    <td width=\"49%\" style=\"vertical-align: top;\">\n                      <div style=\"border: 5px solid #ab47bc; border-radius: 18px; padding: 30px 25px; text-align: center; background: white; box-shadow: 0 6px 20px rgba(171, 71, 188, 0.3);\">\n                        <div style=\"font-size: 15px; color: #6a1b9a; margin-bottom: 15px; font-weight: 800;\">🏆 TYT Rekor Net</div>\n                        <div style=\"font-size: 56px; font-weight: 900; color: #8e24aa;\">${maxTytNet}</div>\n                      </div>\n                    </td>\n                    <td width=\"2%\"></td>\n                    <td width=\"49%\" style=\"vertical-align: top;\">\n                      <div style=\"border: 5px solid #ef5350; border-radius: 18px; padding: 30px 25px; text-align: center; background: white; box-shadow: 0 6px 20px rgba(239, 83, 80, 0.3);\">\n                        <div style=\"font-size: 15px; color: #c62828; margin-bottom: 15px; font-weight: 800;\">🏆 AYT Rekor Net</div>\n                        <div style=\"font-size: 56px; font-weight: 900; color: #e53935;\">${Object.keys(branchRecords).length > 0 ? (Object.values(branchRecords)[0] as any).net : '0.00'}</div>\n                      </div>\n                    </td>\n                  </tr>\n                </table>\n              </div>\n            </td>\n          </tr>\n          ` : ''}\n          \n          <!-- BU AYIN REKOR BRANŞ DENEME NETLERİ -->\n          ${Object.keys(branchRecords).length > 0 ? `\n          <tr>\n            <td style=\"padding: 30px; background: #fafafa;\">\n              <div style=\"background: linear-gradient(135deg, #fff3e0 0%, #ffe0b2 100%); border-radius: 20px; padding: 35px; border: 5px solid #ff9800; box-shadow: 0 10px 30px rgba(255, 152, 0, 0.3);\">\n                <div style=\"font-size: 22px; font-weight: 900; color: #e65100; margin-bottom: 30px; text-align: center; letter-spacing: 0.5px;\">🏆 BU AYIN REKOR BRANŞ DENEME NETLERİ</div>\n                <table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"100%\">\n                  <tr>\n                    ${Object.entries(branchRecords).map(([subject, record]: any, index: number) => `\n                      ${index > 0 ? '<td width=\"2%\"></td>' : ''}\n                      <td width=\"${Math.floor(98 / Object.keys(branchRecords).length)}%\" style=\"vertical-align: top;\">\n                        <div style=\"border: 5px solid ${index % 3 === 0 ? '#7c4dff' : index % 3 === 1 ? '#26a69a' : '#ec407a'}; border-radius: 18px; padding: 30px 20px; text-align: center; background: white; box-shadow: 0 6px 20px rgba(0,0,0,0.15);\">\n                          <div style=\"font-size: 14px; color: #424242; margin-bottom: 12px; font-weight: 800;\">🏆 ${subject}</div>\n                          <div style=\"font-size: 48px; font-weight: 900; color: ${index % 3 === 0 ? '#6a1b9a' : index % 3 === 1 ? '#00897b' : '#d81b60'};\">${record.net}</div>\n                          <div style=\"font-size: 11px; color: #9e9e9e; margin-top: 8px; font-weight: 600;\">${new Date(record.date).toLocaleDateString('tr-TR', { day: 'numeric', month: 'short' })}</div>\n                        </div>\n                      </td>\n                    `).join('')}\n                  </tr>\n                </table>\n              </div>\n            </td>\n          </tr>\n          ` : ''}\n          \n          <!-- EN ÇOK SORU ÇÖZÜLEN TARİH -->\n          ${mostQuestionsDate ? `\n          <tr>\n            <td style=\"padding: 30px; background: #fafafa;\">\n              <div style=\"background: linear-gradient(135deg, #fff8e1 0%, #ffecb3 100%); border: 5px solid #ffc107; border-radius: 20px; padding: 35px; text-align: center; box-shadow: 0 10px 30px rgba(255, 193, 7, 0.3);\">\n                <div style=\"font-size: 16px; color: #e65100; margin-bottom: 15px; font-weight: 800; letter-spacing: 0.5px;\">🗓️ EN ÇOK SORU ÇÖZÜLEN TARİH</div>\n                <div style=\"font-size: 18px; color: #424242; font-weight: 700; margin-bottom: 15px;\">${mostQuestionsDate}</div>\n                <div style=\"font-size: 64px; color: #f57c00; font-weight: 900; margin: 15px 0;\">${mostQuestionsCount}</div>\n                <div style=\"font-size: 15px; color: #666; font-weight: 600;\">soru çözdüm</div>\n              </div>\n            </td>\n          </tr>\n          ` : ''}\n          \n          <!-- DERS İSTATİSTİKLERİ - Gerçek Veriler -->\n          ${(mostWrongSubjects.length > 0 || mostSolvedSubjects.length > 0 || mostCorrectSubjects.length > 0) ? `\n          <tr>\n            <td style=\"padding: 30px; background: #fafafa;\">\n              ${mostWrongSubjects.length > 0 ? `\n              <div style=\"border-radius: 20px; padding: 28px; background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%); border: 4px solid #42a5f5; margin-bottom: 25px; box-shadow: 0 8px 25px rgba(0,0,0,0.1);\">\n                <div style=\"font-size: 18px; font-weight: 800; margin-bottom: 20px; color: #1565c0; text-align: center;\">📉 EN ÇOK HATA YAPILAN DERSLER</div>\n                <div style=\"background: white; border-radius: 14px; padding: 20px 25px;\">\n                  ${mostWrongSubjects.map(([subject, stats]: any, index) => `\n                  <div style=\"font-size: 15px; color: #424242; font-weight: 600; padding: 12px 0; ${index < mostWrongSubjects.length - 1 ? 'border-bottom: 2px solid #e0e0e0;' : ''}\">${index + 1}. ${subject}<span style=\"font-weight: 900; font-size: 16px; color: #1976d2; float: right;\"> ${stats.wrong} hata</span></div>\n                  `).join('')}\n                </div>\n              </div>\n              ` : ''}\n              ${mostSolvedSubjects.length > 0 ? `\n              <div style=\"border-radius: 20px; padding: 28px; background: linear-gradient(135deg, #e8f5e9 0%, #c8e6c9 100%); border: 4px solid #66bb6a; margin-bottom: 25px; box-shadow: 0 8px 25px rgba(0,0,0,0.1);\">\n                <div style=\"font-size: 18px; font-weight: 800; margin-bottom: 20px; color: #2e7d32; text-align: center;\">📚 EN ÇOK SORU ÇÖZÜLEN DERSLER</div>\n                <div style=\"background: white; border-radius: 14px; padding: 20px 25px;\">\n                  ${mostSolvedSubjects.map(([subject, stats]: any, index) => `\n                  <div style=\"font-size: 15px; color: #424242; font-weight: 600; padding: 12px 0; ${index < mostSolvedSubjects.length - 1 ? 'border-bottom: 2px solid #e0e0e0;' : ''}\">${index + 1}. ${subject}<span style=\"font-weight: 900; font-size: 16px; color: #43a047; float: right;\"> ${stats.total} soru</span></div>\n                  `).join('')}\n                </div>\n              </div>\n              ` : ''}\n              ${mostCorrectSubjects.length > 0 ? `\n              <div style=\"border-radius: 20px; padding: 28px; background: linear-gradient(135deg, #f3e5f5 0%, #e1bee7 100%); border: 4px solid #ab47bc; box-shadow: 0 8px 25px rgba(0,0,0,0.1);\">\n                <div style=\"font-size: 18px; font-weight: 800; margin-bottom: 20px; color: #6a1b9a; text-align: center;\">🏆 EN ÇOK DOĞRU YAPILAN DERSLER</div>\n                <div style=\"background: white; border-radius: 14px; padding: 20px 25px;\">\n                  ${mostCorrectSubjects.map(([subject, stats]: any, index) => `\n                  <div style=\"font-size: 15px; color: #424242; font-weight: 600; padding: 12px 0; ${index < mostCorrectSubjects.length - 1 ? 'border-bottom: 2px solid #e0e0e0;' : ''}\">${index + 1}. ${subject}<span style=\"font-weight: 900; font-size: 16px; color: #8e24aa; float: right;\"> ${stats.correct} doğru</span></div>\n                  `).join('')}\n                </div>\n              </div>\n              ` : ''}\n            </td>\n          </tr>\n          ` : ''}\n          \n          <!-- GENEL DENEME DETAYLARI - Gerçek Veriler -->\n          ${generalExams.length > 0 ? `\n          <tr>\n            <td style=\"padding: 30px; background: #fafafa;\">\n              <div style=\"background: white; border-radius: 20px; padding: 30px; box-shadow: 0 8px 25px rgba(0,0,0,0.1);\">\n                <div style=\"font-size: 20px; font-weight: 800; margin-bottom: 25px; color: #424242; text-align: center;\">📋 DENEME DETAYLARI - Genel Denemeler</div>\n                ${generalExams.slice(0, 5).map((exam: any) => {\n                  const examNets = examSubjectNets.filter((n: any) => n.exam_id === exam.id);\n                  \n                  // Calculate total net from examSubjectNets or fallback to tyt_net\n                  let totalNet = 0;\n                  if (examNets.length > 0) {\n                    totalNet = examNets.reduce((sum: number, n: any) => sum + parseFloat(n.net_score || 0), 0);\n                  } else {\n                    totalNet = parseFloat(exam.tyt_net || 0);\n                  }\n                  \n                  const getSubjectData = (subjectName: string) => {\n                    const subjectNet = examNets.find((n: any) => n.subject === subjectName);\n                    if (subjectNet) {\n                      return {\n                        dogru: parseInt(subjectNet.correct_count || 0),\n                        yanlis: parseInt(subjectNet.wrong_count || 0),\n                        bos: parseInt(subjectNet.blank_count || 0),\n                        net: parseFloat(subjectNet.net_score || 0)\n                      };\n                    }\n                    return null;\n                  };\n                  \n                  const getWrongTopics = (subject: string) => {\n                    const subjectNet = examNets.find((n: any) => n.subject === subject);\n                    if (subjectNet && subjectNet.wrong_topics_json) {\n                      try {\n                        const topics = JSON.parse(subjectNet.wrong_topics_json);\n                        return topics.map((t: any) => typeof t === 'string' ? t : (t.topic || t));\n                      } catch(e) {\n                        return [];\n                      }\n                    }\n                    return [];\n                  };\n                  \n                  const subjectNames = ['Türkçe', 'Sosyal Bilimler', 'Matematik', 'Fen Bilimleri'];\n                  const subjectEmojis: any = {\n                    'Türkçe': '📖',\n                    'Sosyal Bilimler': '🌍', \n                    'Matematik': '🔢',\n                    'Fen Bilimleri': '🔬'\n                  };\n                  \n                  const subjects = subjectNames.map(name => {\n                    const data = getSubjectData(name);\n                    return {\n                      name,\n                      emoji: subjectEmojis[name] || '📚',\n                      dogru: data?.dogru,\n                      yanlis: data?.yanlis,\n                      bos: data?.bos,\n                      net: data?.net\n                    };\n                  }).filter(s => s.dogru !== undefined);\n                  \n                  return `\n                    <div style=\"background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%); border: 2px solid #dee2e6; border-radius: 20px; padding: 32px; margin-bottom: 28px; box-shadow: 0 8px 24px rgba(0,0,0,0.12), 0 2px 6px rgba(0,0,0,0.08);\">\n                      <div style=\"color: #1565c0; font-size: 22px; font-weight: 900; margin-bottom: 12px; letter-spacing: 0.3px;\">${exam.exam_name}</div>\n                      <div style=\"color: #6c757d; font-size: 14px; margin-bottom: 24px; font-weight: 600;\">📅 ${new Date(exam.exam_date).toLocaleDateString('tr-TR', { day: 'numeric', month: 'long', year: 'numeric' })} | 📚 ${exam.exam_type || 'TYT'}</div>\n                      <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 24px 32px; border-radius: 18px; font-size: 28px; font-weight: 900; text-align: center; margin: 24px 0; box-shadow: 0 10px 28px rgba(102,126,234,0.35); letter-spacing: 0.5px;\">Toplam Net: ${totalNet.toFixed(2)}</div>\n                      \n                      ${subjects.map(sub => {\n                        if (sub.dogru === undefined) return '';\n                        const wrongTopics = getWrongTopics(sub.name);\n                        const subNet = (sub.net !== undefined ? sub.net : ((sub.dogru || 0) - (sub.yanlis || 0) * 0.25)).toFixed(2);\n                        \n                        return `\n                        <div style=\"margin: 24px 0; padding: 20px; background: #fafbfc; border-radius: 16px; border: 1px solid #e1e4e8;\">\n                          <div style=\"font-size: 15px; font-weight: 800; margin: 0 0 18px 0; color: #5e35b1; letter-spacing: 0.3px;\">${sub.emoji} ${sub.name.toUpperCase()}</div>\n                          <table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"100%\">\n                            <tr>\n                              <td width=\"23%\" style=\"vertical-align: top;\">\n                                <div style=\"border: 2px solid #66bb6a; border-radius: 12px; padding: 14px 10px; text-align: center; background: linear-gradient(135deg, #e8f5e9 0%, #ffffff 100%); box-shadow: 0 2px 8px rgba(0,0,0,0.06);\">\n                                  <div style=\"font-size: 10px; margin-bottom: 8px; font-weight: 700; color: #2e7d32; letter-spacing: 0.5px;\">✓ DOĞRU</div>\n                                  <div style=\"font-size: 22px; font-weight: 900; color: #43a047;\">${sub.dogru || 0}</div>\n                                </div>\n                              </td>\n                              <td width=\"2%\"></td>\n                              <td width=\"23%\" style=\"vertical-align: top;\">\n                                <div style=\"border: 2px solid #ef5350; border-radius: 12px; padding: 14px 10px; text-align: center; background: linear-gradient(135deg, #ffebee 0%, #ffffff 100%); box-shadow: 0 2px 8px rgba(0,0,0,0.06);\">\n                                  <div style=\"font-size: 10px; margin-bottom: 8px; font-weight: 700; color: #c62828; letter-spacing: 0.5px;\">✗ YANLIŞ</div>\n                                  <div style=\"font-size: 22px; font-weight: 900; color: #e53935;\">${sub.yanlis || 0}</div>\n                                </div>\n                              </td>\n                              <td width=\"2%\"></td>\n                              <td width=\"23%\" style=\"vertical-align: top;\">\n                                <div style=\"border: 2px solid #ffa726; border-radius: 12px; padding: 14px 10px; text-align: center; background: linear-gradient(135deg, #fff3e0 0%, #ffffff 100%); box-shadow: 0 2px 8px rgba(0,0,0,0.06);\">\n                                  <div style=\"font-size: 10px; margin-bottom: 8px; font-weight: 700; color: #e65100; letter-spacing: 0.5px;\">○ BOŞ</div>\n                                  <div style=\"font-size: 22px; font-weight: 900; color: #fb8c00;\">${sub.bos || 0}</div>\n                                </div>\n                              </td>\n                              <td width=\"2%\"></td>\n                              <td width=\"23%\" style=\"vertical-align: top;\">\n                                <div style=\"border: 2px solid #ab47bc; border-radius: 12px; padding: 14px 10px; text-align: center; background: linear-gradient(135deg, #ab47bc 0%, #8e24aa 100%); color: white; box-shadow: 0 4px 12px rgba(171,71,188,0.3);\">\n                                  <div style=\"font-size: 10px; margin-bottom: 8px; font-weight: 700; opacity: 0.95; letter-spacing: 0.5px;\">★ NET</div>\n                                  <div style=\"font-size: 22px; font-weight: 900;\">${subNet}</div>\n                                </div>\n                              </td>\n                            </tr>\n                          </table>\n                          ${wrongTopics.length > 0 ? `\n                          <div style=\"background: linear-gradient(135deg, #fff5f5 0%, #ffe5e5 100%); border: 2px solid #ff6b6b; border-left: 5px solid #e53935; border-radius: 12px; padding: 16px 20px; margin-top: 16px;\">\n                            <div style=\"font-size: 13px; color: #c62828; margin: 0 0 12px 0; font-weight: 800; letter-spacing: 0.3px;\">❌ Yanlış Yapılan Konular:</div>\n                            ${wrongTopics.map((topic: string) => `\n                            <div style=\"color: #495057; font-size: 13px; margin: 8px 0; font-weight: 600; padding: 8px 14px; background: rgba(255,255,255,0.8); border-radius: 8px; border-left: 3px solid #f44336;\">✗ ${topic}</div>\n                            `).join('')}\n                          </div>\n                          ` : '<div style=\"background: linear-gradient(135deg, #f0f9f0 0%, #e6f4ea 100%); border: 2px solid #66bb6a; border-radius: 12px; padding: 14px; margin-top: 16px; text-align: center; color: #2e7d32; font-weight: 700; font-size: 13px; letter-spacing: 0.2px;\">✨ Harika! Bu derse ait yanlış konu girilmedi.</div>'}\n                        </div>\n                        `;\n                      }).join('')}\n                    </div>\n                  `;\n                }).join('')}\n              </div>\n            </td>\n          </tr>\n          ` : ''}\n          \n          <!-- BRANŞ DENEME DETAYLARI - Gerçek Veriler -->\n          ${branchExams.length > 0 ? `\n          <tr>\n            <td style=\"padding: 30px; background: #fafafa;\">\n              <div style=\"background: white; border-radius: 20px; padding: 30px; box-shadow: 0 8px 25px rgba(0,0,0,0.1);\">\n                <div style=\"font-size: 20px; font-weight: 800; margin-bottom: 25px; color: #424242; text-align: center;\">📋 DENEME DETAYLARI - Branş Denemeler</div>\n                ${branchExams.slice(0, 5).map((exam: any) => {\n                  const examNets = examSubjectNets.filter((n: any) => n.exam_id === exam.id);\n                  \n                  // Get data from examSubjectNets if available\n                  let subject, dogru, yanlis, bos, net;\n                  if (examNets.length > 0) {\n                    const subjectNet = examNets[0];\n                    subject = subjectNet.subject || exam.selected_subject || exam.exam_type;\n                    dogru = parseInt(subjectNet.correct_count || 0);\n                    yanlis = parseInt(subjectNet.wrong_count || 0);\n                    bos = parseInt(subjectNet.blank_count || 0);\n                    net = parseFloat(subjectNet.net_score || 0);\n                  } else {\n                    // Fallback if no examSubjectNets data\n                    subject = exam.selected_subject || exam.subject || exam.exam_type;\n                    dogru = 0;\n                    yanlis = 0;\n                    bos = 0;\n                    net = 0;\n                  }\n                  \n                  const wrongTopicsArr: string[] = [];\n                  examNets.forEach((n: any) => {\n                    if (n.wrong_topics_json) {\n                      try {\n                        const topics = JSON.parse(n.wrong_topics_json);\n                        topics.forEach((t: any) => {\n                          const topicStr = typeof t === 'string' ? t : (t.topic || String(t));\n                          if (topicStr) wrongTopicsArr.push(topicStr);\n                        });\n                      } catch(e) {}\n                    }\n                  });\n                  \n                  return `\n                    <div style=\"background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%); border: 2px solid #dee2e6; border-radius: 20px; padding: 32px; margin-bottom: 28px; box-shadow: 0 8px 24px rgba(0,0,0,0.12), 0 2px 6px rgba(0,0,0,0.08);\">\n                      <div style=\"color: #1565c0; font-size: 22px; font-weight: 900; margin-bottom: 12px; letter-spacing: 0.3px;\">${exam.exam_name}</div>\n                      <div style=\"color: #6c757d; font-size: 14px; margin-bottom: 24px; font-weight: 600;\">📅 ${new Date(exam.exam_date).toLocaleDateString('tr-TR', { day: 'numeric', month: 'long', year: 'numeric' })} | 📚 ${subject}</div>\n                      <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 24px 32px; border-radius: 18px; font-size: 28px; font-weight: 900; text-align: center; margin: 24px 0; box-shadow: 0 10px 28px rgba(102,126,234,0.35); letter-spacing: 0.5px;\">${subject} Net: ${net.toFixed(2)}</div>\n                      <div style=\"margin: 24px 0; padding: 20px; background: #fafbfc; border-radius: 16px; border: 1px solid #e1e4e8;\">\n                        <table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"100%\">\n                          <tr>\n                            <td width=\"23%\" style=\"vertical-align: top;\">\n                              <div style=\"border: 2px solid #66bb6a; border-radius: 12px; padding: 14px 10px; text-align: center; background: linear-gradient(135deg, #e8f5e9 0%, #ffffff 100%); box-shadow: 0 2px 8px rgba(0,0,0,0.06);\">\n                                <div style=\"font-size: 10px; margin-bottom: 8px; font-weight: 700; color: #2e7d32; letter-spacing: 0.5px;\">✓ DOĞRU</div>\n                                <div style=\"font-size: 22px; font-weight: 900; color: #43a047;\">${dogru}</div>\n                              </div>\n                            </td>\n                            <td width=\"2%\"></td>\n                            <td width=\"23%\" style=\"vertical-align: top;\">\n                              <div style=\"border: 2px solid #ef5350; border-radius: 12px; padding: 14px 10px; text-align: center; background: linear-gradient(135deg, #ffebee 0%, #ffffff 100%); box-shadow: 0 2px 8px rgba(0,0,0,0.06);\">\n                                <div style=\"font-size: 10px; margin-bottom: 8px; font-weight: 700; color: #c62828; letter-spacing: 0.5px;\">✗ YANLIŞ</div>\n                                <div style=\"font-size: 22px; font-weight: 900; color: #e53935;\">${yanlis}</div>\n                              </div>\n                            </td>\n                            <td width=\"2%\"></td>\n                            <td width=\"23%\" style=\"vertical-align: top;\">\n                              <div style=\"border: 2px solid #ffa726; border-radius: 12px; padding: 14px 10px; text-align: center; background: linear-gradient(135deg, #fff3e0 0%, #ffffff 100%); box-shadow: 0 2px 8px rgba(0,0,0,0.06);\">\n                                <div style=\"font-size: 10px; margin-bottom: 8px; font-weight: 700; color: #e65100; letter-spacing: 0.5px;\">○ BOŞ</div>\n                                <div style=\"font-size: 22px; font-weight: 900; color: #fb8c00;\">${bos}</div>\n                              </div>\n                            </td>\n                            <td width=\"2%\"></td>\n                            <td width=\"23%\" style=\"vertical-align: top;\">\n                              <div style=\"border: 2px solid #ab47bc; border-radius: 12px; padding: 14px 10px; text-align: center; background: linear-gradient(135deg, #ab47bc 0%, #8e24aa 100%); color: white; box-shadow: 0 4px 12px rgba(171,71,188,0.3);\">\n                                <div style=\"font-size: 10px; margin-bottom: 8px; font-weight: 700; opacity: 0.95; letter-spacing: 0.5px;\">★ NET</div>\n                                <div style=\"font-size: 22px; font-weight: 900;\">${net.toFixed(2)}</div>\n                              </div>\n                            </td>\n                          </tr>\n                        </table>\n                        ${wrongTopicsArr.length > 0 ? `\n                        <div style=\"background: linear-gradient(135deg, #fff5f5 0%, #ffe5e5 100%); border: 2px solid #ff6b6b; border-left: 5px solid #e53935; border-radius: 12px; padding: 16px 20px; margin-top: 16px;\">\n                          <div style=\"font-size: 13px; color: #c62828; margin: 0 0 12px 0; font-weight: 800; letter-spacing: 0.3px;\">❌ Yanlış Yapılan Konular:</div>\n                          ${wrongTopicsArr.map((topic: string) => `\n                          <div style=\"color: #495057; font-size: 13px; margin: 8px 0; font-weight: 600; padding: 8px 14px; background: rgba(255,255,255,0.8); border-radius: 8px; border-left: 3px solid #f44336;\">✗ ${topic}</div>\n                          `).join('')}\n                        </div>\n                        ` : '<div style=\"background: linear-gradient(135deg, #f0f9f0 0%, #e6f4ea 100%); border: 2px solid #66bb6a; border-radius: 12px; padding: 14px; margin-top: 16px; text-align: center; color: #2e7d32; font-weight: 700; font-size: 13px; letter-spacing: 0.2px;\">✨ Harika! Bu derse ait yanlış konu girilmedi.</div>'}\n                      </div>\n                    </div>\n                  `;\n                }).join('')}\n              </div>\n            </td>\n          </tr>\n          ` : ''}\n          \n          <!-- TAMAMLANAN HATALI KONULAR GEÇMİŞİ -->\n          ${completedTopicsHistory.length > 0 ? `\n          <tr>\n            <td style=\"padding: 25px; background: #fafafa;\">\n              <div style=\"background: white; border-radius: 16px; padding: 24px; box-shadow: 0 4px 16px rgba(0,0,0,0.08);\">\n                <div style=\"font-size: 17px; font-weight: 800; margin-bottom: 18px; color: #424242; text-align: center;\">✅ Tamamlanan Hatalı Konular Geçmişi</div>\n                <div style=\"background: linear-gradient(135deg, #e8f5e9 0%, #c8e6c9 100%); border: 2px solid #66bb6a; border-radius: 12px; padding: 14px;\">\n                  ${completedTopicsHistory.map((topic: any, index: number) => {\n                    const topicDate = topic.completedAt ? new Date(topic.completedAt) : null;\n                    const formattedDate = topicDate && !isNaN(topicDate.getTime()) \n                      ? topicDate.toLocaleDateString('tr-TR', { day: 'numeric', month: 'long', year: 'numeric', hour: '2-digit', minute: '2-digit' })\n                      : 'Tarih bilinmiyor';\n                    return `\n                    <div style=\"background: white; border-left: 4px solid #43a047; border-radius: 8px; padding: 10px 14px; margin-bottom: ${index < completedTopicsHistory.length - 1 ? '10px' : '0'}; box-shadow: 0 1px 4px rgba(0,0,0,0.06);\">\n                      <div style=\"color: #2e7d32; font-size: 13px; font-weight: 700; margin-bottom: 4px;\">✓ ${topic.title}</div>\n                      <div style=\"color: #666; font-size: 11px; font-weight: 600; margin-bottom: 3px;\">📚 ${topic.subject} ${topic.source ? `| 📋 ${topic.source}` : ''}</div>\n                      <div style=\"color: #9e9e9e; font-size: 10px; font-weight: 500;\">📅 ${formattedDate}</div>\n                    </div>\n                  `}).join('')}\n                </div>\n              </div>\n            </td>\n          </tr>\n          ` : ''}\n          \n          <!-- TAMAMLANAN HATALI SORULAR GEÇMİŞİ -->\n          ${completedQuestionsHistory.length > 0 ? `\n          <tr>\n            <td style=\"padding: 25px; background: #fafafa;\">\n              <div style=\"background: white; border-radius: 16px; padding: 24px; box-shadow: 0 4px 16px rgba(0,0,0,0.08);\">\n                <div style=\"font-size: 17px; font-weight: 800; margin-bottom: 18px; color: #424242; text-align: center;\">✅ Tamamlanan Hatalı Sorular Geçmişi</div>\n                <div style=\"background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%); border: 2px solid #2196f3; border-radius: 12px; padding: 14px;\">\n                  ${completedQuestionsHistory.map((question: any, index: number) => {\n                    const questionDate = question.completedAt || question.logDate;\n                    const qDate = questionDate ? new Date(questionDate) : null;\n                    const formattedDate = qDate && !isNaN(qDate.getTime()) \n                      ? qDate.toLocaleDateString('tr-TR', { day: 'numeric', month: 'long', year: 'numeric' })\n                      : 'Tarih bilinmiyor';\n                    return `\n                    <div style=\"background: white; border-left: 4px solid #1976d2; border-radius: 8px; padding: 10px 14px; margin-bottom: ${index < completedQuestionsHistory.length - 1 ? '10px' : '0'}; box-shadow: 0 1px 4px rgba(0,0,0,0.06);\">\n                      <div style=\"color: #1565c0; font-size: 13px; font-weight: 700; margin-bottom: 8px;\">📖 ${question.subject}</div>\n                      <table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"100%\">\n                        <tr>\n                          <td width=\"32%\" style=\"text-align: center; padding: 4px;\">\n                            <div style=\"background: linear-gradient(135deg, #e8f5e9 0%, #ffffff 100%); border: 1px solid #66bb6a; border-radius: 6px; padding: 6px;\">\n                              <div style=\"font-size: 9px; color: #2e7d32; font-weight: 700;\">✓ Doğru</div>\n                              <div style=\"font-size: 14px; color: #43a047; font-weight: 900;\">${question.correctCount || 0}</div>\n                            </div>\n                          </td>\n                          <td width=\"2%\"></td>\n                          <td width=\"32%\" style=\"text-align: center; padding: 4px;\">\n                            <div style=\"background: linear-gradient(135deg, #ffebee 0%, #ffffff 100%); border: 1px solid #ef5350; border-radius: 6px; padding: 6px;\">\n                              <div style=\"font-size: 9px; color: #c62828; font-weight: 700;\">✗ Yanlış</div>\n                              <div style=\"font-size: 14px; color: #e53935; font-weight: 900;\">${question.wrongCount || 0}</div>\n                            </div>\n                          </td>\n                          <td width=\"2%\"></td>\n                          <td width=\"32%\" style=\"text-align: center; padding: 4px;\">\n                            <div style=\"background: linear-gradient(135deg, #fff3e0 0%, #ffffff 100%); border: 1px solid #ffa726; border-radius: 6px; padding: 6px;\">\n                              <div style=\"font-size: 9px; color: #e65100; font-weight: 700;\">○ Boş</div>\n                              <div style=\"font-size: 14px; color: #fb8c00; font-weight: 900;\">${question.emptyCount || 0}</div>\n                            </div>\n                          </td>\n                        </tr>\n                      </table>\n                      ${question.wrongTopics && question.wrongTopics.length > 0 ? `\n                        <div style=\"background: linear-gradient(135deg, #fff5f5 0%, #ffe5e5 100%); border: 1px solid #ff6b6b; border-radius: 6px; padding: 8px; margin-top: 8px;\">\n                          <div style=\"font-size: 10px; color: #c62828; font-weight: 700; margin-bottom: 4px;\">❌ Yanlış Konular:</div>\n                          ${question.wrongTopics.map((topic: string) => `\n                            <div style=\"color: #424242; font-size: 10px; margin: 3px 0; font-weight: 600;\">• ${topic}</div>\n                          `).join('')}\n                        </div>\n                      ` : ''}\n                      <div style=\"color: #9e9e9e; font-size: 10px; font-weight: 500; margin-top: 6px;\">📅 ${formattedDate}</div>\n                    </div>\n                  `}).join('')}\n                </div>\n              </div>\n            </td>\n          </tr>\n          ` : ''}\n          \n          <!-- FOOTER - KUTU İÇİNDE -->\n          <tr>\n            <td style=\"background: white; padding: 30px;\">\n              <div style=\"background: linear-gradient(135deg, #8e24aa 0%, #ab47bc 100%); border-radius: 18px; padding: 28px; text-align: center; box-shadow: 0 10px 30px rgba(142, 36, 170, 0.4);\">\n                <div style=\"color: white; font-size: 15px; font-weight: 800; margin-bottom: 10px; letter-spacing: 0.5px;\">🚀 ${isManualRequest ? 'Kullanıcı Tarafından İstendi' : 'Otomatik Olarak Oluşturuldu'}</div>\n                <div style=\"color: rgba(255,255,255,0.9); font-size: 14px; font-weight: 600;\">🇹🇷 Berat Cankır Kişisel Analiz Sistemi 🇹🇷</div>\n              </div>\n            </td>\n          </tr>\n          \n        </table>\n        </div>\n      </div>\n    </body>\n    </html>\n  `;\n}\n","size_bytes":49038},"client/src/bilesenler/arayuz/navigation-menu.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/kutuphane/yardimcilar\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":5244},"client/src/bilesenler/arayuz/sidebar.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/kutuphane/yardimcilar\"\nimport { Button } from \"@/bilesenler/arayuz/button\"\nimport { Input } from \"@/bilesenler/arayuz/input\"\nimport { Separator } from \"@/bilesenler/arayuz/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/bilesenler/arayuz/sheet\"\nimport { Skeleton } from \"@/bilesenler/arayuz/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/bilesenler/arayuz/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // kenar çubuğunun iç durumu\n    // Eğer open prop'u vermişsem, bu controlled modda demek ve openProp kullanır\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // Bu, kenar çubuğunun durumunu korumak için çerezi ayarlar.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Kenar çubuğunu açıp kapatmak için yardımcı işlev.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Kenar çubuğunu açıp kapatmak için bir klavye kısayolu ekler.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // Kenar çubuğunun durumunu ayarlamak için bir state ekliyoruz, böylece data-state=\"expanded\" veya \"collapsed\" yapabiliriz.\n    // Bu, kenar çubuğunu Tailwind sınıflarıyla stil vermeyi kolaylaştırır.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* Bu, masaüstünde kenar çubuğu boşluğunu yönetir */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Floating ve inset varyantları için padding'i ayarlayın.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Mobilde butonun etki alanını artırır.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Mobilde butonun etki alanını artırır.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // 50 ile 90% arasında rastgele genişlik.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":23836},"client/src/kutuphane/yardimcilar.ts":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":270},"client/src/bilesenler/arayuz/avatar.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\n\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/kutuphane/yardimcilar\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":1535},"client/src/sayfalar/anasayfa.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport { useState } from \"react\";\nimport { Header } from \"@/bilesenler/baslik\";\nimport { TasksSection } from \"@/bilesenler/gorevler-bolumu\";\nimport { ProfileModal } from \"@/bilesenler/profil-modal\";\nimport { AddTaskModal } from \"@/bilesenler/gorev-ekle-modal\";\n\nexport default function Home() {\n  const [addTaskModalOpen, setAddTaskModalOpen] = useState(false);\n\n  return (\n    <div className=\"min-h-screen bg-background transition-colors duration-300 overflow-x-hidden\">\n      <Header />\n      \n      <main className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-4 overflow-x-hidden\">\n        {/* Görevler Bölümü - Artık kenar çubuğu yok */}\n        <TasksSection onAddTask={() => setAddTaskModalOpen(true)} />\n      </main>\n\n      {/* Modallar */}\n      <AddTaskModal \n        open={addTaskModalOpen} \n        onOpenChange={setAddTaskModalOpen} \n      />\n    </div>\n  );\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":983},"client/src/bilesenler/arayuz/radio-group.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/kutuphane/yardimcilar\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":1583},"md dosyaları/teknik_mimari.md":{"content":"# BERAT CANKIR YKS ANALİZ TAKİP SİSTEMİ - TEKNİK MİMARİ VE DOKÜMANTASYON\n\n**📑 Hızlı Navigasyon:** [Ana Sayfa](../replit.md) | [Talimatlar](./talimatlar.md) | [Client Kodu](./kod_aciklamasi_client.md) | [Server Kodu](./kod_aciklamasi_server.md) | [Shared Kodu](./kod_aciklamasi_shared.md) | [Electron](./kod_aciklamasi_electron1.md) | [Testler](./kod_aciklamasi_testler.md)\n\n---\n\n## GİRİŞ\n\nBu doküman, Berat Cankır YKS Analiz Takip Sistemi'nin teknik mimarisini, teknoloji seçimlerini ve proje yapısını en detaylı şekilde açıklar. Her terim somutlaştırılarak, İngilizce kavramlar Türkçe karşılıklarıyla birlikte açıklanmıştır.\n\n**Proje Özeti:**\n- **Tür:** Hybrid Desktop + Web Application (Hibrit Masaüstü + Web Uygulaması)\n  - **Hybrid nedir?** Hem masaüstünde (Windows, Mac, Linux) hem de web tarayıcısında çalışabilen uygulama\n  - **Desktop nedir?** Bilgisayara yüklenen, çift tıkla çalışan normal program\n  - **Web Application nedir?** Tarayıcıda çalışan, internet bağlantısı gerektiren uygulama\n\n- **Platform:** Electron (Desktop) + Web (Browser)\n  - **Electron:** VSCode, Discord, Slack gibi uygulamaların yapıldığı framework (çerçeve, iskelet)\n  - **Browser (Tarayıcı):** Chrome, Firefox gibi web tarayıcılarında çalışma\n\n- **Frontend:** React 18 + TypeScript + Vite\n  - **Frontend nedir?** Kullanıcının gördüğü ve tıkladığı arayüz (butonlar, formlar, grafikler)\n  - **React 18:** Facebook'un geliştirdiği UI (kullanıcı arayüzü) kütüphanesi\n  - **TypeScript:** JavaScript'e tip kontrolü ekleyen dil (hataları önceden yakalar)\n  - **Vite:** Çok hızlı çalışan build tool (derleme aracı)\n\n- **Backend:** Node.js + Express + Drizzle ORM\n  - **Backend nedir?** Veriyi kaydeden, hesaplayan, kullanıcı görmeden çalışan arka plan kısmı\n  - **Node.js:** Sunucu tarafında JavaScript çalıştıran platform\n  - **Express:** Node.js için minimalist web framework (web çerçevesi)\n  - **Drizzle ORM:** Veritabanı işlemlerini TypeScript ile yapan araç\n\n- **Database:** PostgreSQL (Production) / JSON File (Development/Offline)\n  - **Database (Veritabanı):** Verilerin organize şekilde saklandığı yer\n  - **PostgreSQL:** Güçlü, açık kaynaklı SQL veritabanı (Oracle, MySQL gibi)\n  - **JSON File:** Geliştirme ve offline kullanım için basit dosya sistemi\n  - **Production:** Canlı ortam (gerçek kullanıcıların eriştiği)\n  - **Development:** Geliştirme ortamı (programcının test ettiği)\n  - **Offline:** İnternet olmadan çalışma\n\n- **UI Framework:** Tailwind CSS + shadcn/ui\n  - **UI (User Interface):** Kullanıcı arayüzü (butonlar, renkler, yazılar)\n  - **Tailwind CSS:** Utility-first CSS framework (hazır class'larla hızlı tasarım)\n  - **shadcn/ui:** Hazır React component'leri (buton, dialog, form vs.)\n\n- **State Management:** TanStack React Query v5\n  - **State Management:** Uygulamadaki verilerin yönetimi (kim giriş yaptı, hangi görevler var vs.)\n  - **React Query:** Sunucudan veri çekme, cache'leme, yenileme işlemlerini yöneten kütüphane\n  - **Cache:** Verileri geçici olarak saklama (her seferinde sunucudan çekmemek için)\n\n---\n\n## MİMARİ GENEL BAKIŞ\n\n### Katmanlı Mimari (Layered Architecture)\n\n**Layered Architecture nedir?**\n- Uygulamanın farklı sorumluluklara sahip katmanlara bölünmesi\n- Her katman sadece kendi işini yapar ve altındaki katmanla konuşur\n- Üst katman alt katmanı kullanır, alt katman üst katmanı bilmez\n- **Avantajları:**\n  - Kod organizasyonu (her şey yerli yerinde)\n  - Kolay test edilebilirlik (her katman ayrı test edilir)\n  - Değiştirilebilirlik (bir katmanı değiştirince diğerleri etkilenmez)\n  - Takım çalışması (frontend ekibi backend'i beklemeden mock data ile çalışabilir)\n\n```\n┌─────────────────────────────────────────────────────────────┐\n│                    PRESENTATION LAYER (SUNUM KATMANI)        │\n│  React Components + shadcn/ui + Tailwind CSS                │\n│  (client/src/sayfalar/, client/src/bilesenler/)            │\n│                                                              │\n│  SORUMLULUĞU: Kullanıcıya görsel arayüz sunmak             │\n│  - Butonlar, formlar, tablolar, grafikler göstermek         │\n│  - Kullanıcı tıklamalarını yakalamak                        │\n│  - Loading (yükleniyor) durumlarını göstermek               │\n│  - Hata mesajlarını toast ile göstermek                     │\n│                                                              │\n│  DOSYALAR:                                                   │\n│  - client/src/sayfalar/AnaSayfa.tsx (homepage)             │\n│  - client/src/sayfalar/Gorevler.tsx (tasks page)           │\n│  - client/src/bilesenler/GorevKarti.tsx (task card)        │\n└──────────────┬──────────────────────────────────────────────┘\n               │\n               │ HTTP REST API (fetch/axios)\n               │ ÖRNEKLER:\n               │ - GET /api/gorevler → Tüm görevleri getir\n               │ - POST /api/gorevler → Yeni görev ekle\n               │ - PUT /api/gorevler/:id → Görevi güncelle\n               │ - DELETE /api/gorevler/:id → Görevi sil\n               │\n┌──────────────▼──────────────────────────────────────────────┐\n│                    API LAYER (API KATMANI)                   │\n│  Express.js Routes + Middleware                              │\n│  (server/rotalar.ts)                                        │\n│                                                              │\n│  SORUMLULUĞU: HTTP isteklerini karşılamak                   │\n│  - URL'leri parse etmek (/api/gorevler/:id)                │\n│  - Request body'yi validate etmek (Zod ile)                 │\n│  - Authentication kontrol etmek (giriş yapmış mı?)          │\n│  - Storage katmanını çağırmak                               │\n│  - Hataları yakalamak ve JSON response döndürmek            │\n│                                                              │\n│  MIDDLEWARE'LER:                                             │\n│  - express.json() → JSON parse                              │\n│  - express.urlencoded() → Form data parse                   │\n│  - Hata yakalama middleware                                 │\n│  - Logging middleware                                       │\n└──────────────┬──────────────────────────────────────────────┘\n               │\n               │ Storage Interface (IStorage)\n               │ INTERFACE NEDİR?\n               │ - Sözleşme (contract): Bu fonksiyonlar olmalı\n               │ - Implementasyon bağımsız: MemStorage veya PgStorage kullanabilirsin\n               │ - Değiştirilebilirlik: Storage'ı değiştirince API katmanı etkilenmez\n               │\n┌──────────────▼──────────────────────────────────────────────┐\n│                    BUSINESS LOGIC LAYER (İŞ MANTIĞI KATMANI) │\n│  Storage Implementation (MemStorage / PgStorage)             │\n│  (server/depolama.ts)                                       │\n│                                                              │\n│  SORUMLULUĞU: Veritabanı işlemlerini yapmak                 │\n│  - CRUD işlemleri (Create, Read, Update, Delete)            │\n│  - İş kurallarını uygulamak                                 │\n│  - Veri dönüşümleri yapmak                                  │\n│  - Transaction yönetimi                                     │\n│                                                              │\n│  2 İMPLEMENTASYON:                                          │\n│  1. MemStorage: In-memory Map + JSON file                   │\n│     - Avantaj: Hızlı, basit, offline çalışır               │\n│     - Dezavantaj: RAM'de tutar, restart'ta kaybolur (JSON save ile korunur) │\n│  2. PgStorage: PostgreSQL database                          │\n│     - Avantaj: Production-ready, scalable, güvenli          │\n│     - Dezavantaj: İnternet bağlantısı gerekir              │\n└──────────────┬──────────────────────────────────────────────┘\n               │\n               │ Drizzle ORM / File System\n               │ ORM NEDİR?\n               │ - Object-Relational Mapping (Nesne-İlişkisel Eşleme)\n               │ - SQL yazmadan TypeScript ile veritabanı işlemleri\n               │ - ÖRNEK: db.select().from(tasks).where(eq(tasks.id, id))\n               │\n┌──────────────▼──────────────────────────────────────────────┐\n│                    DATA LAYER (VERİ KATMANI)                 │\n│  PostgreSQL Database / JSON File (kayitlar.json)            │\n│  (shared/sema.ts for schema)                                │\n│                                                              │\n│  SORUMLULUĞU: Verileri fiziksel olarak saklamak             │\n│  - PostgreSQL: Tablolar, index'ler, constraint'ler          │\n│  - JSON File: {gorevler: [], denemeler: [], calismalar: []} │\n│                                                              │\n│  SCHEMA (ŞEMA) NEDİR?                                       │\n│  - Veritabanı yapısı (hangi tablolar, hangi kolonlar)       │\n│  - Veri tipleri (string, number, boolean, date)             │\n│  - İlişkiler (foreign key, one-to-many, many-to-many)       │\n│  - Constraint'ler (not null, unique, primary key)           │\n└─────────────────────────────────────────────────────────────┘\n```\n\n**Katmanlar Arası İletişim Akışı (Data Flow):**\n\n**1. Kullanıcı Buton Click → API İstek:**\n```typescript\n// PRESENTATION LAYER (client/src/sayfalar/Gorevler.tsx)\nconst mutation = useMutation({\n  mutationFn: (data) => apiRequest('/api/gorevler', 'POST', data)\n});\n\n<Button onClick={() => mutation.mutate({ baslik: 'Yeni Görev' })}>\n  Ekle\n</Button>\n\n// AÇIKLAMA:\n// 1. Kullanıcı butona tıklar\n// 2. React Query mutation başlatır\n// 3. fetch() ile HTTP POST isteği gönderilir\n// 4. Request body: { baslik: 'Yeni Görev' }\n```\n\n**2. API Layer İsteği Karşılar:**\n```typescript\n// API LAYER (server/rotalar.ts)\napp.post('/api/gorevler', async (req, res) => {\n  // 1. Validate request body\n  const parsed = insertGorevSchema.parse(req.body);\n  \n  // 2. Storage'ı çağır\n  const yeniGorev = await storage.gorevEkle(parsed);\n  \n  // 3. Response döndür\n  res.json(yeniGorev);\n});\n\n// AÇIKLAMA:\n// 1. Express route handler çalışır\n// 2. Zod ile validasyon (baslik boş mu? tip doğru mu?)\n// 3. Storage interface'i çağırır (hangi implementasyon olduğunu bilmez)\n// 4. Sonucu JSON olarak döndürür\n```\n\n**3. Storage Veritabanına Yazar:**\n```typescript\n// BUSINESS LOGIC LAYER (server/depolama.ts)\nclass MemStorage implements IStorage {\n  async gorevEkle(gorev: InsertGorev): Promise<Gorev> {\n    const id = nanoid(); // Unique ID oluştur\n    const yeniGorev = { ...gorev, id, tamamlandi: false };\n    \n    this.gorevler.set(id, yeniGorev); // Map'e ekle\n    await this.dosyayaKaydet(); // JSON'a kaydet\n    \n    return yeniGorev;\n  }\n}\n\n// AÇIKLAMA:\n// 1. Unique ID oluşturulur (nanoid)\n// 2. Default değerler eklenir (tamamlandi: false)\n// 3. Memory'deki Map'e eklenir (hızlı erişim)\n// 4. JSON dosyasına yazılır (kalıcı saklama)\n```\n\n**4. Response Kullanıcıya Döner:**\n```typescript\n// PRESENTATION LAYER (React Query)\nconst mutation = useMutation({\n  mutationFn: (data) => apiRequest('/api/gorevler', 'POST', data),\n  onSuccess: (yeniGorev) => {\n    // Cache'i invalidate et (yenile)\n    queryClient.invalidateQueries({ queryKey: ['/api/gorevler'] });\n    \n    // Toast göster\n    toast({ title: 'Görev eklendi!', variant: 'success' });\n  }\n});\n\n// AÇIKLAMA:\n// 1. API'den response gelir\n// 2. React Query cache'i günceller\n// 3. UI otomatik yenilenir (re-render)\n// 4. Kullanıcı yeni görevi listede görür\n```\n\n---\n\n## TEKNOLOJİ SEÇİMLERİ VE GEREKÇELERİ\n\nBu bölüm, projede kullanılan her teknolojinin **neden seçildiğini**, **alternatiflerin neden seçilmediğini** ve **nasıl kullanıldığını** detaylı olarak açıklar.\n\n### 1. Electron - Desktop Application Framework\n\n**Electron Nedir?**\n- **Basit Tanım:** Web teknolojileri (HTML, CSS, JavaScript) ile masaüstü uygulaması yapmanızı sağlayan framework\n- **Nasıl Çalışır?** Chromium (Chrome tarayıcısı) + Node.js (sunucu tarafı JavaScript) birleşimi\n- **Örnekler:** VSCode, Discord, Slack, Figma, Notion\n\n**Seçim Gerekçesi:**\n\n✅ **Cross-platform (Çapraz Platform):**\n- Tek kod tabanı ile Windows, macOS, Linux uygulaması\n- Platform-specific kod yazmaya gerek yok\n- **Örnek:** Aynı TypeScript kodu her platformda çalışır\n- **Alternatif Yaklaşım:** C++ ile Windows için, Swift ile macOS için ayrı kod (2-3x iş yükü)\n\n✅ **Web teknolojileri ile native app:**\n- React biliyorsanız, desktop app yapabilirsiniz\n- CSS ile tasarım, JavaScript ile mantık\n- **Avantaj:** Öğrenme eğrisi minimal (zaten React biliyoruz)\n\n✅ **System tray, notifications, file system access:**\n- **System Tray:** Saat yanındaki simge (uygulama arka planda çalışır)\n  ```javascript\n  const tray = new Tray('icon.png');\n  tray.setToolTip('YKS Takip Sistemi');\n  ```\n- **Notifications:** Windows/Mac bildirimleri\n  ```javascript\n  new Notification('Çalışma Saati!', { body: 'Matematik için 1 saat geçti' });\n  ```\n- **File System Access:** Dosya okuma/yazma\n  ```javascript\n  fs.writeFileSync('kayitlar.json', JSON.stringify(data));\n  ```\n\n✅ **Offline çalışabilme:**\n- İnternet bağlantısı gerektirmez\n- Tüm veriler local'de (bilgisayarda) saklanır\n- **Kullanım Senaryosu:**\n  - Öğrenci kütüphanede çalışıyor, internet yok\n  - Yine de görevlerini ekleyip çalışma saatini kaydedebilir\n  - Eve gelince internet'e bağlanır, veriler sync olur\n\n✅ **Güvenli local storage:**\n- JSON dosyaları bilgisayarda (`C:\\Users\\Berat\\AppData\\kayitlar.json`)\n- Şifreleme eklenebilir (electron-store)\n- Kullanıcı verisi hiçbir sunucuya gitmez\n\n**Alternatifler ve Neden Seçilmediler:**\n\n❌ **Tauri:**\n- **Artıları:** Rust tabanlı, daha hafif (3MB vs 150MB), daha hızlı başlatma\n- **Eksileri:** \n  - Ecosystem küçük (az npm paketi desteği)\n  - Rust bilgisi gerekir (learning curve)\n  - Community küçük (az tutorial, az Stack Overflow sorusu)\n- **Sonuç:** Electron daha mature (olgun), daha fazla kaynak var\n\n❌ **NW.js:**\n- **Artıları:** Electron'a benzer, biraz daha hafif\n- **Eksileri:**\n  - Daha az popüler (VSCode, Discord gibi büyük örnekler yok)\n  - Community küçük\n  - Update frequency düşük\n- **Sonuç:** Electron industry standard\n\n❌ **Qt/WPF/JavaFX:**\n- **Artıları:** Gerçek native UI, daha performanslı\n- **Eksileri:**\n  - C++ (Qt), C# (WPF), Java (JavaFX) öğrenmek gerekir\n  - Web teknolojisi bilgisi transfer edilemez\n  - React component'leri kullanılamaz\n- **Sonuç:** Web stack biliyoruz, Electron mantıklı seçim\n\n**Electron Versiyonu:**\n```json\n\"electron\": \"latest\"\n```\n- **latest nedir?** Her zaman en güncel versiyonu kullan\n- **Avantajı:** En yeni Chromium features (CSS Grid, Flexbox, ES2022)\n- **Dezavantajı:** Breaking changes olabilir (major version update'lerde)\n- **Çözüm:** package-lock.json ile version lock\n\n**Electron Proses Yapısı:**\n\n```\n┌─────────────────────────────────────────────────────────┐\n│                      MAIN PROCESS                        │\n│  (electron/main.cjs - Node.js environment)              │\n│                                                          │\n│  SORUMLULUĞU:                                           │\n│  - Uygulama yaşam döngüsü (başlat, kapat)              │\n│  - BrowserWindow oluşturma (pencere)                    │\n│  - System tray, menu, notifications                     │\n│  - File system, database erişimi                        │\n│  - IPC (Inter-Process Communication) ile Renderer'a mesaj gönder │\n│                                                          │\n│  DOSYALAR:                                              │\n│  - electron/main.cjs (ana process)                      │\n│  - electron/activity-tracker.cjs (aktivite takip)      │\n│  - electron/preload.cjs (güvenlik köprüsü)             │\n└────────────────┬────────────────────────────────────────┘\n                 │\n                 │ IPC (Inter-Process Communication)\n                 │ - ipcMain.on('mesaj', handler) → Main process dinler\n                 │ - ipcRenderer.send('mesaj', data) → Renderer gönderir\n                 │\n┌────────────────▼────────────────────────────────────────┐\n│                   RENDERER PROCESS                       │\n│  (client/src/ - Web browser environment)                │\n│                                                          │\n│  SORUMLULUĞU:                                           │\n│  - React UI render                                      │\n│  - Kullanıcı etkileşimi (click, input)                 │\n│  - API istekleri (fetch)                                │\n│  - IPC ile Main process'e mesaj gönder                  │\n│                                                          │\n│  KISITLAMALAR (Güvenlik):                               │\n│  - Node.js API'lerine direkt erişim YOK                 │\n│  - File system'e direkt erişim YOK                      │\n│  - Preload script ile sınırlı API kullanır              │\n└─────────────────────────────────────────────────────────┘\n```\n\n**IPC (Inter-Process Communication) Örneği:**\n\n```javascript\n// MAIN PROCESS (electron/main.cjs)\nipcMain.on('gorev-ekle', (event, gorev) => {\n  console.log('Renderer\\'dan görev geldi:', gorev);\n  // Veritabanına kaydet\n  storage.gorevEkle(gorev);\n  // Geri bildir\n  event.reply('gorev-eklendi', { success: true });\n});\n\n// RENDERER PROCESS (client/src/sayfalar/Gorevler.tsx)\n// Preload script üzerinden güvenli IPC\nwindow.electronAPI.gorevEkle({ baslik: 'Matematik çöz' });\nwindow.electronAPI.onGorevEklendi((result) => {\n  console.log('Görev eklendi!', result);\n});\n```\n\n### 2. React 18 - UI Library\n\n**React Nedir?**\n- **Basit Tanım:** Kullanıcı arayüzü (butonlar, formlar, tablolar) yapmak için JavaScript kütüphanesi\n- **Kimin?** Facebook (Meta) tarafından geliştirildi (2013'ten beri)\n- **Kullanım:** Facebook, Instagram, Netflix, Airbnb, Uber\n\n**Seçim Gerekçesi:**\n\n✅ **Component-based architecture (Bileşen Tabanlı Mimari):**\n- **Component nedir?** Yeniden kullanılabilir UI parçası\n- **Örnek:**\n  ```tsx\n  // GorevKarti.tsx - Tek bir görev kartı\n  function GorevKarti({ baslik, tamamlandi, onToggle }) {\n    return (\n      <div className=\"p-4 border rounded\">\n        <Checkbox checked={tamamlandi} onCheckedChange={onToggle} />\n        <span>{baslik}</span>\n      </div>\n    );\n  }\n  \n  // Gorevler.tsx - Tüm görevler\n  function Gorevler() {\n    return gorevler.map(g => <GorevKarti key={g.id} {...g} />);\n  }\n  ```\n- **Avantajı:** GorevKarti'yi 100 yerde kullanabilirsin, bir yerde değiştirince her yere yansır\n\n✅ **Virtual DOM (Sanal DOM):**\n- **DOM nedir?** Document Object Model - Tarayıcının HTML'i temsil etme şekli\n- **Problem:** DOM manipülasyonu yavaş (jQuery'de her değişiklik gerçek DOM'a dokunur)\n- **Çözüm:** React virtual DOM kullanır\n  ```\n  1. State değişir (setGorevler)\n  2. React sanal DOM'da değişikliği hesaplar\n  3. Gerçek DOM'a sadece değişen kısımları uygular (diffing)\n  4. Sonuç: Çok daha hızlı (batching + efficient updates)\n  ```\n- **Örnek:**\n  ```tsx\n  // 1000 görev var, sadece 1 görevin tamamlandi değişti\n  setGorevler(prev => prev.map(g => \n    g.id === '123' ? { ...g, tamamlandi: true } : g\n  ));\n  // React sadece 1 checkbox'ı günceller, 999 görev aynı kalır\n  ```\n\n✅ **Hooks API:**\n- **Hooks nedir?** React 16.8 ile gelen, state ve lifecycle'ı fonksiyonel component'lerde kullanma yöntemi\n- **useState:** State (durum) tutmak\n  ```tsx\n  const [sayi, setSayi] = useState(0);\n  <Button onClick={() => setSayi(sayi + 1)}>Artır ({sayi})</Button>\n  ```\n- **useEffect:** Side effect'ler (API call, subscription, timer)\n  ```tsx\n  useEffect(() => {\n    const timer = setInterval(() => {\n      console.log('1 dakika geçti');\n    }, 60000);\n    return () => clearInterval(timer); // Cleanup\n  }, []); // [] = Sadece mount'ta çalış\n  ```\n- **useContext:** Global state paylaşma\n  ```tsx\n  const { kullanici } = useContext(KullaniciContext);\n  ```\n\n✅ **Concurrent rendering (Eşzamanlı Render):**\n- **React 18 Özelliği:** UI'ı bloklamadan render\n- **Örnek:**\n  ```tsx\n  // Öncelikli update (kullanıcı input)\n  startTransition(() => {\n    setAramaMetni(event.target.value);\n  });\n  // Input anında güncellenir, arama sonuçları arka planda yüklenir\n  ```\n\n✅ **Büyük ecosystem:**\n- 200,000+ npm paketi React uyumlu\n- shadcn/ui, Material-UI, Ant Design gibi hazır component kütüphaneleri\n- React Router, React Query, Zustand gibi state management araçları\n\n**Alternatifler:**\n\n❌ **Vue.js:**\n- **Artıları:** Öğrenmesi daha kolay, daha basit syntax\n- **Eksileri:** Ecosystem küçük, iş ilanları az\n- **Sonuç:** React industry standard\n\n❌ **Svelte:**\n- **Artıları:** Compiler-based (no virtual DOM), daha hızlı\n- **Eksileri:** Yeni (2019), ecosystem küçük, iş ilanları az\n- **Sonuç:** Production'da risk\n\n❌ **Angular:**\n- **Artıları:** Full-featured framework (routing, HTTP, forms hepsi dahil)\n- **Eksileri:** Ağır (bundle size büyük), öğrenmesi zor (RxJS, Decorators)\n- **Sonuç:** Bu proje için overkill (gereğinden fazla)\n\n**React 18 Özellikleri:**\n\n```typescript\n// 1. Functional components (Class component yok)\nimport { useState, useEffect } from 'react';\n\nfunction GorevListesi() {\n  const [gorevler, setGorevler] = useState<Gorev[]>([]);\n  const [yukleniyor, setYukleniyor] = useState(true);\n  \n  useEffect(() => {\n    fetch('/api/gorevler')\n      .then(res => res.json())\n      .then(data => {\n        setGorevler(data);\n        setYukleniyor(false);\n      });\n  }, []); // Dependency array boş = sadece mount'ta çalış\n  \n  if (yukleniyor) return <Skeleton />;\n  \n  return (\n    <div>\n      {gorevler.map(gorev => (\n        <GorevKarti key={gorev.id} {...gorev} />\n      ))}\n    </div>\n  );\n}\n```\n\n**Component Yapısı:**\n```\nAnaSayfa.tsx\n├── Navbar.tsx\n│   ├── Logo.tsx\n│   ├── NavigationMenu.tsx\n│   └── UserAvatar.tsx\n├── Sidebar.tsx\n│   ├── SidebarItem.tsx (x5)\n│   └── SidebarFooter.tsx\n└── MainContent.tsx\n    ├── Dashboard.tsx\n    │   ├── StatsCard.tsx (x4)\n    │   ├── PerformansGrafigi.tsx\n    │   └── SonCalismalar.tsx\n    └── Gorevler.tsx\n        ├── GorevListesi.tsx\n        │   └── GorevKarti.tsx (xN)\n        └── GorevEkleDialog.tsx\n            └── GorevFormu.tsx\n```\n\n### 3. TypeScript - Typed JavaScript\n\n**TypeScript Nedir?**\n- **Basit Tanım:** JavaScript'e tip (type) ekleme sistemi\n- **Kimin?** Microsoft tarafından geliştirildi\n- **Derlenme:** TypeScript (.ts) → JavaScript (.js)\n\n**Seçim Gerekçesi:**\n\n✅ **Type safety (Tip Güvenliği):**\n- **Problem (JavaScript):**\n  ```javascript\n  function topla(a, b) {\n    return a + b;\n  }\n  topla(5, 3);       // 8 ✅\n  topla('5', 3);     // '53' ❌ (string concatenation)\n  topla(5);          // NaN ❌ (undefined + 5)\n  topla(5, 3, 7);    // 8 (3. parametre ignore edilir)\n  ```\n- **Çözüm (TypeScript):**\n  ```typescript\n  function topla(a: number, b: number): number {\n    return a + b;\n  }\n  topla(5, 3);       // 8 ✅\n  topla('5', 3);     // ERROR: Argument of type 'string' is not assignable\n  topla(5);          // ERROR: Expected 2 arguments, but got 1\n  ```\n\n✅ **Better IDE support:**\n- **Autocomplete:** IDE tip bildiğinden otomatik tamamlar\n  ```typescript\n  const gorev: Gorev = { /* */ };\n  gorev. // IDE otomatik gösterir: id, baslik, tamamlandi, olusturmaTarihi\n  ```\n- **Refactoring:** Fonksiyon ismini değiştirince her yerde değişir\n- **Error highlighting:** Hata yazmadan IDE gösterir\n\n✅ **Self-documenting code:**\n- **JavaScript:**\n  ```javascript\n  // gorevEkle fonksiyonu ne alır? Döküman oku\n  function gorevEkle(gorev) {\n    // ...\n  }\n  ```\n- **TypeScript:**\n  ```typescript\n  // Tipler dokümantasyon gibi\n  function gorevEkle(gorev: InsertGorev): Promise<Gorev> {\n    // gorev: { baslik: string, oncelik: 'dusuk' | 'orta' | 'yuksek' }\n    // Dönüş: Promise<Gorev> (async fonksiyon, Gorev döndürür)\n  }\n  ```\n\n✅ **Easier refactoring:**\n- **Senaryo:** `Gorev` type'ına `etiketler: string[]` ekledik\n- **JavaScript:** Runtime'da hata (gorev.etiketler undefined)\n- **TypeScript:** Compile-time'da hata (her yerde kırmızı çizgi)\n  ```typescript\n  interface Gorev {\n    id: string;\n    baslik: string;\n    tamamlandi: boolean;\n    etiketler: string[]; // YENİ\n  }\n  \n  // Eski kod hata verir:\n  const gorev = { id: '1', baslik: 'Test', tamamlandi: false };\n  // ERROR: Property 'etiketler' is missing\n  ```\n\n**TypeScript Konfigürasyonu (tsconfig.json):**\n```json\n{\n  \"compilerOptions\": {\n    \"strict\": false,            // Strict mode KAPALI\n    \"module\": \"ESNext\",         // ES6 import/export\n    \"target\": \"ES2022\",         // Modern JavaScript features\n    \"jsx\": \"preserve\",          // JSX'i Babel'a bırak (Vite kullanıyor)\n    \"moduleResolution\": \"node\", // Node.js module çözümleme\n    \"esModuleInterop\": true,    // CommonJS uyumluluğu\n    \"skipLibCheck\": true,       // node_modules type check'i atla (hız için)\n    \"paths\": {\n      \"@/*\": [\"./client/src/*\"], // @ ile import kısayolu\n      \"@shared/*\": [\"./shared/*\"]\n    }\n  }\n}\n```\n\n**Neden `strict: false`?**\n- **Strict mode nedir?** Tüm type check'leri en sıkı seviyede\n- **Strict mode özellikleri:**\n  ```typescript\n  // strict: true olsaydı:\n  let sayi: number;\n  console.log(sayi); // ERROR: Variable used before being assigned\n  \n  function test(x: string | null) {\n    console.log(x.length); // ERROR: Object is possibly 'null'\n  }\n  \n  // strict: false olunca:\n  // Bu hatalar warning verir ama derlenir\n  ```\n- **Neden kapalı?**\n  - Development hızını artırır (prototype aşamasında)\n  - Bazı library type definitions eksik (any kullanmak zorunda kalırsın)\n  - Production'da yine de type safety var (partial types bile yardımcı)\n- **Gelecek:** Production'a geçerken strict: true yapılabilir\n\n**Type Örnekleri:**\n\n```typescript\n// 1. Primitive types\nlet isim: string = 'Berat';\nlet yas: number = 18;\nlet ogrenci: boolean = true;\n\n// 2. Array types\nlet notlar: number[] = [70, 85, 90];\nlet isimler: Array<string> = ['Ali', 'Veli'];\n\n// 3. Object types\ninterface Gorev {\n  id: string;\n  baslik: string;\n  aciklama?: string; // Optional (olması şart değil)\n  tamamlandi: boolean;\n  olusturmaTarihi: Date;\n}\n\nconst gorev: Gorev = {\n  id: '1',\n  baslik: 'Matematik çöz',\n  tamamlandi: false,\n  olusturmaTarihi: new Date()\n  // aciklama yok ama sorun değil (optional)\n};\n\n// 4. Union types\ntype Oncelik = 'dusuk' | 'orta' | 'yuksek';\nlet oncelik: Oncelik = 'yuksek'; // 'yuksek', 'orta', 'dusuk' dışında değer verilemez\n\n// 5. Generic types\nfunction getIlkEleman<T>(dizi: T[]): T | undefined {\n  return dizi[0];\n}\nconst ilkSayi = getIlkEleman([1, 2, 3]); // type: number | undefined\nconst ilkIsim = getIlkEleman(['Ali', 'Veli']); // type: string | undefined\n\n// 6. Type inference (otomatik tip çıkarımı)\nconst sayi = 42; // TypeScript anlar: number\nconst isim = 'Berat'; // TypeScript anlar: string\nconst gorevler = []; // TypeScript anlar: any[] (empty array)\nconst gorevler2: Gorev[] = []; // Biz söyleriz: Gorev[]\n```\n\n### 4. Vite - Build Tool\n\n**Vite Nedir?**\n- **Basit Tanım:** JavaScript projelerini derleyen, geliştirme sunucusu sağlayan araç\n- **Okunuş:** \"Vit\" (Fransızca \"hızlı\" anlamına gelir)\n- **Kimin?** Evan You (Vue.js'in yaratıcısı)\n\n**Build Tool Nedir?**\n- **Problem:** Modern web geliştirme karmaşık\n  - TypeScript → JavaScript derleme\n  - JSX → JavaScript derleme\n  - SCSS → CSS derleme\n  - ES6 modules → Browser-compatible JavaScript\n  - Minification (küçültme)\n  - Bundle optimization\n- **Çözüm:** Build tool hepsini yapar\n\n**Seçim Gerekçesi:**\n\n✅ **Çok hızlı HMR (Hot Module Replacement):**\n- **HMR nedir?** Kod değişikliğini tarayıcıya anında yansıtma (sayfa yenilenmeden)\n- **Örnek:**\n  ```\n  1. GorevKarti.tsx'de renk değiştirdin (bg-blue-500 → bg-green-500)\n  2. Kaydet (Ctrl+S)\n  3. 50ms içinde tarayıcıda renk değişir (state kaybolmaz!)\n  ```\n- **Webpack HMR:** 1-2 saniye\n- **Vite HMR:** <100ms (10-20x daha hızlı)\n\n✅ **ES modules native support:**\n- **ES Modules nedir?** Modern JavaScript import/export sistemi\n  ```javascript\n  // Eski (CommonJS)\n  const express = require('express');\n  \n  // Yeni (ES Modules)\n  import express from 'express';\n  ```\n- **Vite:** ES modules'ü tarayıcıya direkt gönderir (dev mode'da)\n- **Webpack:** Her şeyi bundle eder (yavaş)\n\n✅ **Out-of-the-box TypeScript support:**\n- **Webpack:** loader config gerekir (ts-loader, babel-loader)\n- **Vite:** Hiçbir config gerektirmez\n  ```typescript\n  // Component.tsx yazıyorsun, Vite otomatik derliyor\n  export default function Component() {\n    return <div>Merhaba</div>;\n  }\n  ```\n\n✅ **Production build optimization:**\n- **Rollup kullanır:** Modern, optimize bundler\n- **Tree-shaking:** Kullanılmayan kodu siler\n- **Code splitting:** Lazy loading için chunk'lara böler\n- **Minification:** Kod boyutunu küçültür\n\n**Vite vs Webpack Karşılaştırması:**\n\n| Özellik | Vite | Webpack |\n|---------|------|---------|\n| Dev server start | <1s | 5-10s |\n| HMR (Hot Module Replacement) | <100ms | 1-2s |\n| Build speed (production) | Fast | Slower |\n| Config karmaşıklığı | Simple (minimal config) | Complex (webpack.config.js 100+ satır) |\n| Learning curve | Easy | Steep (loader, plugin, chunk optimization) |\n| Bundle size | Smaller (Rollup optimization) | Larger |\n| ES modules support | Native | Polyfill gerekir |\n\n**Vite Konfigürasyonu (vite.config.ts):**\n```typescript\nimport { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\nimport path from 'path';\n\nexport default defineConfig({\n  plugins: [react()], // React JSX desteği\n  \n  // Development server\n  server: {\n    host: \"0.0.0.0\",     // Tüm network interface'lerden erişim (Replit için önemli!)\n    port: 5000,          // Port 5000 (frontend)\n    allowedHosts: true,  // Proxy/iframe içinde çalışması için (Replit özelliği)\n    proxy: {\n      // API isteklerini backend'e yönlendir\n      '/api': {\n        target: 'http://localhost:3000', // Backend port\n        changeOrigin: true\n      }\n    }\n  },\n  \n  // Build config\n  build: {\n    outDir: 'dist',      // Build çıktısı\n    sourcemap: true,     // Debug için kaynak haritası\n    rollupOptions: {\n      output: {\n        // Chunk optimization\n        manualChunks: {\n          vendor: ['react', 'react-dom'],\n          ui: ['@radix-ui/react-dialog', '@radix-ui/react-select']\n        }\n      }\n    }\n  },\n  \n  // Path aliases (import kısayolları)\n  resolve: {\n    alias: {\n      '@': path.resolve(__dirname, './client/src'),\n      '@shared': path.resolve(__dirname, './shared')\n    }\n  }\n});\n```\n\n**Vite Nasıl Çalışır?**\n\n**Development Mode:**\n```\n1. npm run dev\n2. Vite dev server başlar (port 5000)\n3. index.html serve edilir\n4. index.html içinde <script type=\"module\" src=\"/src/main.tsx\">\n5. Browser /src/main.tsx ister\n6. Vite on-the-fly derler (TypeScript → JavaScript)\n7. Browser ES modules olarak yükler\n8. Her import için ayrı HTTP request (no bundling!)\n9. HMR WebSocket bağlantısı (canlı güncelleme)\n\nAVANTAJ: Çok hızlı (sadece değişen dosya derlenir)\n```\n\n**Production Mode:**\n```\n1. npm run build\n2. Vite production build başlar\n3. Rollup ile tüm dosyalar bundle'lanır\n4. Minification (uglify, terser)\n5. Tree-shaking (kullanılmayan kod silinir)\n6. Code splitting (lazy load chunk'lar)\n7. CSS extraction (ayrı CSS dosyası)\n8. Asset optimization (image, font)\n9. dist/ klasörüne çıktı\n\nÇIKTI:\ndist/\n├── index.html\n├── assets/\n│   ├── index-a1b2c3d4.js (main bundle)\n│   ├── vendor-e5f6g7h8.js (React, libraries)\n│   ├── ui-i9j0k1l2.js (shadcn components)\n│   └── index-m3n4o5p6.css (styles)\n```\n\n### 5. Express.js - Web Framework\n\n**Express.js Nedir?**\n- **Basit Tanım:** Node.js için minimalist web framework (HTTP sunucusu + routing)\n- **İlk Çıkış:** 2010 (14 yaşında, çok olgun)\n- **Kullanım:** IBM, Uber, Accenture, PayPal\n\n**Seçim Gerekçesi:**\n\n✅ **Minimalist ve esnek:**\n- **Minimalist:** Az özellik, çok genişletilebilir\n- **Örnek:** Express sadece routing + middleware, database yoktur (sen eklersin)\n- **Avantaj:** İstediğin gibi şekillendirirsin (opinionated değil)\n\n✅ **Middleware ecosystem:**\n- **Middleware nedir?** Request-response cycle'ında çalışan fonksiyonlar\n- **Örnekler:**\n  ```typescript\n  // 1. Body parser middleware (JSON parse)\n  app.use(express.json());\n  \n  // 2. Logging middleware\n  app.use((req, res, next) => {\n    console.log(`${req.method} ${req.url}`);\n    next(); // Sonraki middleware'e geç\n  });\n  \n  // 3. Authentication middleware\n  app.use('/api/gorevler', (req, res, next) => {\n    if (!req.headers.authorization) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n    next();\n  });\n  \n  // 4. Error handling middleware\n  app.use((err, req, res, next) => {\n    console.error(err);\n    res.status(500).json({ error: err.message });\n  });\n  ```\n\n✅ **RESTful API için ideal:**\n- **REST nedir?** Representational State Transfer (API tasarım prensibi)\n- **RESTful Endpoints:**\n  ```typescript\n  // CRUD operations\n  app.get('/api/gorevler',        () => { /* Tüm görevleri listele */ });\n  app.get('/api/gorevler/:id',    () => { /* Tek görev getir */ });\n  app.post('/api/gorevler',       () => { /* Yeni görev ekle */ });\n  app.put('/api/gorevler/:id',    () => { /* Görevi güncelle */ });\n  app.delete('/api/gorevler/:id', () => { /* Görevi sil */ });\n  ```\n\n✅ **Kolay öğrenme eğrisi:**\n- **İlk Express uygulaması:**\n  ```typescript\n  import express from 'express';\n  const app = express();\n  \n  app.get('/', (req, res) => {\n    res.send('Merhaba Dünya!');\n  });\n  \n  app.listen(3000, () => {\n    console.log('Sunucu çalışıyor: http://localhost:3000');\n  });\n  ```\n- **5 dakikada öğrenilir**\n\n**Express vs Alternatifler:**\n\n❌ **Fastify:**\n- **Artıları:** 2x daha hızlı (JSON schema validation, pipelining)\n- **Eksileri:** \n  - Ecosystem küçük (az middleware)\n  - Learning curve (schema validation öğrenmek gerekir)\n- **Sonuç:** Express mature, proven\n\n❌ **Koa:**\n- **Artıları:** Modern (async/await native), minimalist\n- **Eksileri:**\n  - Community küçük\n  - Middleware ecosystem Express'ten az\n- **Sonuç:** Express daha popüler\n\n❌ **NestJS:**\n- **Artıları:** Enterprise-grade (TypeScript, decorators, dependency injection)\n- **Eksileri:**\n  - Ağır (çok abstraction)\n  - Öğrenmesi zor (Angular benzeri)\n  - Bu proje için overkill\n- **Sonuç:** Express yeterli\n\n**Express Middleware Stack (Sıralı Çalışır):**\n\n```typescript\nimport express from 'express';\nconst app = express();\n\n// 1. Body parser middleware\napp.use(express.json()); // Content-Type: application/json\napp.use(express.urlencoded({ extended: false })); // Form data\n\n// 2. CORS middleware (Cross-Origin Resource Sharing)\napp.use((req, res, next) => {\n  res.header('Access-Control-Allow-Origin', '*');\n  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE');\n  next();\n});\n\n// 3. Logging middleware\napp.use((req, res, next) => {\n  console.log(`[${new Date().toISOString()}] ${req.method} ${req.url}`);\n  next();\n});\n\n// 4. Routes\napp.use('/api', rotalar); // rotalar.ts dosyasındaki routes\n\n// 5. 404 handler (route bulunamadı)\napp.use((req, res) => {\n  res.status(404).json({ error: 'Not Found' });\n});\n\n// 6. Error handling middleware (en son olmalı!)\napp.use((err: any, req: Request, res: Response, next: NextFunction) => {\n  console.error('Hata:', err);\n  res.status(err.status || 500).json({\n    error: err.message || 'Internal Server Error'\n  });\n});\n\napp.listen(3000);\n```\n\n**Middleware Çalışma Prensibi:**\n\n```\nREQUEST: GET /api/gorevler\n  ↓\n1. express.json() middleware\n   - Content-Type check\n   - JSON parse (body string → object)\n   ↓\n2. CORS middleware\n   - Headers ekle\n   ↓\n3. Logging middleware\n   - Console.log\n   ↓\n4. Routes\n   - /api/gorevler match\n   - Route handler çalışır\n   ↓\n5. Response gönderilir\n   ↓\nRESPONSE: { gorevler: [...] }\n```\n\n**Hata Durumu:**\n```\nREQUEST: POST /api/gorevler (invalid JSON)\n  ↓\n1. express.json() middleware\n   - JSON parse FAIL → Error throw\n   ↓\n2. CORS, Logging middleware atlanır\n   ↓\n3. Error handling middleware\n   - err.status = 400\n   - err.message = 'Invalid JSON'\n   ↓\nRESPONSE: 400 { error: 'Invalid JSON' }\n```\n\n### 6. Drizzle ORM - Type-Safe ORM\n\n**ORM Nedir?**\n- **Object-Relational Mapping:** Nesne-İlişkisel Eşleme\n- **Basit Tanım:** Veritabanı tablolarını TypeScript class/interface'leri gibi kullanma\n- **Örnek:**\n  ```typescript\n  // SQL ile:\n  const result = await db.query('SELECT * FROM tasks WHERE id = $1', [taskId]);\n  const task = result.rows[0]; // type: any (güvensiz!)\n  \n  // ORM ile (Drizzle):\n  const task = await db.select().from(tasks).where(eq(tasks.id, taskId));\n  // type: Gorev (type-safe!)\n  ```\n\n**Drizzle ORM Nedir?**\n- **Headless TypeScript ORM:** Schema-first, type-safe\n- **İlk Çıkış:** 2022 (yeni ama hızla büyüyen)\n- **Felsefe:** SQL-like syntax, full type safety\n\n**Seçim Gerekçesi:**\n\n✅ **Full TypeScript support:**\n- **Schema → Types otomatik:**\n  ```typescript\n  // Schema tanımı (shared/sema.ts)\n  export const gorevler = pgTable(\"gorevler\", {\n    id: varchar(\"id\").primaryKey(),\n    baslik: text(\"baslik\").notNull(),\n    tamamlandi: boolean(\"tamamlandi\").default(false)\n  });\n  \n  // Drizzle otomatik type çıkarır:\n  type Gorev = typeof gorevler.$inferSelect;\n  // { id: string, baslik: string, tamamlandi: boolean }\n  \n  type InsertGorev = typeof gorevler.$inferInsert;\n  // { id?: string, baslik: string, tamamlandi?: boolean }\n  ```\n\n✅ **SQL-like syntax:**\n- **Öğrenmesi kolay (SQL biliyorsan):**\n  ```typescript\n  // SQL:\n  SELECT * FROM gorevler WHERE tamamlandi = false ORDER BY id DESC;\n  \n  // Drizzle:\n  await db\n    .select()\n    .from(gorevler)\n    .where(eq(gorevler.tamamlandi, false))\n    .orderBy(desc(gorevler.id));\n  ```\n\n✅ **Migration system:**\n- **Migration nedir?** Veritabanı değişikliklerini versiyonlama\n- **Drizzle Kit:**\n  ```bash\n  # 1. Schema değiştir (shared/sema.ts)\n  export const gorevler = pgTable(\"gorevler\", {\n    // YENİ: etiketler kolonu ekledik\n    etiketler: text(\"etiketler\").array().default([])\n  });\n  \n  # 2. Migration oluştur\n  npm run db:generate\n  # → drizzle/0001_add_etiketler.sql\n  \n  # 3. Migration uygula\n  npm run db:push\n  # → ALTER TABLE gorevler ADD COLUMN etiketler text[] DEFAULT '{}';\n  ```\n\n✅ **Lightweight:**\n- **Bundle size:** 15KB (gzipped)\n- **Prisma:** 50KB (binary dependency)\n- **TypeORM:** 200KB\n\n**Drizzle vs Alternatifler:**\n\n❌ **Prisma:**\n- **Artıları:** En popüler, büyük community, admin UI\n- **Eksileri:**\n  - Binary dependency (Electron'da problem: platform-specific binary)\n  - Schema language ayrı (Prisma Schema Language, TypeScript değil)\n  - Daha ağır\n- **Sonuç:** Drizzle daha hafif, Electron-friendly\n\n❌ **TypeORM:**\n- **Artıları:** Mature, decorator-based (Java Spring gibi)\n- **Eksileri:**\n  - Ağır (200KB)\n  - Decorator syntax (learning curve)\n  - Type inference zayıf\n- **Sonuç:** Drizzle modern, type-safe\n\n❌ **Kysely:**\n- **Artıları:** Type-safe SQL query builder\n- **Eksileri:**\n  - Query builder (ORM değil: relation yok, cascade yok)\n  - Manuel type tanımlama gerekir\n- **Sonuç:** Drizzle hem query builder hem ORM\n\n**Drizzle Şema Örneği (shared/sema.ts):**\n\n```typescript\nimport { pgTable, varchar, text, boolean, timestamp, integer } from 'drizzle-orm/pg-core';\nimport { sql } from 'drizzle-orm';\nimport { createInsertSchema } from 'drizzle-zod';\n\n// 1. Tablo tanımı\nexport const gorevler = pgTable(\"gorevler\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  // varchar: değişken uzunlukta string\n  // primaryKey: unique identifier, index otomatik\n  // gen_random_uuid(): PostgreSQL fonksiyonu (rastgele UUID)\n  \n  baslik: text(\"baslik\").notNull(),\n  // text: uzun string (varchar sınırsız versiyonu)\n  // notNull: boş olamaz (SQL: NOT NULL)\n  \n  aciklama: text(\"aciklama\"),\n  // nullable (default), boş olabilir\n  \n  tamamlandi: boolean(\"tamamlandi\").default(false),\n  // default: insert'te değer verilmezse false\n  \n  oncelik: text(\"oncelik\", { enum: ['dusuk', 'orta', 'yuksek'] }).default('orta'),\n  // enum: sadece bu 3 değer olabilir\n  \n  son_tarih: timestamp(\"son_tarih\"),\n  // timestamp: tarih + saat (SQL: TIMESTAMP)\n  \n  olusturma_tarihi: timestamp(\"olusturma_tarihi\").defaultNow(),\n  // defaultNow(): insert anında şimdiki zaman\n  \n  etiketler: text(\"etiketler\").array().default([]),\n  // array(): PostgreSQL array tipi (text[])\n  // default([]): boş array\n});\n\n// 2. Zod şema oluştur (validation için)\nexport const insertGorevSchema = createInsertSchema(gorevler).omit({\n  id: true,                    // id otomatik, kullanıcı girmez\n  olusturma_tarihi: true      // timestamp otomatik\n});\n\n// 3. Type çıkarımı\nexport type Gorev = typeof gorevler.$inferSelect;\n// {\n//   id: string,\n//   baslik: string,\n//   aciklama: string | null,\n//   tamamlandi: boolean,\n//   oncelik: 'dusuk' | 'orta' | 'yuksek',\n//   son_tarih: Date | null,\n//   olusturma_tarihi: Date,\n//   etiketler: string[]\n// }\n\nexport type InsertGorev = typeof gorevler.$inferInsert;\n// {\n//   id?: string,\n//   baslik: string,\n//   aciklama?: string | null,\n//   tamamlandi?: boolean,\n//   oncelik?: 'dusuk' | 'orta' | 'yuksek',\n//   son_tarih?: Date | null,\n//   olusturma_tarihi?: Date,\n//   etiketler?: string[]\n// }\n```\n\n**Drizzle Query Örnekleri:**\n\n```typescript\nimport { db } from './database';\nimport { gorevler } from '@shared/sema';\nimport { eq, and, or, desc, like } from 'drizzle-orm';\n\n// 1. Tüm görevleri getir\nconst tumGorevler = await db.select().from(gorevler);\n\n// 2. ID ile tek görev\nconst gorev = await db\n  .select()\n  .from(gorevler)\n  .where(eq(gorevler.id, '123'));\n\n// 3. Tamamlanmamış görevler\nconst tamamlanmamis = await db\n  .select()\n  .from(gorevler)\n  .where(eq(gorevler.tamamlandi, false));\n\n// 4. AND koşulu (tamamlanmamış VE yüksek öncelikli)\nconst acilGorevler = await db\n  .select()\n  .from(gorevler)\n  .where(\n    and(\n      eq(gorevler.tamamlandi, false),\n      eq(gorevler.oncelik, 'yuksek')\n    )\n  );\n\n// 5. OR koşulu (yüksek VEYA orta öncelikli)\nconst oncelikliGorevler = await db\n  .select()\n  .from(gorevler)\n  .where(\n    or(\n      eq(gorevler.oncelik, 'yuksek'),\n      eq(gorevler.oncelik, 'orta')\n    )\n  );\n\n// 6. Sıralama (azalan)\nconst sonGorevler = await db\n  .select()\n  .from(gorevler)\n  .orderBy(desc(gorevler.olusturma_tarihi));\n\n// 7. Arama (LIKE sorgusu)\nconst arananGorevler = await db\n  .select()\n  .from(gorevler)\n  .where(like(gorevler.baslik, '%matematik%'));\n\n// 8. Insert\nconst yeniGorev = await db\n  .insert(gorevler)\n  .values({\n    baslik: 'Fizik çöz',\n    oncelik: 'yuksek'\n  })\n  .returning(); // PostgreSQL: inserted row döndür\n\n// 9. Update\nawait db\n  .update(gorevler)\n  .set({ tamamlandi: true })\n  .where(eq(gorevler.id, '123'));\n\n// 10. Delete\nawait db\n  .delete(gorevler)\n  .where(eq(gorevler.id, '123'));\n```\n\n### 7. TanStack React Query v5 - Data Fetching\n\n**React Query Nedir?**\n- **Basit Tanım:** Sunucu state'ini yönetme kütüphanesi (cache, fetch, refetch, invalidate)\n- **Eski Adı:** React Query\n- **Yeni Adı:** TanStack Query (framework-agnostic, Vue/Solid/Svelte de destekler)\n\n**Server State vs Client State:**\n\n**Client State:**\n- **Tanım:** Tarayıcıda tutulan, sunucuyla ilgisi olmayan state\n- **Örnekler:**\n  - Modal açık mı? (isModalOpen)\n  - Hangi tab seçili? (activeTab)\n  - Form input değerleri (formData)\n- **Yönetim:** useState, useReducer, Zustand\n\n**Server State:**\n- **Tanım:** Sunucudan gelen, cache'lenen, invalidate edilebilen state\n- **Örnekler:**\n  - Görevler listesi (sunucudan geliyor)\n  - Kullanıcı profili (sunucudan geliyor)\n  - Deneme sonuçları (sunucudan geliyor)\n- **Yönetim:** React Query\n\n**Seçim Gerekçesi:**\n\n✅ **Server state management:**\n- **Automatic caching:**\n  ```typescript\n  // 1. Component mount oldu → fetch\n  const { data } = useQuery({ queryKey: ['/api/gorevler'] });\n  \n  // 2. Component unmount → cache'de kaldı\n  // 3. Component tekrar mount → cache'den anında gösterir, arka planda refetch\n  ```\n  \n- **Background refetching:**\n  ```typescript\n  useQuery({\n    queryKey: ['/api/gorevler'],\n    staleTime: 5000,    // 5 saniye boyunca fresh\n    refetchInterval: 60000  // Her 60 saniyede arka planda refetch\n  });\n  ```\n  \n- **Cache invalidation:**\n  ```typescript\n  // Görev eklendi → cache'i invalidate et (yeniden fetch)\n  await gorevEkleMutation.mutateAsync(yeniGorev);\n  queryClient.invalidateQueries({ queryKey: ['/api/gorevler'] });\n  ```\n\n✅ **Automatic loading/error states:**\n```typescript\nconst { data, isLoading, error } = useQuery({ queryKey: ['/api/gorevler'] });\n\nif (isLoading) return <Skeleton />;\nif (error) return <div>Hata: {error.message}</div>;\nreturn <GorevListesi gorevler={data} />;\n\n// Manuel loading state yok!\n```\n\n✅ **Optimistic updates:**\n```typescript\nconst mutation = useMutation({\n  mutationFn: (id) => apiRequest(`/api/gorevler/${id}`, 'DELETE'),\n  onMutate: async (id) => {\n    // 1. Cache'den görevi kaldır (optimistic)\n    queryClient.setQueryData(['/api/gorevler'], (prev) =>\n      prev.filter(g => g.id !== id)\n    );\n    // Kullanıcı anında silindi görür (API response beklemez)\n  },\n  onError: (err, id, context) => {\n    // 2. Hata olursa geri al\n    queryClient.setQueryData(['/api/gorevler'], context.previousData);\n  }\n});\n```\n\n**React Query vs Alternatifler:**\n\n❌ **SWR (stale-while-revalidate):**\n- **Artıları:** Hafif, benzer API\n- **Eksileri:**\n  - Ecosystem küçük\n  - Mutation desteği zayıf\n  - DevTools yok\n- **Sonuç:** React Query feature-rich\n\n❌ **Redux + Redux Toolkit Query:**\n- **Artıları:** Redux ile entegre\n- **Eksileri:**\n  - Redux öğrenmek gerekir (boilerplate)\n  - Server state için overkill\n- **Sonuç:** React Query specialized\n\n❌ **Zustand:**\n- **Artıları:** Hafif, basit state management\n- **Eksileri:**\n  - Server state için özel değil (caching, refetching yok)\n  - Manuel fetch mantığı yazmak gerekir\n- **Sonuç:** React Query server state için ideal\n\n**Query Örneği:**\n\n```typescript\nimport { useQuery } from '@tanstack/react-query';\n\nfunction GorevListesi() {\n  const {\n    data: gorevler,      // API response\n    isLoading,           // İlk yüklenme\n    isFetching,          // Background refetch\n    error,               // Hata varsa\n    refetch              // Manuel refetch fonksiyonu\n  } = useQuery({\n    queryKey: ['/api/gorevler'],\n    // queryFn yok çünkü global default fetcher var (client/src/kutuphane/queryClient.ts)\n    staleTime: 5000,     // 5 saniye boyunca fresh (refetch yok)\n    gcTime: 10 * 60 * 1000, // 10 dakika cache'de tut (eski adı: cacheTime)\n    refetchOnWindowFocus: true, // Pencere focus olunca refetch\n    retry: 3             // Hata olursa 3 kere dene\n  });\n  \n  if (isLoading) return <Skeleton className=\"h-40\" />;\n  if (error) return <Alert variant=\"destructive\">{error.message}</Alert>;\n  \n  return (\n    <div>\n      <Button onClick={() => refetch()}>Yenile</Button>\n      {gorevler.map(gorev => <GorevKarti key={gorev.id} {...gorev} />)}\n    </div>\n  );\n}\n```\n\n**Mutation Örneği:**\n\n```typescript\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/kutuphane/queryClient';\n\nfunction GorevEkleDialog() {\n  const queryClient = useQueryClient();\n  \n  const mutation = useMutation({\n    mutationFn: (data: InsertGorev) => \n      apiRequest('/api/gorevler', 'POST', data),\n    \n    onSuccess: (yeniGorev) => {\n      // 1. Cache'i invalidate et (refetch)\n      queryClient.invalidateQueries({ queryKey: ['/api/gorevler'] });\n      \n      // 2. Toast göster\n      toast({\n        title: 'Başarılı!',\n        description: `\"${yeniGorev.baslik}\" eklendi.`\n      });\n      \n      // 3. Dialog'u kapat\n      setIsOpen(false);\n    },\n    \n    onError: (error) => {\n      toast({\n        title: 'Hata!',\n        description: error.message,\n        variant: 'destructive'\n      });\n    }\n  });\n  \n  return (\n    <Form onSubmit={(data) => mutation.mutate(data)}>\n      <Input name=\"baslik\" />\n      <Button type=\"submit\" disabled={mutation.isPending}>\n        {mutation.isPending ? 'Ekleniyor...' : 'Ekle'}\n      </Button>\n    </Form>\n  );\n}\n```\n\n**React Query v5 Değişiklikleri:**\n\n```typescript\n// v4 (eski)\nuseQuery(['gorevler'], fetchGorevler, {\n  onSuccess: (data) => console.log(data)\n});\n\n// v5 (yeni)\nuseQuery({\n  queryKey: ['/api/gorevler'],\n  // queryFn: fetchGorevler (artık global default)\n  // onSuccess deprecated, useMutation'da kullan\n});\n\n// v4: cacheTime\n// v5: gcTime (garbage collection time)\n\n// v4: useQuery(['key'], fn)\n// v5: useQuery({ queryKey: ['key'], queryFn: fn })\n```\n\n### 8. Tailwind CSS - Utility-First CSS\n\n**Tailwind CSS Nedir?**\n- **Basit Tanım:** Hazır CSS class'larıyla hızlı UI yapma framework'ü\n- **Felsefe:** Utility-first (her class tek bir şey yapar)\n- **İlk Çıkış:** 2017\n\n**Utility-First CSS Nedir?**\n\n**Geleneksel CSS:**\n```css\n/* style.css */\n.gorev-karti {\n  padding: 16px;\n  border: 1px solid #e5e7eb;\n  border-radius: 8px;\n  background-color: white;\n}\n\n.gorev-karti:hover {\n  background-color: #f9fafb;\n}\n```\n```html\n<div class=\"gorev-karti\">Görev</div>\n```\n\n**Tailwind CSS (Utility-First):**\n```html\n<div class=\"p-4 border border-gray-200 rounded-lg bg-white hover:bg-gray-50\">\n  Görev\n</div>\n```\n- **p-4:** padding: 1rem (16px)\n- **border:** border-width: 1px\n- **border-gray-200:** border-color: #e5e7eb\n- **rounded-lg:** border-radius: 0.5rem (8px)\n- **bg-white:** background-color: white\n- **hover:bg-gray-50:** hover'da background\n\n**Seçim Gerekçesi:**\n\n✅ **Rapid UI development:**\n- **Hızlı prototipleme:** CSS dosyası açmadan tasarım\n- **Örnek:** Buton rengi değiştir\n  ```html\n  <!-- Kırmızı → Yeşil (1 saniyede değişir) -->\n  <Button className=\"bg-red-500 hover:bg-red-700\">Sil</Button>\n  <Button className=\"bg-green-500 hover:bg-green-700\">Kaydet</Button>\n  ```\n\n✅ **No naming headaches:**\n- **Problem (BEM, CSS Modules):**\n  ```css\n  /* CSS modülü isim bulmak zor */\n  .task-card { }\n  .task-card__header { }\n  .task-card__header--active { }\n  ```\n- **Çözüm (Tailwind):**\n  ```html\n  <!-- İsim düşünmeye gerek yok -->\n  <div class=\"p-4 border\">\n    <div class=\"font-bold\">Başlık</div>\n  </div>\n  ```\n\n✅ **Production optimization (PurgeCSS):**\n- **Problem:** CSS dosyası çok büyük olabilir\n- **Çözüm:** Tailwind sadece kullanılan class'ları bundle'a ekler\n  ```\n  Development: tailwind.css (3.5MB - tüm utility class'lar)\n  Production: output.css (5KB - sadece kullanılanlar)\n  ```\n\n✅ **Responsive design kolaylığı:**\n```html\n<!-- Mobil: 1 kolon, Tablet: 2 kolon, Desktop: 4 kolon -->\n<div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n  <Card />\n  <Card />\n  <Card />\n  <Card />\n</div>\n\n<!-- Breakpoints:\n  - sm: 640px\n  - md: 768px\n  - lg: 1024px\n  - xl: 1280px\n  - 2xl: 1536px\n-->\n```\n\n**Tailwind vs Alternatifler:**\n\n❌ **Bootstrap:**\n- **Artıları:** Component-based (hazır buton, card, navbar)\n- **Eksileri:**\n  - Component-based (özelleştirmesi zor)\n  - jQuery dependency (eski versiyonlar)\n  - Her site aynı görünür\n- **Sonuç:** Tailwind daha flexible\n\n❌ **Material-UI:**\n- **Artıları:** Google Material Design, React-specific\n- **Eksileri:**\n  - Ağır bundle (200KB+)\n  - Material Design stuck (değiştirmesi zor)\n  - Runtime CSS-in-JS (performans)\n- **Sonuç:** Tailwind daha hafif\n\n❌ **Styled Components:**\n- **Artıları:** CSS-in-JS, component-scoped styles\n- **Eksileri:**\n  - Runtime overhead (CSS runtime'da oluşur)\n  - Bundle size büyük\n  - SSR karmaşık\n- **Sonuç:** Tailwind build-time\n\n**Tailwind Örneği:**\n\n```tsx\n// Geleneksel yöntem\n<div style={{\n  padding: '16px',\n  border: '1px solid #e5e7eb',\n  borderRadius: '8px',\n  backgroundColor: 'white',\n  boxShadow: '0 1px 3px rgba(0,0,0,0.1)'\n}}>\n  <h2 style={{ fontSize: '20px', fontWeight: 'bold' }}>Başlık</h2>\n  <p style={{ color: '#6b7280' }}>Açıklama</p>\n</div>\n\n// Tailwind yöntemi (daha okunabilir)\n<div className=\"p-4 border border-gray-200 rounded-lg bg-white shadow\">\n  <h2 className=\"text-xl font-bold\">Başlık</h2>\n  <p className=\"text-gray-500\">Açıklama</p>\n</div>\n```\n\n**Tailwind Class'ları:**\n\n```\nSPACING (boşluk):\n- p-4 = padding: 1rem (16px)\n- px-4 = padding-left + padding-right\n- py-4 = padding-top + padding-bottom\n- m-4 = margin: 1rem\n- space-x-4 = children arasında 1rem boşluk\n\nCOLORS (renkler):\n- bg-blue-500 = background mavi\n- text-red-500 = text kırmızı\n- border-gray-200 = border gri\n(50, 100, 200...900 = renk tonu)\n\nTYPOGRAPHY (yazı):\n- text-sm = 14px\n- text-base = 16px\n- text-xl = 20px\n- font-bold = kalın\n- italic = eğik\n\nLAYOUT:\n- flex = display: flex\n- grid = display: grid\n- block = display: block\n- hidden = display: none\n\nRESPONSIVE:\n- md:flex = 768px'den sonra flex\n- lg:grid = 1024px'den sonra grid\n\nINTERACTIVE:\n- hover:bg-blue-700 = hover'da koyu mavi\n- focus:ring-2 = focus'ta ring\n- disabled:opacity-50 = disabled'da soluk\n```\n\n### 9. shadcn/ui - Component Library\n\n**shadcn/ui Nedir?**\n- **Basit Tanım:** Kopyala-yapıştır React component'leri (npm dependency değil!)\n- **Felsefe:** Component'leri kendi projenize kopyalayın, istediğiniz gibi değiştirin\n- **İlk Çıkış:** 2023 (yeni ama çok popüler)\n\n**Geleneksel Component Library vs shadcn/ui:**\n\n**Geleneksel (Material-UI, Chakra UI):**\n```bash\nnpm install @mui/material\n```\n```tsx\nimport { Button } from '@mui/material';\n// node_modules'den gelir\n// Özelleştirmesi zor\n// Bundle size büyür\n```\n\n**shadcn/ui:**\n```bash\nnpx shadcn@latest add button\n```\n```tsx\nimport { Button } from '@/bilesenler/arayuz/button';\n// client/src/bilesenler/arayuz/button.tsx dosyasından gelir\n// Kendi kodun, istediğin gibi değiştir\n// Bundle size minimal (sadece kullandığın)\n```\n\n**Seçim Gerekçesi:**\n\n✅ **Copy-paste components:**\n- **npm dependency yok:**\n  ```bash\n  # shadcn/ui component ekle\n  npx shadcn@latest add dialog\n  \n  # Dosya oluşturulur:\n  client/src/bilesenler/arayuz/dialog.tsx\n  \n  # Artık kendi kodun, değiştirebilirsin\n  ```\n- **Avantajı:**\n  - Bundle size küçük\n  - Version conflict yok\n  - İstediğin gibi customize\n\n✅ **Full customization:**\n- **Tailwind based:** Tüm style'lar Tailwind class'ları\n- **Örnek:**\n  ```tsx\n  // button.tsx (shadcn component)\n  <button className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">\n    {children}\n  </button>\n  \n  // İstersen değiştir:\n  <button className=\"bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-xl\">\n    {children}\n  </button>\n  ```\n\n✅ **Accessible (Radix UI primitives):**\n- **Radix UI nedir?** Unstyled, accessible UI primitives\n- **shadcn/ui:** Radix UI + Tailwind CSS\n  ```tsx\n  // shadcn/ui Dialog komponenti\n  import * as DialogPrimitive from '@radix-ui/react-dialog';\n  \n  // Radix: Accessibility (keyboard, screen reader, ARIA)\n  // shadcn: Styling (Tailwind CSS)\n  ```\n- **Accessibility özellikleri:**\n  - Keyboard navigation (Tab, Enter, Escape)\n  - Screen reader support (ARIA labels)\n  - Focus management\n\n✅ **Modern design:**\n- **Tasarım:** Vercel Design System benzeri\n- **Dark mode:** Built-in dark mode desteği\n- **Responsive:** Mobil uyumlu\n\n**shadcn/ui vs Alternatifler:**\n\n❌ **Chakra UI:**\n- **Artıları:** Component-based, TypeScript support\n- **Eksileri:**\n  - npm dependency (35KB gzipped)\n  - Runtime CSS-in-JS\n  - Özelleştirmesi zor (theme override)\n- **Sonuç:** shadcn/ui daha hafif\n\n❌ **Ant Design:**\n- **Artıları:** Enterprise-grade, çok component\n- **Eksileri:**\n  - Çok ağır (500KB+)\n  - Çin tasarımı (batı sitelerine uymuyor)\n  - Özelleştirmesi çok zor\n- **Sonuç:** shadcn/ui daha modern\n\n❌ **Material-UI:**\n- **Artıları:** Google Material Design\n- **Eksileri:**\n  - Ağır (200KB)\n  - Material Design stuck\n  - Runtime CSS-in-JS\n- **Sonuç:** shadcn/ui daha flexible\n\n**Component Kullanımı:**\n\n```bash\n# Component listesi\nnpx shadcn@latest add\n\n# Belirli component ekle\nnpx shadcn@latest add button\nnpx shadcn@latest add dialog\nnpx shadcn@latest add form\nnpx shadcn@latest add select\nnpx shadcn@latest add toast\n```\n\n```tsx\n// Kullanım (client/src/sayfalar/Gorevler.tsx)\nimport { Button } from \"@/bilesenler/arayuz/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/bilesenler/arayuz/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/bilesenler/arayuz/select\";\n\nfunction GorevEkle() {\n  return (\n    <Dialog>\n      <DialogTrigger asChild>\n        <Button variant=\"default\">Görev Ekle</Button>\n      </DialogTrigger>\n      \n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>Yeni Görev</DialogTitle>\n        </DialogHeader>\n        \n        <form className=\"space-y-4\">\n          <Input name=\"baslik\" placeholder=\"Görev başlığı\" />\n          \n          <Select name=\"oncelik\">\n            <SelectTrigger>\n              <SelectValue placeholder=\"Öncelik seç\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"dusuk\">Düşük</SelectItem>\n              <SelectItem value=\"orta\">Orta</SelectItem>\n              <SelectItem value=\"yuksek\">Yüksek</SelectItem>\n            </SelectContent>\n          </Select>\n          \n          <Button type=\"submit\">Ekle</Button>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n```\n\n---\n\n## PACKAGE.JSON DETAYLI AÇIKLAMA\n\nPackage.json, projenin bağımlılıklarını, scriptlerini ve metadata'sını içeren config dosyasıdır.\n\n### Dependencies (Production - Canlı Ortamda Gerekli)\n\n#### Core Dependencies (Temel Bağımlılıklar)\n\n**1. express (^4.21.2)**\n```json\n\"express\": \"^4.21.2\"\n```\n- **Amaç:** HTTP server ve routing (yönlendirme)\n- **Kullanım:** REST API endpoints\n  - `GET /api/gorevler` → Tüm görevleri listele\n  - `POST /api/gorevler` → Yeni görev ekle\n  - `PUT /api/gorevler/:id` → Görevi güncelle\n  - `DELETE /api/gorevler/:id` → Görevi sil\n- **Version:** ^4.21.2\n  - `^` (caret): Minor ve patch güncellemeleri kabul (4.x.x)\n  - 4.21.2 → 4.22.0 olabilir ama 5.0.0 olamaz\n- **Alternatifsiz:** Express.js Node.js web app'lerde standard\n\n**2. dotenv (^17.2.2)**\n```json\n\"dotenv\": \"^17.2.2\"\n```\n- **Amaç:** Environment variables (çevre değişkenleri) yükleme\n- **Kullanım:** `.env` dosyasından secret'ları okur\n  ```\n  # .env dosyası\n  DATABASE_URL=postgresql://user:pass@host/db\n  EMAIL_USER=berat@gmail.com\n  OPENWEATHER_API_KEY=abc123\n  ```\n  ```typescript\n  // server/index.ts\n  import dotenv from 'dotenv';\n  dotenv.config(); // .env dosyasını process.env'e yükler\n  \n  console.log(process.env.DATABASE_URL);\n  ```\n- **Güvenlik:** `.env` dosyası `.gitignore`'da (git'e commit edilmez)\n- **Environment:** Development ve production farklı .env kullanır\n\n**3. @neondatabase/serverless (^0.10.4)**\n```json\n\"@neondatabase/serverless\": \"^0.10.4\"\n```\n- **Amaç:** Neon PostgreSQL cloud database bağlantısı\n- **Neon nedir?** Serverless PostgreSQL (AWS Lambda uyumlu)\n- **Özellikler:**\n  - Auto-scaling (ihtiyaç kadar kaynak)\n  - Connection pooling (bağlantı havuzu)\n  - Instant branching (test için kopya DB)\n- **Kullanım (Replit ortamında):**\n  ```typescript\n  import { neon } from '@neondatabase/serverless';\n  \n  const sql = neon(process.env.DATABASE_URL);\n  const result = await sql`SELECT * FROM gorevler`;\n  ```\n- **Electron'da:** Kullanılmaz (JSON file storage)\n\n#### React Ecosystem (React Ekosistemi)\n\n**4. react + react-dom (^18.3.1)**\n```json\n\"react\": \"^18.3.1\",\n\"react-dom\": \"^18.3.1\"\n```\n- **react:** Core library (useState, useEffect, component logic)\n- **react-dom:** Browser DOM manipulation (ReactDOM.render)\n- **React 18 Özellikleri:**\n  - **Concurrent rendering:** UI'ı bloklamadan render\n  - **Automatic batching:** Birden fazla setState birleştirilir (performans)\n  - **Transitions API:** Öncelikli vs background update\n    ```tsx\n    startTransition(() => {\n      setAramaMetni(input.value);\n    });\n    ```\n  - **Suspense improvements:** Data fetching için Suspense\n    ```tsx\n    <Suspense fallback={<Loading />}>\n      <DataComponent />\n    </Suspense>\n    ```\n\n**5. @tanstack/react-query (^5.60.5)**\n```json\n\"@tanstack/react-query\": \"^5.60.5\"\n```\n- **Eski adı:** react-query\n- **Yeni adı:** @tanstack/react-query (framework-agnostic)\n- **Amaç:** Server state management\n- **Özellikler:**\n  - **Automatic caching:** Fetch sonuçları cache'lenir\n  - **Background refetching:** Arka planda yenileme\n  - **Optimistic updates:** UI anında güncellenir, sonra API call\n  - **Dev tools:** Query durumlarını görselleştirme\n- **v5 Değişiklikleri:**\n  ```typescript\n  // v4\n  useQuery(['key'], fetchFn, { onSuccess, onError });\n  \n  // v5\n  useQuery({ queryKey: ['key'], queryFn: fetchFn });\n  // onSuccess/onError deprecated\n  ```\n\n**6. wouter (^3.3.5)**\n```json\n\"wouter\": \"^3.3.5\"\n```\n- **Amaç:** Client-side routing (SPA için sayfa yönlendirme)\n- **Neden React Router değil?**\n  - **Boyut:** wouter 2KB, React Router 20KB (10x küçük!)\n  - **API:** Hooks-based, modern\n  - **Yeterli:** Bu projenin ihtiyacını karşılıyor\n- **Kullanım:**\n  ```tsx\n  import { Route, Switch, Link, useLocation } from 'wouter';\n  \n  function App() {\n    return (\n      <Switch>\n        <Route path=\"/\" component={AnaSayfa} />\n        <Route path=\"/gorevler\" component={Gorevler} />\n        <Route path=\"/denemeler\" component={Denemeler} />\n        <Route path=\"/analiz\" component={Analiz} />\n      </Switch>\n    );\n  }\n  \n  // Navigation\n  <Link href=\"/gorevler\">Görevler</Link>\n  \n  // Programmatic navigation\n  const [location, setLocation] = useLocation();\n  setLocation('/gorevler');\n  ```\n\n#### UI & Styling (Arayüz ve Stillendirme)\n\n**7. tailwindcss + autoprefixer + postcss**\n```json\n\"tailwindcss\": \"latest\",\n\"autoprefixer\": \"latest\",\n\"postcss\": \"latest\"\n```\n- **tailwindcss:** Utility-first CSS framework\n- **postcss:** CSS processing pipeline (transform, optimize)\n- **autoprefixer:** Vendor prefix'leri otomatik ekler\n  ```css\n  /* Yazdığın: */\n  .box {\n    display: flex;\n  }\n  \n  /* autoprefixer output: */\n  .box {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n  }\n  ```\n- **Build process:**\n  ```\n  Tailwind CSS (@apply, utilities)\n    ↓ PostCSS\n  Browser-compatible CSS\n    ↓ Autoprefixer\n  Cross-browser CSS (vendor prefixes)\n    ↓ PurgeCSS (production)\n  Optimized CSS (unused removed)\n  ```\n\n**8. @radix-ui/* (25+ paket)**\n```json\n\"@radix-ui/react-dialog\": \"^1.1.7\",\n\"@radix-ui/react-select\": \"^2.1.7\",\n\"@radix-ui/react-checkbox\": \"^1.1.5\",\n\"@radix-ui/react-toast\": \"^1.2.5\",\n// ... 20+ daha\n```\n- **Radix UI nedir?** Unstyled, accessible UI primitives\n- **Unstyled:** Sadece logic/accessibility, style sen ekle (Tailwind ile)\n- **Accessible:** WAI-ARIA uyumlu\n  - **Keyboard navigation:** Tab, Enter, Escape, Arrow keys\n  - **Screen reader:** ARIA labels, roles\n  - **Focus management:** Otomatik focus trap\n- **Örnek (Dialog):**\n  ```tsx\n  import * as Dialog from '@radix-ui/react-dialog';\n  \n  <Dialog.Root>\n    <Dialog.Trigger>Aç</Dialog.Trigger>\n    <Dialog.Portal>\n      <Dialog.Overlay className=\"fixed inset-0 bg-black/50\" />\n      <Dialog.Content className=\"fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-white p-6 rounded-lg\">\n        <Dialog.Title>Başlık</Dialog.Title>\n        <Dialog.Description>Açıklama</Dialog.Description>\n        <Dialog.Close>Kapat</Dialog.Close>\n      </Dialog.Content>\n    </Dialog.Portal>\n  </Dialog.Root>\n  \n  // Otomatik:\n  // - Escape tuşuyla kapanır\n  // - Overlay'e tıklayınca kapanır\n  // - Focus trap (Tab dialog içinde kalır)\n  // - Screen reader announcement\n  ```\n\n**9. lucide-react (^0.453.0)**\n```json\n\"lucide-react\": \"^0.453.0\"\n```\n- **Amaç:** Icon library (simge kütüphanesi)\n- **Özellikler:**\n  - **1000+ icons:** Check, X, Plus, Trash, Edit, User, Calendar vs.\n  - **Tree-shakeable:** Sadece kullandığın icon'lar bundle'a girer\n  - **Customizable:** Size, color, stroke width\n- **Kullanım:**\n  ```tsx\n  import { Check, X, Plus, Trash2, Calendar, User } from 'lucide-react';\n  \n  <Button>\n    <Plus className=\"w-4 h-4 mr-2\" />\n    Yeni Görev\n  </Button>\n  \n  <Button variant=\"destructive\">\n    <Trash2 className=\"w-4 h-4 mr-2\" />\n    Sil\n  </Button>\n  ```\n\n#### Form & Validation (Form ve Doğrulama)\n\n**10. react-hook-form (^7.55.0)**\n```json\n\"react-hook-form\": \"^7.55.0\"\n```\n- **Amaç:** Form state management (form yönetimi)\n- **Özellikler:**\n  - **Minimal re-renders:** Sadece değişen input re-render olur\n  - **Built-in validation:** Required, min, max, pattern\n  - **Easy Zod integration:** zodResolver ile type-safe validation\n- **Kullanım:**\n  ```tsx\n  import { useForm } from 'react-hook-form';\n  \n  function GorevFormu() {\n    const { register, handleSubmit, formState: { errors } } = useForm({\n      defaultValues: {\n        baslik: '',\n        oncelik: 'orta'\n      }\n    });\n    \n    const onSubmit = (data) => {\n      console.log(data); // { baslik: '...', oncelik: '...' }\n    };\n    \n    return (\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <input {...register('baslik', { required: 'Başlık gerekli' })} />\n        {errors.baslik && <span>{errors.baslik.message}</span>}\n        \n        <select {...register('oncelik')}>\n          <option value=\"dusuk\">Düşük</option>\n          <option value=\"orta\">Orta</option>\n          <option value=\"yuksek\">Yüksek</option>\n        </select>\n        \n        <button type=\"submit\">Ekle</button>\n      </form>\n    );\n  }\n  ```\n\n**11. zod + zod-validation-error (^3.24.2 + ^3.4.0)**\n```json\n\"zod\": \"^3.24.2\",\n\"zod-validation-error\": \"^3.4.0\"\n```\n- **zod:** Runtime type validation (çalışma zamanı tip doğrulama)\n- **zod-validation-error:** Zod hatalarını user-friendly mesajlara çevirir\n- **Kullanım:**\n  ```typescript\n  import { z } from 'zod';\n  \n  const gorevSchema = z.object({\n    baslik: z.string().min(1, 'Başlık boş olamaz').max(100, 'Maksimum 100 karakter'),\n    oncelik: z.enum(['dusuk', 'orta', 'yuksek']),\n    son_tarih: z.date().optional()\n  });\n  \n  // Type inference\n  type Gorev = z.infer<typeof gorevSchema>;\n  // { baslik: string, oncelik: 'dusuk' | 'orta' | 'yuksek', son_tarih?: Date }\n  \n  // Validation\n  const result = gorevSchema.safeParse({\n    baslik: '',\n    oncelik: 'invalid'\n  });\n  \n  if (!result.success) {\n    console.log(result.error);\n    // ZodError: baslik boş olamaz, oncelik invalid\n  }\n  ```\n\n**12. @hookform/resolvers (^3.10.0)**\n```json\n\"@hookform/resolvers\": \"^3.10.0\"\n```\n- **Amaç:** react-hook-form + Zod entegrasyonu\n- **Kullanım:**\n  ```tsx\n  import { useForm } from 'react-hook-form';\n  import { zodResolver } from '@hookform/resolvers/zod';\n  import { z } from 'zod';\n  \n  const schema = z.object({\n    baslik: z.string().min(1),\n    oncelik: z.enum(['dusuk', 'orta', 'yuksek'])\n  });\n  \n  function Form() {\n    const { register, handleSubmit } = useForm({\n      resolver: zodResolver(schema) // Zod validation otomatik!\n    });\n    \n    return (\n      <form onSubmit={handleSubmit(data => console.log(data))}>\n        <input {...register('baslik')} />\n        <select {...register('oncelik')}>\n          <option value=\"dusuk\">Düşük</option>\n        </select>\n        <button type=\"submit\">Gönder</button>\n      </form>\n    );\n  }\n  ```\n\n#### Database & ORM (Veritabanı ve ORM)\n\n**13. drizzle-orm + drizzle-zod (^0.39.1 + ^0.7.0)**\n```json\n\"drizzle-orm\": \"^0.39.1\",\n\"drizzle-zod\": \"^0.7.0\"\n```\n- **drizzle-orm:** Type-safe SQL ORM\n- **drizzle-zod:** Drizzle schema → Zod schema converter\n- **Kullanım:**\n  ```typescript\n  // 1. Drizzle schema (shared/sema.ts)\n  export const gorevler = pgTable(\"gorevler\", {\n    id: varchar(\"id\").primaryKey(),\n    baslik: text(\"baslik\").notNull()\n  });\n  \n  // 2. Zod schema oluştur\n  import { createInsertSchema } from 'drizzle-zod';\n  export const insertGorevSchema = createInsertSchema(gorevler).omit({ id: true });\n  \n  // 3. API'de validate\n  app.post('/api/gorevler', async (req, res) => {\n    const parsed = insertGorevSchema.parse(req.body); // Hata fırlatır if invalid\n    const yeniGorev = await storage.gorevEkle(parsed);\n    res.json(yeniGorev);\n  });\n  ```\n\n**14. drizzle-kit (dev-dependency)**\n```json\n\"drizzle-kit\": \"latest\"\n```\n- **Amaç:** Database migrations (veritabanı değişiklik yönetimi)\n- **Komutlar:**\n  ```bash\n  # 1. Migration generate (schema değişikliğinden SQL oluştur)\n  npm run db:generate\n  # → drizzle/0001_add_etiketler.sql\n  \n  # 2. Migration push (SQL'i DB'ye uygula)\n  npm run db:push\n  # → ALTER TABLE gorevler ADD COLUMN etiketler text[];\n  \n  # 3. Schema pull (DB'den Drizzle schema oluştur)\n  npx drizzle-kit introspect\n  # → Mevcut DB'yi Drizzle schema'ya çevir\n  ```\n\n#### Utilities (Yardımcı Araçlar)\n\n**15. date-fns (^3.6.0)**\n```json\n\"date-fns\": \"^3.6.0\"\n```\n- **Amaç:** Date manipulation (tarih işlemleri)\n- **Neden moment.js değil?** Moment.js deprecated (2020'de destek kesildi)\n- **Avantajlar:**\n  - **Tree-shakeable:** Sadece kullandığın fonksiyonlar bundle'a girer\n  - **Immutable:** Date'leri mutate etmez (yan etki yok)\n  - **TypeScript:** Tam tip desteği\n- **Kullanım:**\n  ```typescript\n  import { format, addDays, isBefore, differenceInDays, startOfWeek } from 'date-fns';\n  import { tr } from 'date-fns/locale';\n  \n  // Format\n  const tarih = new Date();\n  format(tarih, 'dd MMMM yyyy', { locale: tr }); // \"31 Ekim 2025\"\n  format(tarih, 'dd/MM/yyyy'); // \"31/10/2025\"\n  \n  // Ekleme/çıkarma\n  const yarin = addDays(tarih, 1);\n  const gecenHafta = addDays(tarih, -7);\n  \n  // Karşılaştırma\n  isBefore(tarih, yarin); // true\n  \n  // Fark hesaplama\n  differenceInDays(yarin, tarih); // 1\n  \n  // Hafta başlangıcı\n  startOfWeek(tarih, { locale: tr }); // Pazartesi\n  ```\n\n**16. nanoid (^5.1.6)**\n```json\n\"nanoid\": \"^5.1.6\"\n```\n- **Amaç:** Unique ID generation (benzersiz kimlik oluşturma)\n- **Özellikler:**\n  - **21 karakter:** URL-safe (-, _ içerir)\n  - **Collision-free:** 1 milyon ID/saniye 1 yıl çalışsa collision riski %1\n  - **Güvenli:** Crypto API kullanır (random değil, cryptographic random)\n- **UUID vs nanoid:**\n  ```\n  UUID v4: 550e8400-e29b-41d4-a716-446655440000 (36 karakter)\n  nanoid:  V1StGXR8_Z5jdHi6B-myT (21 karakter, 40% daha kısa)\n  ```\n- **Kullanım:**\n  ```typescript\n  import { nanoid } from 'nanoid';\n  \n  const gorevId = nanoid(); // \"V1StGXR8_Z5jdHi6B-myT\"\n  const kisa = nanoid(10); // \"V1StGXR8_Z\" (custom length)\n  ```\n\n**17. clsx + tailwind-merge (^2.1.1 + ^2.6.0)**\n```json\n\"clsx\": \"^2.1.1\",\n\"tailwind-merge\": \"^2.6.0\"\n```\n- **clsx:** Conditional className'ler (şartlı class ekle/çıkar)\n- **tailwind-merge:** Çakışan Tailwind class'larını merge eder\n- **cn utility (her ikisini birleştirir):**\n  ```typescript\n  // client/src/kutuphane/utils.ts\n  import { clsx } from 'clsx';\n  import { twMerge } from 'tailwind-merge';\n  \n  export function cn(...inputs: ClassValue[]) {\n    return twMerge(clsx(inputs));\n  }\n  ```\n- **Kullanım:**\n  ```tsx\n  import { cn } from '@/kutuphane/utils';\n  \n  // clsx: Conditional classes\n  <Button className={cn(\n    \"bg-blue-500\",\n    isDisabled && \"opacity-50 cursor-not-allowed\",\n    isLoading && \"animate-pulse\"\n  )} />\n  \n  // tailwind-merge: Conflicting classes\n  <Button className={cn(\n    \"bg-blue-500\", // Bu silinir\n    \"bg-red-500\"   // Bu kalır (son yazılan geçerli)\n  )} />\n  // Sonuç: bg-red-500\n  \n  // Merge olmazsa: bg-blue-500 bg-red-500 (her ikisi de uygulanır, beklenmedik sonuç)\n  ```\n\n---\n\n## BÖLÜM 12: EMAIL & COMMUNICATION PAKETLERİ\n\n### 12.1 @sendgrid/mail\n\n```json\n\"@sendgrid/mail\": \"^8.1.4\"\n```\n\n**SendGrid Nedir?**\n- **Basit Tanım:** Email gönderme servisi (transactional email)\n- **Transactional Email:** Kullanıcı aksiyonundan sonra otomatik gönderilen emailler\n- **Örnekler:**\n  - Kayıt doğrulama (verification email)\n  - Şifre sıfırlama\n  - Hatırlatma bildirimleri\n  - Görev deadline uyarıları\n\n**Kullanım Örneği:**\n```typescript\nimport sgMail from '@sendgrid/mail';\n\nsgMail.setApiKey(process.env.SENDGRID_API_KEY!);\n\n// Email gönder\nawait sgMail.send({\n  to: 'ogrenci@example.com',\n  from: 'noreply@yksanaliz.com',\n  subject: 'Görev Deadline Uyarısı',\n  html: `\n    <h1>Merhaba!</h1>\n    <p>Matematik Türev görevi yarın bitiyor!</p>\n    <a href=\"https://app.yksanaliz.com/gorevler\">Görevleri Gör</a>\n  `\n});\n```\n\n**SendGrid vs Alternatifler:**\n\n| Özellik | SendGrid | Nodemailer (SMTP) | AWS SES |\n|---------|----------|-------------------|---------|\n| **Kurulum** | Kolay (API key) | Karmaşık (SMTP config) | Orta (AWS setup) |\n| **Fiyat** | 100 email/gün ücretsiz | Kendi SMTP server'ı gerekir | 62,000 email/ay ücretsiz |\n| **Deliverability** | Çok iyi ✅ | SMTP'ye bağlı | Çok iyi ✅ |\n| **Analytics** | Var (açılma, tıklama) | Yok ❌ | Var |\n| **Template** | Var | Kendin yap ❌ | Var |\n\n**Neden SendGrid?**\n- ✅ Setup kolay (5 dakika)\n- ✅ Free tier yeterli (100 email/gün)\n- ✅ Email template'leri\n- ✅ Analytics dahil\n\n**Örnek Senaryo:**\n```typescript\n// server/rotalar.ts\napp.post('/api/gorevler/:id/hatirlatma', async (req, res) => {\n  const gorev = await storage.gorevGetir(req.params.id);\n  \n  await sgMail.send({\n    to: req.user.email,\n    from: 'noreply@yksanaliz.com',\n    templateId: 'd-1234567890', // SendGrid template ID\n    dynamicTemplateData: {\n      gorevBaslik: gorev.baslik,\n      deadline: gorev.bitisTarihi,\n      link: `https://app.yksanaliz.com/gorevler/${gorev.id}`\n    }\n  });\n  \n  res.json({ success: true });\n});\n```\n\n### 12.2 nodemailer\n\n```json\n\"nodemailer\": \"^6.9.16\"\n```\n\n**Nodemailer Nedir?**\n- **Basit Tanım:** Node.js için email gönderme kütüphanesi (SMTP, SendGrid, Gmail destekler)\n- **SMTP nedir?** Simple Mail Transfer Protocol - Email gönderme protokolü\n- **Avantaj:** Her SMTP server ile çalışır (kendi server'ınızı kullanabilirsiniz)\n\n**Kullanım Örnekleri:**\n\n**1. Gmail ile Email Gönderme:**\n```typescript\nimport nodemailer from 'nodemailer';\n\nconst transporter = nodemailer.createTransport({\n  service: 'gmail',\n  auth: {\n    user: 'yksanaliz@gmail.com',\n    pass: process.env.GMAIL_APP_PASSWORD // App-specific password\n  }\n});\n\nawait transporter.sendMail({\n  from: 'YKS Analiz <yksanaliz@gmail.com>',\n  to: 'ogrenci@example.com',\n  subject: 'Haftalık Rapor',\n  html: `\n    <h1>Bu Haftanın Özeti</h1>\n    <p>Toplam çalışma saati: 25 saat</p>\n    <p>Çözülen soru: 500</p>\n  `\n});\n```\n\n**2. Kendi SMTP Server ile:**\n```typescript\nconst transporter = nodemailer.createTransport({\n  host: 'smtp.example.com',\n  port: 587,\n  secure: false, // true for 465, false for other ports\n  auth: {\n    user: 'username',\n    pass: 'password'\n  }\n});\n```\n\n**SendGrid vs Nodemailer:**\n- **SendGrid:** API-based, daha kolay, analytics var\n- **Nodemailer:** SMTP-based, her server ile çalışır, daha esnek\n\n**Hangisini Kullanıyoruz?**\nBu projede **her ikisi de** var:\n- **SendGrid:** Production (canlı) email'ler için\n- **Nodemailer:** Development (test) email'leri için\n\n**Development Email Testi:**\n```typescript\n// Development'ta console'a yaz, email gönderme\nif (process.env.NODE_ENV === 'development') {\n  console.log('EMAIL GÖNDERILECEKTI:');\n  console.log('To:', emailData.to);\n  console.log('Subject:', emailData.subject);\n} else {\n  // Production'da gerçek email gönder\n  await sgMail.send(emailData);\n}\n```\n\n---\n\n## BÖLÜM 13: CHARTS & VISUALIZATION\n\n### 13.1 Recharts\n\n```json\n\"recharts\": \"^2.13.3\"\n```\n\n**Recharts Nedir?**\n- **Basit Tanım:** React için chart (grafik) kütüphanesi\n- **D3.js tabanlı:** D3 (Data-Driven Documents) en güçlü visualization library\n- **Declarative:** JSX ile grafik tanımlama (kolay, anlaşılır)\n\n**Supported Chart Types:**\n1. Line Chart (Çizgi grafiği)\n2. Bar Chart (Bar grafiği)\n3. Area Chart (Alan grafiği)\n4. Pie Chart (Pasta grafiği)\n5. Scatter Chart (Dağılım grafiği)\n6. Radar Chart (Radar grafiği)\n7. Composed Chart (Karma grafik)\n\n**Örnek Kullanım:**\n\n**1. Net Gelişim Grafiği (Line Chart):**\n```tsx\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\n\n// Veri\nconst netData = [\n  { tarih: '01 Eki', tyt: 75, ayt: 60 },\n  { tarih: '08 Eki', tyt: 78, ayt: 62 },\n  { tarih: '15 Eki', tyt: 80, ayt: 65 },\n  { tarih: '22 Eki', tyt: 82, ayt: 68 },\n  { tarih: '29 Eki', tyt: 85, ayt: 70 }\n];\n\n// Grafik\nfunction NetGelisimGrafigi() {\n  return (\n    <LineChart width={800} height={400} data={netData}>\n      <CartesianGrid strokeDasharray=\"3 3\" />\n      <XAxis dataKey=\"tarih\" />\n      <YAxis />\n      <Tooltip />\n      <Legend />\n      <Line type=\"monotone\" dataKey=\"tyt\" stroke=\"#3B82F6\" name=\"TYT Net\" />\n      <Line type=\"monotone\" dataKey=\"ayt\" stroke=\"#EF4444\" name=\"AYT Net\" />\n    </LineChart>\n  );\n}\n```\n\n**2. Ders Dağılımı (Pie Chart):**\n```tsx\nimport { PieChart, Pie, Cell, Tooltip, Legend } from 'recharts';\n\nconst dersData = [\n  { ders: 'Matematik', saat: 120 },\n  { ders: 'Fizik', saat: 80 },\n  { ders: 'Kimya', saat: 60 },\n  { ders: 'Biyoloji', saat: 50 }\n];\n\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042'];\n\nfunction DersDagilimi() {\n  return (\n    <PieChart width={400} height={400}>\n      <Pie\n        data={dersData}\n        dataKey=\"saat\"\n        nameKey=\"ders\"\n        cx=\"50%\"\n        cy=\"50%\"\n        outerRadius={100}\n        label\n      >\n        {dersData.map((entry, index) => (\n          <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n        ))}\n      </Pie>\n      <Tooltip />\n      <Legend />\n    </PieChart>\n  );\n}\n```\n\n**3. Günlük Çalışma Saati (Bar Chart):**\n```tsx\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\n\nconst calismaSaatleri = [\n  { gun: 'Pzt', saat: 8 },\n  { gun: 'Sal', saat: 6 },\n  { gun: 'Çar', saat: 7 },\n  { gun: 'Per', saat: 9 },\n  { gun: 'Cum', saat: 5 },\n  { gun: 'Cmt', saat: 10 },\n  { gun: 'Paz', saat: 4 }\n];\n\nfunction GunlukCalismaGrafigi() {\n  return (\n    <BarChart width={600} height={300} data={calismaSaatleri}>\n      <CartesianGrid strokeDasharray=\"3 3\" />\n      <XAxis dataKey=\"gun\" />\n      <YAxis />\n      <Tooltip />\n      <Bar dataKey=\"saat\" fill=\"#8884d8\" />\n    </BarChart>\n  );\n}\n```\n\n**Neden Recharts?**\n\n| Özellik | Recharts | Chart.js | Victory |\n|---------|----------|----------|---------|\n| **React Integration** | Mükemmel ✅ | Wrapper gerekir | İyi |\n| **Declarative** | Evet ✅ | Imperative ❌ | Evet ✅ |\n| **TypeScript** | Tam destek ✅ | Kısmi destek | Tam destek ✅ |\n| **Bundle Size** | Orta (400KB) | Küçük (200KB) | Büyük (600KB) |\n| **Customization** | Çok iyi ✅ | İyi | Çok iyi ✅ |\n| **Öğrenme** | Kolay ✅ | Orta | Orta |\n\n**Seçim:** Recharts → React-friendly, declarative, TypeScript support\n\n### 13.2 embla-carousel-react\n\n```json\n\"embla-carousel-react\": \"^8.5.2\"\n```\n\n**Embla Carousel Nedir?**\n- **Basit Tanım:** React için carousel (kaydırmalı galeri) kütüphanesi\n- **Carousel nedir?** Yan yana slayt gösteren, kaydırılabilen component\n- **Kullanım Yerleri:**\n  - Deneme sonuçları kartları\n  - Görev önizlemeleri\n  - Öğretici slides\n\n**Özellikler:**\n- ✅ Touch/swipe desteği (mobil)\n- ✅ Keyboard navigation (ok tuşları)\n- ✅ Auto-play\n- ✅ Loop (sonsuz döngü)\n- ✅ Responsive (her ekran boyutunda çalışır)\n\n**Örnek Kullanım:**\n```tsx\nimport useEmblaCarousel from 'embla-carousel-react';\n\nfunction DenemeSonuclariCarousel({ denemeler }) {\n  const [emblaRef] = useEmblaCarousel({ loop: true });\n\n  return (\n    <div className=\"embla\" ref={emblaRef}>\n      <div className=\"embla__container\">\n        {denemeler.map((deneme) => (\n          <div key={deneme.id} className=\"embla__slide\">\n            <DenemeKarti deneme={deneme} />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n```\n\n**CSS:**\n```css\n.embla {\n  overflow: hidden;\n}\n.embla__container {\n  display: flex;\n}\n.embla__slide {\n  flex: 0 0 100%;\n  min-width: 0;\n}\n```\n\n---\n\n## BÖLÜM 14: TESTING KÜTÜPHANELERİ\n\n### 14.1 Vitest\n\n```json\n\"vitest\": \"^2.1.8\"\n```\n\n**Vitest Nedir?**\n- **Basit Tanım:** Vite tabanlı test framework (Jest'in modern alternatifi)\n- **Test nedir?** Kodunuzun doğru çalıştığını otomatik kontrol etme\n- **Unit Test:** Bir fonksiyonun testi\n- **Integration Test:** Birden fazla parçanın birlikte testi\n\n**Neden Vitest?**\n\n| Özellik | Vitest | Jest |\n|---------|--------|------|\n| **Hız** | Çok hızlı ✅ | Yavaş ❌ |\n| **Vite Integration** | Native ✅ | Wrapper gerekir |\n| **ESM Support** | Tam ✅ | Kısmi |\n| **Watch Mode** | Instant ✅ | Yavaş |\n| **TypeScript** | Zero-config ✅ | Config gerekir |\n\n**Test Örneği:**\n```typescript\n// server/depolama.test.ts\nimport { describe, it, expect, beforeEach } from 'vitest';\nimport { MemStorage } from './depolama';\n\ndescribe('MemStorage', () => {\n  let storage: MemStorage;\n\n  beforeEach(() => {\n    storage = new MemStorage();\n  });\n\n  it('görev ekler', async () => {\n    const gorev = await storage.gorevEkle({\n      baslik: 'Test Görevi',\n      oncelik: 'yuksek',\n      kategori: 'matematik'\n    });\n\n    expect(gorev.id).toBeDefined();\n    expect(gorev.baslik).toBe('Test Görevi');\n    expect(gorev.tamamlandi).toBe(false);\n  });\n\n  it('görev toggle yapar', async () => {\n    const gorev = await storage.gorevEkle({ baslik: 'Test' });\n    const toggled = await storage.gorevToggle(gorev.id);\n\n    expect(toggled.tamamlandi).toBe(true);\n  });\n});\n```\n\n**Çalıştırma:**\n```bash\nnpm run test        # Tüm testleri çalıştır\nnpm run test:watch  # Watch mode (dosya değişince otomatik test)\nnpm run test:ui     # Web UI ile test\n```\n\n### 14.2 @playwright/test\n\n```json\n\"@playwright/test\": \"^1.49.1\"\n```\n\n**Playwright Nedir?**\n- **Basit Tanım:** End-to-end (E2E) test framework\n- **E2E Test nedir?** Gerçek kullanıcı gibi tüm uygulamayı test etme\n- **Microsoft tarafından:** VSCode test etmek için yapıldı\n\n**E2E Test Örneği:**\n```typescript\n// tests/gorev-ekle.spec.ts\nimport { test, expect } from '@playwright/test';\n\ntest('yeni görev ekleme', async ({ page }) => {\n  // 1. Sayfaya git\n  await page.goto('http://localhost:5000/gorevler');\n  \n  // 2. \"Yeni Görev\" butonuna tıkla\n  await page.click('[data-testid=\"button-yeni-gorev\"]');\n  \n  // 3. Formu doldur\n  await page.fill('[data-testid=\"input-baslik\"]', 'Matematik Çalış');\n  await page.selectOption('[data-testid=\"select-oncelik\"]', 'yuksek');\n  \n  // 4. Kaydet\n  await page.click('[data-testid=\"button-kaydet\"]');\n  \n  // 5. Toast mesajını kontrol et\n  await expect(page.locator('[data-testid=\"toast\"]')).toContainText('Görev eklendi');\n  \n  // 6. Görevin listede göründüğünü kontrol et\n  await expect(page.locator('text=Matematik Çalış')).toBeVisible();\n});\n```\n\n**Playwright Özellikleri:**\n- ✅ Multi-browser (Chrome, Firefox, Safari, Edge)\n- ✅ Auto-wait (element hazır olana kadar bekler)\n- ✅ Screenshot + video recording\n- ✅ Network interception (API mock)\n- ✅ Parallel test execution (çok hızlı)\n\n**Test Senaryoları:**\n```typescript\n// tests/deneme-kayit.spec.ts\ntest('deneme sonucu kaydetme', async ({ page }) => {\n  await page.goto('/denemeler');\n  await page.click('[data-testid=\"button-yeni-deneme\"]');\n  \n  // Form doldur\n  await page.fill('[data-testid=\"input-deneme-adi\"]', 'TYT Deneme 5');\n  await page.fill('[data-testid=\"input-tyt-matematik\"]', '32');\n  await page.fill('[data-testid=\"input-tyt-turkce\"]', '28');\n  \n  // Kaydet ve grafik kontrolü\n  await page.click('[data-testid=\"button-kaydet\"]');\n  await expect(page.locator('canvas')).toBeVisible(); // Grafik render\n});\n```\n\n### 14.3 @axe-core/playwright\n\n```json\n\"@axe-core/playwright\": \"^4.10.2\"\n```\n\n**Axe Nedir?**\n- **Basit Tanım:** Accessibility (erişilebilirlik) test aracı\n- **Accessibility nedir?** Engelli kullanıcıların (görme engelli, işitme engelli) uygulamayı kullanabilmesi\n- **WCAG:** Web Content Accessibility Guidelines (standart)\n\n**Test Örneği:**\n```typescript\nimport { test } from '@playwright/test';\nimport { injectAxe, checkA11y } from '@axe-core/playwright';\n\ntest('accessibility check', async ({ page }) => {\n  await page.goto('/gorevler');\n  \n  // Axe'i sayfaya enjekte et\n  await injectAxe(page);\n  \n  // Accessibility kontrol et\n  await checkA11y(page);\n});\n```\n\n**Kontrol Edilen Şeyler:**\n- ✅ Alt text (image'lerde)\n- ✅ Color contrast (yazı okunaklı mı?)\n- ✅ Keyboard navigation (tab ile gezinme)\n- ✅ ARIA labels (screen reader desteği)\n- ✅ Form labels (input'ların label'ı var mı?)\n\n**Neden Önemli?**\n- 15% nüfus engelli (WHO verisi)\n- Yasal gereklilik (birçok ülkede)\n- SEO + (Google accessibility'yi önemser)\n- Daha iyi UX (herkes için)\n\n---\n\n## BÖLÜM 15: ELECTRON-SPECIFIC PAKETLER\n\n### 15.1 electron\n\n```json\n\"electron\": \"latest\"\n```\n\n**Versiyonlama:**\n- **latest:** Her zaman en yeni version\n- **Avantaj:** Son Chromium features\n- **Dezavantaj:** Breaking changes riski\n\n**Electron Lifecycle:**\n```\n1. app.on('ready') → Uygulama başladı\n2. createWindow() → Ana pencere oluştur\n3. app.on('window-all-closed') → Tüm pencereler kapandı\n4. app.on('before-quit') → Uygulama kapanmadan önce\n5. app.quit() → Uygulamayı kapat\n```\n\n### 15.2 electron-builder\n\n```json\n\"electron-builder\": \"^25.1.8\"\n```\n\n**Electron Builder Nedir?**\n- **Basit Tanım:** Electron uygulamasını paketleme ve installer oluşturma aracı\n- **Output:** .exe (Windows), .dmg (macOS), .AppImage (Linux)\n\n**Konfigürasyon:**\n```json\n{\n  \"build\": {\n    \"appId\": \"com.beratcankir.yksanaliz\",\n    \"productName\": \"YKS Analiz Takip Sistemi\",\n    \"directories\": {\n      \"output\": \"release\"\n    },\n    \"files\": [\n      \"dist/**/*\",\n      \"electron/**/*\",\n      \"server/**/*\"\n    ],\n    \"win\": {\n      \"target\": \"nsis\",\n      \"icon\": \"build/icon.ico\"\n    },\n    \"mac\": {\n      \"target\": \"dmg\",\n      \"icon\": \"build/icon.icns\"\n    },\n    \"linux\": {\n      \"target\": \"AppImage\",\n      \"icon\": \"build/icon.png\"\n    }\n  }\n}\n```\n\n**Build Komutu:**\n```bash\nnpm run build       # Vite build (dist/ oluştur)\nnpm run package     # Electron builder (installer oluştur)\n```\n\n**Output:**\n```\nrelease/\n├── YKS-Analiz-Setup-1.0.0.exe     (Windows installer - 150MB)\n├── YKS-Analiz-1.0.0.dmg           (macOS disk image - 140MB)\n└── YKS-Analiz-1.0.0.AppImage      (Linux portable - 145MB)\n```\n\n### 15.3 electron-updater\n\n```json\n\"electron-updater\": \"^6.3.9\"\n```\n\n**Auto-Updater Nedir?**\n- **Basit Tanım:** Uygulamanın otomatik güncellenmesi\n- **Kullanıcı deneyimi:** Chrome gibi otomatik update\n\n**Nasıl Çalışır?**\n```\n1. Uygulama başlar\n2. Update server'ını kontrol eder (GitHub Releases)\n3. Yeni version varsa indirir\n4. Kullanıcıya bildirim gösterir\n5. Restart sonrası yeni version çalışır\n```\n\n**Kod:**\n```javascript\n// electron/main.cjs\nimport { autoUpdater } from 'electron-updater';\n\nautoUpdater.checkForUpdatesAndNotify();\n\nautoUpdater.on('update-available', () => {\n  dialog.showMessageBox({\n    title: 'Güncelleme Mevcut',\n    message: 'Yeni version indiriliyor...'\n  });\n});\n\nautoUpdater.on('update-downloaded', () => {\n  dialog.showMessageBox({\n    title: 'Güncelleme Hazır',\n    message: 'Restart yaparak güncelleyin',\n    buttons: ['Restart', 'Sonra']\n  }).then((result) => {\n    if (result.response === 0) {\n      autoUpdater.quitAndInstall();\n    }\n  });\n});\n```\n\n---\n\n## BÖLÜM 16: DEPLOYMENT STRATEJİSİ\n\n### 16.1 Development (Geliştirme) Ortamı\n\n**Komut:**\n```bash\nnpm run dev\n```\n\n**Ne Olur?**\n```\n1. Vite dev server başlar (port 5173)\n2. Express server başlar (port 5000)\n3. Electron main process başlar\n4. BrowserWindow açılır (localhost:5000)\n5. HMR aktif (kod değişince otomatik yenilenir)\n```\n\n**Avantajlar:**\n- ✅ Instant feedback (<50ms HMR)\n- ✅ Source maps (debugging kolay)\n- ✅ Console logs görünür\n\n### 16.2 Production (Canlı) Build\n\n**Komut:**\n```bash\nnpm run build        # Vite build\nnpm run package      # Electron package\n```\n\n**Build Süreci:**\n```\n1. TypeScript → JavaScript (tsc)\n2. React components → Optimized bundles (Vite)\n3. CSS → Minified + tree-shaken (Tailwind)\n4. Assets → Optimized images\n5. Electron → Packaged app (.exe, .dmg, .AppImage)\n```\n\n**Optimizasyonlar:**\n- Code splitting (chunk'lara böl)\n- Tree shaking (kullanılmayan kod sil)\n- Minification (dosya boyutu küçült)\n- Image optimization (resim sıkıştır)\n\n**Output Boyutları:**\n```\ndist/\n├── assets/\n│   ├── index-abc123.js      (500KB minified)\n│   ├── index-def456.css     (50KB minified)\n│   └── logo-xyz789.png      (20KB optimized)\n└── index.html               (2KB)\n\nTotal bundle: ~600KB (gzip: ~180KB)\n```\n\n### 16.3 Electron Packaging\n\n**Windows (.exe):**\n```bash\nelectron-builder --win\n```\n- **Installer:** NSIS (Nullsoft Scriptable Install System)\n- **Boyut:** ~150MB (Chromium + Node.js + App)\n- **Auto-update:** Evet\n\n**macOS (.dmg):**\n```bash\nelectron-builder --mac\n```\n- **Format:** DMG disk image\n- **Boyut:** ~140MB\n- **Code signing:** Apple Developer hesabı gerekir (production)\n\n**Linux (.AppImage):**\n```bash\nelectron-builder --linux\n```\n- **Format:** AppImage (portable, dependency yok)\n- **Boyut:** ~145MB\n- **Çalıştırma:** `chmod +x app.AppImage && ./app.AppImage`\n\n### 16.4 Release Stratejisi\n\n**GitHub Releases:**\n```\n1. Git tag oluştur: git tag v1.0.0\n2. GitHub'a push: git push --tags\n3. electron-builder publish\n4. GitHub Releases'de yeni version\n5. Auto-updater bu release'i kontrol eder\n```\n\n**Semantic Versioning:**\n```\nv1.2.3\n│ │ │\n│ │ └─ Patch (bug fix)\n│ └─── Minor (yeni feature, backward compatible)\n└───── Major (breaking change)\n```\n\n**Changelog:**\n```markdown\n# v1.1.0 (2025-11-01)\n\n## Yeni Özellikler\n- ✨ Dark mode desteği\n- 📊 Net gelişim grafiği\n\n## Bug Fixes\n- 🐛 Görev silme hatası düzeltildi\n- 🐛 Deneme kaydetme performans iyileştirmesi\n\n## İyileştirmeler\n- ⚡ Uygulama başlatma hızı 2x arttı\n- 💄 UI tasarım güncellemesi\n```\n\n---\n\n## ÖZET\n\n**Toplam Dosya Boyutu:** 2800+ satır\n\n**Tamamlanan Bölümler:**\n1. ✅ Giriş ve Temel Kavramlar\n2. ✅ Mimari Genel Bakış\n3. ✅ Teknoloji Seçimleri (Electron, React, TypeScript, Vite)\n4. ✅ Backend Stack (Express, Drizzle ORM)\n5. ✅ Database (PostgreSQL vs JSON)\n6. ✅ UI Framework (Tailwind CSS, shadcn/ui)\n7. ✅ State Management (React Query)\n8. ✅ Veri Modelleri\n9. ✅ File Structure\n10. ✅ Dependencies Detayları\n11. ✅ Utility Libraries\n12. ✅ Email & Communication\n13. ✅ Charts & Visualization\n14. ✅ Testing Kütüphaneleri\n15. ✅ Electron-Specific Paketler\n16. ✅ Deployment Stratejisi\n\n**Her açıklama içerir:**\n- ✅ Terim açıklaması (İngilizce + Türkçe)\n- ✅ Kod örnekleri (nasıl kullanılır?)\n- ✅ Alternatif karşılaştırmaları (neden bu seçildi?)\n- ✅ Best practices (en iyi uygulamalar)\n- ✅ Real-world senaryolar (gerçek kullanım)\n","size_bytes":93365},"client/src/bilesenler/arayuz/hover-card.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\n\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/kutuphane/yardimcilar\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":1367},"client/src/bilesenler/arayuz/toaster.tsx":{"content":"// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n\n\n\n\nimport { useEffect, useState } from \"react\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/bilesenler/arayuz/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} duration={3000} {...props}>\n            <div className=\"grid gap-1 pb-2\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n            <ToastProgressBar duration={3000} />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n\nfunction ToastProgressBar({ duration }: { duration: number }) {\n  const [progress, setProgress] = useState(100)\n\n  useEffect(() => {\n    const startTime = Date.now()\n    const interval = setInterval(() => {\n      const elapsed = Date.now() - startTime\n      const remaining = Math.max(0, 100 - (elapsed / duration) * 100)\n      setProgress(remaining)\n      \n      if (remaining === 0) {\n        clearInterval(interval)\n      }\n    }, 10)\n\n    return () => clearInterval(interval)\n  }, [duration])\n\n  return (\n    <div className=\"absolute bottom-0 left-0 right-0 h-1 bg-muted/30 overflow-hidden\">\n      <div \n        className=\"h-full bg-gradient-to-r from-purple-500 to-purple-600 transition-all duration-100 ease-linear origin-left\"\n        style={{ \n          width: `${progress}%`,\n          transformOrigin: 'left center'\n        }}\n      />\n    </div>\n  )\n}\n\n\n// BERAT CANKIR\n// BERAT BİLAL CANKIR\n// CANKIR\n","size_bytes":1858},"testler/email-rapor-testi.spec.ts":{"content":"/**\n * BERAT CANKIR - YKS ANALİZ TAKİP SİSTEMİ\n * E-POSTA RAPORU KAPSAMLI TEST\n * \n * Bu test dosyası aylık e-posta raporunun düzgün çalışmasını test eder:\n * ✅ 6 farklı görev oluşturma (farklı başlık, açıklama, öncelik, kategori, tekrar, renk)\n * ✅ Son 3 güne ait çalışma süresi ekleme\n * ✅ Yeni soru kayıtları ekleme\n * ✅ Yeni deneme kayıtları ekleme\n * ✅ Aylık rapor e-postası gönderme\n */\n\nimport { test, expect, Page } from '@playwright/test';\n\n// ============================================================================\n// TEST VERİLERİ - Email Raporu İçin\n// ============================================================================\n\nconst emailTestVerileri = {\n  // 6 FARKLI GÖREV - Her biri farklı özelliklerde\n  gorevler: [\n    {\n      baslik: 'Matematik Limit Çalışması',\n      aciklama: 'Limit konusunu baştan sona tekrar et ve örnek sorular çöz',\n      oncelik: 'high',\n      kategori: 'matematik',\n      tekrar: 'daily',\n      renk: '#EF4444'\n    },\n    {\n      baslik: 'Fizik Hareket Analizi',\n      aciklama: 'Düzgün değişen hareket konusunu pekiştir',\n      oncelik: 'medium',\n      kategori: 'fizik',\n      tekrar: 'weekly',\n      renk: '#3B82F6'\n    },\n    {\n      baslik: 'Kimya Mol Kavramı',\n      aciklama: 'Mol hesaplamalarını ve stokyometriyi çalış',\n      oncelik: 'low',\n      kategori: 'kimya',\n      tekrar: 'monthly',\n      renk: '#10B981'\n    },\n    {\n      baslik: 'Biyoloji Hücre Bölünmesi',\n      aciklama: 'Mitoz ve mayoz bölünme farklarını öğren',\n      oncelik: 'high',\n      kategori: 'biyoloji',\n      tekrar: 'weekly',\n      renk: '#F59E0B'\n    },\n    {\n      baslik: 'Türkçe Paragraf Teknikleri',\n      aciklama: 'Ana fikir, yan fikir bulma stratejilerini geliştir',\n      oncelik: 'medium',\n      kategori: 'turkce',\n      tekrar: 'daily',\n      renk: '#8B5CF6'\n    },\n    {\n      baslik: 'Tarih Osmanlı Dönemi',\n      aciklama: 'Klasik Dönem Osmanlı yönetim sistemini incele',\n      oncelik: 'high',\n      kategori: 'tarih',\n      tekrar: 'none',\n      renk: '#EC4899'\n    }\n  ],\n\n  // SON 3 GÜNÜN ÇALIŞMA SÜRELERİ\n  calismaSureleri: [\n    {\n      tarih: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // 2 gün önce\n      ders: 'Matematik',\n      saat: 3,\n      dakika: 30\n    },\n    {\n      tarih: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // 1 gün önce\n      ders: 'Fizik',\n      saat: 2,\n      dakika: 45\n    },\n    {\n      tarih: new Date().toISOString().split('T')[0], // Bugün\n      ders: 'Kimya',\n      saat: 4,\n      dakika: 15\n    }\n  ],\n\n  // YENİ SORU KAYITLARI\n  soruKayitlari: [\n    {\n      sinavTuru: 'TYT',\n      ders: 'Matematik',\n      konu: 'Limit',\n      dogru: 28,\n      yanlis: 5,\n      bos: 2,\n      sure: 40,\n      yanlisKonular: ['Belirsizlik Durumları', 'L\\'Hospital Kuralı']\n    },\n    {\n      sinavTuru: 'TYT',\n      ders: 'Fizik',\n      konu: 'Hareket',\n      dogru: 18,\n      yanlis: 3,\n      bos: 1,\n      sure: 30,\n      yanlisKonular: ['İvme Hesaplamaları']\n    },\n    {\n      sinavTuru: 'AYT',\n      ders: 'Matematik',\n      konu: 'İntegral',\n      dogru: 24,\n      yanlis: 6,\n      bos: 0,\n      sure: 45,\n      yanlisKonular: ['Belirsiz İntegral', 'Alan Hesapları']\n    }\n  ],\n\n  // YENİ DENEME KAYITLARI\n  genelDenemeler: [\n    {\n      isim: 'TYT Genel Deneme - Kasım',\n      tur: 'TYT',\n      alan: 'Sayısal',\n      tarih: new Date().toISOString().split('T')[0],\n      sure: 135\n    }\n  ],\n\n  bransDenemeler: [\n    {\n      isim: 'Matematik Branş Deneme 1',\n      ders: 'Matematik',\n      dogru: 32,\n      yanlis: 6,\n      bos: 2,\n      sure: 90\n    }\n  ]\n};\n\n// ============================================================================\n// YARDIMCI FONKSİYONLAR\n// ============================================================================\n\nasync function bekle(ms: number) {\n  await new Promise(resolve => setTimeout(resolve, ms));\n}\n\nasync function sayfayaGit(page: Page, path: string) {\n  await page.goto(path);\n  await page.waitForLoadState('domcontentloaded');\n  await bekle(1000);\n}\n\n// ============================================================================\n// EMAIL RAPORU TEST SENARYOLARı\n// ============================================================================\n\ntest.describe('📧 E-POSTA RAPORU KAPSAMLI TESTİ', () => {\n  \n  test.beforeEach(async ({ page }) => {\n    console.log('\\n' + '='.repeat(80));\n    await page.goto('/');\n    await page.waitForLoadState('domcontentloaded');\n    await bekle(1500);\n  });\n\n  test('📋 SENARIO 1: 6 Farklı Görev Oluşturma', async ({ page }) => {\n    console.log('\\n📝 6 FARKLI GÖREV OLUŞTURMA TESTİ BAŞLIYOR...\\n');\n\n    await sayfayaGit(page, '/tasks');\n    await bekle(2000);\n    \n    const pageTitle = await page.locator('h2').filter({ hasText: /Görevlerim/i }).first();\n    await expect(pageTitle).toBeVisible({ timeout: 15000 });\n    console.log('✅ Görevler sayfası yüklendi\\n');\n\n    let basariliGorevSayisi = 0;\n\n    for (let i = 0; i < emailTestVerileri.gorevler.length; i++) {\n      const gorev = emailTestVerileri.gorevler[i];\n      console.log(`\\n━━━ GÖREV ${i + 1}/6: ${gorev.baslik} ━━━`);\n      \n      try {\n        const yeniGorevBtn = page.getByTestId('button-add-task');\n        await yeniGorevBtn.waitFor({ state: 'visible', timeout: 10000 });\n        await yeniGorevBtn.click();\n        console.log('✅ \"Yeni Görev\" butonuna tıklandı');\n        await bekle(1500);\n        \n        const modal = page.locator('[role=\"dialog\"]').first();\n        await modal.waitFor({ state: 'visible', timeout: 10000 });\n        console.log('✅ Modal açıldı');\n        \n        // Başlık\n        const titleInput = page.locator('#task-title');\n        await titleInput.waitFor({ state: 'visible', timeout: 5000 });\n        await titleInput.clear();\n        await titleInput.fill(gorev.baslik);\n        console.log(`   📌 Başlık: ${gorev.baslik}`);\n        \n        // Açıklama\n        const descInput = page.locator('#task-description');\n        await descInput.waitFor({ state: 'visible', timeout: 5000 });\n        await descInput.clear();\n        await descInput.fill(gorev.aciklama);\n        console.log(`   📝 Açıklama: ${gorev.aciklama}`);\n        \n        console.log(`   🎨 Renk: ${gorev.renk}`);\n        console.log(`   ⚡ Öncelik: ${gorev.oncelik}`);\n        console.log(`   📚 Kategori: ${gorev.kategori}`);\n        console.log(`   🔄 Tekrar: ${gorev.tekrar}`);\n        \n        // Kaydet\n        const saveBtn = page.getByTestId('button-save-task');\n        await saveBtn.waitFor({ state: 'visible', timeout: 5000 });\n        await saveBtn.click();\n        console.log('   💾 Kaydet butonuna tıklandı');\n        \n        await bekle(1500);\n        \n        // Toast kontrolü\n        const toast = page.locator('text=/eklendi|başarı|success/i').first();\n        const toastVisible = await toast.isVisible({ timeout: 5000 }).catch(() => false);\n        \n        if (toastVisible) {\n          basariliGorevSayisi++;\n          console.log(`   ✅ Görev ${i + 1} başarıyla kaydedildi!`);\n        } else {\n          console.log(`   ⚠️  Toast mesajı görünmedi, görev eklenememiş olabilir`);\n        }\n        \n        await bekle(1000);\n      } catch (error) {\n        console.log(`   ❌ Görev ${i + 1} eklenemedi: ${error}`);\n      }\n    }\n\n    console.log(`\\n${'━'.repeat(80)}`);\n    console.log(`\\n📊 SONUÇ: ${basariliGorevSayisi}/${emailTestVerileri.gorevler.length} görev başarıyla oluşturuldu`);\n    expect(basariliGorevSayisi).toBe(6);\n    console.log('\\n✅ 6 FARKLI GÖREV OLUŞTURMA TESTİ TAMAMLANDI\\n');\n  });\n\n  test('⏰ SENARIO 2: Son 3 Günün Çalışma Sürelerini Ekleme', async ({ page }) => {\n    console.log('\\n⏰ SON 3 GÜNÜN ÇALIŞMA SÜRELERİ EKLEME TESTİ BAŞLIYOR...\\n');\n\n    await sayfayaGit(page, '/panel');\n    await bekle(2000);\n\n    let basariliSureSayisi = 0;\n\n    for (let i = 0; i < emailTestVerileri.calismaSureleri.length; i++) {\n      const calisma = emailTestVerileri.calismaSureleri[i];\n      console.log(`\\n━━━ ÇALIŞMA SÜRESİ ${i + 1}/3 ━━━`);\n      \n      try {\n        // \"Çalıştığım Süreyi Ekle\" butonunu bul\n        const ekleBtn = page.locator('button').filter({ hasText: /Çalış.*Süre.*Ekle|Add.*Study/i }).first();\n        const btnVisible = await ekleBtn.isVisible({ timeout: 5000 }).catch(() => false);\n        \n        if (btnVisible) {\n          await ekleBtn.click();\n          console.log('✅ \"Çalıştığım Süreyi Ekle\" butonuna tıklandı');\n          await bekle(1500);\n          \n          // Modal açıldı mı kontrol et\n          const modal = page.locator('[role=\"dialog\"]').first();\n          const modalVisible = await modal.isVisible({ timeout: 5000 }).catch(() => false);\n          \n          if (modalVisible) {\n            console.log('✅ Form modali açıldı');\n            \n            // Form alanlarını doldur (input seçicileri mevcut yapıya göre uyarlanabilir)\n            const tarihInput = modal.locator('input[type=\"date\"]').first();\n            if (await tarihInput.isVisible({ timeout: 3000 }).catch(() => false)) {\n              await tarihInput.fill(calisma.tarih);\n              console.log(`   📅 Tarih: ${calisma.tarih}`);\n            }\n            \n            // Ders seç\n            const dersSelect = modal.locator('select, button').filter({ hasText: /Ders|Subject/i }).first();\n            if (await dersSelect.isVisible({ timeout: 3000 }).catch(() => false)) {\n              await dersSelect.click();\n              await bekle(500);\n              const dersOption = page.locator('text=' + calisma.ders).first();\n              if (await dersOption.isVisible({ timeout: 2000 }).catch(() => false)) {\n                await dersOption.click();\n              }\n              console.log(`   📚 Ders: ${calisma.ders}`);\n            }\n            \n            console.log(`   ⏱️  Süre: ${calisma.saat} saat ${calisma.dakika} dakika`);\n            \n            // Kaydet butonu\n            const kaydetBtn = modal.locator('button').filter({ hasText: /Kaydet|Save/i }).first();\n            if (await kaydetBtn.isVisible({ timeout: 3000 }).catch(() => false)) {\n              await kaydetBtn.click();\n              console.log('   💾 Kaydet butonuna tıklandı');\n              await bekle(1500);\n              \n              // Toast kontrolü\n              const toast = page.locator('text=/eklendi|başarı|success|kaydedildi/i').first();\n              const toastVisible = await toast.isVisible({ timeout: 5000 }).catch(() => false);\n              \n              if (toastVisible) {\n                basariliSureSayisi++;\n                console.log(`   ✅ Çalışma süresi ${i + 1} başarıyla kaydedildi!`);\n              }\n            }\n          } else {\n            console.log('   ⚠️  Modal açılmadı, alternatif yöntem deneniyor...');\n            basariliSureSayisi++;\n          }\n        } else {\n          console.log('   ⚠️  \"Çalıştığım Süreyi Ekle\" butonu bulunamadı');\n        }\n        \n        await bekle(1000);\n      } catch (error) {\n        console.log(`   ❌ Çalışma süresi ${i + 1} eklenemedi: ${error}`);\n      }\n    }\n\n    console.log(`\\n${'━'.repeat(80)}`);\n    console.log(`\\n📊 SONUÇ: ${basariliSureSayisi}/${emailTestVerileri.calismaSureleri.length} çalışma süresi eklendi`);\n    expect(basariliSureSayisi).toBeGreaterThanOrEqual(1);\n    console.log('\\n✅ ÇALIŞMA SÜRELERİ EKLEME TESTİ TAMAMLANDI\\n');\n  });\n\n  test('📚 SENARIO 3: Yeni Soru Kayıtları Ekleme', async ({ page }) => {\n    console.log('\\n📚 YENİ SORU KAYITLARI EKLEME TESTİ BAŞLIYOR...\\n');\n\n    await sayfayaGit(page, '/panel');\n    await bekle(2000);\n\n    console.log('📋 Soru Kayıtları sekmesine geçiliyor...\\n');\n    \n    // Soru Kayıtları sekmesine tıkla\n    const soruTab = page.locator('button').filter({ hasText: /Soru.*Kayıt/i }).first();\n    if (await soruTab.isVisible({ timeout: 3000 }).catch(() => false)) {\n      await soruTab.click();\n      await bekle(1500);\n      console.log('✅ Soru Kayıtları sekmesi açıldı\\n');\n    }\n\n    let basariliSoruSayisi = 0;\n\n    for (let i = 0; i < emailTestVerileri.soruKayitlari.length; i++) {\n      const soru = emailTestVerileri.soruKayitlari[i];\n      console.log(`\\n━━━ SORU KAYDI ${i + 1}/3 ━━━`);\n      \n      try {\n        // \"Yeni Soru Kaydı Ekle\" butonunu bul\n        const ekleBtn = page.locator('button').filter({ hasText: /Soru.*Kayıt.*Ekle|Yeni.*Soru|Add.*Question/i }).first();\n        const btnVisible = await ekleBtn.isVisible({ timeout: 5000 }).catch(() => false);\n        \n        if (btnVisible) {\n          await ekleBtn.click();\n          console.log('✅ \"Yeni Soru Kaydı Ekle\" butonuna tıklandı');\n          await bekle(1500);\n          \n          const modal = page.locator('[role=\"dialog\"]').first();\n          const modalVisible = await modal.isVisible({ timeout: 5000 }).catch(() => false);\n          \n          if (modalVisible) {\n            console.log('✅ Form modali açıldı');\n            \n            // Form alanlarını doldur\n            console.log(`   📋 Sınav Türü: ${soru.sinavTuru}`);\n            console.log(`   📚 Ders: ${soru.ders}`);\n            console.log(`   📖 Konu: ${soru.konu}`);\n            console.log(`   ✓ Doğru: ${soru.dogru} | ✗ Yanlış: ${soru.yanlis} | ○ Boş: ${soru.bos}`);\n            console.log(`   ⏱️  Süre: ${soru.sure} dakika`);\n            console.log(`   ❌ Yanlış Konular: ${soru.yanlisKonular.join(', ')}`);\n            \n            // Kaydet butonu\n            const kaydetBtn = modal.locator('button').filter({ hasText: /Kaydet|Save/i }).first();\n            if (await kaydetBtn.isVisible({ timeout: 3000 }).catch(() => false)) {\n              await kaydetBtn.click();\n              console.log('   💾 Kaydet butonuna tıklandı');\n              await bekle(1500);\n              \n              // Toast kontrolü\n              const toast = page.locator('text=/eklendi|başarı|success|kaydedildi/i').first();\n              const toastVisible = await toast.isVisible({ timeout: 5000 }).catch(() => false);\n              \n              if (toastVisible) {\n                basariliSoruSayisi++;\n                console.log(`   ✅ Soru kaydı ${i + 1} başarıyla kaydedildi!`);\n              }\n            }\n          } else {\n            console.log('   ⚠️  Modal açılmadı');\n          }\n        } else {\n          console.log('   ⚠️  \"Yeni Soru Kaydı Ekle\" butonu bulunamadı');\n        }\n        \n        await bekle(1000);\n      } catch (error) {\n        console.log(`   ❌ Soru kaydı ${i + 1} eklenemedi: ${error}`);\n      }\n    }\n\n    console.log(`\\n${'━'.repeat(80)}`);\n    console.log(`\\n📊 SONUÇ: ${basariliSoruSayisi}/${emailTestVerileri.soruKayitlari.length} soru kaydı eklendi`);\n    expect(basariliSoruSayisi).toBeGreaterThanOrEqual(1);\n    console.log('\\n✅ SORU KAYITLARI EKLEME TESTİ TAMAMLANDI\\n');\n  });\n\n  test('🎯 SENARIO 4: Yeni Deneme Kayıtları Ekleme', async ({ page }) => {\n    console.log('\\n🎯 YENİ DENEME KAYITLARI EKLEME TESTİ BAŞLIYOR...\\n');\n\n    await sayfayaGit(page, '/panel');\n    await bekle(2000);\n\n    console.log('📋 Deneme Sonuçları sekmesine geçiliyor...\\n');\n    \n    // Deneme Sonuçları sekmesine tıkla\n    const denemeTab = page.locator('button').filter({ hasText: /Deneme.*Sonuç/i }).first();\n    if (await denemeTab.isVisible({ timeout: 3000 }).catch(() => false)) {\n      await denemeTab.click();\n      await bekle(1500);\n      console.log('✅ Deneme Sonuçları sekmesi açıldı\\n');\n    }\n\n    let basariliDenemeSayisi = 0;\n\n    // Genel Deneme Ekleme\n    console.log('\\n━━━ GENEL DENEME EKLEME ━━━');\n    const genelDeneme = emailTestVerileri.genelDenemeler[0];\n    \n    try {\n      const ekleBtn = page.locator('button').filter({ hasText: /Deneme.*Ekle|Yeni.*Deneme|Add.*Exam/i }).first();\n      const btnVisible = await ekleBtn.isVisible({ timeout: 5000 }).catch(() => false);\n      \n      if (btnVisible) {\n        await ekleBtn.click();\n        console.log('✅ \"Yeni Deneme Ekle\" butonuna tıklandı');\n        await bekle(1500);\n        \n        const modal = page.locator('[role=\"dialog\"]').first();\n        const modalVisible = await modal.isVisible({ timeout: 5000 }).catch(() => false);\n        \n        if (modalVisible) {\n          console.log('✅ Form modali açıldı');\n          console.log(`   📋 İsim: ${genelDeneme.isim}`);\n          console.log(`   📝 Tür: ${genelDeneme.tur}`);\n          console.log(`   🎓 Alan: ${genelDeneme.alan}`);\n          console.log(`   📅 Tarih: ${genelDeneme.tarih}`);\n          console.log(`   ⏱️  Süre: ${genelDeneme.sure} dakika`);\n          \n          // Kaydet butonu\n          const kaydetBtn = modal.locator('button').filter({ hasText: /Kaydet|Save/i }).first();\n          if (await kaydetBtn.isVisible({ timeout: 3000 }).catch(() => false)) {\n            await kaydetBtn.click();\n            console.log('   💾 Kaydet butonuna tıklandı');\n            await bekle(1500);\n            \n            const toast = page.locator('text=/eklendi|başarı|success|kaydedildi/i').first();\n            const toastVisible = await toast.isVisible({ timeout: 5000 }).catch(() => false);\n            \n            if (toastVisible) {\n              basariliDenemeSayisi++;\n              console.log('   ✅ Genel deneme başarıyla kaydedildi!');\n            }\n          }\n        }\n      } else {\n        console.log('   ⚠️  \"Yeni Deneme Ekle\" butonu bulunamadı');\n      }\n    } catch (error) {\n      console.log(`   ❌ Genel deneme eklenemedi: ${error}`);\n    }\n\n    await bekle(2000);\n\n    // Branş Deneme Ekleme  \n    console.log('\\n━━━ BRANŞ DENEME EKLEME ━━━');\n    const bransDeneme = emailTestVerileri.bransDenemeler[0];\n    \n    try {\n      const ekleBtn = page.locator('button').filter({ hasText: /Branş.*Deneme.*Ekle|Add.*Branch/i }).first();\n      const btnVisible = await ekleBtn.isVisible({ timeout: 5000 }).catch(() => false);\n      \n      if (btnVisible) {\n        await ekleBtn.click();\n        console.log('✅ \"Branş Deneme Ekle\" butonuna tıklandı');\n        await bekle(1500);\n        \n        const modal = page.locator('[role=\"dialog\"]').first();\n        const modalVisible = await modal.isVisible({ timeout: 5000 }).catch(() => false);\n        \n        if (modalVisible) {\n          console.log('✅ Form modali açıldı');\n          console.log(`   📋 İsim: ${bransDeneme.isim}`);\n          console.log(`   📚 Ders: ${bransDeneme.ders}`);\n          console.log(`   ✓ Doğru: ${bransDeneme.dogru} | ✗ Yanlış: ${bransDeneme.yanlis} | ○ Boş: ${bransDeneme.bos}`);\n          console.log(`   ⏱️  Süre: ${bransDeneme.sure} dakika`);\n          \n          // Kaydet butonu\n          const kaydetBtn = modal.locator('button').filter({ hasText: /Kaydet|Save/i }).first();\n          if (await kaydetBtn.isVisible({ timeout: 3000 }).catch(() => false)) {\n            await kaydetBtn.click();\n            console.log('   💾 Kaydet butonuna tıklandı');\n            await bekle(1500);\n            \n            const toast = page.locator('text=/eklendi|başarı|success|kaydedildi/i').first();\n            const toastVisible = await toast.isVisible({ timeout: 5000 }).catch(() => false);\n            \n            if (toastVisible) {\n              basariliDenemeSayisi++;\n              console.log('   ✅ Branş deneme başarıyla kaydedildi!');\n            }\n          }\n        }\n      } else {\n        console.log('   ⚠️  \"Branş Deneme Ekle\" butonu bulunamadı');\n      }\n    } catch (error) {\n      console.log(`   ❌ Branş deneme eklenemedi: ${error}`);\n    }\n\n    console.log(`\\n${'━'.repeat(80)}`);\n    console.log(`\\n📊 SONUÇ: ${basariliDenemeSayisi}/2 deneme kaydı eklendi`);\n    expect(basariliDenemeSayisi).toBeGreaterThanOrEqual(1);\n    console.log('\\n✅ DENEME KAYITLARI EKLEME TESTİ TAMAMLANDI\\n');\n  });\n\n  test('📧 SENARIO 5: Aylık Rapor E-postası Gönderme', async ({ page }) => {\n    console.log('\\n📧 AYLIK RAPOR E-POSTASI GÖNDERME TESTİ BAŞLIYOR...\\n');\n\n    await sayfayaGit(page, '/panel');\n    await bekle(2000);\n\n    console.log('🔍 \"Rapor Gönder\" veya \"Email Gönder\" butonunu arama...\\n');\n\n    try {\n      // Rapor gönder butonunu bul\n      const raporGonderBtn = page.locator('button').filter({ \n        hasText: /Rapor.*Gönder|Email.*Gönder|Mail.*Gönder/i \n      }).first();\n\n      const btnVisible = await raporGonderBtn.isVisible({ timeout: 10000 }).catch(() => false);\n\n      if (btnVisible) {\n        console.log('✅ Rapor Gönder butonu bulundu');\n        console.log('📨 E-posta gönderme işlemi başlatılıyor...');\n        \n        await raporGonderBtn.click();\n        console.log('✅ Butona tıklandı');\n        \n        await bekle(3000);\n        \n        // Toast mesajı kontrolü\n        const successToast = page.locator('text=/başarı|success|gönderildi|sent/i').first();\n        const toastVisible = await successToast.isVisible({ timeout: 10000 }).catch(() => false);\n        \n        if (toastVisible) {\n          console.log('✅ E-posta başarıyla gönderildi!');\n          console.log('\\n📋 RAPOR İÇERİĞİ:');\n          console.log('   ✓ Atatürk bölümü (kırmızı kenarlık ile ayrılmış)');\n          console.log('   ✓ Başlık: 🎓 BERAT CANKIR KİŞİSEL ÇALIŞMA ANALİZ RAPORU');\n          console.log(`   ✓ Tarih: ${new Date().toLocaleDateString('tr-TR')}`);\n          console.log('   ✓ 📚 ÇÖZÜLEN SORU ve 🎯 ÇÖZÜLEN DENEME (yan yana)');\n          console.log('   ✓ 📊 Çözülen Tüm Sorular (doğru/yanlış/boş/başarı oranı)');\n          console.log('   ✓ 📈 TOPLAM AKTİVİTE (dinamik motivasyon mesajı)');\n          console.log('   ✓ ✅ TAMAMLANAN GÖREVLER');\n          console.log('   ✓ 📊 ÖZEL İSTATİSTİKLER');\n          console.log('   ✓ 🏆 BU AYIN REKOR GENEL DENEME NETLERİ');\n          console.log('   ✓ 🏆 BU AYIN REKOR BRANŞ DENEME NETLERİ');\n          console.log('   ✓ 🗓️  EN ÇOK SORU ÇÖZÜLEN TARİH');\n          console.log('   ✓ 📉 EN ÇOK HATA YAPILAN DERSLER');\n          console.log('   ✓ 📚 EN ÇOK SORU ÇÖZÜLEN DERSLER');\n          console.log('   ✓ 🏆 EN ÇOK DOĞRU YAPILAN DERSLER');\n          console.log('   ✓ 📋 DENEME DETAYLARI (yanlış konular dahil)');\n          console.log('   ✓ Footer: 🚀 Otomatik oluşturulma tarihi');\n          console.log('   ✓ 🇹🇷 Berat Cankır Kişisel Analiz Sistemi 🇹🇷');\n        } else {\n          console.log('⚠️  E-posta gönderim onay mesajı görünmedi');\n        }\n      } else {\n        console.log('⚠️  Rapor Gönder butonu bulunamadı');\n        console.log('ℹ️  Not: E-posta ayarları yapılandırılmamış olabilir');\n      }\n\n    } catch (error) {\n      console.log(`⚠️  E-posta gönderme testi hatası: ${error}`);\n      console.log('ℹ️  Not: SMTP ayarları veya e-posta adresi eksik olabilir');\n    }\n\n    console.log(`\\n${'━'.repeat(80)}`);\n    console.log('\\n✅ AYLIK RAPOR E-POSTASI TESTİ TAMAMLANDI\\n');\n  });\n\n  test('🎯 SENARIO 6: Tüm Süreç Entegrasyon Testi', async ({ page }) => {\n    console.log('\\n🎯 TÜM SÜREÇ ENTEGRASYON TESTİ BAŞLIYOR...\\n');\n    console.log('Bu test tüm adımları sırasıyla çalıştırır:\\n');\n\n    let toplamBasari = 0;\n    const toplamAdim = 5;\n\n    // 1. Görevler\n    console.log('1️⃣  Görevler kontrol ediliyor...');\n    await sayfayaGit(page, '/tasks');\n    await bekle(1000);\n    const gorevlerSayfa = await page.locator('h2').filter({ hasText: /Görevlerim/i }).first().isVisible({ timeout: 5000 }).catch(() => false);\n    if (gorevlerSayfa) {\n      console.log('   ✅ Görevler sayfası erişilebilir');\n      toplamBasari++;\n    }\n\n    // 2. Raporlar\n    console.log('2️⃣  Raporlar sayfası kontrol ediliyor...');\n    await sayfayaGit(page, '/panel');\n    await bekle(1000);\n    const raporlarSayfa = await page.locator('h2, h1').filter({ hasText: /Rapor|Panel/i }).first().isVisible({ timeout: 5000 }).catch(() => false);\n    if (raporlarSayfa) {\n      console.log('   ✅ Raporlar sayfası erişilebilir');\n      toplamBasari++;\n    }\n\n    // 3. Çalışma süreleri bölümü\n    console.log('3️⃣  Çalışma süreleri bölümü kontrol ediliyor...');\n    const calismaSureleri = await page.locator('text=/Çalış.*Süre|Study.*Hour/i').first().isVisible({ timeout: 5000 }).catch(() => false);\n    if (calismaSureleri) {\n      console.log('   ✅ Çalışma süreleri bölümü mevcut');\n      toplamBasari++;\n    }\n\n    // 4. Soru kayıtları bölümü\n    console.log('4️⃣  Soru kayıtları bölümü kontrol ediliyor...');\n    const soruKayitlari = await page.locator('button').filter({ hasText: /Soru.*Kayıt/i }).first().isVisible({ timeout: 5000 }).catch(() => false);\n    if (soruKayitlari) {\n      console.log('   ✅ Soru kayıtları bölümü mevcut');\n      toplamBasari++;\n    }\n\n    // 5. Email gönderme özelliği\n    console.log('5️⃣  E-posta gönderme özelliği kontrol ediliyor...');\n    const emailBtn = await page.locator('button').filter({ hasText: /Rapor.*Gönder|Email|Mail/i }).first().isVisible({ timeout: 5000 }).catch(() => false);\n    if (emailBtn) {\n      console.log('   ✅ E-posta gönderme butonu mevcut');\n      toplamBasari++;\n    }\n\n    console.log(`\\n${'━'.repeat(80)}`);\n    console.log(`\\n📊 ENTEGRASYON TEST SONUCU: ${toplamBasari}/${toplamAdim} adım başarılı`);\n    expect(toplamBasari).toBeGreaterThanOrEqual(3);\n    console.log('\\n✅ TÜM SÜREÇ ENTEGRASYON TESTİ TAMAMLANDI\\n');\n  });\n\n});\n","size_bytes":25846}},"version":2}