EN ÖNEMLİ - uygulama test edilirken yapılacaklar -> görev eklenecek birden fazla farklı görev başlığı,açıklaması,önceliği,ders kategorisi,tekrarı ve görev rengi birbirinden farklı biri arşive atılacak biri tamamlanacak en az 6 adet görev daha sonra raporlarım kısmında: çalışılan süre eklenilecek farklı günlere ait,Yeni Soru Kaydı oluşturulacak çok fazla,her birininin sınav türü,dersi(hem tytden hem aytden),doğru yanlış boş sayısı,süresi,yanlış eklenen konular için o derse özgün hatalı konuları dahil,Yeni Deneme Sonucu eklenecek,her birininin : süresi,bazıları default bazılarınnın deneme ismi farklı,her birinin (öncelikle branş eklenecek daha sonra genel),önce herbiri farklı ders tytden farklı d y b ve yanlış konular,ardından aytden her biri farklı ders d y b ve yanlış konularıyla sonra genel deneme 2 adet hem tyt hem aytden,farklı süreler,her dersin d y b si girilecek ve hatalı konuları o derse özgü girilecek,🎯 Eksik Olduğum Konular ve 🔍 Hata Sıklığı Analizi kısımlarına düşen hatalı konuların bazılarının checkboxuna basılacak tamamlanan hatalı konular,sorular kısımlarına veri gidiyor mu bakılacak,filtreler doğru çalışıyor mu kontrol edilecek,📊 Deneme Analiz Sistemi kısmında veriler tyt yi tytde ayt yi aytde gösteriyor mu genel deneme genel deneme analizde mi branş deneme  branş deneme analizde mi
tek tek hataları düzgünce verimli bir şekilde her 5 görevi de teker teker güzel bir şekilde yapacaksın token limitini düşünmeden checkpoint,commit atmadan,SORU SORMADAN devam ederek istediğim şekilde her görevi yapacaksın
bu tüm soruları cevaplar.md olarak ayrı bir dosyaya yazdır ayrıca İngilizce terimleri,teknik vs terimleri türkçe olarak gerekirse somutlaştırarak detaylı kapsamlı bir şekilde her şeyi açıkla,eğer tek dosya çok uzun olursa örneğin kod_aciklamasi_electron yapacaksan kod_aciklamasi1 2 3 gibi isimlendirip açıklayabilirsin.
(hepsi md dosyaları adlı klasöre eklenecek)- eklenen kod_acikaması(onceden vardı  silindi) tüm dosyaların kod_aciklamasi_client kod_aciklamasi_electron gibi her dosya için tek tek içerisindeki kodların ne işe yaradığını tek tek anlatan ne işe yaradığını neden o şekilde kullanıldığını anlatacaksın çok kapsamlı 500+ satır üstünde her şeyi anlatacaksın ve diğer md dosyalarının hepsini geliştireceksin hepsini sil veya silinmeden öncekilerin daha detaylısını yani tek tek hangi kütüphanelerin kullanıldığı ve neden o kütüphanelerin bu versiyonları kullanıldığı güncel versiyonları varsa bile niye bunlar kullanıldığı ,hangi teknolojilerin kullanıldığını,hangi,bu uygulamanın diğer rakiplerinden piyasada (eğer varsa farkı en iyi avantajları ve dezavantajları(varsa),uygulamada geliştirilebilecek,eklenebilecek şeyler,neden başka uygulama değil e bu,bunun farkı ne diğerlerinden,bunun öğrenciye katkısı ne,yapay zeka desteği eklenebilir mi,ücetli versiyonu fırsat eşitliğini bozar mı,bu uygulamaya yapay zeka eklenebilir mi eklenirse nasıl öğrenci takibi olur fiyatı nasıl belirlenir aylık yıllı paketler mi,öğrencinin aktivitesine göre indirim vsvs.,package.json kontrol edildiğinde neden bunu bunu seçtim de neden şunu şunu seçmedim bunun ondan farkı,faydası ne,veri iletişimini nasıl sağlıyorum,nerden,hangi dosyalardan,hangi satırlardaki kodlardan,neden tailwind.config.ts tsconfig.json,vite.config.ts,postcss.config.js dosyaları var da ne işe yarıyor yararları neler katkısı nedir,başka yöntemler kullanmak yerine neden bunlar,projeyi nasıl test ediyorum her butona tek tek tıklamak mı yoksa başka yolla mı daha kolay nasıl test edilir gibi ne kadar varsa hepsini tek tek sırala mimarı bozmayacak şekilde ve yks öğrencileri hedef kitleyi bozmayacak halde,uygulamada kod açısından en çok zorlayan yerler en uzun ve kısa yerler,en eğlenceli yerler,raporlarım kısımlarındaki verilerin nasıl çekildiği her şeyi tek tek en ince ayrıntısına kadar anlatacaksın kod_aciklaması kısımlarında ayrıca test kısmının da neden eklendiğini ne işe yaradığını yararı zararını(varsa) ekleyeceksin her şeyi bunları ekledikten sonra oluşturduğun .md dosyalarına .md dosyaları klasörüne gönder test talimatları kod açıklamaları uygulama kurulum talimatları,bu programın Nitelikli Eğitim için neleri kapsadığını,Nitelikli Eğitim için öğrenciye ne gibi destekl olduğunu,Nitelikli Eğitim adı altında bu uygulamanın ne gibi yararları olabileceğini,kullanıcının interneti çöktüğünde uygulama çöküyor mu çökmüyorsa neden ne gibi teknolojiler sayesinde,bu uygulamayı site üzerinde yapıp kullanmak için gerekli sermaye nedir,güvenlik için,database için,yapay zeka entegrasyonu için,uygulamada erişilebilirlik için nelerin yapıldığı(örneğin tab ile butonlar arası gezme herhangi bir tuşla navigasyon butonlarında gezme),test süreci nasıl yapıldı ne ile,özellikle electron ile ilgili dosyaları en ince ayrıntısına kadar anlat,...
A. “Neden yaptın?” — Temel savunma soruları (strateji / motivasyon)
Bu projeyi niçin yaptın? Cevabın üç cümleden uzun olamaz.
“Bunu zaten bir sürü uygulama yapıyor” dersen, hangi üç özgün faydayı sunuyorsun?
Eğer bu uygulamayı 1 kullanıcıdan 1 milyon kullanıcıya çıkarman gerekse, aynı mimariyi kullanır mısın? Neden?
Proje konseptini daha iyi yapan bir rakip ismi ver ve ondan neden daha iyi olduğunuzu açıkla.
Bu projeyi tek bir cümleyle “neden kullanmalıyım” diye anlat — jüri ikna olacak mı?
Projenin en zayıf 2 pazarlama argümanı hangileri?
Projeyi bırakmak isteyeceğin bir nokta var mı — varsa neresi ve neden?
Bu proje tamamen sana ait değilse, hangi kısımlar dış bağımlı? (3 maddede)
Bu uygulama öğrencinin vakit yönetimini gerçekten iyileştiriyor mu, yoksa sadece test hazırlık araçlarının başka bir versiyonu mu?
Projenin sürdürülebilirliği konusunda 2 somut risk söyle (finans, teknik veya hukuki).
B. “Kullanıcı odaklı” — UX / psikoloji tuzakları
Bir YKS öğrencisi ilk 60 saniyede uygulamanda ne yapmalı? Eğer yapmazsa neden vazgeçer?
“Başarı hissi” veren küçük bir an yaratmak istiyorum: hangi 10 ms’lik UI değişikliği yeter?
Uygulamada bir hata mesajı çıksa, kullanıcıyı yatıştırmak için üç farklı yaklaşım öner.
Öğrenci başarısız olduğunda motivasyonu arttırmak yerine suçlayan bir dil kullanılıyor mu? (metinleri örnekle ispat etmeden anlat)
Erişilebilirlik (klavye, ekran okuyucu) üzerine kaç test yaptın? Cevabın net numara olmalı.
Arayüzün hangi kısmı öğrenciyi “korkutur” — ve neden?
Öğrencinin kısa süreli motivasyonunu artırmak için UX’te neyi kırpıp neyi tutardın?
Uygulama hem masaüstü (Electron) hem web ise, hangi arayüz öncelikli tasarlanmış olmalıydı? Neden?
Eğer bir öğrenci uygulamayı “başlangıçta” terk ediyorsa, hangi tek metriği kontrol edersin?
C. “Kod + mimari” — kısa ama yakan teknik sorular
drizzle.config.ts kullanılmış — hangi veritabanını hedefliyorsun ve neden o ORM tercih edildi? (tek cümle) 
tailwind.config.ts var: production build’inde kullanılmayan CSS nasıl temizleniyor? Eğer temizlenmiyorsa neden? 
vite.config.ts içinde server.proxy yoksa: API çağrıları nasıl korunuyor? (CORS açıklaması beklenir). 
Electron ipcMain/ipcRenderer iletişimi güvenli mi? contextIsolation ve nodeIntegration değerleri nasıl ayarlı? (satır numarasıyla söyleyemezsen “nerede ararım” de) 
postcss.config.js neden var? Tailwind’i hala PostCSS ile mi kullanıyorsun? Daha basit bir yol varken neden? 
package.json bağımlılıklarının en az 3’ünde “bilinçli versiyon seçimi” örneği ver. (örn. axios@x vs fetch) 
“Tek bir noktada uygulama çökse” — hangi dosyanın kaybı projeyi kullanılmaz yapar? (dosya adıyla) 
shared klasörü ne için var? Gerçekten paylaşılabilir kod mu, yoksa kopyala-yapıştır mı? (örnek dosya sor) 
front-end ile back-end arasında auth token akışı nasıl? (cookie mi, localStorage mı, örnek satır göster)
Eğer paketlerınızı güncelleseydik, hangi üç paket kolayca kırılırdı? Neden?
D. “Test & kalite” — tuzak soruları
Test coverage var mı? Yüzde söyle. (yoksa neden yok?)
Bir butona tıklanıp çıkan bir modalın testi varsa, nasıl flaky test olmaktan kurtardın? (somut strateji: bekleme/selector)
Tek bir entegrasyon testi çalıştırdığında database seed’leri nasıl hazırlanıyor? (dosya/command belirt)
E2E testleri gerçek API’ye mi dokunuyor yoksa mock’lu mu? Örnek ver.
CI yoksa: PR açıldığında kim test ediyor? (sadece “ben” demek yeterli değil — süreç sor)
Hangi test seni en çok kurtardı — bug örneği ver (hangi test, hangi bug)?
Testlerde aşırı mocking var mı — ve bunun gerçek dünya riskleri nelerdir?
“Tüm butonları tek tek tıklamak” dışında nasıl test ediyorsun? (tool + strateji açıkla)
Test veritabanında migration geriye alınabiliyor mu? (örnek komut)
Testlerin yanlış pozitif / negatif oranını azaltmak için ne yapıyorsun?
E. “Güvenlik / gizlilik” — tuzak, direkt ve keskin
APP/REPO kökünde .env yoksa: gizli anahtarlar nerede? (doğrudan cevap ver)
Electronda native modüller veya exec çağrıları var mı? Kullanıcı makinesinde risk oluşturmaz mı?
Eğer birisi uygulamaya kötü amaçlı bir payload koyarsa, hangi dosya en savunmasız olur? (dosya ismi ver)
IP/MAC/konum gibi hassas veriler toplanıyor mu? (kök lisans/gizlilik metnine bakarak cevapla) 
Verileri şifreli olarak mı saklıyorsun? Hangi algoritma? (yoksa neden yok?)
Kullanıcı verilerinin silinmesi istendiğinde süreç nedir? (somut adımlar) 
Paket versiyonları biliniyor; açıkları kontrol ediyor musun? (Dependabot/OSS scanner var mı?)
XSS/CSRF için hangi önlemleri aldın? (detay: CSP header, SameSite cookie vb.)
Electron güncelleme (auto-update) mekanizması varsa, imza doğrulaması yapılmakta mı?
Bir GDPR/KVKK talep geldiğinde (veri silme/erişim) süreç ne?
F. “Yapay zekâ, ücretli model, etik” — cazip ve tuzaklı
AI tabanlı bir otomatik değerlendirme eklesen, yanlış değerlendirmelerin yaratacağı adaletsizlikleri nasıl önlersin?
AI sonuçları öğrencinin kaydına aksa — itiraz mekanizması nasıl işler?
Ücretli AI özelliği kaliteli öğrencilere avantaj sağlar mı? Fırsat eşitliği nasıl korunur?
AI için hangi verileri toplayıp modele vereceksin? (tam liste)
Eğer AI yanlış tavsiye verirse sorumluluk kime aittir? (hukuki yanıt beklensin)
AI modeli offline çalışmalı mı yoksa cloud mu? Neden? (maliyet + gizlilik ile ilişkilendir)
AI için real-time mı batch mi veri gönderilecek? Latency hedefin ne?
AI ile öğrenci takibi yapacaksan hangi 5 metrik kesinlikle olmalı?
Bir öğrenci AI’dan “kötü niyetli” tavsiye alırsa (cheat), nasıl tespit edersin?
AI özellikleri ücretliyse “burs/ücretsiz” nasıl çalışmalı? bir fiyat modeli öner.
G. “Performans / ölçeklenebilirlik” — kısa ve yakan
1000 eş zamanlı kullanıcı: öncelikle hangi kaynaktan darboğaz bekliyorsun? (CPU/DB/IPC/IO)
Electron client’ında memory leak varsa nasıl debug edersin? (tool & method)
Frontend bundle büyüklüğü kaç MB? (yoksa nasıl ölçersin?)
Vite prod build’inde lazy-loading yapıyor musunuz? Hangi route’lar chunk’lanmıyor?
Server’dan gelen büyük raporlama verileri nasıl stream ediliyor? (eğer edilmiyorsa neden değil)
Offline-first bir özellik istesem, hangi mimari değişiklik gerekir? (kısa migration listesi)
Dosya I/O yoğun bir işlem olsa (ör: CSV import), UI nasıl tepki veriyor? (worker/IPC çözümü var mı?)
DB sorguların en yavaş 3 tanesi hangileri? (profil sonuçları olmasa da, nereden bakacağımı söyle)
Asset caching nasıl yapılandırıldı? (service worker misin, yoksa HTTP cache headers mı?)
CDN kullanmıyorsan neden kullanmıyorsun?
H. “Deployment / CI / ops” — gerçek dünya tuzakları
Repo’da Actions yoksa, production’a nasıl deploy ediyorsun?
Electron uygulaması için auto-update server var mı? Nasıl imzalanıyor?
DB migration’ları kim/nerede çalıştırır? (otomatik mi, manuel mi?)
Rollback planın nedir? Bir release bozulursa 3 adımda geri alma.
Sıfır downtime hedefin mi? Niye / neden değil?
Backup stratejin nedir — günlük, haftalık, retention? (detay)
Secrets yönetimi nerede — GitHub Secrets mi yoksa başka?
Sunucu crash’inde izleme (monitoring) nasıl alarm verir? (tool örneği)
Log retention politikası var mı? (ne kadar süre)
Sızma tespitinde (IDS) ilk 24 saatte kim/neyi bilgilendirir?
I. “Kod inceleme / PR tuzakları” — seni bozacak sorular
Son PR’i kim onayladı? Hangi testler geçti/kaldi? (branch sor) 
Kodda TODO veya FIXME etiketi var mı? Kaç tane? (bul duvarını)
Linter (eslint/tslint) kuralları var mı? Hangileri devre dışı bırakıldı?
Commit mesaj standardın nedir? (özellikle revert/merge politikası)
Büyük bir refactor yaparken hangi feature-flag stratejisini önerirsin?
Kodda “hotfix” mı sık kullanıldı — örnek ver.
Bir PR’ı reject ederken hangi 3 kriter kesin olmalı?
“Bu kodu kim yazdı?” dediğimde gizlenebilecek bilgi var mı? (ownership sorgusu)
Branch stratejiniz (main/develop/feature) nedir? Niçin?
Codeowners veya otomatik review kurallarınız var mı?
J. “Veri / raporlar” — raporların doğruluğunu sorgulayan
Raporlar (raporlarım/analytics) verilerini hangi endpoint sağlıyor? (dosya/route sor) 
Rapor verileri realtime mi, yoksa batch mi? Güncelleme periyodu ne?
Rapor hesaplamalarında rounding/averaging hatası olma olasılığı nerede? (örnek senaryo)
Raporları test etmek için hangi veri setini kullanıyorsun? (seed/demo veri)
Öğrencinin performansını etkileyen outlier’ları nasıl temizliyorsun?
Raporların tutarlı olması için transaction isolation nasıl ayarlandı?
Raporlar ayrı bir read-replica DB’den mi alınıyor? Neden/neden değil?
Büyük rapor üretimi sırasında kullanıcıyı bekletmek istemezsen hangi pattern’ı kullanırsın? (queue/worker)
Rapor dağıtımında CSV/Excel/XLSX export varsa, hangi kütüphane kullanılıyor ve neden?
Raporların tarihi aralığı hatalıysa izleme nasıl yapılır?
K. “Tuzak – sıkıştırma soruları” — tek satırlık öldürücüler
Eğer birisi prod DB’ye erişse, hangi tek tabloyu alırsa en çok zarar verir? Neden?
Projeyi “20 dakika” içinde özetle, savunulamaz bir yanını açıkla.
Hatalı saat dilimi (timezone) raporlarına karşı ne yaptın?
Boş input validation var mı? Hangi endpoint en zayıf?
“Bir tek satır kodu değiştirerek” proje çalışmaz hale getirilebilir mi? Hangi satır? (dosya ismi)
Eğer yarışmacı senden kopya çekmek istese onu nasıl yakalarsın?
“Kodu daha güvenli yap” desen, ilk üç değişiklik ne olur? (sıralı)
“Backdoor” riski var mı? Kodun neresine bakarım?
Eğer jüri isterse anlık demo vereceksin — local’de kaç komut çalıştırırsın? (adımları ver)
“Bu özellik gereksizdi” dediğin bir şey var mı — savun.
L. “Proje ve öğrenci ilişkisi — pedagojik tuzaklar”
Bu uygulama YKS öğrencisine ölçülebilir olarak ne kazandırır? (3 KPI)
Uygulama öğrenciye “bağımlılık” mı kazandırır yoksa “öğrenme” mi? Nasıl önlersin?
Öğrencinin cevaplarını otomatik değerlendirirken hangi yanlışları sistem atlar?
Öğrenci “kopya çekerse” sistem nasıl fark eder? (mekanizma öner)
Uygulama, öğrencinin özgüvenini zedeleyebilir mi? Metin örnekleri ile tersini kanıtla.
Reklam/Ücretli özellikler moral bozucu olursa ne yaparsın? (UX planı)
Öğrenci başarısını arttırmak için hangi öğrenme bilimi prensibini uyguladın? (kaynak belirt)
Öğrenci başarısının kısa vadeli artışı mı yoksa uzun vadeli öğrenme mi hedef? Neden?
Eğer uygulamayı bir okul kullanacaksa, yönetici için hangi dashboard’ı önerirsin?
Bu projedeki en pedagoji-kritik hata ne olabilir?
M. Repo özel küçük tuzak soruları (dosya adlarına referansla)
drizzle.config.ts içindeki bağlantı bilgilerini nasıl test ediyorsun? (dosya adı göster). 
tailwind.config.ts’de safelist/purge ayarları yoksa hangi CSS gereksiz yere paket boyutuna eklenir? 
postcss.config.js’in olmadığı bir projede Tailwind’i doğrudan kullanmanın dezavantajı nedir?
vite.config.ts production base ayarı hatalı olursa hangi hata görünür?
package.json scripts içinde “build” yoksa dağıtıma ne olur
Kategori 1: Proje Değeri ve "Ezikleme" Saldırıları (Psikolojik)
Burada 'Protez El' ve 'Deprem Dronu' gibi hayat kurtaran projeler varken, senin bu 'takvim' uygulaman sönük kalmıyor mu?
Sosyal fayda olarak, bir 'net hesaplama' aracını, görme engelliler için yapılan bir 'akıllı baston' ile nasıl kıyaslayabiliriz?
Bu proje 'inovasyon' değil, sadece 'entegrasyon'; yani var olan şeyleri birleştirmişsin, 'icat' nerede?
Senin projen 'havalı' değil, jüri neden 'sıkıcı' bir yazılıma ödül versin?
Bu, "Nitelikli Eğitim" (Şartname 6.2.1) hedefine tam olarak nasıl bir katkı sağlıyor?
Pahalı koçluk alamayanlar için 'fırsat eşitliği' diyorsun, ama bu sadece kendini iyi hissetmek için söylediğin bir 'pazarlama cümlesi' değil mi?
Açıkçası bu, bir "hobi projesi" gibi duruyor; neden ciddi bir sermayeyi böyle bir 'denemeye' yatıralım?
Projen çok 'niş' bir kitleye (YKS) odaklanmış, o 'Drone' projesi ise (örn: tarım) daha büyük bir pazara hitap ediyor.
YKS sistemi 2 yıl sonra değişirse, bu 1000+ saatlik emeğin çöp olmayacak mı?
Rakiplerin "fiziksel" zorluklarla (parça temini, pil ömrü) uğraşırken, sen sadece "dijital" bir şeyi kopyalamışsın.
Kunduz, Gri Koç veya Raunt gibi devler bu fikrini görüp 3 ayda yaparsa seni ezmez mi?
bir zamanlar 'x' diye bir girişim tam da bunu deneyip battı; onların başaramadığını sen tek başına nasıl başaracaksın?
Öğrenci neden "bedava" ve "bulut tabanlı" Google Takvim + Google Sheets varken senin "masaüstü" uygulamana güvensin?
Notion'da 1 saat uğraşarak bu sistemin aynısını kurabilirim, sana ne gerek var?
Projen zaten "bitmiş", senin 300.000 TL'lik ödüle ihtiyacın yok; o parayı "parçaya ihtiyacı olan" prototip (Protez El) almalı.
Bu para bir "ihtiyaç" ödülüyse, neden "bitmiş" bir projeye gitsin?
Bu 300.000 TL'yi tam olarak hangi 3 kalemde harcayacaksın?
300K ile "sunucu kuracağım" dedin; bu, "düşük maliyetli" olma avantajını yok etmiyor mu?
3 milyon öğrenciye nasıl ulaşacaksın, pazarlama planın ne?
Reklam bütçen olmadan bu kadar büyük bir pazara girebileceğine inanıyor musun?
"Pro Model" ile YZ satacağını söyledin; bu, 'fırsat eşitliği' vizyonunla çelişmiyor mu?
18 yaşındaki stresli çocuklara "ekstra özellik" satmaya çalışmak sence etik mi?
Fiyatlandırma modelin ne olacak; aylık mı, yıllık mı, tek seferlik mi? Neden?
"Aktiviteye göre indirim" modeli, öğrencileri 'hile' yapmaya (sayacı kandırmaya) teşvik etmez mi?
Fikrini çalsak ne yapacaksın, patentin var mı?
Kategori 3: Teknik Mimari ve Kod Saldırıları (Derin Teknik)
Neden web sitesi değil de Electron (masaüstü)? Kitleni en baştan kısıtlamışsın.
Electron, Chrome'u komple çalıştırdığı için "performans canavarıdır"; neden Tauri (Rust) gibi daha modern ve hafif bir alternatif seçmedin?
package.json'da neden Webpack değil de Vite kullandın?
package.json'da neden piyasa standardı Prisma değil de Drizzle ORM seçtin?
Prisma'nın 'binary Go motorunun' Electron paketlemesinde (build) sorun çıkardığını kanıtlayabilir misin?
package.json'da neden React'in kendi Context API'si değil de Zustand kullandın?
Zustand kullanmak bu kadar basit bir proje için "aşırı karmaşıklık" (overkill) değil mi?
Context API'nin "gereksiz re-render" sorununu çözmek için useMemo kullanamaz mıydın?
Neden 'temiz kod' (CSS Modules) yerine Tailwind kullanarak HTML'ini kirlettin?
server, client, electron klasörlerin var; bu mimari aşırı karmaşık değil mi, server klasörünün amacı ne?
Bu bir "Monorepo" mu, yoksa sadece "karışık" bir klasör yapısı mı?
shared/sema.ts dosyasındaki veritabanı şeman 'Veli Hesabı' eklemeye hazır mı, yoksa "ölçeklenemez" mi?
'Offline-First' (Önce Çevrimdışı) mi çalışıyorsun, yoksa internet kesilince Supabase'e bağlanamayıp çöküyor musun?
Veriyi hem lokal SQLite'a hem Supabase'e mi yazıyorsun? Bu "veri tutarlılığı" (consistency) sorunları yaratmaz mı?
tsconfig.json dosyasında neden strict: true kullandın? Kod yazmayı zorlaştırmıyor mu?
tsconfig.json'daki paths (@/lib/*) ayarları, projeyi yeni bir geliştiricinin anlamasını zorlaştırmaz mı?
vite.config.ts ve postcss.config.js dosyalarının amacı ne, bunlar olmadan proje çalışmaz mıydı?
Kategori 4: YZ Tespiti ve Hakimiyet Saldırıları (Stres Testi)
Dürüst ol, bu kodun % kaçını ChatGPT veya Copilot yazdı?
Kodunu aç, electron/preload.cjs dosyasını göster; 'Context Bridge' mi kullandın, yoksa nodeIntegration: true açığı mı bıraktın?
Kodunu aç, 'Isı Haritası'nı (00:45) dolduran fonksiyonu satır satır anlat.
Kodunu aç, 'Hata Sıklığı Analizi' (01:20) için attığın Drizzle sorgusunu (query) göster.
Bu 'Hata Sıklığı Analizi'nde, 100 konu için 100 ayrı sorgu (N+1 problemi) mu atıyorsun, yoksa tek bir 'GROUP BY' sorgusu mu?
Projeyi yaparken seni gecelerce uyutmayan, en zorlandığın 'bug' (hata) neydi?
Kod stiline baktım, bir dosya camelCase diğeri snake_case; bu, YZ'den 'kopyala-yapıştır' yaptığını göstermez mi?
GitHub commit geçmişin neden 3 ayda 1 tane ve 5000 satır? (Eğer öyleyse)
'Hava Durumu' API anahtarın (00:05) nerede saklanıyor? client kodundaysa bu bir güvenlik açığıdır.
'Deneme Ekle' (01:03) kısmına SQL Injection (DROP TABLE) yapsam veritabanın çöker mi?
package.json'da neden 'Vitest' veya 'Jest' (test kütüphanesi) yok?
"Bitmiş ürün" dediğin bu projeyi nasıl test ettin? Tek tek elle tıklayarak mı?
'Raporlar'da bir değişiklik yaptığında, 'Sayaç' modülünü bozmadığını nereden biliyorsun?
Kategori 5: Özellik Bazlı Zayıf Nokta Saldırıları (Uygulama İçi)
Anasayfadaki 'Hava Durumu' (00:05) ne alaka? Odaklanmayı artırıyorum deyip dikkat dağıtmıyor musun?
Anasayfadaki 'YKS Geri Sayım' (00:08) öğrenciyi strese sokan, pedagojik açıdan yanlış bir özellik değil mi?
Sayacı (Sayac modülü) başlatıp Instagram'a girersem 'Isı Haritan' (00:45) yeşil olur; bu, 'hileye açık' değil mi?
Öğrenci 'Net' (01:03) kısmına 20 yerine 50 girerse (yalan söylerse), tüm 'Analiz' (01:29) çöp olur; "Çöp Girdisi, Çöp Çıktısı" değil mi bu?
'YKS Konular' (01:25) modülü, öğrenciyi zaten iyi olduğu (Paragraf) konuya yönlendirirse bu 'aptal' bir strateji olmaz mı?
1000 görev eklersem 'Yapılacaklar' listesi (00:11) donmaz mı? 'Liste Sanallaştırma' (List Virtualization) kullandın mı?
Tasarım neden bu kadar 'karanlık' ve 'mor'? Depresif değil mi?
'Deneme Ekle' (01:03) formu çok detaylı; bir öğrenci her seferinde bu kadar veri girer mi, sıkılıp bırakmaz mı?
'Hata Sıklığı Analizi' (01:20) verisi 'yanlış' ise ve öğrenci buna göre çalışırsa, sorumlusu sen olmayacak mısın?
'YKS Konular' verisini hangi kaynaktan (ÖSYM, MEB?) aldın, ya verin yanlışsa?
Kategori 6: Lisanslama ve Büyüme Saldırıları (Ticari)
Lisanslama sistemini nasıl kuracaksın?
Sunucusuz lisanslama yaparsan, 'Keygen' (anahtar üretici) ile kırılmaz mı?
lisans.dat dosyasını kopyalayıp arkadaşıma atarsam ne olur? (Kopyalama tuzağı)
Lisans anahtarını node-machine-id (PC kimliği) ile kilitlediysen, kullanıcı format atınca lisansı yanmaz mı?
'Otomatik Güncelleme' (electron-updater) var mı, yoksa bu 'ölü' bir sürüm mü?
Kullanıcı geri bildirimlerini (beta testi) nereden aldın, kanıtın var mı?
"10 öğrenci" dedin; bu, 3 milyonluk pazar için 'istatistiksel olarak anlamsız' değil mi?
data/kayitlar.json dosyası mı kullanıyorsun? Bu, 'profesyonel' değil; SQLite neden kullanmadın?
package.json'da moment.js gibi 'ölü' bir kütüphane mi kullanıyorsun, yoksa day.js mi?
Kategori 7: Psikolojik Savaş ve "Boş" Sorular (Stres Testi)
(Cevabından sonra 15 saniye SUSMAK...)
(Demo yaparken) "Projen takıldı/yavaşladı (01:30), 'bitmiş ürün' dediğin bu mu?"
(Sunum bitince) "Teşekkürler Berat Bey, bizden bu kadar. Soru yok." (İlgisizlik saldırısı)
Logon neden mor? Kırmızı olsaydı daha iyi olmaz mıydı?
Sunumun fena değil, gel bizde 'maaşla' çalış, 300K'yı boş ver.
Sen 'Ön Lisans' öğrencisisin; ODTÜ'lü 'Doktora'lı YZ'ciler varken sana neden bakalım?
Tek kişisin; 6 ay sonra sıkılmayacağını veya bir işe girip projeyi bırakmayacağını nereden bileceğiz?
Bu projeyi yaparken en çok nerede eğlendin?
Bu projenin en 'uzun' süren kodu hangi modüldeydi?
Bu projenin en 'kısa' ama en 'akıllıca' kodu sence nerede?
Projenin 'teknik borcu' (technical debt) en çok nerede birikti?
(Kodu açtırıp) "Bu kod çok 'kirli' (dirty) yazılmış, neden 'refactor' etmedin?"
"Bu kod çok 'temiz', YZ'ye mi yazdırdın?"
'Hava Durumu' modülünün (00:05) YKS öğrencisine somut katkısı nedir?
'Uyku Endeksi' (00:06 civarı) verisini nereden alıyorsun, yoksa bu 'sahte' (dummy) veri mi?
'Rapor Gönder' (00:01) tuşuyla GMail'e göndermek... ya kullanıcı GMail kullanmıyorsa?
'Raporlarım'daki o 'Arşivlenen Veriler' (00:27) butonunun amacı ne?
'Tüm Verileri Temizle' (01:27) butonuna yanlışlıkla basılırsa ne oluyor? Bir "Emin misin?" uyarısı var mı?
'Deneme Sonuçları' (01:07) listesinde neden 'Sil' butonu var? Bir öğrenci neden 'geçmişini' silmek istesin?
'Hata Sıklığı Analizi'nde (01:20) "Son Hata" tarihi yazıyor, bu "ilk hata" tarihinden daha önemli mi? Neden?
'Deneme Analiz Sistemi'nde (01:28) neden hem 'Radar Grafik' hem 'Çizgi Grafik' var? Biri yetmez miydi?
O 'Isı Haritası' (00:45) güzel, ama 'Github'ınkini' taklit etmişsin, özgün değil.
'Soru Çözüm Analizi' (00:55) modülü neden boş? Bitmedi mi?
'Eksik Olduğum Konular' (01:11) ile 'Hata Sıklığı Analizi' (01:20) arasındaki fark ne? İkisi de aynı şey değil mi?
'Genel Deneme Analizi' (01:28) modülü neden boş? Bitmedi mi?
'Görevler' (00:11) ekranında 'Tamamlanan', 'Bekleyen' filtreleri var; bu, 'Trello'nun aynısı değil mi?
client/src/bilesenler/arayuz klasöründe 30+ dosya var; 'ShadCN' mi (UI kütüphanesi) kullandın?
Eğer 'ShadCN' kullandıysan, bu "senin başarın" değil, "hazır kütüphane" kullanımı olmuyor mu?
'Erişilebilirlik' (Accessibility - a11y) için ne yaptın? Ekran okuyucular (screen readers) bu projeyi okuyabilir mi?
package.json'da eslint ve prettier var; bu iki kütüphane arasındaki fark nedir?
electron/main.cjs dosyan neden .cjs (CommonJS) de, client kodların .tsx (ESM)? Bu bir tutarsızlık değil mi?
server klasörün Hono (web framework) mu kullanıyor? Neden Express değil?
data/kayitlar.json dosyası kullanmak... ya o dosya 'bozulursa' (corrupt) olursa? Öğrencinin 1 yıllık emeği çöp mü olacak?
Neden veriyi SQLite gibi gerçek bir veritabanında değil de, JSON dosyasında tutuyorsun? (Eğer öyleyse)
JSON dosyasına 10.000 kayıt eklendiğinde, o dosyayı okumak (parse etmek) uygulamayı çökertmez mi?
Drizzle ORM kullanıyorsan, 'migration' (veritabanı şeması güncelleme) sürecini nasıl yönetiyorsun?
Uygulamanın 'açılış süresi' (Electron boot time) ne kadar? Yavaş mı?
'Aktivite Günü Detayları' (00:49) modalı çok 'kalabalık' ve 'karışık' değil mi?
'Deneme Sonuçları' (01:07) listesinde o 'bugün', '5dk' yazan etiketler ne işe yarıyor?
YKS Konular (01:25) verisini ÖSYM'den otomatik mi çekiyorsun, yoksa elle mi girdin?
Eğer 'elle' girdiysen, bu 'statik' veri 'sürdürülebilir' değil.
Eğer 'otomatik' çekiyorsan, ÖSYM sitesini 'scrape' etmek (kazımak) yasal mı?
Projenin en 'eğlenceli' kodunu yazdığın yer neresiydi?
Projenin en 'uzun' süren fonksiyonu hangisiydi?
Projenin en 'kısa' ama en 'akıllıca' kodu sence nerede?
Bu projeden sen ne öğrendin?
Projeyi yaparken YZ'den (AI) yardım aldın mı? (En doğrudan saldırı)
electron/activity-logger.cjs ne işe yarıyor? Kullanıcıyı mı 'izliyorsun' (spyware)?
'Anasayfa'daki YKS Geri Sayım (00:08) TYT'ye göre mi, AYT'ye göre mi?
'Hava Durumu' (00:05) için konum izni (location permission) istiyor musun? KVKK nerede?
Kullanıcı 'Tüm Verileri Temizle' (01:27) butonuna bastığında, o veriler gerçekten siliniyor mu, yoksa 'soft delete' mi yapıyorsun?
shared/sema.ts dosyasındaki şema, Drizzle için 'best practice' mi, yoksa YZ çıktısı mı?
'Raporlar'daki (00:29) 'Kimya: 6.3 Net' verisi... bu 'ortalama' mı, 'son' net mi?
'Çalışma Saatleri' (00:36) modülü 'Toplam Süre' mi, 'Günlük Ortalama' mı?
'En Çok Çalışılan Gün' (00:36) verisi, 'en verimli' gün demek midir?
'Aktif Çalışma Günü' (00:36) ile 'En Uzun Seri' (00:36) arasındaki fark nedir?
client/src/bilesenler/arayuz/sidebar.tsx mı kullanıyorsun, yoksa yan-menu.tsx mi? Kodunda tutarsızlık mı var?
gelismis-hava-durumu-widget.tsx ile hava-durumu-widget.tsx arasında ne fark var?
'Flash Kartlar' (flash-kartlar-widget.tsx) modülü ne işe yarıyor? (Demoda görmedim)
client/src/data/yks-konular.ts dosyası... Bu veriyi neden kodun içine gömdün (hard-coded)? Neden bir veritabanından çekmedin?
Bu yks-konular.ts dosyası güncellendiğinde, kullanıcının uygulamayı yeniden kurması mı gerekecek? (En büyük mimari hata)
client/src/kutuphane/yardimcilar.ts (cn fonksiyonu) ne işe yarıyor? (Tailwind-merge'ü bilip bilmediğini ölçer)
client/src/main.tsx dosyasında neden React.StrictMode yok? (Eğer yoksa)
client/src/sayfalar/anasayfa-detay.tsx ile anasayfa.tsx arasındaki fark ne?
client/src/stiller/compact-cards.css... Neden Tailwind kullanırken ekstra CSS yazdın? Tailwind yetersiz mi kaldı?
electron/loading.html dosyası nedir? Uygulama açılırken bir 'splash screen' mi gösteriyorsun?
package.json'da neden electron-vite kullanıyorsun? Vite ile Electron'u sen (elle) yapılandıramaz mıydın?
postcss.config.js dosyası ne işe yarıyor? (Tailwind'in çalışması için zorunlu olduğunu bilip bilmediğini ölçer)
client/src/bilesenler/arayuz/sonner.tsx (Eğer varsa) veya chart.tsx... Neden Recharts de Chart.js değil?
Projenin 'Erişilebilirlik' (a11y) testini yaptın mı? Renk körü bir öğrenci bu grafikleri okuyabilir mi?
client/src/hooks/use-mobile.tsx... Bu bir Electron (masaüstü) uygulaması değil miydi? Neden 'mobil' (mobile) hook'una ihtiyacın var?
'Tema Sağlayıcı' (tema-saglayici.tsx) gördüm; 'Açık Mod' (Light Mode) desteğin var mı, yoksa sadece 'havalı' diye mi karanlık mod yaptın?
(Demo takılınca) "Projen 'production build' (optimize edilmiş) değil, 'development' (geliştirme) modunda çalışıyor; bu yavaşlık normal."
(En sinsi) "Tebrikler Berat, çok güzel olmuş. Soru yok." (Seni "ilgisizlikle" test eder)
"Bu projeyi neden sen yapabildin de, diğerleri (rakiplerin) yapamadı?"




